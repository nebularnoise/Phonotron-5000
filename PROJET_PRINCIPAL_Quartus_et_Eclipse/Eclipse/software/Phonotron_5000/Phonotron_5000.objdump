
Phonotron_5000.elf:     file format elf32-littlenios2
Phonotron_5000.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0003267c memsz 0x00032bac flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000135cc  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005c8  00093780  00093780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0001e954  00093d48  00093d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000530  000b269c  000b269c  0003369c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0003369c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001058  00000000  00000000  000336c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001902  00000000  00000000  00034718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029f56  00000000  00000000  0003601a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a118  00000000  00000000  0005ff70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000197d7  00000000  00000000  0006a088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002074  00000000  00000000  00083860  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002860  00000000  00000000  000858d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ea4a  00000000  00000000  00088134  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00096b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d20  00000000  00000000  00096bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009b34a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009b34d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009b359  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009b35a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0009b35b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009b366  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0009b371  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0009b37c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001b  00000000  00000000  0009b383  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000a51f8  00000000  00000000  0009b39e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
00093780 l    d  .rodata	00000000 .rodata
00093d48 l    d  .rwdata	00000000 .rwdata
000b269c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
000815ac l     F .text	0000005c cleanScreen
000808dc l     F .text	000001d8 init
000817fc l     F .text	00000108 drawMire
00080888 l     F .text	00000054 drawSheets
0008048c l     F .text	00000198 set_volume
00080778 l     F .text	00000084 sheets_output
000807fc l     F .text	0000008c drawOneSheet
000812cc l     F .text	0000008c drawEmptySquareRow
00081534 l     F .text	00000078 drawVLine
000813d0 l     F .text	00000164 move
00081180 l     F .text	0000014c reset_sheets
00080c74 l     F .text	00000350 handle_KEYBOARD_interrupt
00081904 l     F .text	00000040 handle_KICK_interrupt
00081944 l     F .text	00000040 handle_SNARE_interrupt
00081984 l     F .text	00000040 handle_CLAP_interrupt
000819c4 l     F .text	00000040 handle_HH_interrupt
00080ab4 l     F .text	0000010c copy_sheet
00081608 l     F .text	00000098 drawEmptySquare
00080bc0 l     F .text	000000b4 load_sheet
00080fc4 l     F .text	000001bc setActive
000843d0 l     F .text	000000b0 write_message
00081358 l     F .text	00000078 drawHLine
0008177c l     F .text	00000080 makeAddress
000816f4 l     F .text	00000088 write
000816a0 l     F .text	0000002c enableWrite
000816cc l     F .text	00000028 disableWrite
00081a04 l     F .text	000029cc write_letter
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
000939b4 l     O .rodata	00000010 bp
000939c4 l     O .rodata	00000010 dp_l
000939d4 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
000939e4 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00086404 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00086c80 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000b0c38 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000889dc l     F .text	00000058 __sprint_r
00093b90 l     O .rodata	00000010 blanks.3452
00093b80 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0008aa40 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0008c43c l     F .text	00000058 std
0008c548 l     F .text	00000008 __fp_lock
0008c550 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
000b2668 l     O .rwdata	00000004 charset
00093bc0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00093d08 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000909e4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00090c2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00090c8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00090d8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0009106c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0009114c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000912a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000914d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000b2690 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00091770 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000b15f4 l     O .rwdata	00001060 jtag_uart_0
00091860 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00091aa0 l     F .text	00000228 altera_avalon_jtag_uart_irq
00091cc8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00092344 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00092690 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00092ab4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00092bf0 l     F .text	000000dc alt_file_locked
00092e54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00093568 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0009371c l     F .text	00000040 alt_sim_halt
00088890 g     F .text	0000001c putchar
0008e1f8 g     F .text	00000094 _mprec_log10
0008e2e4 g     F .text	00000088 __any_on
0008fcf8 g     F .text	00000070 _isatty_r
00093ce0 g     O .rodata	00000028 __mprec_tinytens
00091308 g     F .text	0000006c alt_main
000888b4 g     F .text	000000a0 _puts_r
000b293c g     O .bss	00000100 alt_irq
00085ed0 g     F .text	00000018 fabs
0008fd68 g     F .text	00000078 _lseek_r
00093d48 g       *ABS*	00000000 __flash_rwdata_start
000877a0 g     F .text	00000088 __eqdf2
000b2bcc g       *ABS*	00000000 __alt_heap_start
00088818 g     F .text	00000044 printf
0008f678 g     F .text	00000068 __sseek
0008c4a4 g     F .text	000000a4 __sinit
0008f878 g     F .text	00000130 __swbuf_r
000b26a0 g     O .bss	00000004 current_kick_sample
0008d17c g     F .text	00000084 _setlocale_r
0008c5a4 g     F .text	00000068 __sfmoreglue
00091394 g     F .text	00000020 __malloc_unlock
0008689c g     F .text	00000174 __divsf3
0008dc74 g     F .text	000000e0 memmove
0008c594 g     F .text	00000010 _cleanup
0008e36c g     F .text	000000bc _Balloc
00086b98 g     F .text	00000094 __fixsfsi
000878b0 g     F .text	00000088 __gtdf2
00088808 g     F .text	00000010 __errno
000b26c0 g     O .bss	00000004 mute
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008fc84 g     F .text	00000074 _fstat_r
000b26ec g     O .bss	00000004 errno
00087ca0 g     F .text	00000038 __make_dp
000882c8 g     F .text	0000002c __make_fp
000b26ac g     O .bss	00000004 current_hh_sample
000b26f8 g     O .bss	00000004 alt_argv
000ba654 g       *ABS*	00000000 _gp
000b0638 g     O .rwdata	00000200 sheet_2
000865e8 g     F .text	00000070 __subsf3
000b1474 g     O .rwdata	00000180 alt_fd_list
000b26b0 g     O .bss	00000004 kick_is_playing
000888ac g     F .text	00000008 _putchar_r
00093078 g     F .text	00000094 alt_find_dev
0008dbd4 g     F .text	000000a0 memcpy
0008c588 g     F .text	0000000c _cleanup_r
00087ad0 g     F .text	000000f8 __floatsidf
00092b78 g     F .text	00000078 alt_io_redirect
000879c0 g     F .text	00000088 __ltdf2
00093780 g       *ABS*	00000000 __DTOR_END__
00088954 g     F .text	00000014 puts
0008e148 g     F .text	000000b0 __ratio
000b0438 g     O .rwdata	00000200 sheet_1
00091ee0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0008885c g     F .text	00000034 _printf_r
000b26bc g     O .bss	00000004 hh_is_playing
00090b20 g     F .text	00000008 __udivsi3
00090fac g     F .text	000000c0 isatty
00093bf0 g     O .rodata	000000c8 __mprec_tens
00093d48 g     O .rwdata	000085f0 kick
0008d158 g     F .text	00000008 __locale_charset
00086360 g     F .text	000000a4 __fixunsdfsi
000932e4 g     F .text	00000090 alt_icache_flush
000b26e0 g     O .bss	00000004 __malloc_top_pad
000b26c4 g     O .bss	00000004 volume
000b2664 g     O .rwdata	00000004 __mb_cur_max
0008d160 g     F .text	0000000c _localeconv_r
000b26c8 g     O .bss	00000004 previous_gain
0008ea64 g     F .text	0000003c __i2b
0008cb3c g     F .text	0000049c __sfvwrite_r
0008f600 g     F .text	00000070 _sbrk_r
0008fde0 g     F .text	00000078 _read_r
000b1038 g     O .rwdata	0000000c __lc_ctype
000b2684 g     O .rwdata	00000004 alt_max_fd
00088608 g     F .text	00000138 __unpack_d
0008fb60 g     F .text	00000110 _fclose_r
0008c408 g     F .text	00000034 fflush
000b26e4 g     O .bss	00000004 __malloc_max_sbrked_mem
00090dec g     F .text	000001c0 alt_irq_register
00086c2c g     F .text	00000054 __extendsfdf2
00087110 g     F .text	00000074 __adddf3
0008e028 g     F .text	00000120 __b2d
00090434 g     F .text	000005b0 __umoddi3
000911b8 g     F .text	000000f0 lseek
000b2658 g     O .rwdata	00000004 __fdlib_version
000b2660 g     O .rwdata	00000004 _global_impure_ptr
0008efcc g     F .text	000005f4 _realloc_r
000b2bcc g       *ABS*	00000000 __bss_end
000929bc g     F .text	000000f8 alt_iic_isr_register
00092f4c g     F .text	0000010c alt_tick
0008fe58 g     F .text	000005dc __udivdi3
000b2654 g     O .rwdata	00000004 mire_playing
00093cb8 g     O .rodata	00000028 __mprec_bigtens
0008ecc0 g     F .text	00000120 __s2b
00087d4c g     F .text	00000194 __floatunsidf
0008df48 g     F .text	00000060 __mcmp
000b26a8 g     O .bss	00000004 current_snare_sample
0008c570 g     F .text	00000018 __fp_lock_all
00092974 g     F .text	00000048 alt_ic_irq_enabled
00092eb4 g     F .text	00000098 alt_alarm_stop
000b26f0 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
000b144c g     O .rwdata	00000028 alt_dev_null
00085f4c g     F .text	00000210 rint
00088158 g     F .text	000000c8 __unpack_f
00092598 g     F .text	00000044 alt_dcache_flush_all
0008de14 g     F .text	00000070 __hi0bits
00087bc8 g     F .text	000000d8 __fixdfsi
000b269c g       *ABS*	00000000 __ram_rwdata_end
000b267c g     O .rwdata	00000008 alt_dev_list
00091650 g     F .text	00000120 write
0008eee4 g     F .text	000000e8 _putc_r
00086a10 g     F .text	00000078 __gtsf2
00093d48 g       *ABS*	00000000 __ram_rodata_end
00090cb8 g     F .text	000000d4 fstat
00087a48 g     F .text	00000088 __ledf2
0008eba0 g     F .text	00000120 __pow5mult
000b26d4 g     O .bss	00000004 __nlocale_changed
00090b28 g     F .text	00000008 __umodsi3
000b2bcc g       *ABS*	00000000 end
00087ff8 g     F .text	00000160 __pack_f
000919e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0009377c g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
000923b4 g     F .text	00000090 alt_avalon_timer_sc_init
00087f78 g     F .text	00000080 __clzsi2
00092104 g     F .text	00000240 altera_avalon_jtag_uart_write
0008c494 g     F .text	00000004 __sfp_lock_acquire
0008daf0 g     F .text	000000e4 memchr
00088a34 g     F .text	00001eac ___vfprintf_internal_r
0008c828 g     F .text	00000314 _free_r
0009356c g     F .text	000001b0 __call_exitprocs
000b26d8 g     O .bss	00000004 __mlocale_changed
000b2670 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000004c _start
000b2700 g     O .bss	00000004 _alt_tick_rate
0008e730 g     F .text	0000014c __lshift
000b2704 g     O .bss	00000004 _alt_nticks
000913b4 g     F .text	00000120 read
00091804 g     F .text	0000005c alt_sys_init
00086b00 g     F .text	00000098 __floatsisf
00093434 g     F .text	00000134 __register_exitproc
0008e87c g     F .text	000001e8 __multiply
00084908 g     F .text	00001300 __ieee754_pow
00091d78 g     F .text	00000074 altera_avalon_jtag_uart_close
00084480 g     F .text	00000488 pow
00093d48 g       *ABS*	00000000 __ram_rwdata_start
00093780 g       *ABS*	00000000 __ram_rodata_start
000b2908 g     O .bss	00000028 __malloc_current_mallinfo
000b26b8 g     O .bss	00000004 snare_is_playing
0008e428 g     F .text	0000017c __d2b
00091898 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0009322c g     F .text	000000b8 alt_get_fd
00088740 g     F .text	000000c8 __fpcmp_parts_d
0008faf0 g     F .text	00000070 _close_r
000933c0 g     F .text	00000074 memcmp
00091948 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000b2bcc g       *ABS*	00000000 __alt_stack_base
00091990 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0008a904 g     F .text	0000013c __swsetup_r
00087548 g     F .text	00000258 __divdf3
00080624 g     F .text	00000154 vectorCast32Bits
0008c60c g     F .text	000000f0 __sfp
0008e28c g     F .text	00000058 __copybits
000b1044 g     O .rwdata	00000408 __malloc_av_
0008c4a0 g     F .text	00000004 __sinit_lock_release
00087184 g     F .text	000003c4 __muldf3
0008f75c g     F .text	00000060 __sread
000939f4 g     O .rodata	00000010 __thenan_sf
0009310c g     F .text	00000120 alt_find_file
000925dc g     F .text	000000b4 alt_dev_llist_insert
00091374 g     F .text	00000020 __malloc_lock
00091594 g     F .text	000000bc sbrk
0008c20c g     F .text	000001fc _fflush_r
0008fa3c g     F .text	000000b4 _calloc_r
000b269c g       *ABS*	00000000 __bss_start
0008dd54 g     F .text	00000098 memset
00080200 g     F .text	0000028c main
000b26fc g     O .bss	00000004 alt_envp
000b26e8 g     O .bss	00000004 __malloc_max_total_mem
000918f0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0008f9a8 g     F .text	0000001c __swbuf
00086a88 g     F .text	00000078 __ltsf2
0008f670 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_mem_SRAM_DE2_0
00085f34 g     F .text	00000008 matherr
00100000 g       *ABS*	00000000 __alt_heap_limit
0008fc70 g     F .text	00000014 fclose
00087cd8 g     F .text	00000074 __truncdfsf2
000b2a3c g     O .bss	00000190 _atexit0
0008ac58 g     F .text	000015b4 _dtoa_r
0008d3b0 g     F .text	00000740 _malloc_r
000b2688 g     O .rwdata	00000004 alt_errno
000b26a4 g     O .bss	00000004 current_clap_sample
0008d0a0 g     F .text	000000b8 _fwalk
000b26cc g     O .bss	00000004 ledNumber
0008ede0 g     F .text	00000104 putc
00090a60 g     F .text	00000060 __divsi3
00093a04 g     O .rodata	00000014 __thenan_df
0008c6fc g     F .text	0000012c _malloc_trim_r
00093780 g       *ABS*	00000000 __CTOR_END__
000866bc g     F .text	000001e0 __mulsf3
000b26d0 g     O .bss	00000004 gain
00085ee8 g     F .text	0000001c finite
0008f7bc g     F .text	000000bc strcmp
00093780 g       *ABS*	00000000 __flash_rodata_start
00093780 g       *ABS*	00000000 __DTOR_LIST__
0008633c g     F .text	00000024 copysign
00087828 g     F .text	00000088 __nedf2
000b269c g     O .bss	00000004 readNext
000917d0 g     F .text	00000034 alt_irq_init
00091534 g     F .text	00000060 alt_release_fd
00093a18 g     O .rodata	00000100 __clz_tab
000b26dc g     O .bss	00000004 _PathLocale
00093374 g     F .text	00000014 atexit
0008f9c4 g     F .text	00000078 _write_r
000b0838 g     O .rwdata	00000200 sheet_3
0008d200 g     F .text	0000001c setlocale
000b265c g     O .rwdata	00000004 _impure_ptr
000b26f4 g     O .bss	00000004 alt_argc
0008615c g     F .text	000001e0 scalbn
00092754 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
0008dfa8 g     F .text	00000080 __ulp
0008f5c0 g     F .text	00000040 __isinfd
0008c558 g     F .text	00000018 __fp_unlock_all
000b2674 g     O .rwdata	00000008 alt_fs_list
00085f3c g     F .text	00000010 nan
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008d16c g     F .text	00000010 localeconv
00085c08 g     F .text	000002c8 __ieee754_sqrt
000b2930 g     O .bss	0000000c isSelected
0009c338 g     O .rwdata	000042f8 hh
000927e8 g     F .text	00000050 alt_ic_isr_register
000b269c g       *ABS*	00000000 _edata
000b2bcc g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00091dec g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000b2708 g     O .bss	00000200 sheet
000a7e48 g     O .rwdata	000085f0 snare
000928d4 g     F .text	000000a0 alt_ic_irq_disable
0008f6e0 g     F .text	0000007c __swrite
000b266c g     O .rwdata	00000004 __malloc_trim_threshold
000b26b4 g     O .bss	00000004 clap_is_playing
00093058 g     F .text	00000020 altera_nios2_qsys_irq_init
00093388 g     F .text	00000038 exit
0008cfd8 g     F .text	000000c8 _fwalk_reent
0008e5a4 g     F .text	0000018c __mdiff
00090ac0 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
0008c498 g     F .text	00000004 __sfp_lock_release
00088220 g     F .text	000000a8 __fpcmp_parts_f
0009375c g     F .text	00000020 _exit
00085f04 g     F .text	00000030 __isnand
00092444 g     F .text	00000154 alt_alarm_start
00087ee0 g     F .text	00000098 __muldi3
0008d21c g     F .text	00000194 __smakebuf_r
00088968 g     F .text	00000074 strlen
00092ccc g     F .text	00000188 open
00087938 g     F .text	00000088 __gedf2
000927b8 g     F .text	00000030 alt_icache_flush_all
000b268c g     O .rwdata	00000004 alt_priority_mask
00092838 g     F .text	0000009c alt_ic_irq_enable
0008a8e0 g     F .text	00000024 __vfprintf_internal
00087090 g     F .text	00000080 __subdf3
000b0a38 g     O .rwdata	00000200 sheet_4
0008de84 g     F .text	000000c4 __lo0bits
000a0630 g     O .rwdata	00007818 clap
000b2694 g     O .rwdata	00000008 alt_alarm_list
000926f0 g     F .text	00000064 _do_ctors
00090b30 g     F .text	000000fc close
00086658 g     F .text	00000064 __addsf3
000910cc g     F .text	00000080 alt_load
000882f4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0008c49c g     F .text	00000004 __sinit_lock_acquire
0008eaa0 g     F .text	00000100 __multadd
0008ddec g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406d14 	ori	at,at,436
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c002f4 	movhi	r3,11
   80134:	18ca4f04 	addi	r3,r3,10556
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c002f4 	movhi	r3,11
   8014c:	18ca4f04 	addi	r3,r3,10556
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   801b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   801b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   801bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   801c0:	00bffd16 	blt	zero,r2,801b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801c4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801cc:	068002f4 	movhi	gp,11
    ori gp, gp, %lo(_gp)
   801d0:	d6a99514 	ori	gp,gp,42580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801d4:	008002f4 	movhi	r2,11
    ori r2, r2, %lo(__bss_start)
   801d8:	1089a714 	ori	r2,r2,9884

    movhi r3, %hi(__bss_end)
   801dc:	00c002f4 	movhi	r3,11
    ori r3, r3, %lo(__bss_end)
   801e0:	18caf314 	ori	r3,r3,11212

    beq r2, r3, 1f
   801e4:	10c00326 	beq	r2,r3,801f4 <_start+0x40>

0:
    stw zero, (r2)
   801e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801f0:	10fffd36 	bltu	r2,r3,801e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801f4:	00910cc0 	call	910cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801f8:	00913080 	call	91308 <alt_main>

000801fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801fc:	003fff06 	br	801fc <alt_after_alt_main>

00080200 <main>:
static void write_message(int x, int y, char message[], int color);
static int write_letter(int x, int y, char lettre, int color);


int main()
{
   80200:	defffd04 	addi	sp,sp,-12
   80204:	dfc00215 	stw	ra,8(sp)
   80208:	df000115 	stw	fp,4(sp)
   8020c:	df000104 	addi	fp,sp,4
  printf("[INFO] Nios II started successfully\n");
   80210:	01000274 	movhi	r4,9
   80214:	210de004 	addi	r4,r4,14208
   80218:	00889540 	call	88954 <puts>
  cleanScreen(); // All values to zero
   8021c:	00815ac0 	call	815ac <cleanScreen>
  printf("[INFO] Screen cleared\n");
   80220:	01000274 	movhi	r4,9
   80224:	210de904 	addi	r4,r4,14244
   80228:	00889540 	call	88954 <puts>
  init();
   8022c:	00808dc0 	call	808dc <init>
  printf("[INFO] Init. done\n");
   80230:	01000274 	movhi	r4,9
   80234:	210def04 	addi	r4,r4,14268
   80238:	00889540 	call	88954 <puts>

  int sample;

  if(MIRE) // Dessine une mire pour le test
  {
	  cleanScreen();
   8023c:	00815ac0 	call	815ac <cleanScreen>
	  drawMire(); // S'il te plait, dessine moi un mouton...
   80240:	00817fc0 	call	817fc <drawMire>
	  while(mire_playing){}
   80244:	d0a00017 	ldw	r2,-32768(gp)
   80248:	1004c03a 	cmpne	r2,r2,zero
   8024c:	103ffd1e 	bne	r2,zero,80244 <main+0x44>
	  cleanScreen();
   80250:	00815ac0 	call	815ac <cleanScreen>
	  init();
   80254:	00808dc0 	call	808dc <init>
  }

  drawSheets();
   80258:	00808880 	call	80888 <drawSheets>

  while(1)
  {
	  sample = 0;
   8025c:	e03fff15 	stw	zero,-4(fp)

	  if(kick_is_playing == 1 ){
   80260:	d0a01717 	ldw	r2,-32676(gp)
   80264:	10800058 	cmpnei	r2,r2,1
   80268:	10001b1e 	bne	r2,zero,802d8 <main+0xd8>
		  if(current_kick_sample<L_KICK){
   8026c:	d0a01317 	ldw	r2,-32692(gp)
   80270:	10885f08 	cmpgei	r2,r2,8572
   80274:	1000161e 	bne	r2,zero,802d0 <main+0xd0>
			  sample = sample + ((int) ((volume)*(kick[current_kick_sample])));
   80278:	d0a01317 	ldw	r2,-32692(gp)
   8027c:	00c00274 	movhi	r3,9
   80280:	18cf5204 	addi	r3,r3,15688
   80284:	1085883a 	add	r2,r2,r2
   80288:	1085883a 	add	r2,r2,r2
   8028c:	10c5883a 	add	r2,r2,r3
   80290:	11000017 	ldw	r4,0(r2)
   80294:	0086b000 	call	86b00 <__floatsisf>
   80298:	d0e01c17 	ldw	r3,-32656(gp)
   8029c:	1009883a 	mov	r4,r2
   802a0:	180b883a 	mov	r5,r3
   802a4:	00866bc0 	call	866bc <__mulsf3>
   802a8:	1009883a 	mov	r4,r2
   802ac:	0086b980 	call	86b98 <__fixsfsi>
   802b0:	1007883a 	mov	r3,r2
   802b4:	e0bfff17 	ldw	r2,-4(fp)
   802b8:	10c5883a 	add	r2,r2,r3
   802bc:	e0bfff15 	stw	r2,-4(fp)
			  current_kick_sample += 1;
   802c0:	d0a01317 	ldw	r2,-32692(gp)
   802c4:	10800044 	addi	r2,r2,1
   802c8:	d0a01315 	stw	r2,-32692(gp)
   802cc:	00000206 	br	802d8 <main+0xd8>
		  }else{
			  current_kick_sample = 0;
   802d0:	d0201315 	stw	zero,-32692(gp)
			  kick_is_playing = 0;
   802d4:	d0201715 	stw	zero,-32676(gp)
		  }
	  }

	  if(snare_is_playing == 1){
   802d8:	d0a01917 	ldw	r2,-32668(gp)
   802dc:	10800058 	cmpnei	r2,r2,1
   802e0:	10001b1e 	bne	r2,zero,80350 <main+0x150>
		  if(current_snare_sample<L_SNARE){
   802e4:	d0a01517 	ldw	r2,-32684(gp)
   802e8:	10885f08 	cmpgei	r2,r2,8572
   802ec:	1000161e 	bne	r2,zero,80348 <main+0x148>
			  sample += (int) ((volume)*(snare[current_snare_sample]));
   802f0:	d0a01517 	ldw	r2,-32684(gp)
   802f4:	00c002b4 	movhi	r3,10
   802f8:	18df9204 	addi	r3,r3,32328
   802fc:	1085883a 	add	r2,r2,r2
   80300:	1085883a 	add	r2,r2,r2
   80304:	10c5883a 	add	r2,r2,r3
   80308:	11000017 	ldw	r4,0(r2)
   8030c:	0086b000 	call	86b00 <__floatsisf>
   80310:	d0e01c17 	ldw	r3,-32656(gp)
   80314:	1009883a 	mov	r4,r2
   80318:	180b883a 	mov	r5,r3
   8031c:	00866bc0 	call	866bc <__mulsf3>
   80320:	1009883a 	mov	r4,r2
   80324:	0086b980 	call	86b98 <__fixsfsi>
   80328:	1007883a 	mov	r3,r2
   8032c:	e0bfff17 	ldw	r2,-4(fp)
   80330:	10c5883a 	add	r2,r2,r3
   80334:	e0bfff15 	stw	r2,-4(fp)
			  current_snare_sample += 1;
   80338:	d0a01517 	ldw	r2,-32684(gp)
   8033c:	10800044 	addi	r2,r2,1
   80340:	d0a01515 	stw	r2,-32684(gp)
   80344:	00000206 	br	80350 <main+0x150>
		  }else{
			  current_snare_sample = 0;
   80348:	d0201515 	stw	zero,-32684(gp)
			  snare_is_playing = 0;
   8034c:	d0201915 	stw	zero,-32668(gp)
		  }
	  }
	  if(clap_is_playing == 1){
   80350:	d0a01817 	ldw	r2,-32672(gp)
   80354:	10800058 	cmpnei	r2,r2,1
   80358:	10001b1e 	bne	r2,zero,803c8 <main+0x1c8>
		  if(current_clap_sample<L_CLAP){
   8035c:	d0a01417 	ldw	r2,-32688(gp)
   80360:	10878188 	cmpgei	r2,r2,7686
   80364:	1000161e 	bne	r2,zero,803c0 <main+0x1c0>
			  sample += (int) ((volume)*(clap[current_clap_sample]));
   80368:	d0a01417 	ldw	r2,-32688(gp)
   8036c:	00c002b4 	movhi	r3,10
   80370:	18c18c04 	addi	r3,r3,1584
   80374:	1085883a 	add	r2,r2,r2
   80378:	1085883a 	add	r2,r2,r2
   8037c:	10c5883a 	add	r2,r2,r3
   80380:	11000017 	ldw	r4,0(r2)
   80384:	0086b000 	call	86b00 <__floatsisf>
   80388:	d0e01c17 	ldw	r3,-32656(gp)
   8038c:	1009883a 	mov	r4,r2
   80390:	180b883a 	mov	r5,r3
   80394:	00866bc0 	call	866bc <__mulsf3>
   80398:	1009883a 	mov	r4,r2
   8039c:	0086b980 	call	86b98 <__fixsfsi>
   803a0:	1007883a 	mov	r3,r2
   803a4:	e0bfff17 	ldw	r2,-4(fp)
   803a8:	10c5883a 	add	r2,r2,r3
   803ac:	e0bfff15 	stw	r2,-4(fp)
			  current_clap_sample += 1;
   803b0:	d0a01417 	ldw	r2,-32688(gp)
   803b4:	10800044 	addi	r2,r2,1
   803b8:	d0a01415 	stw	r2,-32688(gp)
   803bc:	00000206 	br	803c8 <main+0x1c8>
		  }else{
			  current_clap_sample = 0;
   803c0:	d0201415 	stw	zero,-32688(gp)
			  clap_is_playing = 0;
   803c4:	d0201815 	stw	zero,-32672(gp)
		  }
	  }

	  if(hh_is_playing == 1){
   803c8:	d0a01a17 	ldw	r2,-32664(gp)
   803cc:	10800058 	cmpnei	r2,r2,1
   803d0:	10001b1e 	bne	r2,zero,80440 <main+0x240>
		  if(current_hh_sample<L_HH){
   803d4:	d0a01617 	ldw	r2,-32680(gp)
   803d8:	10842f88 	cmpgei	r2,r2,4286
   803dc:	1000161e 	bne	r2,zero,80438 <main+0x238>
			  sample += (int) ((volume)*(hh[current_hh_sample]));
   803e0:	d0a01617 	ldw	r2,-32680(gp)
   803e4:	00c002b4 	movhi	r3,10
   803e8:	18f0ce04 	addi	r3,r3,-15560
   803ec:	1085883a 	add	r2,r2,r2
   803f0:	1085883a 	add	r2,r2,r2
   803f4:	10c5883a 	add	r2,r2,r3
   803f8:	11000017 	ldw	r4,0(r2)
   803fc:	0086b000 	call	86b00 <__floatsisf>
   80400:	d0e01c17 	ldw	r3,-32656(gp)
   80404:	1009883a 	mov	r4,r2
   80408:	180b883a 	mov	r5,r3
   8040c:	00866bc0 	call	866bc <__mulsf3>
   80410:	1009883a 	mov	r4,r2
   80414:	0086b980 	call	86b98 <__fixsfsi>
   80418:	1007883a 	mov	r3,r2
   8041c:	e0bfff17 	ldw	r2,-4(fp)
   80420:	10c5883a 	add	r2,r2,r3
   80424:	e0bfff15 	stw	r2,-4(fp)
			  current_hh_sample += 1;
   80428:	d0a01617 	ldw	r2,-32680(gp)
   8042c:	10800044 	addi	r2,r2,1
   80430:	d0a01615 	stw	r2,-32680(gp)
   80434:	00000206 	br	80440 <main+0x240>
		  }else{
			  current_hh_sample = 0;
   80438:	d0201615 	stw	zero,-32680(gp)
			  hh_is_playing = 0;
   8043c:	d0201a15 	stw	zero,-32664(gp)
		  }
	  }


	  while (IORD(AUDIO_DAC_FIFO_0_BASE,0))
   80440:	00800434 	movhi	r2,16
   80444:	1084a004 	addi	r2,r2,4736
   80448:	10800037 	ldwio	r2,0(r2)
   8044c:	1004c03a 	cmpne	r2,r2,zero
   80450:	103ffb1e 	bne	r2,zero,80440 <main+0x240>
	  {
	  }
	  IOWR_16DIRECT(AUDIO_DAC_FIFO_0_BASE,0,sample);
   80454:	00c00434 	movhi	r3,16
   80458:	18c4a004 	addi	r3,r3,4736
   8045c:	e0bfff17 	ldw	r2,-4(fp)
   80460:	1880002d 	sthio	r2,0(r3)
	  while (IORD(AUDIO_DAC_FIFO_0_BASE,0))
   80464:	00800434 	movhi	r2,16
   80468:	1084a004 	addi	r2,r2,4736
   8046c:	10800037 	ldwio	r2,0(r2)
   80470:	1004c03a 	cmpne	r2,r2,zero
   80474:	103ffb1e 	bne	r2,zero,80464 <main+0x264>
	  {
	  }
	  IOWR_16DIRECT(AUDIO_DAC_FIFO_0_BASE,0,sample);
   80478:	00c00434 	movhi	r3,16
   8047c:	18c4a004 	addi	r3,r3,4736
   80480:	e0bfff17 	ldw	r2,-4(fp)
   80484:	1880002d 	sthio	r2,0(r3)

  }
   80488:	003f7406 	br	8025c <main+0x5c>

0008048c <set_volume>:

  return 0;
}

static void set_volume(int modifier)
{
   8048c:	defffc04 	addi	sp,sp,-16
   80490:	dfc00315 	stw	ra,12(sp)
   80494:	df000215 	stw	fp,8(sp)
   80498:	df000204 	addi	fp,sp,8
   8049c:	e13ffe15 	stw	r4,-8(fp)
	switch(modifier)
   804a0:	e0bffe17 	ldw	r2,-8(fp)
   804a4:	e0bfff15 	stw	r2,-4(fp)
   804a8:	e0ffff17 	ldw	r3,-4(fp)
   804ac:	1805003a 	cmpeq	r2,r3,zero
   804b0:	1000071e 	bne	r2,zero,804d0 <set_volume+0x44>
   804b4:	e0ffff17 	ldw	r3,-4(fp)
   804b8:	18800060 	cmpeqi	r2,r3,1
   804bc:	1000111e 	bne	r2,zero,80504 <set_volume+0x78>
   804c0:	e0ffff17 	ldw	r3,-4(fp)
   804c4:	18bfffe0 	cmpeqi	r2,r3,-1
   804c8:	10002d1e 	bne	r2,zero,80580 <set_volume+0xf4>
   804cc:	00004806 	br	805f0 <set_volume+0x164>
	{
		case 0: // mute / un-mute
			if(mute == 0)
   804d0:	d0a01b17 	ldw	r2,-32660(gp)
   804d4:	1004c03a 	cmpne	r2,r2,zero
   804d8:	1000061e 	bne	r2,zero,804f4 <set_volume+0x68>
			{
				previous_gain = gain;
   804dc:	d0a01f17 	ldw	r2,-32644(gp)
   804e0:	d0a01d15 	stw	r2,-32652(gp)
				gain = 0;
   804e4:	d0201f15 	stw	zero,-32644(gp)
				mute = 1;
   804e8:	00800044 	movi	r2,1
   804ec:	d0a01b15 	stw	r2,-32660(gp)
   804f0:	00003f06 	br	805f0 <set_volume+0x164>
			}
			else
			{
				gain = previous_gain;
   804f4:	d0a01d17 	ldw	r2,-32652(gp)
   804f8:	d0a01f15 	stw	r2,-32644(gp)
				mute = 0;
   804fc:	d0201b15 	stw	zero,-32660(gp)
			}
			break;
   80500:	00003b06 	br	805f0 <set_volume+0x164>
		case 1:
			gain += 0.1;
   80504:	d0a01f17 	ldw	r2,-32644(gp)
   80508:	1009883a 	mov	r4,r2
   8050c:	0086c2c0 	call	86c2c <__extendsfdf2>
   80510:	100b883a 	mov	r5,r2
   80514:	180d883a 	mov	r6,r3
   80518:	2809883a 	mov	r4,r5
   8051c:	300b883a 	mov	r5,r6
   80520:	01a666b4 	movhi	r6,39322
   80524:	31a66684 	addi	r6,r6,-26214
   80528:	01cfeeb4 	movhi	r7,16314
   8052c:	39e66644 	addi	r7,r7,-26215
   80530:	00871100 	call	87110 <__adddf3>
   80534:	1009883a 	mov	r4,r2
   80538:	180b883a 	mov	r5,r3
   8053c:	2005883a 	mov	r2,r4
   80540:	2807883a 	mov	r3,r5
   80544:	1009883a 	mov	r4,r2
   80548:	180b883a 	mov	r5,r3
   8054c:	0087cd80 	call	87cd8 <__truncdfsf2>
   80550:	d0a01f15 	stw	r2,-32644(gp)
			if(gain > 1)
   80554:	d0a01f17 	ldw	r2,-32644(gp)
   80558:	1009883a 	mov	r4,r2
   8055c:	014fe034 	movhi	r5,16256
   80560:	0086a100 	call	86a10 <__gtsf2>
   80564:	10800048 	cmpgei	r2,r2,1
   80568:	1000011e 	bne	r2,zero,80570 <set_volume+0xe4>
   8056c:	00002006 	br	805f0 <set_volume+0x164>
			{
				gain = 0.999;
   80570:	008fe034 	movhi	r2,16256
   80574:	10af9dc4 	addi	r2,r2,-16777
   80578:	d0a01f15 	stw	r2,-32644(gp)
			}
			break;
   8057c:	00001c06 	br	805f0 <set_volume+0x164>
		case -1:
			gain -= 0.1;
   80580:	d0a01f17 	ldw	r2,-32644(gp)
   80584:	1009883a 	mov	r4,r2
   80588:	0086c2c0 	call	86c2c <__extendsfdf2>
   8058c:	100b883a 	mov	r5,r2
   80590:	180d883a 	mov	r6,r3
   80594:	2809883a 	mov	r4,r5
   80598:	300b883a 	mov	r5,r6
   8059c:	01a666b4 	movhi	r6,39322
   805a0:	31a66684 	addi	r6,r6,-26214
   805a4:	01cfeeb4 	movhi	r7,16314
   805a8:	39e66644 	addi	r7,r7,-26215
   805ac:	00870900 	call	87090 <__subdf3>
   805b0:	1009883a 	mov	r4,r2
   805b4:	180b883a 	mov	r5,r3
   805b8:	2005883a 	mov	r2,r4
   805bc:	2807883a 	mov	r3,r5
   805c0:	1009883a 	mov	r4,r2
   805c4:	180b883a 	mov	r5,r3
   805c8:	0087cd80 	call	87cd8 <__truncdfsf2>
   805cc:	d0a01f15 	stw	r2,-32644(gp)
			if(gain < 0)
   805d0:	d0a01f17 	ldw	r2,-32644(gp)
   805d4:	1009883a 	mov	r4,r2
   805d8:	000b883a 	mov	r5,zero
   805dc:	0086a880 	call	86a88 <__ltsf2>
   805e0:	1004803a 	cmplt	r2,r2,zero
   805e4:	1000011e 	bne	r2,zero,805ec <set_volume+0x160>
   805e8:	00000106 	br	805f0 <set_volume+0x164>
			{
				gain = 0;
   805ec:	d0201f15 	stw	zero,-32644(gp)
			}
			break;
		default:
			break;
	}
	volume = 2*gain/((float)N_INST);
   805f0:	d0a01f17 	ldw	r2,-32644(gp)
   805f4:	1009883a 	mov	r4,r2
   805f8:	100b883a 	mov	r5,r2
   805fc:	00866580 	call	86658 <__addsf3>
   80600:	1009883a 	mov	r4,r2
   80604:	01502034 	movhi	r5,16512
   80608:	008689c0 	call	8689c <__divsf3>
   8060c:	d0a01c15 	stw	r2,-32656(gp)
}
   80610:	e037883a 	mov	sp,fp
   80614:	dfc00117 	ldw	ra,4(sp)
   80618:	df000017 	ldw	fp,0(sp)
   8061c:	dec00204 	addi	sp,sp,8
   80620:	f800283a 	ret

00080624 <vectorCast32Bits>:

unsigned long vectorCast32Bits(int n_inst)
{
   80624:	defff704 	addi	sp,sp,-36
   80628:	dfc00815 	stw	ra,32(sp)
   8062c:	df000715 	stw	fp,28(sp)
   80630:	dcc00615 	stw	r19,24(sp)
   80634:	dc800515 	stw	r18,20(sp)
   80638:	dc400415 	stw	r17,16(sp)
   8063c:	dc000315 	stw	r16,12(sp)
   80640:	df000304 	addi	fp,sp,12
   80644:	e13fff15 	stw	r4,-4(fp)
	unsigned long castedSheet = 0;
   80648:	e03ffe15 	stw	zero,-8(fp)
	int i;

	for(i=0;i<L_SHEET;i++)
   8064c:	e03ffd15 	stw	zero,-12(fp)
   80650:	00003706 	br	80730 <vectorCast32Bits+0x10c>
	{
		castedSheet += sheet[n_inst][i]*pow(2,i);
   80654:	e13ffe17 	ldw	r4,-8(fp)
   80658:	0087d4c0 	call	87d4c <__floatunsidf>
   8065c:	1025883a 	mov	r18,r2
   80660:	1827883a 	mov	r19,r3
   80664:	e0bfff17 	ldw	r2,-4(fp)
   80668:	e0fffd17 	ldw	r3,-12(fp)
   8066c:	010002f4 	movhi	r4,11
   80670:	2109c204 	addi	r4,r4,9992
   80674:	1004917a 	slli	r2,r2,5
   80678:	10c5883a 	add	r2,r2,r3
   8067c:	1085883a 	add	r2,r2,r2
   80680:	1085883a 	add	r2,r2,r2
   80684:	1105883a 	add	r2,r2,r4
   80688:	11000017 	ldw	r4,0(r2)
   8068c:	0087ad00 	call	87ad0 <__floatsidf>
   80690:	1021883a 	mov	r16,r2
   80694:	1823883a 	mov	r17,r3
   80698:	e13ffd17 	ldw	r4,-12(fp)
   8069c:	0087ad00 	call	87ad0 <__floatsidf>
   806a0:	100f883a 	mov	r7,r2
   806a4:	1811883a 	mov	r8,r3
   806a8:	0009883a 	mov	r4,zero
   806ac:	01500034 	movhi	r5,16384
   806b0:	380d883a 	mov	r6,r7
   806b4:	400f883a 	mov	r7,r8
   806b8:	00844800 	call	84480 <pow>
   806bc:	1009883a 	mov	r4,r2
   806c0:	180b883a 	mov	r5,r3
   806c4:	2005883a 	mov	r2,r4
   806c8:	2807883a 	mov	r3,r5
   806cc:	8009883a 	mov	r4,r16
   806d0:	880b883a 	mov	r5,r17
   806d4:	100d883a 	mov	r6,r2
   806d8:	180f883a 	mov	r7,r3
   806dc:	00871840 	call	87184 <__muldf3>
   806e0:	1009883a 	mov	r4,r2
   806e4:	180b883a 	mov	r5,r3
   806e8:	2005883a 	mov	r2,r4
   806ec:	2807883a 	mov	r3,r5
   806f0:	9009883a 	mov	r4,r18
   806f4:	980b883a 	mov	r5,r19
   806f8:	100d883a 	mov	r6,r2
   806fc:	180f883a 	mov	r7,r3
   80700:	00871100 	call	87110 <__adddf3>
   80704:	1009883a 	mov	r4,r2
   80708:	180b883a 	mov	r5,r3
   8070c:	2005883a 	mov	r2,r4
   80710:	2807883a 	mov	r3,r5
   80714:	1009883a 	mov	r4,r2
   80718:	180b883a 	mov	r5,r3
   8071c:	00863600 	call	86360 <__fixunsdfsi>
   80720:	e0bffe15 	stw	r2,-8(fp)
unsigned long vectorCast32Bits(int n_inst)
{
	unsigned long castedSheet = 0;
	int i;

	for(i=0;i<L_SHEET;i++)
   80724:	e0bffd17 	ldw	r2,-12(fp)
   80728:	10800044 	addi	r2,r2,1
   8072c:	e0bffd15 	stw	r2,-12(fp)
   80730:	e0bffd17 	ldw	r2,-12(fp)
   80734:	10800810 	cmplti	r2,r2,32
   80738:	103fc61e 	bne	r2,zero,80654 <vectorCast32Bits+0x30>
		castedSheet += sheet[n_inst][i]*pow(2,i);
	}

	if(DEBUG)
	{
		printf("[DEBUG] vectorCast32Bits, inst %d : %lu\n", n_inst, castedSheet);
   8073c:	01000274 	movhi	r4,9
   80740:	210df404 	addi	r4,r4,14288
   80744:	e17fff17 	ldw	r5,-4(fp)
   80748:	e1bffe17 	ldw	r6,-8(fp)
   8074c:	00888180 	call	88818 <printf>
	}

	return castedSheet;
   80750:	e0bffe17 	ldw	r2,-8(fp)
}
   80754:	e037883a 	mov	sp,fp
   80758:	dfc00517 	ldw	ra,20(sp)
   8075c:	df000417 	ldw	fp,16(sp)
   80760:	dcc00317 	ldw	r19,12(sp)
   80764:	dc800217 	ldw	r18,8(sp)
   80768:	dc400117 	ldw	r17,4(sp)
   8076c:	dc000017 	ldw	r16,0(sp)
   80770:	dec00604 	addi	sp,sp,24
   80774:	f800283a 	ret

00080778 <sheets_output>:

static void sheets_output()
{
   80778:	defffe04 	addi	sp,sp,-8
   8077c:	dfc00115 	stw	ra,4(sp)
   80780:	df000015 	stw	fp,0(sp)
   80784:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(SEQ_KICK_BASE,0,vectorCast32Bits(0));
   80788:	0009883a 	mov	r4,zero
   8078c:	00806240 	call	80624 <vectorCast32Bits>
   80790:	1007883a 	mov	r3,r2
   80794:	00800434 	movhi	r2,16
   80798:	10848404 	addi	r2,r2,4624
   8079c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(SEQ_SNARE_BASE,0,vectorCast32Bits(1));
   807a0:	01000044 	movi	r4,1
   807a4:	00806240 	call	80624 <vectorCast32Bits>
   807a8:	1007883a 	mov	r3,r2
   807ac:	00800434 	movhi	r2,16
   807b0:	10847c04 	addi	r2,r2,4592
   807b4:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(SEQ_HH_BASE,0,vectorCast32Bits(2));
   807b8:	01000084 	movi	r4,2
   807bc:	00806240 	call	80624 <vectorCast32Bits>
   807c0:	1007883a 	mov	r3,r2
   807c4:	00800434 	movhi	r2,16
   807c8:	10847804 	addi	r2,r2,4576
   807cc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(SEQ_CLAP_BASE,0,vectorCast32Bits(3));
   807d0:	010000c4 	movi	r4,3
   807d4:	00806240 	call	80624 <vectorCast32Bits>
   807d8:	1007883a 	mov	r3,r2
   807dc:	00800434 	movhi	r2,16
   807e0:	10848804 	addi	r2,r2,4640
   807e4:	10c00035 	stwio	r3,0(r2)
}
   807e8:	e037883a 	mov	sp,fp
   807ec:	dfc00117 	ldw	ra,4(sp)
   807f0:	df000017 	ldw	fp,0(sp)
   807f4:	dec00204 	addi	sp,sp,8
   807f8:	f800283a 	ret

000807fc <drawOneSheet>:

static void drawOneSheet(int y)
{
   807fc:	defffa04 	addi	sp,sp,-24
   80800:	dfc00515 	stw	ra,20(sp)
   80804:	df000415 	stw	fp,16(sp)
   80808:	df000404 	addi	fp,sp,16
   8080c:	e13fff15 	stw	r4,-4(fp)
	int i;

	drawEmptySquareRow(0,y,8,2,32,1); //32 empty white square
   80810:	00800804 	movi	r2,32
   80814:	d8800015 	stw	r2,0(sp)
   80818:	00800044 	movi	r2,1
   8081c:	d8800115 	stw	r2,4(sp)
   80820:	0009883a 	mov	r4,zero
   80824:	e17fff17 	ldw	r5,-4(fp)
   80828:	01800204 	movi	r6,8
   8082c:	01c00084 	movi	r7,2
   80830:	00812cc0 	call	812cc <drawEmptySquareRow>
	for(i=0;i<8;i++)
   80834:	e03ffe15 	stw	zero,-8(fp)
   80838:	00000b06 	br	80868 <drawOneSheet+0x6c>
	{
		drawVLine(i*4*10+4,y+10,5,3);
   8083c:	e0bffe17 	ldw	r2,-8(fp)
   80840:	10800a24 	muli	r2,r2,40
   80844:	11000104 	addi	r4,r2,4
   80848:	e0bfff17 	ldw	r2,-4(fp)
   8084c:	11400284 	addi	r5,r2,10
   80850:	01800144 	movi	r6,5
   80854:	01c000c4 	movi	r7,3
   80858:	00815340 	call	81534 <drawVLine>
static void drawOneSheet(int y)
{
	int i;

	drawEmptySquareRow(0,y,8,2,32,1); //32 empty white square
	for(i=0;i<8;i++)
   8085c:	e0bffe17 	ldw	r2,-8(fp)
   80860:	10800044 	addi	r2,r2,1
   80864:	e0bffe15 	stw	r2,-8(fp)
   80868:	e0bffe17 	ldw	r2,-8(fp)
   8086c:	10800210 	cmplti	r2,r2,8
   80870:	103ff21e 	bne	r2,zero,8083c <drawOneSheet+0x40>
	{
		drawVLine(i*4*10+4,y+10,5,3);
	}
}
   80874:	e037883a 	mov	sp,fp
   80878:	dfc00117 	ldw	ra,4(sp)
   8087c:	df000017 	ldw	fp,0(sp)
   80880:	dec00204 	addi	sp,sp,8
   80884:	f800283a 	ret

00080888 <drawSheets>:

static void drawSheets(){
   80888:	defffd04 	addi	sp,sp,-12
   8088c:	dfc00215 	stw	ra,8(sp)
   80890:	df000115 	stw	fp,4(sp)
   80894:	df000104 	addi	fp,sp,4

	int i;

	for(i=0;i<N_INST;i++)
   80898:	e03fff15 	stw	zero,-4(fp)
   8089c:	00000706 	br	808bc <drawSheets+0x34>
	{
		drawOneSheet(i*50 +25);
   808a0:	e0bfff17 	ldw	r2,-4(fp)
   808a4:	10800ca4 	muli	r2,r2,50
   808a8:	11000644 	addi	r4,r2,25
   808ac:	00807fc0 	call	807fc <drawOneSheet>

static void drawSheets(){

	int i;

	for(i=0;i<N_INST;i++)
   808b0:	e0bfff17 	ldw	r2,-4(fp)
   808b4:	10800044 	addi	r2,r2,1
   808b8:	e0bfff15 	stw	r2,-4(fp)
   808bc:	e0bfff17 	ldw	r2,-4(fp)
   808c0:	10800110 	cmplti	r2,r2,4
   808c4:	103ff61e 	bne	r2,zero,808a0 <drawSheets+0x18>
	{
		drawOneSheet(i*50 +25);
	}
}
   808c8:	e037883a 	mov	sp,fp
   808cc:	dfc00117 	ldw	ra,4(sp)
   808d0:	df000017 	ldw	fp,0(sp)
   808d4:	dec00204 	addi	sp,sp,8
   808d8:	f800283a 	ret

000808dc <init>:

static void init(){
   808dc:	defffe04 	addi	sp,sp,-8
   808e0:	dfc00115 	stw	ra,4(sp)
   808e4:	df000015 	stw	fp,0(sp)
   808e8:	d839883a 	mov	fp,sp
	//////////////////////////////////////////////////
	//		VARIABLES
	//////////////////////////////////////////////////

	isSelected.x = 0;
   808ec:	008002f4 	movhi	r2,11
   808f0:	108a4c04 	addi	r2,r2,10544
   808f4:	10000015 	stw	zero,0(r2)
	isSelected.y = 0;
   808f8:	008002f4 	movhi	r2,11
   808fc:	108a4c04 	addi	r2,r2,10544
   80900:	10000115 	stw	zero,4(r2)
	move(0,0);
   80904:	0009883a 	mov	r4,zero
   80908:	000b883a 	mov	r5,zero
   8090c:	00813d00 	call	813d0 <move>
	reset_sheets();
   80910:	00811800 	call	81180 <reset_sheets>
	gain = 0.999;
   80914:	008fe034 	movhi	r2,16256
   80918:	10af9dc4 	addi	r2,r2,-16777
   8091c:	d0a01f15 	stw	r2,-32644(gp)
	volume = gain/((float)N_INST);
   80920:	d0a01f17 	ldw	r2,-32644(gp)
   80924:	1009883a 	mov	r4,r2
   80928:	01502034 	movhi	r5,16512
   8092c:	008689c0 	call	8689c <__divsf3>
   80930:	d0a01c15 	stw	r2,-32656(gp)
	previous_gain = gain;
   80934:	d0a01f17 	ldw	r2,-32644(gp)
   80938:	d0a01d15 	stw	r2,-32652(gp)
	//////////////////////////////////////////////////
	//		INTERRUPTIONS
	//////////////////////////////////////////////////

	/* 1. Reset the edge capture register. */
	IOWR(KB_IRQ_BASE,3,15);
   8093c:	00c00434 	movhi	r3,16
   80940:	18c47304 	addi	r3,r3,4556
   80944:	008003c4 	movi	r2,15
   80948:	18800035 	stwio	r2,0(r3)
	IOWR(DAC_IRQ_BASE,3,1);
   8094c:	00c00434 	movhi	r3,16
   80950:	18c45f04 	addi	r3,r3,4476
   80954:	00800044 	movi	r2,1
   80958:	18800035 	stwio	r2,0(r3)

	IOWR(KICK_IRQ_BASE,3,1);
   8095c:	00c00434 	movhi	r3,16
   80960:	18c46f04 	addi	r3,r3,4540
   80964:	00800044 	movi	r2,1
   80968:	18800035 	stwio	r2,0(r3)
	IOWR(SNARE_IRQ_BASE,3,1);
   8096c:	00c00434 	movhi	r3,16
   80970:	18c46b04 	addi	r3,r3,4524
   80974:	00800044 	movi	r2,1
   80978:	18800035 	stwio	r2,0(r3)
	IOWR(CLAP_IRQ_BASE,3,1);
   8097c:	00c00434 	movhi	r3,16
   80980:	18c46304 	addi	r3,r3,4492
   80984:	00800044 	movi	r2,1
   80988:	18800035 	stwio	r2,0(r3)
	IOWR(HH_IRQ_BASE,3,1);
   8098c:	00c00434 	movhi	r3,16
   80990:	18c46704 	addi	r3,r3,4508
   80994:	00800044 	movi	r2,1
   80998:	18800035 	stwio	r2,0(r3)

	/* 2. Setup handling*/
	printf("[INFO] init, KB_IRQ register returns: %i\n", alt_irq_register(KB_IRQ_IRQ,NULL,handle_KEYBOARD_interrupt));
   8099c:	01000084 	movi	r4,2
   809a0:	000b883a 	mov	r5,zero
   809a4:	01800234 	movhi	r6,8
   809a8:	31831d04 	addi	r6,r6,3188
   809ac:	0090dec0 	call	90dec <alt_irq_register>
   809b0:	100b883a 	mov	r5,r2
   809b4:	01000274 	movhi	r4,9
   809b8:	210dff04 	addi	r4,r4,14332
   809bc:	00888180 	call	88818 <printf>
	printf("[INFO] init, KICK_IRQ register returns: %i\n", 	alt_irq_register(KICK_IRQ_IRQ,NULL,		handle_KICK_interrupt));
   809c0:	010000c4 	movi	r4,3
   809c4:	000b883a 	mov	r5,zero
   809c8:	01800234 	movhi	r6,8
   809cc:	31864104 	addi	r6,r6,6404
   809d0:	0090dec0 	call	90dec <alt_irq_register>
   809d4:	100b883a 	mov	r5,r2
   809d8:	01000274 	movhi	r4,9
   809dc:	210e0a04 	addi	r4,r4,14376
   809e0:	00888180 	call	88818 <printf>
	printf("[INFO] init, SNARE_IRQ register returns: %i\n", alt_irq_register(SNARE_IRQ_IRQ,NULL,	handle_SNARE_interrupt));
   809e4:	01000104 	movi	r4,4
   809e8:	000b883a 	mov	r5,zero
   809ec:	01800234 	movhi	r6,8
   809f0:	31865104 	addi	r6,r6,6468
   809f4:	0090dec0 	call	90dec <alt_irq_register>
   809f8:	100b883a 	mov	r5,r2
   809fc:	01000274 	movhi	r4,9
   80a00:	210e1504 	addi	r4,r4,14420
   80a04:	00888180 	call	88818 <printf>
	printf("[INFO] init, CLAP_IRQ register returns: %i\n", 	alt_irq_register(CLAP_IRQ_IRQ,NULL,		handle_CLAP_interrupt));
   80a08:	01000184 	movi	r4,6
   80a0c:	000b883a 	mov	r5,zero
   80a10:	01800234 	movhi	r6,8
   80a14:	31866104 	addi	r6,r6,6532
   80a18:	0090dec0 	call	90dec <alt_irq_register>
   80a1c:	100b883a 	mov	r5,r2
   80a20:	01000274 	movhi	r4,9
   80a24:	210e2104 	addi	r4,r4,14468
   80a28:	00888180 	call	88818 <printf>
	printf("[INFO] init, HH_IRQ register returns: %i\n", 	alt_irq_register(HH_IRQ_IRQ,NULL,		handle_HH_interrupt));
   80a2c:	01000144 	movi	r4,5
   80a30:	000b883a 	mov	r5,zero
   80a34:	01800234 	movhi	r6,8
   80a38:	31867104 	addi	r6,r6,6596
   80a3c:	0090dec0 	call	90dec <alt_irq_register>
   80a40:	100b883a 	mov	r5,r2
   80a44:	01000274 	movhi	r4,9
   80a48:	210e2c04 	addi	r4,r4,14512
   80a4c:	00888180 	call	88818 <printf>
	/* 3. Enable interrupt */
	IOWR(KB_IRQ_BASE,2,15);
   80a50:	00c00434 	movhi	r3,16
   80a54:	18c47204 	addi	r3,r3,4552
   80a58:	008003c4 	movi	r2,15
   80a5c:	18800035 	stwio	r2,0(r3)
	IOWR(KICK_IRQ_BASE,2,1);
   80a60:	00c00434 	movhi	r3,16
   80a64:	18c46e04 	addi	r3,r3,4536
   80a68:	00800044 	movi	r2,1
   80a6c:	18800035 	stwio	r2,0(r3)
	IOWR(SNARE_IRQ_BASE,2,1);
   80a70:	00c00434 	movhi	r3,16
   80a74:	18c46a04 	addi	r3,r3,4520
   80a78:	00800044 	movi	r2,1
   80a7c:	18800035 	stwio	r2,0(r3)
	IOWR(CLAP_IRQ_BASE,2,1);
   80a80:	00c00434 	movhi	r3,16
   80a84:	18c46204 	addi	r3,r3,4488
   80a88:	00800044 	movi	r2,1
   80a8c:	18800035 	stwio	r2,0(r3)
	IOWR(HH_IRQ_BASE,2,1);
   80a90:	00c00434 	movhi	r3,16
   80a94:	18c46604 	addi	r3,r3,4504
   80a98:	00800044 	movi	r2,1
   80a9c:	18800035 	stwio	r2,0(r3)

}
   80aa0:	e037883a 	mov	sp,fp
   80aa4:	dfc00117 	ldw	ra,4(sp)
   80aa8:	df000017 	ldw	fp,0(sp)
   80aac:	dec00204 	addi	sp,sp,8
   80ab0:	f800283a 	ret

00080ab4 <copy_sheet>:

static void copy_sheet(int sheet_tocopy[])
{
   80ab4:	defffb04 	addi	sp,sp,-20
   80ab8:	dfc00415 	stw	ra,16(sp)
   80abc:	df000315 	stw	fp,12(sp)
   80ac0:	df000304 	addi	fp,sp,12
   80ac4:	e13fff15 	stw	r4,-4(fp)
	reset_sheets();
   80ac8:	00811800 	call	81180 <reset_sheets>
	int i, j;
	for(i =0; i<N_INST;i++)
   80acc:	e03ffe15 	stw	zero,-8(fp)
   80ad0:	00003306 	br	80ba0 <copy_sheet+0xec>
	{
		for(j=0;j<L_SHEET;j++)
   80ad4:	e03ffd15 	stw	zero,-12(fp)
   80ad8:	00002b06 	br	80b88 <copy_sheet+0xd4>
		{
			sheet[i][j] = sheet_tocopy[i*L_SHEET + j];
   80adc:	e17ffe17 	ldw	r5,-8(fp)
   80ae0:	e1bffd17 	ldw	r6,-12(fp)
   80ae4:	e0bffe17 	ldw	r2,-8(fp)
   80ae8:	1006917a 	slli	r3,r2,5
   80aec:	e0bffd17 	ldw	r2,-12(fp)
   80af0:	1885883a 	add	r2,r3,r2
   80af4:	1085883a 	add	r2,r2,r2
   80af8:	1085883a 	add	r2,r2,r2
   80afc:	1007883a 	mov	r3,r2
   80b00:	e0bfff17 	ldw	r2,-4(fp)
   80b04:	1885883a 	add	r2,r3,r2
   80b08:	11000017 	ldw	r4,0(r2)
   80b0c:	00c002f4 	movhi	r3,11
   80b10:	18c9c204 	addi	r3,r3,9992
   80b14:	2804917a 	slli	r2,r5,5
   80b18:	1185883a 	add	r2,r2,r6
   80b1c:	1085883a 	add	r2,r2,r2
   80b20:	1085883a 	add	r2,r2,r2
   80b24:	10c5883a 	add	r2,r2,r3
   80b28:	11000015 	stw	r4,0(r2)
			if(sheet[i][j] == 1)
   80b2c:	e0bffe17 	ldw	r2,-8(fp)
   80b30:	e0fffd17 	ldw	r3,-12(fp)
   80b34:	010002f4 	movhi	r4,11
   80b38:	2109c204 	addi	r4,r4,9992
   80b3c:	1004917a 	slli	r2,r2,5
   80b40:	10c5883a 	add	r2,r2,r3
   80b44:	1085883a 	add	r2,r2,r2
   80b48:	1085883a 	add	r2,r2,r2
   80b4c:	1105883a 	add	r2,r2,r4
   80b50:	10800017 	ldw	r2,0(r2)
   80b54:	10800058 	cmpnei	r2,r2,1
   80b58:	1000081e 	bne	r2,zero,80b7c <copy_sheet+0xc8>
			{
				drawEmptySquare(j*10,i*50+25, 8, 3);
   80b5c:	e0bffd17 	ldw	r2,-12(fp)
   80b60:	110002a4 	muli	r4,r2,10
   80b64:	e0bffe17 	ldw	r2,-8(fp)
   80b68:	10800ca4 	muli	r2,r2,50
   80b6c:	11400644 	addi	r5,r2,25
   80b70:	01800204 	movi	r6,8
   80b74:	01c000c4 	movi	r7,3
   80b78:	00816080 	call	81608 <drawEmptySquare>
{
	reset_sheets();
	int i, j;
	for(i =0; i<N_INST;i++)
	{
		for(j=0;j<L_SHEET;j++)
   80b7c:	e0bffd17 	ldw	r2,-12(fp)
   80b80:	10800044 	addi	r2,r2,1
   80b84:	e0bffd15 	stw	r2,-12(fp)
   80b88:	e0bffd17 	ldw	r2,-12(fp)
   80b8c:	10800810 	cmplti	r2,r2,32
   80b90:	103fd21e 	bne	r2,zero,80adc <copy_sheet+0x28>

static void copy_sheet(int sheet_tocopy[])
{
	reset_sheets();
	int i, j;
	for(i =0; i<N_INST;i++)
   80b94:	e0bffe17 	ldw	r2,-8(fp)
   80b98:	10800044 	addi	r2,r2,1
   80b9c:	e0bffe15 	stw	r2,-8(fp)
   80ba0:	e0bffe17 	ldw	r2,-8(fp)
   80ba4:	10800110 	cmplti	r2,r2,4
   80ba8:	103fca1e 	bne	r2,zero,80ad4 <copy_sheet+0x20>
			{
				drawEmptySquare(j*10,i*50+25, 8, 3);
			}
		}
	}
}
   80bac:	e037883a 	mov	sp,fp
   80bb0:	dfc00117 	ldw	ra,4(sp)
   80bb4:	df000017 	ldw	fp,0(sp)
   80bb8:	dec00204 	addi	sp,sp,8
   80bbc:	f800283a 	ret

00080bc0 <load_sheet>:

static void load_sheet(int sheet_number)
{
   80bc0:	defffc04 	addi	sp,sp,-16
   80bc4:	dfc00315 	stw	ra,12(sp)
   80bc8:	df000215 	stw	fp,8(sp)
   80bcc:	df000204 	addi	fp,sp,8
   80bd0:	e13ffe15 	stw	r4,-8(fp)
	switch(sheet_number)
   80bd4:	e0bffe17 	ldw	r2,-8(fp)
   80bd8:	e0bfff15 	stw	r2,-4(fp)
   80bdc:	e0ffff17 	ldw	r3,-4(fp)
   80be0:	188000a0 	cmpeqi	r2,r3,2
   80be4:	1000121e 	bne	r2,zero,80c30 <load_sheet+0x70>
   80be8:	e0ffff17 	ldw	r3,-4(fp)
   80bec:	188000c8 	cmpgei	r2,r3,3
   80bf0:	1000041e 	bne	r2,zero,80c04 <load_sheet+0x44>
   80bf4:	e0ffff17 	ldw	r3,-4(fp)
   80bf8:	18800060 	cmpeqi	r2,r3,1
   80bfc:	1000081e 	bne	r2,zero,80c20 <load_sheet+0x60>
   80c00:	00001606 	br	80c5c <load_sheet+0x9c>
   80c04:	e0ffff17 	ldw	r3,-4(fp)
   80c08:	188000e0 	cmpeqi	r2,r3,3
   80c0c:	10000c1e 	bne	r2,zero,80c40 <load_sheet+0x80>
   80c10:	e0ffff17 	ldw	r3,-4(fp)
   80c14:	18800120 	cmpeqi	r2,r3,4
   80c18:	10000d1e 	bne	r2,zero,80c50 <load_sheet+0x90>
   80c1c:	00000f06 	br	80c5c <load_sheet+0x9c>
	{
		case 1:
			copy_sheet(sheet_1);
   80c20:	010002f4 	movhi	r4,11
   80c24:	21010e04 	addi	r4,r4,1080
   80c28:	0080ab40 	call	80ab4 <copy_sheet>
			break;
   80c2c:	00000b06 	br	80c5c <load_sheet+0x9c>
		case 2:
			copy_sheet(sheet_2);
   80c30:	010002f4 	movhi	r4,11
   80c34:	21018e04 	addi	r4,r4,1592
   80c38:	0080ab40 	call	80ab4 <copy_sheet>
			break;
   80c3c:	00000706 	br	80c5c <load_sheet+0x9c>
		case 3:
			copy_sheet(sheet_3);
   80c40:	010002f4 	movhi	r4,11
   80c44:	21020e04 	addi	r4,r4,2104
   80c48:	0080ab40 	call	80ab4 <copy_sheet>
			break;
   80c4c:	00000306 	br	80c5c <load_sheet+0x9c>
		case 4:
			copy_sheet(sheet_4);
   80c50:	010002f4 	movhi	r4,11
   80c54:	21028e04 	addi	r4,r4,2616
   80c58:	0080ab40 	call	80ab4 <copy_sheet>
			break;
		default:
			break;
	}
	sheets_output();
   80c5c:	00807780 	call	80778 <sheets_output>
}
   80c60:	e037883a 	mov	sp,fp
   80c64:	dfc00117 	ldw	ra,4(sp)
   80c68:	df000017 	ldw	fp,0(sp)
   80c6c:	dec00204 	addi	sp,sp,8
   80c70:	f800283a 	ret

00080c74 <handle_KEYBOARD_interrupt>:

static void handle_KEYBOARD_interrupt(void* context, alt_u32 id){
   80c74:	defffa04 	addi	sp,sp,-24
   80c78:	dfc00515 	stw	ra,20(sp)
   80c7c:	df000415 	stw	fp,16(sp)
   80c80:	df000404 	addi	fp,sp,16
   80c84:	e13ffd15 	stw	r4,-12(fp)
   80c88:	e17ffe15 	stw	r5,-8(fp)
	int code = (int) IORD(KB_DATA_BASE,0);
   80c8c:	00800434 	movhi	r2,16
   80c90:	10847404 	addi	r2,r2,4560
   80c94:	10800037 	ldwio	r2,0(r2)
   80c98:	e0bffc15 	stw	r2,-16(fp)
	if(DEBUG)
	{
		printf("[DEBUG] code : %d\n", code);
   80c9c:	01000274 	movhi	r4,9
   80ca0:	210e3704 	addi	r4,r4,14556
   80ca4:	e17ffc17 	ldw	r5,-16(fp)
   80ca8:	00888180 	call	88818 <printf>
	}

	if(code == 240)
   80cac:	e0bffc17 	ldw	r2,-16(fp)
   80cb0:	10803c18 	cmpnei	r2,r2,240
   80cb4:	1000031e 	bne	r2,zero,80cc4 <handle_KEYBOARD_interrupt+0x50>
	{
		readNext = 1;
   80cb8:	00800044 	movi	r2,1
   80cbc:	d0a01215 	stw	r2,-32696(gp)
   80cc0:	0000b706 	br	80fa0 <handle_KEYBOARD_interrupt+0x32c>
	}
	else if(readNext)
   80cc4:	d0a01217 	ldw	r2,-32696(gp)
   80cc8:	1005003a 	cmpeq	r2,r2,zero
   80ccc:	1000b41e 	bne	r2,zero,80fa0 <handle_KEYBOARD_interrupt+0x32c>
	{
		switch(code)
   80cd0:	e0bffc17 	ldw	r2,-16(fp)
   80cd4:	10bfff04 	addi	r2,r2,-4
   80cd8:	e0bfff15 	stw	r2,-4(fp)
   80cdc:	e0ffff17 	ldw	r3,-4(fp)
   80ce0:	18801e28 	cmpgeui	r2,r3,120
   80ce4:	1000ad1e 	bne	r2,zero,80f9c <handle_KEYBOARD_interrupt+0x328>
   80ce8:	e13fff17 	ldw	r4,-4(fp)
   80cec:	e13fff17 	ldw	r4,-4(fp)
   80cf0:	2105883a 	add	r2,r4,r4
   80cf4:	1087883a 	add	r3,r2,r2
   80cf8:	00800234 	movhi	r2,8
   80cfc:	10834304 	addi	r2,r2,3340
   80d00:	1885883a 	add	r2,r3,r2
   80d04:	10800017 	ldw	r2,0(r2)
   80d08:	1000683a 	jmp	r2
   80d0c:	00080f88 	cmpgei	zero,zero,8254
   80d10:	00080f70 	cmpltui	zero,zero,8253
   80d14:	00080f7c 	xorhi	zero,zero,8253
   80d18:	00080f9c 	xori	zero,zero,8254
   80d1c:	00080f9c 	xori	zero,zero,8254
   80d20:	00080f9c 	xori	zero,zero,8254
   80d24:	00080f9c 	xori	zero,zero,8254
   80d28:	00080f9c 	xori	zero,zero,8254
   80d2c:	00080f94 	movui	zero,8254
   80d30:	00080f9c 	xori	zero,zero,8254
   80d34:	00080f9c 	xori	zero,zero,8254
   80d38:	00080f9c 	xori	zero,zero,8254
   80d3c:	00080f9c 	xori	zero,zero,8254
   80d40:	00080f9c 	xori	zero,zero,8254
   80d44:	00080f9c 	xori	zero,zero,8254
   80d48:	00080f9c 	xori	zero,zero,8254
   80d4c:	00080f9c 	xori	zero,zero,8254
   80d50:	00080f9c 	xori	zero,zero,8254
   80d54:	00080f9c 	xori	zero,zero,8254
   80d58:	00080f9c 	xori	zero,zero,8254
   80d5c:	00080f9c 	xori	zero,zero,8254
   80d60:	00080f9c 	xori	zero,zero,8254
   80d64:	00080f9c 	xori	zero,zero,8254
   80d68:	00080f9c 	xori	zero,zero,8254
   80d6c:	00080f9c 	xori	zero,zero,8254
   80d70:	00080f9c 	xori	zero,zero,8254
   80d74:	00080f9c 	xori	zero,zero,8254
   80d78:	00080f9c 	xori	zero,zero,8254
   80d7c:	00080f9c 	xori	zero,zero,8254
   80d80:	00080f9c 	xori	zero,zero,8254
   80d84:	00080f9c 	xori	zero,zero,8254
   80d88:	00080f9c 	xori	zero,zero,8254
   80d8c:	00080f9c 	xori	zero,zero,8254
   80d90:	00080f9c 	xori	zero,zero,8254
   80d94:	00080f9c 	xori	zero,zero,8254
   80d98:	00080f9c 	xori	zero,zero,8254
   80d9c:	00080f9c 	xori	zero,zero,8254
   80da0:	00080f9c 	xori	zero,zero,8254
   80da4:	00080f9c 	xori	zero,zero,8254
   80da8:	00080f9c 	xori	zero,zero,8254
   80dac:	00080f9c 	xori	zero,zero,8254
   80db0:	00080f9c 	xori	zero,zero,8254
   80db4:	00080f9c 	xori	zero,zero,8254
   80db8:	00080f9c 	xori	zero,zero,8254
   80dbc:	00080f9c 	xori	zero,zero,8254
   80dc0:	00080f9c 	xori	zero,zero,8254
   80dc4:	00080f9c 	xori	zero,zero,8254
   80dc8:	00080f9c 	xori	zero,zero,8254
   80dcc:	00080f9c 	xori	zero,zero,8254
   80dd0:	00080f9c 	xori	zero,zero,8254
   80dd4:	00080f9c 	xori	zero,zero,8254
   80dd8:	00080f9c 	xori	zero,zero,8254
   80ddc:	00080f9c 	xori	zero,zero,8254
   80de0:	00080f9c 	xori	zero,zero,8254
   80de4:	00080f9c 	xori	zero,zero,8254
   80de8:	00080f9c 	xori	zero,zero,8254
   80dec:	00080f9c 	xori	zero,zero,8254
   80df0:	00080f9c 	xori	zero,zero,8254
   80df4:	00080f9c 	xori	zero,zero,8254
   80df8:	00080f9c 	xori	zero,zero,8254
   80dfc:	00080f9c 	xori	zero,zero,8254
   80e00:	00080f9c 	xori	zero,zero,8254
   80e04:	00080f3c 	xorhi	zero,zero,8252
   80e08:	00080f9c 	xori	zero,zero,8254
   80e0c:	00080f9c 	xori	zero,zero,8254
   80e10:	00080f9c 	xori	zero,zero,8254
   80e14:	00080f9c 	xori	zero,zero,8254
   80e18:	00080f9c 	xori	zero,zero,8254
   80e1c:	00080f9c 	xori	zero,zero,8254
   80e20:	00080f9c 	xori	zero,zero,8254
   80e24:	00080f9c 	xori	zero,zero,8254
   80e28:	00080f9c 	xori	zero,zero,8254
   80e2c:	00080f44 	movi	zero,8253
   80e30:	00080f64 	muli	zero,zero,8253
   80e34:	00080f9c 	xori	zero,zero,8254
   80e38:	00080f9c 	xori	zero,zero,8254
   80e3c:	00080f9c 	xori	zero,zero,8254
   80e40:	00080f9c 	xori	zero,zero,8254
   80e44:	00080f9c 	xori	zero,zero,8254
   80e48:	00080f9c 	xori	zero,zero,8254
   80e4c:	00080f9c 	xori	zero,zero,8254
   80e50:	00080f9c 	xori	zero,zero,8254
   80e54:	00080f9c 	xori	zero,zero,8254
   80e58:	00080f9c 	xori	zero,zero,8254
   80e5c:	00080f9c 	xori	zero,zero,8254
   80e60:	00080f9c 	xori	zero,zero,8254
   80e64:	00080f2c 	andhi	zero,zero,8252
   80e68:	00080f9c 	xori	zero,zero,8254
   80e6c:	00080f9c 	xori	zero,zero,8254
   80e70:	00080f9c 	xori	zero,zero,8254
   80e74:	00080f9c 	xori	zero,zero,8254
   80e78:	00080f9c 	xori	zero,zero,8254
   80e7c:	00080f9c 	xori	zero,zero,8254
   80e80:	00080f9c 	xori	zero,zero,8254
   80e84:	00080f9c 	xori	zero,zero,8254
   80e88:	00080f9c 	xori	zero,zero,8254
   80e8c:	00080f9c 	xori	zero,zero,8254
   80e90:	00080f9c 	xori	zero,zero,8254
   80e94:	00080f34 	movhi	zero,8252
   80e98:	00080f9c 	xori	zero,zero,8254
   80e9c:	00080f9c 	xori	zero,zero,8254
   80ea0:	00080f9c 	xori	zero,zero,8254
   80ea4:	00080f9c 	xori	zero,zero,8254
   80ea8:	00080efc 	xorhi	zero,zero,8251
   80eac:	00080f9c 	xori	zero,zero,8254
   80eb0:	00080f9c 	xori	zero,zero,8254
   80eb4:	00080f9c 	xori	zero,zero,8254
   80eb8:	00080f9c 	xori	zero,zero,8254
   80ebc:	00080f9c 	xori	zero,zero,8254
   80ec0:	00080f9c 	xori	zero,zero,8254
   80ec4:	00080f1c 	xori	zero,zero,8252
   80ec8:	00080f9c 	xori	zero,zero,8254
   80ecc:	00080f0c 	andi	zero,zero,8252
   80ed0:	00080eec 	andhi	zero,zero,8251
   80ed4:	00080f9c 	xori	zero,zero,8254
   80ed8:	00080f9c 	xori	zero,zero,8254
   80edc:	00080f9c 	xori	zero,zero,8254
   80ee0:	00080f4c 	andi	zero,zero,8253
   80ee4:	00080f9c 	xori	zero,zero,8254
   80ee8:	00080f58 	cmpnei	zero,zero,8253
		{
		case 117: // haut
			move(0,-1);
   80eec:	0009883a 	mov	r4,zero
   80ef0:	017fffc4 	movi	r5,-1
   80ef4:	00813d00 	call	813d0 <move>
			break;
   80ef8:	00002806 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 107: // gauche
			move(-1,0);
   80efc:	013fffc4 	movi	r4,-1
   80f00:	000b883a 	mov	r5,zero
   80f04:	00813d00 	call	813d0 <move>
			break;
   80f08:	00002406 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 116: // droite
			move(1,0);
   80f0c:	01000044 	movi	r4,1
   80f10:	000b883a 	mov	r5,zero
   80f14:	00813d00 	call	813d0 <move>
			break;
   80f18:	00002006 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 114: // bas
			move(0,1);
   80f1c:	0009883a 	mov	r4,zero
   80f20:	01400044 	movi	r5,1
   80f24:	00813d00 	call	813d0 <move>
			break;
   80f28:	00001c06 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 90: // 'enter'
			setActive();
   80f2c:	0080fc40 	call	80fc4 <setActive>
			break;
   80f30:	00001a06 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 102: // 'backspace'
			reset_sheets();
   80f34:	00811800 	call	81180 <reset_sheets>
			break;
   80f38:	00001806 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 66: // 'k'
			current_kick_sample = 0;
   80f3c:	d0201315 	stw	zero,-32692(gp)
			break;
   80f40:	00001606 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 76: // 'm' pour MIRE
			mire_playing = 0;
   80f44:	d0200015 	stw	zero,-32768(gp)
			break;
   80f48:	00001406 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 121: // '+'
			set_volume(1);
   80f4c:	01000044 	movi	r4,1
   80f50:	008048c0 	call	8048c <set_volume>
			break;
   80f54:	00001106 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 123:
			set_volume(-1);
   80f58:	013fffc4 	movi	r4,-1
   80f5c:	008048c0 	call	8048c <set_volume>
			break;
   80f60:	00000e06 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 77: // 'p'
			set_volume(0);
   80f64:	0009883a 	mov	r4,zero
   80f68:	008048c0 	call	8048c <set_volume>
			break;
   80f6c:	00000b06 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 5: // F1
			load_sheet(1);
   80f70:	01000044 	movi	r4,1
   80f74:	0080bc00 	call	80bc0 <load_sheet>
			break;
   80f78:	00000806 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 6: // F2
			load_sheet(2);
   80f7c:	01000084 	movi	r4,2
   80f80:	0080bc00 	call	80bc0 <load_sheet>
			break;
   80f84:	00000506 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 4: // F3
			load_sheet(3);
   80f88:	010000c4 	movi	r4,3
   80f8c:	0080bc00 	call	80bc0 <load_sheet>
			break;
   80f90:	00000206 	br	80f9c <handle_KEYBOARD_interrupt+0x328>
		case 12: // F4
			load_sheet(4);
   80f94:	01000104 	movi	r4,4
   80f98:	0080bc00 	call	80bc0 <load_sheet>
			break;
		default:
			break;
		}
		readNext = 0;
   80f9c:	d0201215 	stw	zero,-32696(gp)
	}

	IOWR(KB_IRQ_BASE,3,15);
   80fa0:	00c00434 	movhi	r3,16
   80fa4:	18c47304 	addi	r3,r3,4556
   80fa8:	008003c4 	movi	r2,15
   80fac:	18800035 	stwio	r2,0(r3)
}
   80fb0:	e037883a 	mov	sp,fp
   80fb4:	dfc00117 	ldw	ra,4(sp)
   80fb8:	df000017 	ldw	fp,0(sp)
   80fbc:	dec00204 	addi	sp,sp,8
   80fc0:	f800283a 	ret

00080fc4 <setActive>:

static void setActive()
{
   80fc4:	defffb04 	addi	sp,sp,-20
   80fc8:	dfc00415 	stw	ra,16(sp)
   80fcc:	df000315 	stw	fp,12(sp)
   80fd0:	df000304 	addi	fp,sp,12
	int colorToDraw=1;
   80fd4:	00800044 	movi	r2,1
   80fd8:	e0bfff15 	stw	r2,-4(fp)

	if(sheet[isSelected.y][isSelected.x] == 0)
   80fdc:	008002f4 	movhi	r2,11
   80fe0:	108a4c04 	addi	r2,r2,10544
   80fe4:	11000117 	ldw	r4,4(r2)
   80fe8:	008002f4 	movhi	r2,11
   80fec:	108a4c04 	addi	r2,r2,10544
   80ff0:	10c00017 	ldw	r3,0(r2)
   80ff4:	014002f4 	movhi	r5,11
   80ff8:	2949c204 	addi	r5,r5,9992
   80ffc:	2004917a 	slli	r2,r4,5
   81000:	10c5883a 	add	r2,r2,r3
   81004:	1085883a 	add	r2,r2,r2
   81008:	1085883a 	add	r2,r2,r2
   8100c:	1145883a 	add	r2,r2,r5
   81010:	10800017 	ldw	r2,0(r2)
   81014:	1004c03a 	cmpne	r2,r2,zero
   81018:	1000121e 	bne	r2,zero,81064 <setActive+0xa0>
	{
		sheet[isSelected.y][isSelected.x] = 1;
   8101c:	008002f4 	movhi	r2,11
   81020:	108a4c04 	addi	r2,r2,10544
   81024:	11000117 	ldw	r4,4(r2)
   81028:	008002f4 	movhi	r2,11
   8102c:	108a4c04 	addi	r2,r2,10544
   81030:	10c00017 	ldw	r3,0(r2)
   81034:	014002f4 	movhi	r5,11
   81038:	2949c204 	addi	r5,r5,9992
   8103c:	2004917a 	slli	r2,r4,5
   81040:	10c5883a 	add	r2,r2,r3
   81044:	1085883a 	add	r2,r2,r2
   81048:	1085883a 	add	r2,r2,r2
   8104c:	1147883a 	add	r3,r2,r5
   81050:	00800044 	movi	r2,1
   81054:	18800015 	stw	r2,0(r3)
		colorToDraw = 3;
   81058:	008000c4 	movi	r2,3
   8105c:	e0bfff15 	stw	r2,-4(fp)
   81060:	00000e06 	br	8109c <setActive+0xd8>
	}
	else
	{
		sheet[isSelected.y][isSelected.x] = 0;
   81064:	008002f4 	movhi	r2,11
   81068:	108a4c04 	addi	r2,r2,10544
   8106c:	11000117 	ldw	r4,4(r2)
   81070:	008002f4 	movhi	r2,11
   81074:	108a4c04 	addi	r2,r2,10544
   81078:	10c00017 	ldw	r3,0(r2)
   8107c:	014002f4 	movhi	r5,11
   81080:	2949c204 	addi	r5,r5,9992
   81084:	2004917a 	slli	r2,r4,5
   81088:	10c5883a 	add	r2,r2,r3
   8108c:	1085883a 	add	r2,r2,r2
   81090:	1085883a 	add	r2,r2,r2
   81094:	1145883a 	add	r2,r2,r5
   81098:	10000015 	stw	zero,0(r2)
	}

	drawEmptySquare(isSelected.x*10,isSelected.y*50+25, 8, colorToDraw);
   8109c:	008002f4 	movhi	r2,11
   810a0:	108a4c04 	addi	r2,r2,10544
   810a4:	10800017 	ldw	r2,0(r2)
   810a8:	110002a4 	muli	r4,r2,10
   810ac:	008002f4 	movhi	r2,11
   810b0:	108a4c04 	addi	r2,r2,10544
   810b4:	10800117 	ldw	r2,4(r2)
   810b8:	10800ca4 	muli	r2,r2,50
   810bc:	11400644 	addi	r5,r2,25
   810c0:	01800204 	movi	r6,8
   810c4:	e1ffff17 	ldw	r7,-4(fp)
   810c8:	00816080 	call	81608 <drawEmptySquare>
	sheets_output();
   810cc:	00807780 	call	80778 <sheets_output>

	// Visualisation des partitions
	if(DEBUG)
	{
		printf("[DEBUG] In setActive, sheet : \n\n");
   810d0:	01000274 	movhi	r4,9
   810d4:	210e3c04 	addi	r4,r4,14576
   810d8:	00889540 	call	88954 <puts>
		int i,j;
		for(i=0;i<N_INST;i++)
   810dc:	e03ffe15 	stw	zero,-8(fp)
   810e0:	00001d06 	br	81158 <setActive+0x194>
		{
			printf("[");
   810e4:	010016c4 	movi	r4,91
   810e8:	00888900 	call	88890 <putchar>
			for(j=0;j<L_SHEET;j++)
   810ec:	e03ffd15 	stw	zero,-12(fp)
   810f0:	00001006 	br	81134 <setActive+0x170>
			{
				printf(" %d ", sheet[i][j]);
   810f4:	e0bffe17 	ldw	r2,-8(fp)
   810f8:	e0fffd17 	ldw	r3,-12(fp)
   810fc:	010002f4 	movhi	r4,11
   81100:	2109c204 	addi	r4,r4,9992
   81104:	1004917a 	slli	r2,r2,5
   81108:	10c5883a 	add	r2,r2,r3
   8110c:	1085883a 	add	r2,r2,r2
   81110:	1085883a 	add	r2,r2,r2
   81114:	1105883a 	add	r2,r2,r4
   81118:	11400017 	ldw	r5,0(r2)
   8111c:	01000274 	movhi	r4,9
   81120:	210e4404 	addi	r4,r4,14608
   81124:	00888180 	call	88818 <printf>
		printf("[DEBUG] In setActive, sheet : \n\n");
		int i,j;
		for(i=0;i<N_INST;i++)
		{
			printf("[");
			for(j=0;j<L_SHEET;j++)
   81128:	e0bffd17 	ldw	r2,-12(fp)
   8112c:	10800044 	addi	r2,r2,1
   81130:	e0bffd15 	stw	r2,-12(fp)
   81134:	e0bffd17 	ldw	r2,-12(fp)
   81138:	10800810 	cmplti	r2,r2,32
   8113c:	103fed1e 	bne	r2,zero,810f4 <setActive+0x130>
			{
				printf(" %d ", sheet[i][j]);
			}
			printf("]\n");
   81140:	01000274 	movhi	r4,9
   81144:	210e4604 	addi	r4,r4,14616
   81148:	00889540 	call	88954 <puts>
	// Visualisation des partitions
	if(DEBUG)
	{
		printf("[DEBUG] In setActive, sheet : \n\n");
		int i,j;
		for(i=0;i<N_INST;i++)
   8114c:	e0bffe17 	ldw	r2,-8(fp)
   81150:	10800044 	addi	r2,r2,1
   81154:	e0bffe15 	stw	r2,-8(fp)
   81158:	e0bffe17 	ldw	r2,-8(fp)
   8115c:	10800110 	cmplti	r2,r2,4
   81160:	103fe01e 	bne	r2,zero,810e4 <setActive+0x120>
			{
				printf(" %d ", sheet[i][j]);
			}
			printf("]\n");
		}
		printf("\n");
   81164:	01000284 	movi	r4,10
   81168:	00888900 	call	88890 <putchar>
	}
}
   8116c:	e037883a 	mov	sp,fp
   81170:	dfc00117 	ldw	ra,4(sp)
   81174:	df000017 	ldw	fp,0(sp)
   81178:	dec00204 	addi	sp,sp,8
   8117c:	f800283a 	ret

00081180 <reset_sheets>:

static void reset_sheets(){
   81180:	defffc04 	addi	sp,sp,-16
   81184:	dfc00315 	stw	ra,12(sp)
   81188:	df000215 	stw	fp,8(sp)
   8118c:	df000204 	addi	fp,sp,8

	int i, j;
	for(i=0;i<N_INST;i++)
   81190:	e03fff15 	stw	zero,-4(fp)
   81194:	00001506 	br	811ec <reset_sheets+0x6c>
	{
		for(j=0;j<L_SHEET;j++)
   81198:	e03ffe15 	stw	zero,-8(fp)
   8119c:	00000d06 	br	811d4 <reset_sheets+0x54>
		{
			sheet[i][j] = 0;
   811a0:	e0bfff17 	ldw	r2,-4(fp)
   811a4:	e0fffe17 	ldw	r3,-8(fp)
   811a8:	010002f4 	movhi	r4,11
   811ac:	2109c204 	addi	r4,r4,9992
   811b0:	1004917a 	slli	r2,r2,5
   811b4:	10c5883a 	add	r2,r2,r3
   811b8:	1085883a 	add	r2,r2,r2
   811bc:	1085883a 	add	r2,r2,r2
   811c0:	1105883a 	add	r2,r2,r4
   811c4:	10000015 	stw	zero,0(r2)
static void reset_sheets(){

	int i, j;
	for(i=0;i<N_INST;i++)
	{
		for(j=0;j<L_SHEET;j++)
   811c8:	e0bffe17 	ldw	r2,-8(fp)
   811cc:	10800044 	addi	r2,r2,1
   811d0:	e0bffe15 	stw	r2,-8(fp)
   811d4:	e0bffe17 	ldw	r2,-8(fp)
   811d8:	10800810 	cmplti	r2,r2,32
   811dc:	103ff01e 	bne	r2,zero,811a0 <reset_sheets+0x20>
}

static void reset_sheets(){

	int i, j;
	for(i=0;i<N_INST;i++)
   811e0:	e0bfff17 	ldw	r2,-4(fp)
   811e4:	10800044 	addi	r2,r2,1
   811e8:	e0bfff15 	stw	r2,-4(fp)
   811ec:	e0bfff17 	ldw	r2,-4(fp)
   811f0:	10800110 	cmplti	r2,r2,4
   811f4:	103fe81e 	bne	r2,zero,81198 <reset_sheets+0x18>
		for(j=0;j<L_SHEET;j++)
		{
			sheet[i][j] = 0;
		}
	}
	sheets_output();
   811f8:	00807780 	call	80778 <sheets_output>
	cleanScreen();
   811fc:	00815ac0 	call	815ac <cleanScreen>
	drawSheets();
   81200:	00808880 	call	80888 <drawSheets>
	isSelected.x = 0;
   81204:	008002f4 	movhi	r2,11
   81208:	108a4c04 	addi	r2,r2,10544
   8120c:	10000015 	stw	zero,0(r2)
	isSelected.y =0;
   81210:	008002f4 	movhi	r2,11
   81214:	108a4c04 	addi	r2,r2,10544
   81218:	10000115 	stw	zero,4(r2)
	move(0,0);
   8121c:	0009883a 	mov	r4,zero
   81220:	000b883a 	mov	r5,zero
   81224:	00813d00 	call	813d0 <move>
	write_message(112, 3, "PHONOTRON 5000", 3);
   81228:	01001c04 	movi	r4,112
   8122c:	014000c4 	movi	r5,3
   81230:	01800274 	movhi	r6,9
   81234:	318e4704 	addi	r6,r6,14620
   81238:	01c000c4 	movi	r7,3
   8123c:	00843d00 	call	843d0 <write_message>
	write_message(0, 43, "Kick", 3);
   81240:	0009883a 	mov	r4,zero
   81244:	01400ac4 	movi	r5,43
   81248:	01800274 	movhi	r6,9
   8124c:	318e4b04 	addi	r6,r6,14636
   81250:	01c000c4 	movi	r7,3
   81254:	00843d00 	call	843d0 <write_message>
	write_message(0, 93, "Snare", 3);
   81258:	0009883a 	mov	r4,zero
   8125c:	01401744 	movi	r5,93
   81260:	01800274 	movhi	r6,9
   81264:	318e4d04 	addi	r6,r6,14644
   81268:	01c000c4 	movi	r7,3
   8126c:	00843d00 	call	843d0 <write_message>
	write_message(0, 143, "Hi Hat", 3);
   81270:	0009883a 	mov	r4,zero
   81274:	014023c4 	movi	r5,143
   81278:	01800274 	movhi	r6,9
   8127c:	318e4f04 	addi	r6,r6,14652
   81280:	01c000c4 	movi	r7,3
   81284:	00843d00 	call	843d0 <write_message>
	write_message(0, 193, "Clap", 3);
   81288:	0009883a 	mov	r4,zero
   8128c:	01403044 	movi	r5,193
   81290:	01800274 	movhi	r6,9
   81294:	318e5104 	addi	r6,r6,14660
   81298:	01c000c4 	movi	r7,3
   8129c:	00843d00 	call	843d0 <write_message>
	write_message(235, 225, "by AcouSteak", 2);
   812a0:	01003ac4 	movi	r4,235
   812a4:	01403844 	movi	r5,225
   812a8:	01800274 	movhi	r6,9
   812ac:	318e5304 	addi	r6,r6,14668
   812b0:	01c00084 	movi	r7,2
   812b4:	00843d00 	call	843d0 <write_message>
}
   812b8:	e037883a 	mov	sp,fp
   812bc:	dfc00117 	ldw	ra,4(sp)
   812c0:	df000017 	ldw	fp,0(sp)
   812c4:	dec00204 	addi	sp,sp,8
   812c8:	f800283a 	ret

000812cc <drawEmptySquareRow>:

static void drawEmptySquareRow(int x, int y, int length, int spacing, int N, int colour){
   812cc:	defff804 	addi	sp,sp,-32
   812d0:	dfc00715 	stw	ra,28(sp)
   812d4:	df000615 	stw	fp,24(sp)
   812d8:	df000604 	addi	fp,sp,24
   812dc:	e13ffc15 	stw	r4,-16(fp)
   812e0:	e17ffd15 	stw	r5,-12(fp)
   812e4:	e1bffe15 	stw	r6,-8(fp)
   812e8:	e1ffff15 	stw	r7,-4(fp)

	int currentX = x;
   812ec:	e0bffc17 	ldw	r2,-16(fp)
   812f0:	e0bffb15 	stw	r2,-20(fp)

	int i=0;
   812f4:	e03ffa15 	stw	zero,-24(fp)
	for(i=0; i<N; i++){
   812f8:	e03ffa15 	stw	zero,-24(fp)
   812fc:	00000e06 	br	81338 <drawEmptySquareRow+0x6c>
		drawEmptySquare(currentX, y, length, colour);
   81300:	e13ffb17 	ldw	r4,-20(fp)
   81304:	e17ffd17 	ldw	r5,-12(fp)
   81308:	e1bffe17 	ldw	r6,-8(fp)
   8130c:	e1c00317 	ldw	r7,12(fp)
   81310:	00816080 	call	81608 <drawEmptySquare>
		currentX = currentX + length + spacing;
   81314:	e0fffb17 	ldw	r3,-20(fp)
   81318:	e0bffe17 	ldw	r2,-8(fp)
   8131c:	1887883a 	add	r3,r3,r2
   81320:	e0bfff17 	ldw	r2,-4(fp)
   81324:	1885883a 	add	r2,r3,r2
   81328:	e0bffb15 	stw	r2,-20(fp)
static void drawEmptySquareRow(int x, int y, int length, int spacing, int N, int colour){

	int currentX = x;

	int i=0;
	for(i=0; i<N; i++){
   8132c:	e0bffa17 	ldw	r2,-24(fp)
   81330:	10800044 	addi	r2,r2,1
   81334:	e0bffa15 	stw	r2,-24(fp)
   81338:	e0fffa17 	ldw	r3,-24(fp)
   8133c:	e0800217 	ldw	r2,8(fp)
   81340:	18bfef16 	blt	r3,r2,81300 <drawEmptySquareRow+0x34>
		drawEmptySquare(currentX, y, length, colour);
		currentX = currentX + length + spacing;
	}
}
   81344:	e037883a 	mov	sp,fp
   81348:	dfc00117 	ldw	ra,4(sp)
   8134c:	df000017 	ldw	fp,0(sp)
   81350:	dec00204 	addi	sp,sp,8
   81354:	f800283a 	ret

00081358 <drawHLine>:

static void drawHLine(int x, int y, int length, int colour){
   81358:	defff904 	addi	sp,sp,-28
   8135c:	dfc00615 	stw	ra,24(sp)
   81360:	df000515 	stw	fp,20(sp)
   81364:	df000504 	addi	fp,sp,20
   81368:	e13ffc15 	stw	r4,-16(fp)
   8136c:	e17ffd15 	stw	r5,-12(fp)
   81370:	e1bffe15 	stw	r6,-8(fp)
   81374:	e1ffff15 	stw	r7,-4(fp)
	int i=0;
   81378:	e03ffb15 	stw	zero,-20(fp)
	for (i=0; i<length; i++){
   8137c:	e03ffb15 	stw	zero,-20(fp)
   81380:	00000b06 	br	813b0 <drawHLine+0x58>
		write(makeAddress(x+i,y),colour);
   81384:	e0fffc17 	ldw	r3,-16(fp)
   81388:	e0bffb17 	ldw	r2,-20(fp)
   8138c:	1889883a 	add	r4,r3,r2
   81390:	e17ffd17 	ldw	r5,-12(fp)
   81394:	008177c0 	call	8177c <makeAddress>
   81398:	1009883a 	mov	r4,r2
   8139c:	e17fff17 	ldw	r5,-4(fp)
   813a0:	00816f40 	call	816f4 <write>
	}
}

static void drawHLine(int x, int y, int length, int colour){
	int i=0;
	for (i=0; i<length; i++){
   813a4:	e0bffb17 	ldw	r2,-20(fp)
   813a8:	10800044 	addi	r2,r2,1
   813ac:	e0bffb15 	stw	r2,-20(fp)
   813b0:	e0fffb17 	ldw	r3,-20(fp)
   813b4:	e0bffe17 	ldw	r2,-8(fp)
   813b8:	18bff216 	blt	r3,r2,81384 <drawHLine+0x2c>
		write(makeAddress(x+i,y),colour);
	}
}
   813bc:	e037883a 	mov	sp,fp
   813c0:	dfc00117 	ldw	ra,4(sp)
   813c4:	df000017 	ldw	fp,0(sp)
   813c8:	dec00204 	addi	sp,sp,8
   813cc:	f800283a 	ret

000813d0 <move>:

static void move(int x, int y)
{
   813d0:	defffc04 	addi	sp,sp,-16
   813d4:	dfc00315 	stw	ra,12(sp)
   813d8:	df000215 	stw	fp,8(sp)
   813dc:	df000204 	addi	fp,sp,8
   813e0:	e13ffe15 	stw	r4,-8(fp)
   813e4:	e17fff15 	stw	r5,-4(fp)
	// On efface l'activation precedente
	drawEmptySquare(isSelected.x*10+3,isSelected.y*50+1+20,2,0);
   813e8:	008002f4 	movhi	r2,11
   813ec:	108a4c04 	addi	r2,r2,10544
   813f0:	10800017 	ldw	r2,0(r2)
   813f4:	108002a4 	muli	r2,r2,10
   813f8:	110000c4 	addi	r4,r2,3
   813fc:	008002f4 	movhi	r2,11
   81400:	108a4c04 	addi	r2,r2,10544
   81404:	10800117 	ldw	r2,4(r2)
   81408:	10800ca4 	muli	r2,r2,50
   8140c:	11400544 	addi	r5,r2,21
   81410:	01800084 	movi	r6,2
   81414:	000f883a 	mov	r7,zero
   81418:	00816080 	call	81608 <drawEmptySquare>

	isSelected.x += x;
   8141c:	008002f4 	movhi	r2,11
   81420:	108a4c04 	addi	r2,r2,10544
   81424:	10c00017 	ldw	r3,0(r2)
   81428:	e0bffe17 	ldw	r2,-8(fp)
   8142c:	1887883a 	add	r3,r3,r2
   81430:	008002f4 	movhi	r2,11
   81434:	108a4c04 	addi	r2,r2,10544
   81438:	10c00015 	stw	r3,0(r2)
	isSelected.y += y;
   8143c:	008002f4 	movhi	r2,11
   81440:	108a4c04 	addi	r2,r2,10544
   81444:	10c00117 	ldw	r3,4(r2)
   81448:	e0bfff17 	ldw	r2,-4(fp)
   8144c:	1887883a 	add	r3,r3,r2
   81450:	008002f4 	movhi	r2,11
   81454:	108a4c04 	addi	r2,r2,10544
   81458:	10c00115 	stw	r3,4(r2)

	// On evite les depassements hors grille
	if(isSelected.x < 0)
   8145c:	008002f4 	movhi	r2,11
   81460:	108a4c04 	addi	r2,r2,10544
   81464:	10800017 	ldw	r2,0(r2)
   81468:	1004403a 	cmpge	r2,r2,zero
   8146c:	1000051e 	bne	r2,zero,81484 <move+0xb4>
	{
		isSelected.x = L_SHEET-1;
   81470:	00c002f4 	movhi	r3,11
   81474:	18ca4c04 	addi	r3,r3,10544
   81478:	008007c4 	movi	r2,31
   8147c:	18800015 	stw	r2,0(r3)
   81480:	00000806 	br	814a4 <move+0xd4>
	}
	else if(isSelected.x > L_SHEET-1)
   81484:	008002f4 	movhi	r2,11
   81488:	108a4c04 	addi	r2,r2,10544
   8148c:	10800017 	ldw	r2,0(r2)
   81490:	10800810 	cmplti	r2,r2,32
   81494:	1000031e 	bne	r2,zero,814a4 <move+0xd4>
	{
		isSelected.x = 0;
   81498:	008002f4 	movhi	r2,11
   8149c:	108a4c04 	addi	r2,r2,10544
   814a0:	10000015 	stw	zero,0(r2)
	}
	if(isSelected.y < 0)
   814a4:	008002f4 	movhi	r2,11
   814a8:	108a4c04 	addi	r2,r2,10544
   814ac:	10800117 	ldw	r2,4(r2)
   814b0:	1004403a 	cmpge	r2,r2,zero
   814b4:	1000041e 	bne	r2,zero,814c8 <move+0xf8>
	{
		isSelected.y = 0;
   814b8:	008002f4 	movhi	r2,11
   814bc:	108a4c04 	addi	r2,r2,10544
   814c0:	10000115 	stw	zero,4(r2)
   814c4:	00000906 	br	814ec <move+0x11c>
	}
	else if(isSelected.y > N_INST-1)
   814c8:	008002f4 	movhi	r2,11
   814cc:	108a4c04 	addi	r2,r2,10544
   814d0:	10800117 	ldw	r2,4(r2)
   814d4:	10800110 	cmplti	r2,r2,4
   814d8:	1000041e 	bne	r2,zero,814ec <move+0x11c>
	{
		isSelected.y = N_INST-1;
   814dc:	00c002f4 	movhi	r3,11
   814e0:	18ca4c04 	addi	r3,r3,10544
   814e4:	008000c4 	movi	r2,3
   814e8:	18800115 	stw	r2,4(r3)
	}

	// On active la nouvelle position
	drawEmptySquare(isSelected.x*10+3,isSelected.y*50+1+20,2,3);
   814ec:	008002f4 	movhi	r2,11
   814f0:	108a4c04 	addi	r2,r2,10544
   814f4:	10800017 	ldw	r2,0(r2)
   814f8:	108002a4 	muli	r2,r2,10
   814fc:	110000c4 	addi	r4,r2,3
   81500:	008002f4 	movhi	r2,11
   81504:	108a4c04 	addi	r2,r2,10544
   81508:	10800117 	ldw	r2,4(r2)
   8150c:	10800ca4 	muli	r2,r2,50
   81510:	11400544 	addi	r5,r2,21
   81514:	01800084 	movi	r6,2
   81518:	01c000c4 	movi	r7,3
   8151c:	00816080 	call	81608 <drawEmptySquare>
}
   81520:	e037883a 	mov	sp,fp
   81524:	dfc00117 	ldw	ra,4(sp)
   81528:	df000017 	ldw	fp,0(sp)
   8152c:	dec00204 	addi	sp,sp,8
   81530:	f800283a 	ret

00081534 <drawVLine>:

static void drawVLine(int x, int y, int length, int colour){
   81534:	defff904 	addi	sp,sp,-28
   81538:	dfc00615 	stw	ra,24(sp)
   8153c:	df000515 	stw	fp,20(sp)
   81540:	df000504 	addi	fp,sp,20
   81544:	e13ffc15 	stw	r4,-16(fp)
   81548:	e17ffd15 	stw	r5,-12(fp)
   8154c:	e1bffe15 	stw	r6,-8(fp)
   81550:	e1ffff15 	stw	r7,-4(fp)
	int i=0;
   81554:	e03ffb15 	stw	zero,-20(fp)
	for (i=0;i<length;i++){
   81558:	e03ffb15 	stw	zero,-20(fp)
   8155c:	00000b06 	br	8158c <drawVLine+0x58>
		write(makeAddress(x,y+i),colour);
   81560:	e0fffd17 	ldw	r3,-12(fp)
   81564:	e0bffb17 	ldw	r2,-20(fp)
   81568:	188b883a 	add	r5,r3,r2
   8156c:	e13ffc17 	ldw	r4,-16(fp)
   81570:	008177c0 	call	8177c <makeAddress>
   81574:	1009883a 	mov	r4,r2
   81578:	e17fff17 	ldw	r5,-4(fp)
   8157c:	00816f40 	call	816f4 <write>
	drawEmptySquare(isSelected.x*10+3,isSelected.y*50+1+20,2,3);
}

static void drawVLine(int x, int y, int length, int colour){
	int i=0;
	for (i=0;i<length;i++){
   81580:	e0bffb17 	ldw	r2,-20(fp)
   81584:	10800044 	addi	r2,r2,1
   81588:	e0bffb15 	stw	r2,-20(fp)
   8158c:	e0fffb17 	ldw	r3,-20(fp)
   81590:	e0bffe17 	ldw	r2,-8(fp)
   81594:	18bff216 	blt	r3,r2,81560 <drawVLine+0x2c>
		write(makeAddress(x,y+i),colour);
	}
}
   81598:	e037883a 	mov	sp,fp
   8159c:	dfc00117 	ldw	ra,4(sp)
   815a0:	df000017 	ldw	fp,0(sp)
   815a4:	dec00204 	addi	sp,sp,8
   815a8:	f800283a 	ret

000815ac <cleanScreen>:

static void cleanScreen(){
   815ac:	defffc04 	addi	sp,sp,-16
   815b0:	dfc00315 	stw	ra,12(sp)
   815b4:	df000215 	stw	fp,8(sp)
   815b8:	df000204 	addi	fp,sp,8
	int allPixels = 131072;
   815bc:	008000b4 	movhi	r2,2
   815c0:	e0bfff15 	stw	r2,-4(fp)
	int a = 0;
   815c4:	e03ffe15 	stw	zero,-8(fp)
	for(a=0; a<= allPixels; a++){
   815c8:	e03ffe15 	stw	zero,-8(fp)
   815cc:	00000606 	br	815e8 <cleanScreen+0x3c>
		write((unsigned long) a, 0);
   815d0:	e13ffe17 	ldw	r4,-8(fp)
   815d4:	000b883a 	mov	r5,zero
   815d8:	00816f40 	call	816f4 <write>
}

static void cleanScreen(){
	int allPixels = 131072;
	int a = 0;
	for(a=0; a<= allPixels; a++){
   815dc:	e0bffe17 	ldw	r2,-8(fp)
   815e0:	10800044 	addi	r2,r2,1
   815e4:	e0bffe15 	stw	r2,-8(fp)
   815e8:	e0fffe17 	ldw	r3,-8(fp)
   815ec:	e0bfff17 	ldw	r2,-4(fp)
   815f0:	10fff70e 	bge	r2,r3,815d0 <cleanScreen+0x24>
		write((unsigned long) a, 0);
	}
}
   815f4:	e037883a 	mov	sp,fp
   815f8:	dfc00117 	ldw	ra,4(sp)
   815fc:	df000017 	ldw	fp,0(sp)
   81600:	dec00204 	addi	sp,sp,8
   81604:	f800283a 	ret

00081608 <drawEmptySquare>:

static void drawEmptySquare(int x, int y, int length, int colour){
   81608:	defffa04 	addi	sp,sp,-24
   8160c:	dfc00515 	stw	ra,20(sp)
   81610:	df000415 	stw	fp,16(sp)
   81614:	df000404 	addi	fp,sp,16
   81618:	e13ffc15 	stw	r4,-16(fp)
   8161c:	e17ffd15 	stw	r5,-12(fp)
   81620:	e1bffe15 	stw	r6,-8(fp)
   81624:	e1ffff15 	stw	r7,-4(fp)
	drawHLine(x, 		y, 			length,		colour);
   81628:	e13ffc17 	ldw	r4,-16(fp)
   8162c:	e17ffd17 	ldw	r5,-12(fp)
   81630:	e1bffe17 	ldw	r6,-8(fp)
   81634:	e1ffff17 	ldw	r7,-4(fp)
   81638:	00813580 	call	81358 <drawHLine>
	drawHLine(x, 		y+length, 	length,		colour);
   8163c:	e0fffd17 	ldw	r3,-12(fp)
   81640:	e0bffe17 	ldw	r2,-8(fp)
   81644:	188b883a 	add	r5,r3,r2
   81648:	e13ffc17 	ldw	r4,-16(fp)
   8164c:	e1bffe17 	ldw	r6,-8(fp)
   81650:	e1ffff17 	ldw	r7,-4(fp)
   81654:	00813580 	call	81358 <drawHLine>
	drawVLine(x, 		y, 			length,		colour);
   81658:	e13ffc17 	ldw	r4,-16(fp)
   8165c:	e17ffd17 	ldw	r5,-12(fp)
   81660:	e1bffe17 	ldw	r6,-8(fp)
   81664:	e1ffff17 	ldw	r7,-4(fp)
   81668:	00815340 	call	81534 <drawVLine>
	drawVLine(x+length, y, 			length+1,	colour);
   8166c:	e0fffc17 	ldw	r3,-16(fp)
   81670:	e0bffe17 	ldw	r2,-8(fp)
   81674:	1889883a 	add	r4,r3,r2
   81678:	e0bffe17 	ldw	r2,-8(fp)
   8167c:	11800044 	addi	r6,r2,1
   81680:	e17ffd17 	ldw	r5,-12(fp)
   81684:	e1ffff17 	ldw	r7,-4(fp)
   81688:	00815340 	call	81534 <drawVLine>
}
   8168c:	e037883a 	mov	sp,fp
   81690:	dfc00117 	ldw	ra,4(sp)
   81694:	df000017 	ldw	fp,0(sp)
   81698:	dec00204 	addi	sp,sp,8
   8169c:	f800283a 	ret

000816a0 <enableWrite>:

static void enableWrite(){
   816a0:	deffff04 	addi	sp,sp,-4
   816a4:	df000015 	stw	fp,0(sp)
   816a8:	d839883a 	mov	fp,sp
	IOWR(WR_EN_BASE,0,1);
   816ac:	00c00434 	movhi	r3,16
   816b0:	18c49404 	addi	r3,r3,4688
   816b4:	00800044 	movi	r2,1
   816b8:	18800035 	stwio	r2,0(r3)
}
   816bc:	e037883a 	mov	sp,fp
   816c0:	df000017 	ldw	fp,0(sp)
   816c4:	dec00104 	addi	sp,sp,4
   816c8:	f800283a 	ret

000816cc <disableWrite>:

static void disableWrite(){
   816cc:	deffff04 	addi	sp,sp,-4
   816d0:	df000015 	stw	fp,0(sp)
   816d4:	d839883a 	mov	fp,sp
	IOWR(WR_EN_BASE,0,0);
   816d8:	00800434 	movhi	r2,16
   816dc:	10849404 	addi	r2,r2,4688
   816e0:	10000035 	stwio	zero,0(r2)
}
   816e4:	e037883a 	mov	sp,fp
   816e8:	df000017 	ldw	fp,0(sp)
   816ec:	dec00104 	addi	sp,sp,4
   816f0:	f800283a 	ret

000816f4 <write>:

static void write(unsigned long address, int colour){
   816f4:	defffc04 	addi	sp,sp,-16
   816f8:	dfc00315 	stw	ra,12(sp)
   816fc:	df000215 	stw	fp,8(sp)
   81700:	df000204 	addi	fp,sp,8
   81704:	e13ffe15 	stw	r4,-8(fp)
   81708:	e17fff15 	stw	r5,-4(fp)

	if(colour>3 || colour<0)
   8170c:	e0bfff17 	ldw	r2,-4(fp)
   81710:	10800108 	cmpgei	r2,r2,4
   81714:	1000031e 	bne	r2,zero,81724 <write+0x30>
   81718:	e0bfff17 	ldw	r2,-4(fp)
   8171c:	1004403a 	cmpge	r2,r2,zero
   81720:	1000061e 	bne	r2,zero,8173c <write+0x48>
	{
		printf("\t[ERROR] In write : colour = %d, set to 3.\n",colour);
   81724:	01000274 	movhi	r4,9
   81728:	210e5704 	addi	r4,r4,14684
   8172c:	e17fff17 	ldw	r5,-4(fp)
   81730:	00888180 	call	88818 <printf>
		colour = 3;
   81734:	008000c4 	movi	r2,3
   81738:	e0bfff15 	stw	r2,-4(fp)
	}

	disableWrite();
   8173c:	00816cc0 	call	816cc <disableWrite>
	IOWR(WR_ADDRESS_BASE,0,address);
   81740:	e0fffe17 	ldw	r3,-8(fp)
   81744:	00800434 	movhi	r2,16
   81748:	10848c04 	addi	r2,r2,4656
   8174c:	10c00035 	stwio	r3,0(r2)
	IOWR(COLOR_OUT_BASE,0,colour);
   81750:	00c00434 	movhi	r3,16
   81754:	18c49004 	addi	r3,r3,4672
   81758:	e0bfff17 	ldw	r2,-4(fp)
   8175c:	18800035 	stwio	r2,0(r3)
	enableWrite();
   81760:	00816a00 	call	816a0 <enableWrite>
	disableWrite();
   81764:	00816cc0 	call	816cc <disableWrite>
}
   81768:	e037883a 	mov	sp,fp
   8176c:	dfc00117 	ldw	ra,4(sp)
   81770:	df000017 	ldw	fp,0(sp)
   81774:	dec00204 	addi	sp,sp,8
   81778:	f800283a 	ret

0008177c <makeAddress>:

static unsigned long makeAddress(int x, int y){
   8177c:	defffb04 	addi	sp,sp,-20
   81780:	dfc00415 	stw	ra,16(sp)
   81784:	df000315 	stw	fp,12(sp)
   81788:	df000304 	addi	fp,sp,12
   8178c:	e13ffe15 	stw	r4,-8(fp)
   81790:	e17fff15 	stw	r5,-4(fp)


	if(x >= WIDTH || y >= HEIGHT)
   81794:	e0bffe17 	ldw	r2,-8(fp)
   81798:	10805008 	cmpgei	r2,r2,320
   8179c:	1000031e 	bne	r2,zero,817ac <makeAddress+0x30>
   817a0:	e0bfff17 	ldw	r2,-4(fp)
   817a4:	10803c10 	cmplti	r2,r2,240
   817a8:	1000091e 	bne	r2,zero,817d0 <makeAddress+0x54>
	{
		printf("\t[ERROR] In MakeAddress X = %d, Y = %d\n",x, y);
   817ac:	01000274 	movhi	r4,9
   817b0:	210e6204 	addi	r4,r4,14728
   817b4:	e17ffe17 	ldw	r5,-8(fp)
   817b8:	e1bfff17 	ldw	r6,-4(fp)
   817bc:	00888180 	call	88818 <printf>
		x = WIDTH-1;
   817c0:	00804fc4 	movi	r2,319
   817c4:	e0bffe15 	stw	r2,-8(fp)
		y = HEIGHT-1;
   817c8:	00803bc4 	movi	r2,239
   817cc:	e0bfff15 	stw	r2,-4(fp)
	}

	unsigned long address = (((unsigned long)y) << 9) + ((unsigned long)x);
   817d0:	e0bfff17 	ldw	r2,-4(fp)
   817d4:	1006927a 	slli	r3,r2,9
   817d8:	e0bffe17 	ldw	r2,-8(fp)
   817dc:	1885883a 	add	r2,r3,r2
   817e0:	e0bffd15 	stw	r2,-12(fp)

	return address;
   817e4:	e0bffd17 	ldw	r2,-12(fp)
}
   817e8:	e037883a 	mov	sp,fp
   817ec:	dfc00117 	ldw	ra,4(sp)
   817f0:	df000017 	ldw	fp,0(sp)
   817f4:	dec00204 	addi	sp,sp,8
   817f8:	f800283a 	ret

000817fc <drawMire>:

static void drawMire()
{
   817fc:	defffd04 	addi	sp,sp,-12
   81800:	dfc00215 	stw	ra,8(sp)
   81804:	df000115 	stw	fp,4(sp)
   81808:	df000104 	addi	fp,sp,4
	int i;
	for(i=0;i<32;i++)
   8180c:	e03fff15 	stw	zero,-4(fp)
   81810:	00000b06 	br	81840 <drawMire+0x44>
	{
	  drawHLine(0,2*i,10*i,3);
   81814:	e0bfff17 	ldw	r2,-4(fp)
   81818:	1085883a 	add	r2,r2,r2
   8181c:	100b883a 	mov	r5,r2
   81820:	e0bfff17 	ldw	r2,-4(fp)
   81824:	118002a4 	muli	r6,r2,10
   81828:	0009883a 	mov	r4,zero
   8182c:	01c000c4 	movi	r7,3
   81830:	00813580 	call	81358 <drawHLine>
}

static void drawMire()
{
	int i;
	for(i=0;i<32;i++)
   81834:	e0bfff17 	ldw	r2,-4(fp)
   81838:	10800044 	addi	r2,r2,1
   8183c:	e0bfff15 	stw	r2,-4(fp)
   81840:	e0bfff17 	ldw	r2,-4(fp)
   81844:	10800810 	cmplti	r2,r2,32
   81848:	103ff21e 	bne	r2,zero,81814 <drawMire+0x18>
	{
	  drawHLine(0,2*i,10*i,3);
	}

	for(i=0;i<24;i++)
   8184c:	e03fff15 	stw	zero,-4(fp)
   81850:	00000b06 	br	81880 <drawMire+0x84>
	{
	drawVLine(2*i,0,10*i,3);
   81854:	e0bfff17 	ldw	r2,-4(fp)
   81858:	1085883a 	add	r2,r2,r2
   8185c:	1009883a 	mov	r4,r2
   81860:	e0bfff17 	ldw	r2,-4(fp)
   81864:	118002a4 	muli	r6,r2,10
   81868:	000b883a 	mov	r5,zero
   8186c:	01c000c4 	movi	r7,3
   81870:	00815340 	call	81534 <drawVLine>
	for(i=0;i<32;i++)
	{
	  drawHLine(0,2*i,10*i,3);
	}

	for(i=0;i<24;i++)
   81874:	e0bfff17 	ldw	r2,-4(fp)
   81878:	10800044 	addi	r2,r2,1
   8187c:	e0bfff15 	stw	r2,-4(fp)
   81880:	e0bfff17 	ldw	r2,-4(fp)
   81884:	10800610 	cmplti	r2,r2,24
   81888:	103ff21e 	bne	r2,zero,81854 <drawMire+0x58>
	{
	drawVLine(2*i,0,10*i,3);
	}

	drawHLine(0,0,10,1);
   8188c:	0009883a 	mov	r4,zero
   81890:	000b883a 	mov	r5,zero
   81894:	01800284 	movi	r6,10
   81898:	01c00044 	movi	r7,1
   8189c:	00813580 	call	81358 <drawHLine>
	drawVLine(0,0,10,1);
   818a0:	0009883a 	mov	r4,zero
   818a4:	000b883a 	mov	r5,zero
   818a8:	01800284 	movi	r6,10
   818ac:	01c00044 	movi	r7,1
   818b0:	00815340 	call	81534 <drawVLine>
	drawHLine(0,64,320,1);
   818b4:	0009883a 	mov	r4,zero
   818b8:	01401004 	movi	r5,64
   818bc:	01805004 	movi	r6,320
   818c0:	01c00044 	movi	r7,1
   818c4:	00813580 	call	81358 <drawHLine>
	drawVLine(48,0,240,1);
   818c8:	01000c04 	movi	r4,48
   818cc:	000b883a 	mov	r5,zero
   818d0:	01803c04 	movi	r6,240
   818d4:	01c00044 	movi	r7,1
   818d8:	00815340 	call	81534 <drawVLine>
	drawEmptySquare(220, 180, 16,3);
   818dc:	01003704 	movi	r4,220
   818e0:	01402d04 	movi	r5,180
   818e4:	01800404 	movi	r6,16
   818e8:	01c000c4 	movi	r7,3
   818ec:	00816080 	call	81608 <drawEmptySquare>
}
   818f0:	e037883a 	mov	sp,fp
   818f4:	dfc00117 	ldw	ra,4(sp)
   818f8:	df000017 	ldw	fp,0(sp)
   818fc:	dec00204 	addi	sp,sp,8
   81900:	f800283a 	ret

00081904 <handle_KICK_interrupt>:


static void handle_KICK_interrupt(void* context, alt_u32 id){
   81904:	defffd04 	addi	sp,sp,-12
   81908:	df000215 	stw	fp,8(sp)
   8190c:	df000204 	addi	fp,sp,8
   81910:	e13ffe15 	stw	r4,-8(fp)
   81914:	e17fff15 	stw	r5,-4(fp)
	current_kick_sample = 0;
   81918:	d0201315 	stw	zero,-32692(gp)
	kick_is_playing = 1;
   8191c:	00800044 	movi	r2,1
   81920:	d0a01715 	stw	r2,-32676(gp)
	IOWR(KICK_IRQ_BASE,3,1);
   81924:	00c00434 	movhi	r3,16
   81928:	18c46f04 	addi	r3,r3,4540
   8192c:	00800044 	movi	r2,1
   81930:	18800035 	stwio	r2,0(r3)
}
   81934:	e037883a 	mov	sp,fp
   81938:	df000017 	ldw	fp,0(sp)
   8193c:	dec00104 	addi	sp,sp,4
   81940:	f800283a 	ret

00081944 <handle_SNARE_interrupt>:
static void handle_SNARE_interrupt(void* context, alt_u32 id){
   81944:	defffd04 	addi	sp,sp,-12
   81948:	df000215 	stw	fp,8(sp)
   8194c:	df000204 	addi	fp,sp,8
   81950:	e13ffe15 	stw	r4,-8(fp)
   81954:	e17fff15 	stw	r5,-4(fp)
	current_snare_sample = 0;
   81958:	d0201515 	stw	zero,-32684(gp)
	snare_is_playing = 1;
   8195c:	00800044 	movi	r2,1
   81960:	d0a01915 	stw	r2,-32668(gp)
	IOWR(SNARE_IRQ_BASE,3,1);
   81964:	00c00434 	movhi	r3,16
   81968:	18c46b04 	addi	r3,r3,4524
   8196c:	00800044 	movi	r2,1
   81970:	18800035 	stwio	r2,0(r3)
}
   81974:	e037883a 	mov	sp,fp
   81978:	df000017 	ldw	fp,0(sp)
   8197c:	dec00104 	addi	sp,sp,4
   81980:	f800283a 	ret

00081984 <handle_CLAP_interrupt>:
static void handle_CLAP_interrupt(void* context, alt_u32 id){
   81984:	defffd04 	addi	sp,sp,-12
   81988:	df000215 	stw	fp,8(sp)
   8198c:	df000204 	addi	fp,sp,8
   81990:	e13ffe15 	stw	r4,-8(fp)
   81994:	e17fff15 	stw	r5,-4(fp)
	current_clap_sample = 0;
   81998:	d0201415 	stw	zero,-32688(gp)
	clap_is_playing = 1;
   8199c:	00800044 	movi	r2,1
   819a0:	d0a01815 	stw	r2,-32672(gp)
	IOWR(CLAP_IRQ_BASE,3,1);
   819a4:	00c00434 	movhi	r3,16
   819a8:	18c46304 	addi	r3,r3,4492
   819ac:	00800044 	movi	r2,1
   819b0:	18800035 	stwio	r2,0(r3)
}
   819b4:	e037883a 	mov	sp,fp
   819b8:	df000017 	ldw	fp,0(sp)
   819bc:	dec00104 	addi	sp,sp,4
   819c0:	f800283a 	ret

000819c4 <handle_HH_interrupt>:
static void handle_HH_interrupt(void* context, alt_u32 id){
   819c4:	defffd04 	addi	sp,sp,-12
   819c8:	df000215 	stw	fp,8(sp)
   819cc:	df000204 	addi	fp,sp,8
   819d0:	e13ffe15 	stw	r4,-8(fp)
   819d4:	e17fff15 	stw	r5,-4(fp)
	current_hh_sample = 0;
   819d8:	d0201615 	stw	zero,-32680(gp)
	hh_is_playing = 1;
   819dc:	00800044 	movi	r2,1
   819e0:	d0a01a15 	stw	r2,-32664(gp)
	IOWR(HH_IRQ_BASE,3,1);
   819e4:	00c00434 	movhi	r3,16
   819e8:	18c46704 	addi	r3,r3,4508
   819ec:	00800044 	movi	r2,1
   819f0:	18800035 	stwio	r2,0(r3)
}
   819f4:	e037883a 	mov	sp,fp
   819f8:	df000017 	ldw	fp,0(sp)
   819fc:	dec00104 	addi	sp,sp,4
   81a00:	f800283a 	ret

00081a04 <write_letter>:

// Gene ecriture

static int write_letter(int x, int y, char lettre, int color){
   81a04:	defff804 	addi	sp,sp,-32
   81a08:	dfc00715 	stw	ra,28(sp)
   81a0c:	df000615 	stw	fp,24(sp)
   81a10:	df000604 	addi	fp,sp,24
   81a14:	e13ffa15 	stw	r4,-24(fp)
   81a18:	e17ffb15 	stw	r5,-20(fp)
   81a1c:	e1fffd15 	stw	r7,-12(fp)
   81a20:	e1bffc05 	stb	r6,-16(fp)
	switch(lettre){
   81a24:	e0bffc07 	ldb	r2,-16(fp)
   81a28:	10bff804 	addi	r2,r2,-32
   81a2c:	e0bfff15 	stw	r2,-4(fp)
   81a30:	e0ffff17 	ldw	r3,-4(fp)
   81a34:	188016e8 	cmpgeui	r2,r3,91
   81a38:	100a5e1e 	bne	r2,zero,843b4 <write_letter+0x29b0>
   81a3c:	e13fff17 	ldw	r4,-4(fp)
   81a40:	e13fff17 	ldw	r4,-4(fp)
   81a44:	2105883a 	add	r2,r4,r4
   81a48:	1087883a 	add	r3,r2,r2
   81a4c:	00800234 	movhi	r2,8
   81a50:	10869804 	addi	r2,r2,6752
   81a54:	1885883a 	add	r2,r3,r2
   81a58:	10800017 	ldw	r2,0(r2)
   81a5c:	1000683a 	jmp	r2
   81a60:	00081bcc 	andi	zero,zero,8303
   81a64:	000843b4 	movhi	zero,8462
   81a68:	000843b4 	movhi	zero,8462
   81a6c:	000843b4 	movhi	zero,8462
   81a70:	000843b4 	movhi	zero,8462
   81a74:	000843b4 	movhi	zero,8462
   81a78:	000843b4 	movhi	zero,8462
   81a7c:	000843b4 	movhi	zero,8462
   81a80:	000843b4 	movhi	zero,8462
   81a84:	000843b4 	movhi	zero,8462
   81a88:	000843b4 	movhi	zero,8462
   81a8c:	000843b4 	movhi	zero,8462
   81a90:	000843b4 	movhi	zero,8462
   81a94:	000843b4 	movhi	zero,8462
   81a98:	000843b4 	movhi	zero,8462
   81a9c:	000843b4 	movhi	zero,8462
   81aa0:	00083ab0 	cmpltui	zero,zero,8426
   81aa4:	00083b80 	call	83b8 <__reset-0x77c48>
   81aa8:	00083be0 	cmpeqi	zero,zero,8431
   81aac:	00083cb0 	cmpltui	zero,zero,8434
   81ab0:	00083d80 	call	83d8 <__reset-0x77c28>
   81ab4:	00083e18 	cmpnei	zero,zero,8440
   81ab8:	00083ecc 	andi	zero,zero,8443
   81abc:	00083f80 	call	83f8 <__reset-0x77c08>
   81ac0:	00084018 	cmpnei	zero,zero,8448
   81ac4:	000840e8 	cmpgeui	zero,zero,8451
   81ac8:	000843b4 	movhi	zero,8462
   81acc:	000843b4 	movhi	zero,8462
   81ad0:	000843b4 	movhi	zero,8462
   81ad4:	000843b4 	movhi	zero,8462
   81ad8:	000843b4 	movhi	zero,8462
   81adc:	0008419c 	xori	zero,zero,8454
   81ae0:	000843b4 	movhi	zero,8462
   81ae4:	00081bd8 	cmpnei	zero,zero,8303
   81ae8:	00081c88 	cmpgei	zero,zero,8306
   81aec:	00081d34 	movhi	zero,8308
   81af0:	00081dc8 	cmpgei	zero,zero,8311
   81af4:	00081e74 	movhi	zero,8313
   81af8:	00081ee8 	cmpgeui	zero,zero,8315
   81afc:	00081f40 	call	81f4 <__reset-0x77e0c>
   81b00:	00081fd4 	movui	zero,8319
   81b04:	0008202c 	andhi	zero,zero,8320
   81b08:	00082084 	movi	zero,8322
   81b0c:	000820f8 	rdprs	zero,zero,8323
   81b10:	000821dc 	xori	zero,zero,8327
   81b14:	0008221c 	xori	zero,zero,8328
   81b18:	000822e4 	muli	zero,zero,8331
   81b1c:	00082390 	cmplti	zero,zero,8334
   81b20:	00082408 	cmpgei	zero,zero,8336
   81b24:	0008247c 	xorhi	zero,zero,8337
   81b28:	0008252c 	andhi	zero,zero,8340
   81b2c:	000825f4 	movhi	zero,8343
   81b30:	000826dc 	xori	zero,zero,8347
   81b34:	00082718 	cmpnei	zero,zero,8348
   81b38:	00082770 	cmpltui	zero,zero,8349
   81b3c:	00082838 	rdprs	zero,zero,8352
   81b40:	00082938 	rdprs	zero,zero,8356
   81b44:	00082afc 	xorhi	zero,zero,8363
   81b48:	00082bfc 	xorhi	zero,zero,8367
   81b4c:	000843b4 	movhi	zero,8462
   81b50:	000843b4 	movhi	zero,8462
   81b54:	000843b4 	movhi	zero,8462
   81b58:	000843b4 	movhi	zero,8462
   81b5c:	000843b4 	movhi	zero,8462
   81b60:	000843b4 	movhi	zero,8462
   81b64:	00082ce4 	muli	zero,zero,8371
   81b68:	00082d7c 	xorhi	zero,zero,8373
   81b6c:	00082df4 	movhi	zero,8375
   81b70:	00082e54 	movui	zero,8377
   81b74:	00082ecc 	andi	zero,zero,8379
   81b78:	00082f64 	muli	zero,zero,8381
   81b7c:	00082fdc 	xori	zero,zero,8383
   81b80:	00083090 	cmplti	zero,zero,8386
   81b84:	000830ec 	andhi	zero,zero,8387
   81b88:	00083130 	cmpltui	zero,zero,8388
   81b8c:	000831ac 	andhi	zero,zero,8390
   81b90:	0008325c 	xori	zero,zero,8393
   81b94:	000832b8 	rdprs	zero,zero,8394
   81b98:	00083388 	cmpgei	zero,zero,8398
   81b9c:	000833e8 	cmpgeui	zero,zero,8399
   81ba0:	00083464 	muli	zero,zero,8401
   81ba4:	000834e0 	cmpeqi	zero,zero,8403
   81ba8:	0008355c 	xori	zero,zero,8405
   81bac:	000835d8 	cmpnei	zero,zero,8407
   81bb0:	00083670 	cmpltui	zero,zero,8409
   81bb4:	000836e8 	cmpgeui	zero,zero,8411
   81bb8:	00083748 	cmpgei	zero,zero,8413
   81bbc:	000837e0 	cmpeqi	zero,zero,8415
   81bc0:	00083878 	rdprs	zero,zero,8417
   81bc4:	00083980 	call	8398 <__reset-0x77c68>
   81bc8:	00083a18 	cmpnei	zero,zero,8424
		case ' ':
			return 7;
   81bcc:	008001c4 	movi	r2,7
   81bd0:	e0bffe15 	stw	r2,-8(fp)
   81bd4:	0009f806 	br	843b8 <write_letter+0x29b4>
		case 'A':
			drawVLine(x+1,y+2,6,color);
   81bd8:	e0bffa17 	ldw	r2,-24(fp)
   81bdc:	11000044 	addi	r4,r2,1
   81be0:	e0bffb17 	ldw	r2,-20(fp)
   81be4:	11400084 	addi	r5,r2,2
   81be8:	01800184 	movi	r6,6
   81bec:	e1fffd17 	ldw	r7,-12(fp)
   81bf0:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+2,6,color);
   81bf4:	e0bffa17 	ldw	r2,-24(fp)
   81bf8:	11000184 	addi	r4,r2,6
   81bfc:	e0bffb17 	ldw	r2,-20(fp)
   81c00:	11400084 	addi	r5,r2,2
   81c04:	01800184 	movi	r6,6
   81c08:	e1fffd17 	ldw	r7,-12(fp)
   81c0c:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+4,6,color);
   81c10:	e0bffa17 	ldw	r2,-24(fp)
   81c14:	11000044 	addi	r4,r2,1
   81c18:	e0bffb17 	ldw	r2,-20(fp)
   81c1c:	11400104 	addi	r5,r2,4
   81c20:	01800184 	movi	r6,6
   81c24:	e1fffd17 	ldw	r7,-12(fp)
   81c28:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y,2,color);
   81c2c:	e0bffa17 	ldw	r2,-24(fp)
   81c30:	110000c4 	addi	r4,r2,3
   81c34:	e17ffb17 	ldw	r5,-20(fp)
   81c38:	01800084 	movi	r6,2
   81c3c:	e1fffd17 	ldw	r7,-12(fp)
   81c40:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+1,1,color);
   81c44:	e0bffa17 	ldw	r2,-24(fp)
   81c48:	11000084 	addi	r4,r2,2
   81c4c:	e0bffb17 	ldw	r2,-20(fp)
   81c50:	11400044 	addi	r5,r2,1
   81c54:	01800044 	movi	r6,1
   81c58:	e1fffd17 	ldw	r7,-12(fp)
   81c5c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+1,1,color);
   81c60:	e0bffa17 	ldw	r2,-24(fp)
   81c64:	11000144 	addi	r4,r2,5
   81c68:	e0bffb17 	ldw	r2,-20(fp)
   81c6c:	11400044 	addi	r5,r2,1
   81c70:	01800044 	movi	r6,1
   81c74:	e1fffd17 	ldw	r7,-12(fp)
   81c78:	00813580 	call	81358 <drawHLine>
			return 8;
   81c7c:	00c00204 	movi	r3,8
   81c80:	e0fffe15 	stw	r3,-8(fp)
   81c84:	0009cc06 	br	843b8 <write_letter+0x29b4>
		case 'B':
			drawVLine(x+1,y,8,color);
   81c88:	e0bffa17 	ldw	r2,-24(fp)
   81c8c:	11000044 	addi	r4,r2,1
   81c90:	e17ffb17 	ldw	r5,-20(fp)
   81c94:	01800204 	movi	r6,8
   81c98:	e1fffd17 	ldw	r7,-12(fp)
   81c9c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+1,2,color);
   81ca0:	e0bffa17 	ldw	r2,-24(fp)
   81ca4:	11000144 	addi	r4,r2,5
   81ca8:	e0bffb17 	ldw	r2,-20(fp)
   81cac:	11400044 	addi	r5,r2,1
   81cb0:	01800084 	movi	r6,2
   81cb4:	e1fffd17 	ldw	r7,-12(fp)
   81cb8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+4,3,color);
   81cbc:	e0bffa17 	ldw	r2,-24(fp)
   81cc0:	11000144 	addi	r4,r2,5
   81cc4:	e0bffb17 	ldw	r2,-20(fp)
   81cc8:	11400104 	addi	r5,r2,4
   81ccc:	018000c4 	movi	r6,3
   81cd0:	e1fffd17 	ldw	r7,-12(fp)
   81cd4:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y,4,color);
   81cd8:	e0bffa17 	ldw	r2,-24(fp)
   81cdc:	11000044 	addi	r4,r2,1
   81ce0:	e17ffb17 	ldw	r5,-20(fp)
   81ce4:	01800104 	movi	r6,4
   81ce8:	e1fffd17 	ldw	r7,-12(fp)
   81cec:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+3,4,color);
   81cf0:	e0bffa17 	ldw	r2,-24(fp)
   81cf4:	11000044 	addi	r4,r2,1
   81cf8:	e0bffb17 	ldw	r2,-20(fp)
   81cfc:	114000c4 	addi	r5,r2,3
   81d00:	01800104 	movi	r6,4
   81d04:	e1fffd17 	ldw	r7,-12(fp)
   81d08:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,4,color);
   81d0c:	e0bffa17 	ldw	r2,-24(fp)
   81d10:	11000044 	addi	r4,r2,1
   81d14:	e0bffb17 	ldw	r2,-20(fp)
   81d18:	114001c4 	addi	r5,r2,7
   81d1c:	01800104 	movi	r6,4
   81d20:	e1fffd17 	ldw	r7,-12(fp)
   81d24:	00813580 	call	81358 <drawHLine>
			return 7;
   81d28:	010001c4 	movi	r4,7
   81d2c:	e13ffe15 	stw	r4,-8(fp)
   81d30:	0009a106 	br	843b8 <write_letter+0x29b4>
		case 'C':
			drawVLine(x+1,y+1,6,color);
   81d34:	e0bffa17 	ldw	r2,-24(fp)
   81d38:	11000044 	addi	r4,r2,1
   81d3c:	e0bffb17 	ldw	r2,-20(fp)
   81d40:	11400044 	addi	r5,r2,1
   81d44:	01800184 	movi	r6,6
   81d48:	e1fffd17 	ldw	r7,-12(fp)
   81d4c:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y,4,color);
   81d50:	e0bffa17 	ldw	r2,-24(fp)
   81d54:	11000084 	addi	r4,r2,2
   81d58:	e17ffb17 	ldw	r5,-20(fp)
   81d5c:	01800104 	movi	r6,4
   81d60:	e1fffd17 	ldw	r7,-12(fp)
   81d64:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,4,color);
   81d68:	e0bffa17 	ldw	r2,-24(fp)
   81d6c:	11000084 	addi	r4,r2,2
   81d70:	e0bffb17 	ldw	r2,-20(fp)
   81d74:	114001c4 	addi	r5,r2,7
   81d78:	01800104 	movi	r6,4
   81d7c:	e1fffd17 	ldw	r7,-12(fp)
   81d80:	00813580 	call	81358 <drawHLine>
			drawHLine(x+6,y+1,1,color);
   81d84:	e0bffa17 	ldw	r2,-24(fp)
   81d88:	11000184 	addi	r4,r2,6
   81d8c:	e0bffb17 	ldw	r2,-20(fp)
   81d90:	11400044 	addi	r5,r2,1
   81d94:	01800044 	movi	r6,1
   81d98:	e1fffd17 	ldw	r7,-12(fp)
   81d9c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+6,y+6,1,color);
   81da0:	e0bffa17 	ldw	r2,-24(fp)
   81da4:	11000184 	addi	r4,r2,6
   81da8:	e0bffb17 	ldw	r2,-20(fp)
   81dac:	11400184 	addi	r5,r2,6
   81db0:	01800044 	movi	r6,1
   81db4:	e1fffd17 	ldw	r7,-12(fp)
   81db8:	00813580 	call	81358 <drawHLine>
			return 8;
   81dbc:	00800204 	movi	r2,8
   81dc0:	e0bffe15 	stw	r2,-8(fp)
   81dc4:	00097c06 	br	843b8 <write_letter+0x29b4>
		case 'D':
			drawVLine(x+1,y,8,color);
   81dc8:	e0bffa17 	ldw	r2,-24(fp)
   81dcc:	11000044 	addi	r4,r2,1
   81dd0:	e17ffb17 	ldw	r5,-20(fp)
   81dd4:	01800204 	movi	r6,8
   81dd8:	e1fffd17 	ldw	r7,-12(fp)
   81ddc:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+2,4,color);
   81de0:	e0bffa17 	ldw	r2,-24(fp)
   81de4:	11000184 	addi	r4,r2,6
   81de8:	e0bffb17 	ldw	r2,-20(fp)
   81dec:	11400084 	addi	r5,r2,2
   81df0:	01800104 	movi	r6,4
   81df4:	e1fffd17 	ldw	r7,-12(fp)
   81df8:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y,4,color);
   81dfc:	e0bffa17 	ldw	r2,-24(fp)
   81e00:	11000044 	addi	r4,r2,1
   81e04:	e17ffb17 	ldw	r5,-20(fp)
   81e08:	01800104 	movi	r6,4
   81e0c:	e1fffd17 	ldw	r7,-12(fp)
   81e10:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,4,color);
   81e14:	e0bffa17 	ldw	r2,-24(fp)
   81e18:	11000044 	addi	r4,r2,1
   81e1c:	e0bffb17 	ldw	r2,-20(fp)
   81e20:	114001c4 	addi	r5,r2,7
   81e24:	01800104 	movi	r6,4
   81e28:	e1fffd17 	ldw	r7,-12(fp)
   81e2c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+1,1,color);
   81e30:	e0bffa17 	ldw	r2,-24(fp)
   81e34:	11000144 	addi	r4,r2,5
   81e38:	e0bffb17 	ldw	r2,-20(fp)
   81e3c:	11400044 	addi	r5,r2,1
   81e40:	01800044 	movi	r6,1
   81e44:	e1fffd17 	ldw	r7,-12(fp)
   81e48:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+6,1,color);
   81e4c:	e0bffa17 	ldw	r2,-24(fp)
   81e50:	11000144 	addi	r4,r2,5
   81e54:	e0bffb17 	ldw	r2,-20(fp)
   81e58:	11400184 	addi	r5,r2,6
   81e5c:	01800044 	movi	r6,1
   81e60:	e1fffd17 	ldw	r7,-12(fp)
   81e64:	00813580 	call	81358 <drawHLine>
			return 8;
   81e68:	00c00204 	movi	r3,8
   81e6c:	e0fffe15 	stw	r3,-8(fp)
   81e70:	00095106 	br	843b8 <write_letter+0x29b4>

		case 'E':
			drawVLine(x+1,y,8,color);
   81e74:	e0bffa17 	ldw	r2,-24(fp)
   81e78:	11000044 	addi	r4,r2,1
   81e7c:	e17ffb17 	ldw	r5,-20(fp)
   81e80:	01800204 	movi	r6,8
   81e84:	e1fffd17 	ldw	r7,-12(fp)
   81e88:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y,5,color);
   81e8c:	e0bffa17 	ldw	r2,-24(fp)
   81e90:	11000044 	addi	r4,r2,1
   81e94:	e17ffb17 	ldw	r5,-20(fp)
   81e98:	01800144 	movi	r6,5
   81e9c:	e1fffd17 	ldw	r7,-12(fp)
   81ea0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+3,4,color);
   81ea4:	e0bffa17 	ldw	r2,-24(fp)
   81ea8:	11000044 	addi	r4,r2,1
   81eac:	e0bffb17 	ldw	r2,-20(fp)
   81eb0:	114000c4 	addi	r5,r2,3
   81eb4:	01800104 	movi	r6,4
   81eb8:	e1fffd17 	ldw	r7,-12(fp)
   81ebc:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,5,color);
   81ec0:	e0bffa17 	ldw	r2,-24(fp)
   81ec4:	11000044 	addi	r4,r2,1
   81ec8:	e0bffb17 	ldw	r2,-20(fp)
   81ecc:	114001c4 	addi	r5,r2,7
   81ed0:	01800144 	movi	r6,5
   81ed4:	e1fffd17 	ldw	r7,-12(fp)
   81ed8:	00813580 	call	81358 <drawHLine>
			return 7;
   81edc:	010001c4 	movi	r4,7
   81ee0:	e13ffe15 	stw	r4,-8(fp)
   81ee4:	00093406 	br	843b8 <write_letter+0x29b4>

		case 'F':
			drawVLine(x+1,y,8,color);
   81ee8:	e0bffa17 	ldw	r2,-24(fp)
   81eec:	11000044 	addi	r4,r2,1
   81ef0:	e17ffb17 	ldw	r5,-20(fp)
   81ef4:	01800204 	movi	r6,8
   81ef8:	e1fffd17 	ldw	r7,-12(fp)
   81efc:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y,5,color);
   81f00:	e0bffa17 	ldw	r2,-24(fp)
   81f04:	11000044 	addi	r4,r2,1
   81f08:	e17ffb17 	ldw	r5,-20(fp)
   81f0c:	01800144 	movi	r6,5
   81f10:	e1fffd17 	ldw	r7,-12(fp)
   81f14:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+3,4,color);
   81f18:	e0bffa17 	ldw	r2,-24(fp)
   81f1c:	11000044 	addi	r4,r2,1
   81f20:	e0bffb17 	ldw	r2,-20(fp)
   81f24:	114000c4 	addi	r5,r2,3
   81f28:	01800104 	movi	r6,4
   81f2c:	e1fffd17 	ldw	r7,-12(fp)
   81f30:	00813580 	call	81358 <drawHLine>
			return 7;
   81f34:	008001c4 	movi	r2,7
   81f38:	e0bffe15 	stw	r2,-8(fp)
   81f3c:	00091e06 	br	843b8 <write_letter+0x29b4>

		case 'G':
			drawVLine(x+1,y+1,6,color);
   81f40:	e0bffa17 	ldw	r2,-24(fp)
   81f44:	11000044 	addi	r4,r2,1
   81f48:	e0bffb17 	ldw	r2,-20(fp)
   81f4c:	11400044 	addi	r5,r2,1
   81f50:	01800184 	movi	r6,6
   81f54:	e1fffd17 	ldw	r7,-12(fp)
   81f58:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+4,3,color);
   81f5c:	e0bffa17 	ldw	r2,-24(fp)
   81f60:	11000184 	addi	r4,r2,6
   81f64:	e0bffb17 	ldw	r2,-20(fp)
   81f68:	11400104 	addi	r5,r2,4
   81f6c:	018000c4 	movi	r6,3
   81f70:	e1fffd17 	ldw	r7,-12(fp)
   81f74:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y,4,color);
   81f78:	e0bffa17 	ldw	r2,-24(fp)
   81f7c:	11000084 	addi	r4,r2,2
   81f80:	e17ffb17 	ldw	r5,-20(fp)
   81f84:	01800104 	movi	r6,4
   81f88:	e1fffd17 	ldw	r7,-12(fp)
   81f8c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,4,color);
   81f90:	e0bffa17 	ldw	r2,-24(fp)
   81f94:	11000084 	addi	r4,r2,2
   81f98:	e0bffb17 	ldw	r2,-20(fp)
   81f9c:	114001c4 	addi	r5,r2,7
   81fa0:	01800104 	movi	r6,4
   81fa4:	e1fffd17 	ldw	r7,-12(fp)
   81fa8:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+4,2,color);
   81fac:	e0bffa17 	ldw	r2,-24(fp)
   81fb0:	11000144 	addi	r4,r2,5
   81fb4:	e0bffb17 	ldw	r2,-20(fp)
   81fb8:	11400104 	addi	r5,r2,4
   81fbc:	01800084 	movi	r6,2
   81fc0:	e1fffd17 	ldw	r7,-12(fp)
   81fc4:	00813580 	call	81358 <drawHLine>
			return 8;
   81fc8:	00c00204 	movi	r3,8
   81fcc:	e0fffe15 	stw	r3,-8(fp)
   81fd0:	0008f906 	br	843b8 <write_letter+0x29b4>

		case 'H':
			drawVLine(x+1,y,8,color);
   81fd4:	e0bffa17 	ldw	r2,-24(fp)
   81fd8:	11000044 	addi	r4,r2,1
   81fdc:	e17ffb17 	ldw	r5,-20(fp)
   81fe0:	01800204 	movi	r6,8
   81fe4:	e1fffd17 	ldw	r7,-12(fp)
   81fe8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y,8,color);
   81fec:	e0bffa17 	ldw	r2,-24(fp)
   81ff0:	11000184 	addi	r4,r2,6
   81ff4:	e17ffb17 	ldw	r5,-20(fp)
   81ff8:	01800204 	movi	r6,8
   81ffc:	e1fffd17 	ldw	r7,-12(fp)
   82000:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+3,6,color);
   82004:	e0bffa17 	ldw	r2,-24(fp)
   82008:	11000044 	addi	r4,r2,1
   8200c:	e0bffb17 	ldw	r2,-20(fp)
   82010:	114000c4 	addi	r5,r2,3
   82014:	01800184 	movi	r6,6
   82018:	e1fffd17 	ldw	r7,-12(fp)
   8201c:	00813580 	call	81358 <drawHLine>
			return 8;
   82020:	01000204 	movi	r4,8
   82024:	e13ffe15 	stw	r4,-8(fp)
   82028:	0008e306 	br	843b8 <write_letter+0x29b4>

		case 'I':
			drawVLine(x+2,y,8,color);
   8202c:	e0bffa17 	ldw	r2,-24(fp)
   82030:	11000084 	addi	r4,r2,2
   82034:	e17ffb17 	ldw	r5,-20(fp)
   82038:	01800204 	movi	r6,8
   8203c:	e1fffd17 	ldw	r7,-12(fp)
   82040:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y,3,color);
   82044:	e0bffa17 	ldw	r2,-24(fp)
   82048:	11000044 	addi	r4,r2,1
   8204c:	e17ffb17 	ldw	r5,-20(fp)
   82050:	018000c4 	movi	r6,3
   82054:	e1fffd17 	ldw	r7,-12(fp)
   82058:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,3,color);
   8205c:	e0bffa17 	ldw	r2,-24(fp)
   82060:	11000044 	addi	r4,r2,1
   82064:	e0bffb17 	ldw	r2,-20(fp)
   82068:	114001c4 	addi	r5,r2,7
   8206c:	018000c4 	movi	r6,3
   82070:	e1fffd17 	ldw	r7,-12(fp)
   82074:	00813580 	call	81358 <drawHLine>
			return 5;
   82078:	00800144 	movi	r2,5
   8207c:	e0bffe15 	stw	r2,-8(fp)
   82080:	0008cd06 	br	843b8 <write_letter+0x29b4>

		case 'J':
			drawVLine(x+3,y,7,color);
   82084:	e0bffa17 	ldw	r2,-24(fp)
   82088:	110000c4 	addi	r4,r2,3
   8208c:	e17ffb17 	ldw	r5,-20(fp)
   82090:	018001c4 	movi	r6,7
   82094:	e1fffd17 	ldw	r7,-12(fp)
   82098:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y,3,color);
   8209c:	e0bffa17 	ldw	r2,-24(fp)
   820a0:	11000084 	addi	r4,r2,2
   820a4:	e17ffb17 	ldw	r5,-20(fp)
   820a8:	018000c4 	movi	r6,3
   820ac:	e1fffd17 	ldw	r7,-12(fp)
   820b0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,2,color);
   820b4:	e0bffa17 	ldw	r2,-24(fp)
   820b8:	11000044 	addi	r4,r2,1
   820bc:	e0bffb17 	ldw	r2,-20(fp)
   820c0:	114001c4 	addi	r5,r2,7
   820c4:	01800084 	movi	r6,2
   820c8:	e1fffd17 	ldw	r7,-12(fp)
   820cc:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+6,1,color);
   820d0:	e0bffa17 	ldw	r2,-24(fp)
   820d4:	11000044 	addi	r4,r2,1
   820d8:	e0bffb17 	ldw	r2,-20(fp)
   820dc:	11400184 	addi	r5,r2,6
   820e0:	01800044 	movi	r6,1
   820e4:	e1fffd17 	ldw	r7,-12(fp)
   820e8:	00813580 	call	81358 <drawHLine>
			return 6;
   820ec:	00c00184 	movi	r3,6
   820f0:	e0fffe15 	stw	r3,-8(fp)
   820f4:	0008b006 	br	843b8 <write_letter+0x29b4>

		case 'K':
			drawVLine(x+1,y,8,color);
   820f8:	e0bffa17 	ldw	r2,-24(fp)
   820fc:	11000044 	addi	r4,r2,1
   82100:	e17ffb17 	ldw	r5,-20(fp)
   82104:	01800204 	movi	r6,8
   82108:	e1fffd17 	ldw	r7,-12(fp)
   8210c:	00815340 	call	81534 <drawVLine>
			drawHLine(x+5,y,1,color);
   82110:	e0bffa17 	ldw	r2,-24(fp)
   82114:	11000144 	addi	r4,r2,5
   82118:	e17ffb17 	ldw	r5,-20(fp)
   8211c:	01800044 	movi	r6,1
   82120:	e1fffd17 	ldw	r7,-12(fp)
   82124:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+1,1,color);
   82128:	e0bffa17 	ldw	r2,-24(fp)
   8212c:	11000104 	addi	r4,r2,4
   82130:	e0bffb17 	ldw	r2,-20(fp)
   82134:	11400044 	addi	r5,r2,1
   82138:	01800044 	movi	r6,1
   8213c:	e1fffd17 	ldw	r7,-12(fp)
   82140:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+2,1,color);
   82144:	e0bffa17 	ldw	r2,-24(fp)
   82148:	110000c4 	addi	r4,r2,3
   8214c:	e0bffb17 	ldw	r2,-20(fp)
   82150:	11400084 	addi	r5,r2,2
   82154:	01800044 	movi	r6,1
   82158:	e1fffd17 	ldw	r7,-12(fp)
   8215c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+3,2,color);
   82160:	e0bffa17 	ldw	r2,-24(fp)
   82164:	11000044 	addi	r4,r2,1
   82168:	e0bffb17 	ldw	r2,-20(fp)
   8216c:	114000c4 	addi	r5,r2,3
   82170:	01800084 	movi	r6,2
   82174:	e1fffd17 	ldw	r7,-12(fp)
   82178:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+4,1,color);
   8217c:	e0bffa17 	ldw	r2,-24(fp)
   82180:	110000c4 	addi	r4,r2,3
   82184:	e0bffb17 	ldw	r2,-20(fp)
   82188:	11400104 	addi	r5,r2,4
   8218c:	01800044 	movi	r6,1
   82190:	e1fffd17 	ldw	r7,-12(fp)
   82194:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+5,1,color);
   82198:	e0bffa17 	ldw	r2,-24(fp)
   8219c:	11000104 	addi	r4,r2,4
   821a0:	e0bffb17 	ldw	r2,-20(fp)
   821a4:	11400144 	addi	r5,r2,5
   821a8:	01800044 	movi	r6,1
   821ac:	e1fffd17 	ldw	r7,-12(fp)
   821b0:	00813580 	call	81358 <drawHLine>
			drawVLine(x+5,y+6,2,color);
   821b4:	e0bffa17 	ldw	r2,-24(fp)
   821b8:	11000144 	addi	r4,r2,5
   821bc:	e0bffb17 	ldw	r2,-20(fp)
   821c0:	11400184 	addi	r5,r2,6
   821c4:	01800084 	movi	r6,2
   821c8:	e1fffd17 	ldw	r7,-12(fp)
   821cc:	00815340 	call	81534 <drawVLine>
			return 7;
   821d0:	010001c4 	movi	r4,7
   821d4:	e13ffe15 	stw	r4,-8(fp)
   821d8:	00087706 	br	843b8 <write_letter+0x29b4>

		case 'L':
			drawVLine(x+1,y,8,color);
   821dc:	e0bffa17 	ldw	r2,-24(fp)
   821e0:	11000044 	addi	r4,r2,1
   821e4:	e17ffb17 	ldw	r5,-20(fp)
   821e8:	01800204 	movi	r6,8
   821ec:	e1fffd17 	ldw	r7,-12(fp)
   821f0:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+7,5,color);
   821f4:	e0bffa17 	ldw	r2,-24(fp)
   821f8:	11000044 	addi	r4,r2,1
   821fc:	e0bffb17 	ldw	r2,-20(fp)
   82200:	114001c4 	addi	r5,r2,7
   82204:	01800144 	movi	r6,5
   82208:	e1fffd17 	ldw	r7,-12(fp)
   8220c:	00813580 	call	81358 <drawHLine>
			return 7;
   82210:	008001c4 	movi	r2,7
   82214:	e0bffe15 	stw	r2,-8(fp)
   82218:	00086706 	br	843b8 <write_letter+0x29b4>

		case 'M':
			drawVLine(x+1,y,8,color);
   8221c:	e0bffa17 	ldw	r2,-24(fp)
   82220:	11000044 	addi	r4,r2,1
   82224:	e17ffb17 	ldw	r5,-20(fp)
   82228:	01800204 	movi	r6,8
   8222c:	e1fffd17 	ldw	r7,-12(fp)
   82230:	00815340 	call	81534 <drawVLine>
			drawVLine(x+7,y,8,color);
   82234:	e0bffa17 	ldw	r2,-24(fp)
   82238:	110001c4 	addi	r4,r2,7
   8223c:	e17ffb17 	ldw	r5,-20(fp)
   82240:	01800204 	movi	r6,8
   82244:	e1fffd17 	ldw	r7,-12(fp)
   82248:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+4,2,color);
   8224c:	e0bffa17 	ldw	r2,-24(fp)
   82250:	11000104 	addi	r4,r2,4
   82254:	e0bffb17 	ldw	r2,-20(fp)
   82258:	11400104 	addi	r5,r2,4
   8225c:	01800084 	movi	r6,2
   82260:	e1fffd17 	ldw	r7,-12(fp)
   82264:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+2,1,color);
   82268:	e0bffa17 	ldw	r2,-24(fp)
   8226c:	11000084 	addi	r4,r2,2
   82270:	e0bffb17 	ldw	r2,-20(fp)
   82274:	11400084 	addi	r5,r2,2
   82278:	01800044 	movi	r6,1
   8227c:	e1fffd17 	ldw	r7,-12(fp)
   82280:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+3,1,color);
   82284:	e0bffa17 	ldw	r2,-24(fp)
   82288:	110000c4 	addi	r4,r2,3
   8228c:	e0bffb17 	ldw	r2,-20(fp)
   82290:	114000c4 	addi	r5,r2,3
   82294:	01800044 	movi	r6,1
   82298:	e1fffd17 	ldw	r7,-12(fp)
   8229c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+3,1,color);
   822a0:	e0bffa17 	ldw	r2,-24(fp)
   822a4:	11000144 	addi	r4,r2,5
   822a8:	e0bffb17 	ldw	r2,-20(fp)
   822ac:	114000c4 	addi	r5,r2,3
   822b0:	01800044 	movi	r6,1
   822b4:	e1fffd17 	ldw	r7,-12(fp)
   822b8:	00813580 	call	81358 <drawHLine>
			drawHLine(x+6,y+2,1,color);
   822bc:	e0bffa17 	ldw	r2,-24(fp)
   822c0:	11000184 	addi	r4,r2,6
   822c4:	e0bffb17 	ldw	r2,-20(fp)
   822c8:	11400084 	addi	r5,r2,2
   822cc:	01800044 	movi	r6,1
   822d0:	e1fffd17 	ldw	r7,-12(fp)
   822d4:	00813580 	call	81358 <drawHLine>
			return 9;
   822d8:	00c00244 	movi	r3,9
   822dc:	e0fffe15 	stw	r3,-8(fp)
   822e0:	00083506 	br	843b8 <write_letter+0x29b4>

		case 'N':
			drawVLine(x+1,y,8,color);
   822e4:	e0bffa17 	ldw	r2,-24(fp)
   822e8:	11000044 	addi	r4,r2,1
   822ec:	e17ffb17 	ldw	r5,-20(fp)
   822f0:	01800204 	movi	r6,8
   822f4:	e1fffd17 	ldw	r7,-12(fp)
   822f8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y,8,color);
   822fc:	e0bffa17 	ldw	r2,-24(fp)
   82300:	11000184 	addi	r4,r2,6
   82304:	e17ffb17 	ldw	r5,-20(fp)
   82308:	01800204 	movi	r6,8
   8230c:	e1fffd17 	ldw	r7,-12(fp)
   82310:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+2,1,color);
   82314:	e0bffa17 	ldw	r2,-24(fp)
   82318:	11000084 	addi	r4,r2,2
   8231c:	e0bffb17 	ldw	r2,-20(fp)
   82320:	11400084 	addi	r5,r2,2
   82324:	01800044 	movi	r6,1
   82328:	e1fffd17 	ldw	r7,-12(fp)
   8232c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+3,1,color);
   82330:	e0bffa17 	ldw	r2,-24(fp)
   82334:	110000c4 	addi	r4,r2,3
   82338:	e0bffb17 	ldw	r2,-20(fp)
   8233c:	114000c4 	addi	r5,r2,3
   82340:	01800044 	movi	r6,1
   82344:	e1fffd17 	ldw	r7,-12(fp)
   82348:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+4,1,color);
   8234c:	e0bffa17 	ldw	r2,-24(fp)
   82350:	11000104 	addi	r4,r2,4
   82354:	e0bffb17 	ldw	r2,-20(fp)
   82358:	11400104 	addi	r5,r2,4
   8235c:	01800044 	movi	r6,1
   82360:	e1fffd17 	ldw	r7,-12(fp)
   82364:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+5,1,color);
   82368:	e0bffa17 	ldw	r2,-24(fp)
   8236c:	11000144 	addi	r4,r2,5
   82370:	e0bffb17 	ldw	r2,-20(fp)
   82374:	11400144 	addi	r5,r2,5
   82378:	01800044 	movi	r6,1
   8237c:	e1fffd17 	ldw	r7,-12(fp)
   82380:	00813580 	call	81358 <drawHLine>
			return 8;
   82384:	01000204 	movi	r4,8
   82388:	e13ffe15 	stw	r4,-8(fp)
   8238c:	00080a06 	br	843b8 <write_letter+0x29b4>

		case 'O':
			drawVLine(x+1,y+1,6,color);
   82390:	e0bffa17 	ldw	r2,-24(fp)
   82394:	11000044 	addi	r4,r2,1
   82398:	e0bffb17 	ldw	r2,-20(fp)
   8239c:	11400044 	addi	r5,r2,1
   823a0:	01800184 	movi	r6,6
   823a4:	e1fffd17 	ldw	r7,-12(fp)
   823a8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+1,6,color);
   823ac:	e0bffa17 	ldw	r2,-24(fp)
   823b0:	11000184 	addi	r4,r2,6
   823b4:	e0bffb17 	ldw	r2,-20(fp)
   823b8:	11400044 	addi	r5,r2,1
   823bc:	01800184 	movi	r6,6
   823c0:	e1fffd17 	ldw	r7,-12(fp)
   823c4:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y,4,color);
   823c8:	e0bffa17 	ldw	r2,-24(fp)
   823cc:	11000084 	addi	r4,r2,2
   823d0:	e17ffb17 	ldw	r5,-20(fp)
   823d4:	01800104 	movi	r6,4
   823d8:	e1fffd17 	ldw	r7,-12(fp)
   823dc:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,4,color);
   823e0:	e0bffa17 	ldw	r2,-24(fp)
   823e4:	11000084 	addi	r4,r2,2
   823e8:	e0bffb17 	ldw	r2,-20(fp)
   823ec:	114001c4 	addi	r5,r2,7
   823f0:	01800104 	movi	r6,4
   823f4:	e1fffd17 	ldw	r7,-12(fp)
   823f8:	00813580 	call	81358 <drawHLine>
			return 8;
   823fc:	00800204 	movi	r2,8
   82400:	e0bffe15 	stw	r2,-8(fp)
   82404:	0007ec06 	br	843b8 <write_letter+0x29b4>

		case 'P':
			drawVLine(x+1,y,8,color);
   82408:	e0bffa17 	ldw	r2,-24(fp)
   8240c:	11000044 	addi	r4,r2,1
   82410:	e17ffb17 	ldw	r5,-20(fp)
   82414:	01800204 	movi	r6,8
   82418:	e1fffd17 	ldw	r7,-12(fp)
   8241c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+1,3,color);
   82420:	e0bffa17 	ldw	r2,-24(fp)
   82424:	11000144 	addi	r4,r2,5
   82428:	e0bffb17 	ldw	r2,-20(fp)
   8242c:	11400044 	addi	r5,r2,1
   82430:	018000c4 	movi	r6,3
   82434:	e1fffd17 	ldw	r7,-12(fp)
   82438:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y,4,color);
   8243c:	e0bffa17 	ldw	r2,-24(fp)
   82440:	11000044 	addi	r4,r2,1
   82444:	e17ffb17 	ldw	r5,-20(fp)
   82448:	01800104 	movi	r6,4
   8244c:	e1fffd17 	ldw	r7,-12(fp)
   82450:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+4,4,color);
   82454:	e0bffa17 	ldw	r2,-24(fp)
   82458:	11000044 	addi	r4,r2,1
   8245c:	e0bffb17 	ldw	r2,-20(fp)
   82460:	11400104 	addi	r5,r2,4
   82464:	01800104 	movi	r6,4
   82468:	e1fffd17 	ldw	r7,-12(fp)
   8246c:	00813580 	call	81358 <drawHLine>
			return 7;
   82470:	00c001c4 	movi	r3,7
   82474:	e0fffe15 	stw	r3,-8(fp)
   82478:	0007cf06 	br	843b8 <write_letter+0x29b4>

		case 'Q':
			drawVLine(x+1,y+1,6,color);
   8247c:	e0bffa17 	ldw	r2,-24(fp)
   82480:	11000044 	addi	r4,r2,1
   82484:	e0bffb17 	ldw	r2,-20(fp)
   82488:	11400044 	addi	r5,r2,1
   8248c:	01800184 	movi	r6,6
   82490:	e1fffd17 	ldw	r7,-12(fp)
   82494:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+1,5,color);
   82498:	e0bffa17 	ldw	r2,-24(fp)
   8249c:	11000184 	addi	r4,r2,6
   824a0:	e0bffb17 	ldw	r2,-20(fp)
   824a4:	11400044 	addi	r5,r2,1
   824a8:	01800144 	movi	r6,5
   824ac:	e1fffd17 	ldw	r7,-12(fp)
   824b0:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y,4,color);
   824b4:	e0bffa17 	ldw	r2,-24(fp)
   824b8:	11000084 	addi	r4,r2,2
   824bc:	e17ffb17 	ldw	r5,-20(fp)
   824c0:	01800104 	movi	r6,4
   824c4:	e1fffd17 	ldw	r7,-12(fp)
   824c8:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,3,color);
   824cc:	e0bffa17 	ldw	r2,-24(fp)
   824d0:	11000084 	addi	r4,r2,2
   824d4:	e0bffb17 	ldw	r2,-20(fp)
   824d8:	114001c4 	addi	r5,r2,7
   824dc:	018000c4 	movi	r6,3
   824e0:	e1fffd17 	ldw	r7,-12(fp)
   824e4:	00813580 	call	81358 <drawHLine>
			drawHLine(x+6,y+7,1,color);
   824e8:	e0bffa17 	ldw	r2,-24(fp)
   824ec:	11000184 	addi	r4,r2,6
   824f0:	e0bffb17 	ldw	r2,-20(fp)
   824f4:	114001c4 	addi	r5,r2,7
   824f8:	01800044 	movi	r6,1
   824fc:	e1fffd17 	ldw	r7,-12(fp)
   82500:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+6,1,color);
   82504:	e0bffa17 	ldw	r2,-24(fp)
   82508:	11000144 	addi	r4,r2,5
   8250c:	e0bffb17 	ldw	r2,-20(fp)
   82510:	11400184 	addi	r5,r2,6
   82514:	01800044 	movi	r6,1
   82518:	e1fffd17 	ldw	r7,-12(fp)
   8251c:	00813580 	call	81358 <drawHLine>
			return 8;
   82520:	01000204 	movi	r4,8
   82524:	e13ffe15 	stw	r4,-8(fp)
   82528:	0007a306 	br	843b8 <write_letter+0x29b4>

		case 'R':
			drawVLine(x+1,y,8,color);
   8252c:	e0bffa17 	ldw	r2,-24(fp)
   82530:	11000044 	addi	r4,r2,1
   82534:	e17ffb17 	ldw	r5,-20(fp)
   82538:	01800204 	movi	r6,8
   8253c:	e1fffd17 	ldw	r7,-12(fp)
   82540:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+1,2,color);
   82544:	e0bffa17 	ldw	r2,-24(fp)
   82548:	11000144 	addi	r4,r2,5
   8254c:	e0bffb17 	ldw	r2,-20(fp)
   82550:	11400044 	addi	r5,r2,1
   82554:	01800084 	movi	r6,2
   82558:	e1fffd17 	ldw	r7,-12(fp)
   8255c:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y,4,color);
   82560:	e0bffa17 	ldw	r2,-24(fp)
   82564:	11000044 	addi	r4,r2,1
   82568:	e17ffb17 	ldw	r5,-20(fp)
   8256c:	01800104 	movi	r6,4
   82570:	e1fffd17 	ldw	r7,-12(fp)
   82574:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+3,4,color);
   82578:	e0bffa17 	ldw	r2,-24(fp)
   8257c:	11000044 	addi	r4,r2,1
   82580:	e0bffb17 	ldw	r2,-20(fp)
   82584:	114000c4 	addi	r5,r2,3
   82588:	01800104 	movi	r6,4
   8258c:	e1fffd17 	ldw	r7,-12(fp)
   82590:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+4,1,color);
   82594:	e0bffa17 	ldw	r2,-24(fp)
   82598:	110000c4 	addi	r4,r2,3
   8259c:	e0bffb17 	ldw	r2,-20(fp)
   825a0:	11400104 	addi	r5,r2,4
   825a4:	01800044 	movi	r6,1
   825a8:	e1fffd17 	ldw	r7,-12(fp)
   825ac:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+5,1,color);
   825b0:	e0bffa17 	ldw	r2,-24(fp)
   825b4:	11000104 	addi	r4,r2,4
   825b8:	e0bffb17 	ldw	r2,-20(fp)
   825bc:	11400144 	addi	r5,r2,5
   825c0:	01800044 	movi	r6,1
   825c4:	e1fffd17 	ldw	r7,-12(fp)
   825c8:	00813580 	call	81358 <drawHLine>
			drawVLine(x+5,y+6,2,color);
   825cc:	e0bffa17 	ldw	r2,-24(fp)
   825d0:	11000144 	addi	r4,r2,5
   825d4:	e0bffb17 	ldw	r2,-20(fp)
   825d8:	11400184 	addi	r5,r2,6
   825dc:	01800084 	movi	r6,2
   825e0:	e1fffd17 	ldw	r7,-12(fp)
   825e4:	00815340 	call	81534 <drawVLine>
			return 7;
   825e8:	008001c4 	movi	r2,7
   825ec:	e0bffe15 	stw	r2,-8(fp)
   825f0:	00077106 	br	843b8 <write_letter+0x29b4>

		case 'S':
			drawHLine(x+2,y,4,color);
   825f4:	e0bffa17 	ldw	r2,-24(fp)
   825f8:	11000084 	addi	r4,r2,2
   825fc:	e17ffb17 	ldw	r5,-20(fp)
   82600:	01800104 	movi	r6,4
   82604:	e1fffd17 	ldw	r7,-12(fp)
   82608:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+3,2,color);
   8260c:	e0bffa17 	ldw	r2,-24(fp)
   82610:	11000084 	addi	r4,r2,2
   82614:	e0bffb17 	ldw	r2,-20(fp)
   82618:	114000c4 	addi	r5,r2,3
   8261c:	01800084 	movi	r6,2
   82620:	e1fffd17 	ldw	r7,-12(fp)
   82624:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+4,2,color);
   82628:	e0bffa17 	ldw	r2,-24(fp)
   8262c:	11000104 	addi	r4,r2,4
   82630:	e0bffb17 	ldw	r2,-20(fp)
   82634:	11400104 	addi	r5,r2,4
   82638:	01800084 	movi	r6,2
   8263c:	e1fffd17 	ldw	r7,-12(fp)
   82640:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,4,color);
   82644:	e0bffa17 	ldw	r2,-24(fp)
   82648:	11000084 	addi	r4,r2,2
   8264c:	e0bffb17 	ldw	r2,-20(fp)
   82650:	114001c4 	addi	r5,r2,7
   82654:	01800104 	movi	r6,4
   82658:	e1fffd17 	ldw	r7,-12(fp)
   8265c:	00813580 	call	81358 <drawHLine>
			drawVLine(x+1,y+1,2,color);
   82660:	e0bffa17 	ldw	r2,-24(fp)
   82664:	11000044 	addi	r4,r2,1
   82668:	e0bffb17 	ldw	r2,-20(fp)
   8266c:	11400044 	addi	r5,r2,1
   82670:	01800084 	movi	r6,2
   82674:	e1fffd17 	ldw	r7,-12(fp)
   82678:	00815340 	call	81534 <drawVLine>
			drawVLine(x+1,y+5,2,color);
   8267c:	e0bffa17 	ldw	r2,-24(fp)
   82680:	11000044 	addi	r4,r2,1
   82684:	e0bffb17 	ldw	r2,-20(fp)
   82688:	11400144 	addi	r5,r2,5
   8268c:	01800084 	movi	r6,2
   82690:	e1fffd17 	ldw	r7,-12(fp)
   82694:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+1,2,color);
   82698:	e0bffa17 	ldw	r2,-24(fp)
   8269c:	11000184 	addi	r4,r2,6
   826a0:	e0bffb17 	ldw	r2,-20(fp)
   826a4:	11400044 	addi	r5,r2,1
   826a8:	01800084 	movi	r6,2
   826ac:	e1fffd17 	ldw	r7,-12(fp)
   826b0:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+5,2,color);
   826b4:	e0bffa17 	ldw	r2,-24(fp)
   826b8:	11000184 	addi	r4,r2,6
   826bc:	e0bffb17 	ldw	r2,-20(fp)
   826c0:	11400144 	addi	r5,r2,5
   826c4:	01800084 	movi	r6,2
   826c8:	e1fffd17 	ldw	r7,-12(fp)
   826cc:	00815340 	call	81534 <drawVLine>
			return 8;
   826d0:	00c00204 	movi	r3,8
   826d4:	e0fffe15 	stw	r3,-8(fp)
   826d8:	00073706 	br	843b8 <write_letter+0x29b4>
		case 'T':
			drawHLine(x+1,y,7,color);
   826dc:	e0bffa17 	ldw	r2,-24(fp)
   826e0:	11000044 	addi	r4,r2,1
   826e4:	e17ffb17 	ldw	r5,-20(fp)
   826e8:	018001c4 	movi	r6,7
   826ec:	e1fffd17 	ldw	r7,-12(fp)
   826f0:	00813580 	call	81358 <drawHLine>
			drawVLine (x+4,y,8,color);
   826f4:	e0bffa17 	ldw	r2,-24(fp)
   826f8:	11000104 	addi	r4,r2,4
   826fc:	e17ffb17 	ldw	r5,-20(fp)
   82700:	01800204 	movi	r6,8
   82704:	e1fffd17 	ldw	r7,-12(fp)
   82708:	00815340 	call	81534 <drawVLine>
			return 9;
   8270c:	01000244 	movi	r4,9
   82710:	e13ffe15 	stw	r4,-8(fp)
   82714:	00072806 	br	843b8 <write_letter+0x29b4>

		case 'U':
			drawVLine(x+1,y,7,color);
   82718:	e0bffa17 	ldw	r2,-24(fp)
   8271c:	11000044 	addi	r4,r2,1
   82720:	e17ffb17 	ldw	r5,-20(fp)
   82724:	018001c4 	movi	r6,7
   82728:	e1fffd17 	ldw	r7,-12(fp)
   8272c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y,7,color);
   82730:	e0bffa17 	ldw	r2,-24(fp)
   82734:	11000184 	addi	r4,r2,6
   82738:	e17ffb17 	ldw	r5,-20(fp)
   8273c:	018001c4 	movi	r6,7
   82740:	e1fffd17 	ldw	r7,-12(fp)
   82744:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+7,4,color);
   82748:	e0bffa17 	ldw	r2,-24(fp)
   8274c:	11000084 	addi	r4,r2,2
   82750:	e0bffb17 	ldw	r2,-20(fp)
   82754:	114001c4 	addi	r5,r2,7
   82758:	01800104 	movi	r6,4
   8275c:	e1fffd17 	ldw	r7,-12(fp)
   82760:	00813580 	call	81358 <drawHLine>
			return 8;
   82764:	00800204 	movi	r2,8
   82768:	e0bffe15 	stw	r2,-8(fp)
   8276c:	00071206 	br	843b8 <write_letter+0x29b4>

		case 'V':
			drawVLine(x+1,y,3,color);
   82770:	e0bffa17 	ldw	r2,-24(fp)
   82774:	11000044 	addi	r4,r2,1
   82778:	e17ffb17 	ldw	r5,-20(fp)
   8277c:	018000c4 	movi	r6,3
   82780:	e1fffd17 	ldw	r7,-12(fp)
   82784:	00815340 	call	81534 <drawVLine>
			drawVLine(x+7,y,3,color);
   82788:	e0bffa17 	ldw	r2,-24(fp)
   8278c:	110001c4 	addi	r4,r2,7
   82790:	e17ffb17 	ldw	r5,-20(fp)
   82794:	018000c4 	movi	r6,3
   82798:	e1fffd17 	ldw	r7,-12(fp)
   8279c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+2,y+3,2,color);
   827a0:	e0bffa17 	ldw	r2,-24(fp)
   827a4:	11000084 	addi	r4,r2,2
   827a8:	e0bffb17 	ldw	r2,-20(fp)
   827ac:	114000c4 	addi	r5,r2,3
   827b0:	01800084 	movi	r6,2
   827b4:	e1fffd17 	ldw	r7,-12(fp)
   827b8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+3,2,color);
   827bc:	e0bffa17 	ldw	r2,-24(fp)
   827c0:	11000184 	addi	r4,r2,6
   827c4:	e0bffb17 	ldw	r2,-20(fp)
   827c8:	114000c4 	addi	r5,r2,3
   827cc:	01800084 	movi	r6,2
   827d0:	e1fffd17 	ldw	r7,-12(fp)
   827d4:	00815340 	call	81534 <drawVLine>
			drawVLine(x+3,y+5,2,color);
   827d8:	e0bffa17 	ldw	r2,-24(fp)
   827dc:	110000c4 	addi	r4,r2,3
   827e0:	e0bffb17 	ldw	r2,-20(fp)
   827e4:	11400144 	addi	r5,r2,5
   827e8:	01800084 	movi	r6,2
   827ec:	e1fffd17 	ldw	r7,-12(fp)
   827f0:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+5,2,color);
   827f4:	e0bffa17 	ldw	r2,-24(fp)
   827f8:	11000144 	addi	r4,r2,5
   827fc:	e0bffb17 	ldw	r2,-20(fp)
   82800:	11400144 	addi	r5,r2,5
   82804:	01800084 	movi	r6,2
   82808:	e1fffd17 	ldw	r7,-12(fp)
   8280c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+7,1,color);
   82810:	e0bffa17 	ldw	r2,-24(fp)
   82814:	11000104 	addi	r4,r2,4
   82818:	e0bffb17 	ldw	r2,-20(fp)
   8281c:	114001c4 	addi	r5,r2,7
   82820:	01800044 	movi	r6,1
   82824:	e1fffd17 	ldw	r7,-12(fp)
   82828:	00815340 	call	81534 <drawVLine>
			return 9;
   8282c:	00c00244 	movi	r3,9
   82830:	e0fffe15 	stw	r3,-8(fp)
   82834:	0006e006 	br	843b8 <write_letter+0x29b4>

		case 'W':
			drawVLine(x+1,y,4,color);
   82838:	e0bffa17 	ldw	r2,-24(fp)
   8283c:	11000044 	addi	r4,r2,1
   82840:	e17ffb17 	ldw	r5,-20(fp)
   82844:	01800104 	movi	r6,4
   82848:	e1fffd17 	ldw	r7,-12(fp)
   8284c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+9,y,4,color);
   82850:	e0bffa17 	ldw	r2,-24(fp)
   82854:	11000244 	addi	r4,r2,9
   82858:	e17ffb17 	ldw	r5,-20(fp)
   8285c:	01800104 	movi	r6,4
   82860:	e1fffd17 	ldw	r7,-12(fp)
   82864:	00815340 	call	81534 <drawVLine>
			drawVLine(x+2,y+4,3,color);
   82868:	e0bffa17 	ldw	r2,-24(fp)
   8286c:	11000084 	addi	r4,r2,2
   82870:	e0bffb17 	ldw	r2,-20(fp)
   82874:	11400104 	addi	r5,r2,4
   82878:	018000c4 	movi	r6,3
   8287c:	e1fffd17 	ldw	r7,-12(fp)
   82880:	00815340 	call	81534 <drawVLine>
			drawVLine(x+8,y+4,3,color);
   82884:	e0bffa17 	ldw	r2,-24(fp)
   82888:	11000204 	addi	r4,r2,8
   8288c:	e0bffb17 	ldw	r2,-20(fp)
   82890:	11400104 	addi	r5,r2,4
   82894:	018000c4 	movi	r6,3
   82898:	e1fffd17 	ldw	r7,-12(fp)
   8289c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+3,y+7,1,color);
   828a0:	e0bffa17 	ldw	r2,-24(fp)
   828a4:	110000c4 	addi	r4,r2,3
   828a8:	e0bffb17 	ldw	r2,-20(fp)
   828ac:	114001c4 	addi	r5,r2,7
   828b0:	01800044 	movi	r6,1
   828b4:	e1fffd17 	ldw	r7,-12(fp)
   828b8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+5,2,color);
   828bc:	e0bffa17 	ldw	r2,-24(fp)
   828c0:	11000104 	addi	r4,r2,4
   828c4:	e0bffb17 	ldw	r2,-20(fp)
   828c8:	11400144 	addi	r5,r2,5
   828cc:	01800084 	movi	r6,2
   828d0:	e1fffd17 	ldw	r7,-12(fp)
   828d4:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+3,2,color);
   828d8:	e0bffa17 	ldw	r2,-24(fp)
   828dc:	11000144 	addi	r4,r2,5
   828e0:	e0bffb17 	ldw	r2,-20(fp)
   828e4:	114000c4 	addi	r5,r2,3
   828e8:	01800084 	movi	r6,2
   828ec:	e1fffd17 	ldw	r7,-12(fp)
   828f0:	00815340 	call	81534 <drawVLine>
			drawVLine(x+6,y+5,2,color);
   828f4:	e0bffa17 	ldw	r2,-24(fp)
   828f8:	11000184 	addi	r4,r2,6
   828fc:	e0bffb17 	ldw	r2,-20(fp)
   82900:	11400144 	addi	r5,r2,5
   82904:	01800084 	movi	r6,2
   82908:	e1fffd17 	ldw	r7,-12(fp)
   8290c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+7,y+7,1,color);
   82910:	e0bffa17 	ldw	r2,-24(fp)
   82914:	110001c4 	addi	r4,r2,7
   82918:	e0bffb17 	ldw	r2,-20(fp)
   8291c:	114001c4 	addi	r5,r2,7
   82920:	01800044 	movi	r6,1
   82924:	e1fffd17 	ldw	r7,-12(fp)
   82928:	00815340 	call	81534 <drawVLine>
			return 11;
   8292c:	010002c4 	movi	r4,11
   82930:	e13ffe15 	stw	r4,-8(fp)
   82934:	0006a006 	br	843b8 <write_letter+0x29b4>

		case 'X':
			drawHLine(x+1,y,1,color);
   82938:	e0bffa17 	ldw	r2,-24(fp)
   8293c:	11000044 	addi	r4,r2,1
   82940:	e17ffb17 	ldw	r5,-20(fp)
   82944:	01800044 	movi	r6,1
   82948:	e1fffd17 	ldw	r7,-12(fp)
   8294c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+1,1,color);
   82950:	e0bffa17 	ldw	r2,-24(fp)
   82954:	11000084 	addi	r4,r2,2
   82958:	e0bffb17 	ldw	r2,-20(fp)
   8295c:	11400044 	addi	r5,r2,1
   82960:	01800044 	movi	r6,1
   82964:	e1fffd17 	ldw	r7,-12(fp)
   82968:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+2,1,color);
   8296c:	e0bffa17 	ldw	r2,-24(fp)
   82970:	110000c4 	addi	r4,r2,3
   82974:	e0bffb17 	ldw	r2,-20(fp)
   82978:	11400084 	addi	r5,r2,2
   8297c:	01800044 	movi	r6,1
   82980:	e1fffd17 	ldw	r7,-12(fp)
   82984:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+3,1,color);
   82988:	e0bffa17 	ldw	r2,-24(fp)
   8298c:	11000104 	addi	r4,r2,4
   82990:	e0bffb17 	ldw	r2,-20(fp)
   82994:	114000c4 	addi	r5,r2,3
   82998:	01800044 	movi	r6,1
   8299c:	e1fffd17 	ldw	r7,-12(fp)
   829a0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+4,1,color);
   829a4:	e0bffa17 	ldw	r2,-24(fp)
   829a8:	11000144 	addi	r4,r2,5
   829ac:	e0bffb17 	ldw	r2,-20(fp)
   829b0:	11400104 	addi	r5,r2,4
   829b4:	01800044 	movi	r6,1
   829b8:	e1fffd17 	ldw	r7,-12(fp)
   829bc:	00813580 	call	81358 <drawHLine>
			drawHLine(x+6,y+5,1,color);
   829c0:	e0bffa17 	ldw	r2,-24(fp)
   829c4:	11000184 	addi	r4,r2,6
   829c8:	e0bffb17 	ldw	r2,-20(fp)
   829cc:	11400144 	addi	r5,r2,5
   829d0:	01800044 	movi	r6,1
   829d4:	e1fffd17 	ldw	r7,-12(fp)
   829d8:	00813580 	call	81358 <drawHLine>
			drawHLine(x+7,y+6,1,color);
   829dc:	e0bffa17 	ldw	r2,-24(fp)
   829e0:	110001c4 	addi	r4,r2,7
   829e4:	e0bffb17 	ldw	r2,-20(fp)
   829e8:	11400184 	addi	r5,r2,6
   829ec:	01800044 	movi	r6,1
   829f0:	e1fffd17 	ldw	r7,-12(fp)
   829f4:	00813580 	call	81358 <drawHLine>
			drawHLine(x+8,y+7,1,color);
   829f8:	e0bffa17 	ldw	r2,-24(fp)
   829fc:	11000204 	addi	r4,r2,8
   82a00:	e0bffb17 	ldw	r2,-20(fp)
   82a04:	114001c4 	addi	r5,r2,7
   82a08:	01800044 	movi	r6,1
   82a0c:	e1fffd17 	ldw	r7,-12(fp)
   82a10:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,1,color);
   82a14:	e0bffa17 	ldw	r2,-24(fp)
   82a18:	11000044 	addi	r4,r2,1
   82a1c:	e0bffb17 	ldw	r2,-20(fp)
   82a20:	114001c4 	addi	r5,r2,7
   82a24:	01800044 	movi	r6,1
   82a28:	e1fffd17 	ldw	r7,-12(fp)
   82a2c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+6,1,color);
   82a30:	e0bffa17 	ldw	r2,-24(fp)
   82a34:	11000084 	addi	r4,r2,2
   82a38:	e0bffb17 	ldw	r2,-20(fp)
   82a3c:	11400184 	addi	r5,r2,6
   82a40:	01800044 	movi	r6,1
   82a44:	e1fffd17 	ldw	r7,-12(fp)
   82a48:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+5,1,color);
   82a4c:	e0bffa17 	ldw	r2,-24(fp)
   82a50:	110000c4 	addi	r4,r2,3
   82a54:	e0bffb17 	ldw	r2,-20(fp)
   82a58:	11400144 	addi	r5,r2,5
   82a5c:	01800044 	movi	r6,1
   82a60:	e1fffd17 	ldw	r7,-12(fp)
   82a64:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+4,1,color);
   82a68:	e0bffa17 	ldw	r2,-24(fp)
   82a6c:	11000104 	addi	r4,r2,4
   82a70:	e0bffb17 	ldw	r2,-20(fp)
   82a74:	11400104 	addi	r5,r2,4
   82a78:	01800044 	movi	r6,1
   82a7c:	e1fffd17 	ldw	r7,-12(fp)
   82a80:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+3,1,color);
   82a84:	e0bffa17 	ldw	r2,-24(fp)
   82a88:	11000144 	addi	r4,r2,5
   82a8c:	e0bffb17 	ldw	r2,-20(fp)
   82a90:	114000c4 	addi	r5,r2,3
   82a94:	01800044 	movi	r6,1
   82a98:	e1fffd17 	ldw	r7,-12(fp)
   82a9c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+6,y+2,1,color);
   82aa0:	e0bffa17 	ldw	r2,-24(fp)
   82aa4:	11000184 	addi	r4,r2,6
   82aa8:	e0bffb17 	ldw	r2,-20(fp)
   82aac:	11400084 	addi	r5,r2,2
   82ab0:	01800044 	movi	r6,1
   82ab4:	e1fffd17 	ldw	r7,-12(fp)
   82ab8:	00813580 	call	81358 <drawHLine>
			drawHLine(x+7,y+1,1,color);
   82abc:	e0bffa17 	ldw	r2,-24(fp)
   82ac0:	110001c4 	addi	r4,r2,7
   82ac4:	e0bffb17 	ldw	r2,-20(fp)
   82ac8:	11400044 	addi	r5,r2,1
   82acc:	01800044 	movi	r6,1
   82ad0:	e1fffd17 	ldw	r7,-12(fp)
   82ad4:	00813580 	call	81358 <drawHLine>
			drawHLine(x+8,y,1,color);
   82ad8:	e0bffa17 	ldw	r2,-24(fp)
   82adc:	11000204 	addi	r4,r2,8
   82ae0:	e17ffb17 	ldw	r5,-20(fp)
   82ae4:	01800044 	movi	r6,1
   82ae8:	e1fffd17 	ldw	r7,-12(fp)
   82aec:	00813580 	call	81358 <drawHLine>
			return 10;
   82af0:	00800284 	movi	r2,10
   82af4:	e0bffe15 	stw	r2,-8(fp)
   82af8:	00062f06 	br	843b8 <write_letter+0x29b4>

		case 'Y':
			drawHLine(x+1,y,1,color);
   82afc:	e0bffa17 	ldw	r2,-24(fp)
   82b00:	11000044 	addi	r4,r2,1
   82b04:	e17ffb17 	ldw	r5,-20(fp)
   82b08:	01800044 	movi	r6,1
   82b0c:	e1fffd17 	ldw	r7,-12(fp)
   82b10:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+1,1,color);
   82b14:	e0bffa17 	ldw	r2,-24(fp)
   82b18:	11000084 	addi	r4,r2,2
   82b1c:	e0bffb17 	ldw	r2,-20(fp)
   82b20:	11400044 	addi	r5,r2,1
   82b24:	01800044 	movi	r6,1
   82b28:	e1fffd17 	ldw	r7,-12(fp)
   82b2c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+2,1,color);
   82b30:	e0bffa17 	ldw	r2,-24(fp)
   82b34:	110000c4 	addi	r4,r2,3
   82b38:	e0bffb17 	ldw	r2,-20(fp)
   82b3c:	11400084 	addi	r5,r2,2
   82b40:	01800044 	movi	r6,1
   82b44:	e1fffd17 	ldw	r7,-12(fp)
   82b48:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+3,1,color);
   82b4c:	e0bffa17 	ldw	r2,-24(fp)
   82b50:	11000104 	addi	r4,r2,4
   82b54:	e0bffb17 	ldw	r2,-20(fp)
   82b58:	114000c4 	addi	r5,r2,3
   82b5c:	01800044 	movi	r6,1
   82b60:	e1fffd17 	ldw	r7,-12(fp)
   82b64:	00813580 	call	81358 <drawHLine>
			drawVLine(x+5,y+4,4,color);
   82b68:	e0bffa17 	ldw	r2,-24(fp)
   82b6c:	11000144 	addi	r4,r2,5
   82b70:	e0bffb17 	ldw	r2,-20(fp)
   82b74:	11400104 	addi	r5,r2,4
   82b78:	01800104 	movi	r6,4
   82b7c:	e1fffd17 	ldw	r7,-12(fp)
   82b80:	00815340 	call	81534 <drawVLine>
			drawHLine(x+9,y,1,color);
   82b84:	e0bffa17 	ldw	r2,-24(fp)
   82b88:	11000244 	addi	r4,r2,9
   82b8c:	e17ffb17 	ldw	r5,-20(fp)
   82b90:	01800044 	movi	r6,1
   82b94:	e1fffd17 	ldw	r7,-12(fp)
   82b98:	00813580 	call	81358 <drawHLine>
			drawHLine(x+8,y+1,1,color);
   82b9c:	e0bffa17 	ldw	r2,-24(fp)
   82ba0:	11000204 	addi	r4,r2,8
   82ba4:	e0bffb17 	ldw	r2,-20(fp)
   82ba8:	11400044 	addi	r5,r2,1
   82bac:	01800044 	movi	r6,1
   82bb0:	e1fffd17 	ldw	r7,-12(fp)
   82bb4:	00813580 	call	81358 <drawHLine>
			drawHLine(x+7,y+2,1,color);
   82bb8:	e0bffa17 	ldw	r2,-24(fp)
   82bbc:	110001c4 	addi	r4,r2,7
   82bc0:	e0bffb17 	ldw	r2,-20(fp)
   82bc4:	11400084 	addi	r5,r2,2
   82bc8:	01800044 	movi	r6,1
   82bcc:	e1fffd17 	ldw	r7,-12(fp)
   82bd0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+6,y+3,1,color);
   82bd4:	e0bffa17 	ldw	r2,-24(fp)
   82bd8:	11000184 	addi	r4,r2,6
   82bdc:	e0bffb17 	ldw	r2,-20(fp)
   82be0:	114000c4 	addi	r5,r2,3
   82be4:	01800044 	movi	r6,1
   82be8:	e1fffd17 	ldw	r7,-12(fp)
   82bec:	00813580 	call	81358 <drawHLine>
			return 11;
   82bf0:	00c002c4 	movi	r3,11
   82bf4:	e0fffe15 	stw	r3,-8(fp)
   82bf8:	0005ef06 	br	843b8 <write_letter+0x29b4>

		case 'Z':
			drawHLine(x+1,y,6,color);
   82bfc:	e0bffa17 	ldw	r2,-24(fp)
   82c00:	11000044 	addi	r4,r2,1
   82c04:	e17ffb17 	ldw	r5,-20(fp)
   82c08:	01800184 	movi	r6,6
   82c0c:	e1fffd17 	ldw	r7,-12(fp)
   82c10:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,6,color);
   82c14:	e0bffa17 	ldw	r2,-24(fp)
   82c18:	11000044 	addi	r4,r2,1
   82c1c:	e0bffb17 	ldw	r2,-20(fp)
   82c20:	114001c4 	addi	r5,r2,7
   82c24:	01800184 	movi	r6,6
   82c28:	e1fffd17 	ldw	r7,-12(fp)
   82c2c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+6,y+1,1,color);
   82c30:	e0bffa17 	ldw	r2,-24(fp)
   82c34:	11000184 	addi	r4,r2,6
   82c38:	e0bffb17 	ldw	r2,-20(fp)
   82c3c:	11400044 	addi	r5,r2,1
   82c40:	01800044 	movi	r6,1
   82c44:	e1fffd17 	ldw	r7,-12(fp)
   82c48:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+2,1,color);
   82c4c:	e0bffa17 	ldw	r2,-24(fp)
   82c50:	11000144 	addi	r4,r2,5
   82c54:	e0bffb17 	ldw	r2,-20(fp)
   82c58:	11400084 	addi	r5,r2,2
   82c5c:	01800044 	movi	r6,1
   82c60:	e1fffd17 	ldw	r7,-12(fp)
   82c64:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+3,1,color);
   82c68:	e0bffa17 	ldw	r2,-24(fp)
   82c6c:	11000104 	addi	r4,r2,4
   82c70:	e0bffb17 	ldw	r2,-20(fp)
   82c74:	114000c4 	addi	r5,r2,3
   82c78:	01800044 	movi	r6,1
   82c7c:	e1fffd17 	ldw	r7,-12(fp)
   82c80:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+4,1,color);
   82c84:	e0bffa17 	ldw	r2,-24(fp)
   82c88:	110000c4 	addi	r4,r2,3
   82c8c:	e0bffb17 	ldw	r2,-20(fp)
   82c90:	11400104 	addi	r5,r2,4
   82c94:	01800044 	movi	r6,1
   82c98:	e1fffd17 	ldw	r7,-12(fp)
   82c9c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+5,1,color);
   82ca0:	e0bffa17 	ldw	r2,-24(fp)
   82ca4:	11000084 	addi	r4,r2,2
   82ca8:	e0bffb17 	ldw	r2,-20(fp)
   82cac:	11400144 	addi	r5,r2,5
   82cb0:	01800044 	movi	r6,1
   82cb4:	e1fffd17 	ldw	r7,-12(fp)
   82cb8:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+6,1,color);
   82cbc:	e0bffa17 	ldw	r2,-24(fp)
   82cc0:	11000044 	addi	r4,r2,1
   82cc4:	e0bffb17 	ldw	r2,-20(fp)
   82cc8:	11400184 	addi	r5,r2,6
   82ccc:	01800044 	movi	r6,1
   82cd0:	e1fffd17 	ldw	r7,-12(fp)
   82cd4:	00813580 	call	81358 <drawHLine>
			return 8;
   82cd8:	01000204 	movi	r4,8
   82cdc:	e13ffe15 	stw	r4,-8(fp)
   82ce0:	0005b506 	br	843b8 <write_letter+0x29b4>

		case 'a':
			drawHLine(x+2,y+3,2,color);
   82ce4:	e0bffa17 	ldw	r2,-24(fp)
   82ce8:	11000084 	addi	r4,r2,2
   82cec:	e0bffb17 	ldw	r2,-20(fp)
   82cf0:	114000c4 	addi	r5,r2,3
   82cf4:	01800084 	movi	r6,2
   82cf8:	e1fffd17 	ldw	r7,-12(fp)
   82cfc:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,2,color);
   82d00:	e0bffa17 	ldw	r2,-24(fp)
   82d04:	11000084 	addi	r4,r2,2
   82d08:	e0bffb17 	ldw	r2,-20(fp)
   82d0c:	114001c4 	addi	r5,r2,7
   82d10:	01800084 	movi	r6,2
   82d14:	e1fffd17 	ldw	r7,-12(fp)
   82d18:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+7,1,color);
   82d1c:	e0bffa17 	ldw	r2,-24(fp)
   82d20:	11000144 	addi	r4,r2,5
   82d24:	e0bffb17 	ldw	r2,-20(fp)
   82d28:	114001c4 	addi	r5,r2,7
   82d2c:	01800044 	movi	r6,1
   82d30:	e1fffd17 	ldw	r7,-12(fp)
   82d34:	00813580 	call	81358 <drawHLine>
			drawVLine(x+1,y+4,3,color);
   82d38:	e0bffa17 	ldw	r2,-24(fp)
   82d3c:	11000044 	addi	r4,r2,1
   82d40:	e0bffb17 	ldw	r2,-20(fp)
   82d44:	11400104 	addi	r5,r2,4
   82d48:	018000c4 	movi	r6,3
   82d4c:	e1fffd17 	ldw	r7,-12(fp)
   82d50:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+4,3,color);
   82d54:	e0bffa17 	ldw	r2,-24(fp)
   82d58:	11000104 	addi	r4,r2,4
   82d5c:	e0bffb17 	ldw	r2,-20(fp)
   82d60:	11400104 	addi	r5,r2,4
   82d64:	018000c4 	movi	r6,3
   82d68:	e1fffd17 	ldw	r7,-12(fp)
   82d6c:	00815340 	call	81534 <drawVLine>
			return 7;
   82d70:	008001c4 	movi	r2,7
   82d74:	e0bffe15 	stw	r2,-8(fp)
   82d78:	00058f06 	br	843b8 <write_letter+0x29b4>

		case 'b':
			drawVLine(x+1,y,8,color);
   82d7c:	e0bffa17 	ldw	r2,-24(fp)
   82d80:	11000044 	addi	r4,r2,1
   82d84:	e17ffb17 	ldw	r5,-20(fp)
   82d88:	01800204 	movi	r6,8
   82d8c:	e1fffd17 	ldw	r7,-12(fp)
   82d90:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+4,3,color);
   82d94:	e0bffa17 	ldw	r2,-24(fp)
   82d98:	11000104 	addi	r4,r2,4
   82d9c:	e0bffb17 	ldw	r2,-20(fp)
   82da0:	11400104 	addi	r5,r2,4
   82da4:	018000c4 	movi	r6,3
   82da8:	e1fffd17 	ldw	r7,-12(fp)
   82dac:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+3,3,color);
   82db0:	e0bffa17 	ldw	r2,-24(fp)
   82db4:	11000044 	addi	r4,r2,1
   82db8:	e0bffb17 	ldw	r2,-20(fp)
   82dbc:	114000c4 	addi	r5,r2,3
   82dc0:	018000c4 	movi	r6,3
   82dc4:	e1fffd17 	ldw	r7,-12(fp)
   82dc8:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,3,color);
   82dcc:	e0bffa17 	ldw	r2,-24(fp)
   82dd0:	11000044 	addi	r4,r2,1
   82dd4:	e0bffb17 	ldw	r2,-20(fp)
   82dd8:	114001c4 	addi	r5,r2,7
   82ddc:	018000c4 	movi	r6,3
   82de0:	e1fffd17 	ldw	r7,-12(fp)
   82de4:	00813580 	call	81358 <drawHLine>
			return 6;
   82de8:	00c00184 	movi	r3,6
   82dec:	e0fffe15 	stw	r3,-8(fp)
   82df0:	00057106 	br	843b8 <write_letter+0x29b4>

		case 'c':
			drawVLine(x+1,y+4,3,color);
   82df4:	e0bffa17 	ldw	r2,-24(fp)
   82df8:	11000044 	addi	r4,r2,1
   82dfc:	e0bffb17 	ldw	r2,-20(fp)
   82e00:	11400104 	addi	r5,r2,4
   82e04:	018000c4 	movi	r6,3
   82e08:	e1fffd17 	ldw	r7,-12(fp)
   82e0c:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+3,2,color);
   82e10:	e0bffa17 	ldw	r2,-24(fp)
   82e14:	11000084 	addi	r4,r2,2
   82e18:	e0bffb17 	ldw	r2,-20(fp)
   82e1c:	114000c4 	addi	r5,r2,3
   82e20:	01800084 	movi	r6,2
   82e24:	e1fffd17 	ldw	r7,-12(fp)
   82e28:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,2,color);
   82e2c:	e0bffa17 	ldw	r2,-24(fp)
   82e30:	11000084 	addi	r4,r2,2
   82e34:	e0bffb17 	ldw	r2,-20(fp)
   82e38:	114001c4 	addi	r5,r2,7
   82e3c:	01800084 	movi	r6,2
   82e40:	e1fffd17 	ldw	r7,-12(fp)
   82e44:	00813580 	call	81358 <drawHLine>
			return 5;
   82e48:	01000144 	movi	r4,5
   82e4c:	e13ffe15 	stw	r4,-8(fp)
   82e50:	00055906 	br	843b8 <write_letter+0x29b4>

		case 'd':
			drawVLine(x+4,y,8,color);
   82e54:	e0bffa17 	ldw	r2,-24(fp)
   82e58:	11000104 	addi	r4,r2,4
   82e5c:	e17ffb17 	ldw	r5,-20(fp)
   82e60:	01800204 	movi	r6,8
   82e64:	e1fffd17 	ldw	r7,-12(fp)
   82e68:	00815340 	call	81534 <drawVLine>
			drawVLine(x+1,y+4,3,color);
   82e6c:	e0bffa17 	ldw	r2,-24(fp)
   82e70:	11000044 	addi	r4,r2,1
   82e74:	e0bffb17 	ldw	r2,-20(fp)
   82e78:	11400104 	addi	r5,r2,4
   82e7c:	018000c4 	movi	r6,3
   82e80:	e1fffd17 	ldw	r7,-12(fp)
   82e84:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+3,2,color);
   82e88:	e0bffa17 	ldw	r2,-24(fp)
   82e8c:	11000084 	addi	r4,r2,2
   82e90:	e0bffb17 	ldw	r2,-20(fp)
   82e94:	114000c4 	addi	r5,r2,3
   82e98:	01800084 	movi	r6,2
   82e9c:	e1fffd17 	ldw	r7,-12(fp)
   82ea0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,2,color);
   82ea4:	e0bffa17 	ldw	r2,-24(fp)
   82ea8:	11000084 	addi	r4,r2,2
   82eac:	e0bffb17 	ldw	r2,-20(fp)
   82eb0:	114001c4 	addi	r5,r2,7
   82eb4:	01800084 	movi	r6,2
   82eb8:	e1fffd17 	ldw	r7,-12(fp)
   82ebc:	00813580 	call	81358 <drawHLine>
			return 6;
   82ec0:	00800184 	movi	r2,6
   82ec4:	e0bffe15 	stw	r2,-8(fp)
   82ec8:	00053b06 	br	843b8 <write_letter+0x29b4>

		case 'e':
			drawVLine(x+1,y+4,3,color);
   82ecc:	e0bffa17 	ldw	r2,-24(fp)
   82ed0:	11000044 	addi	r4,r2,1
   82ed4:	e0bffb17 	ldw	r2,-20(fp)
   82ed8:	11400104 	addi	r5,r2,4
   82edc:	018000c4 	movi	r6,3
   82ee0:	e1fffd17 	ldw	r7,-12(fp)
   82ee4:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+4,2,color);
   82ee8:	e0bffa17 	ldw	r2,-24(fp)
   82eec:	11000104 	addi	r4,r2,4
   82ef0:	e0bffb17 	ldw	r2,-20(fp)
   82ef4:	11400104 	addi	r5,r2,4
   82ef8:	01800084 	movi	r6,2
   82efc:	e1fffd17 	ldw	r7,-12(fp)
   82f00:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+3,2,color);
   82f04:	e0bffa17 	ldw	r2,-24(fp)
   82f08:	11000084 	addi	r4,r2,2
   82f0c:	e0bffb17 	ldw	r2,-20(fp)
   82f10:	114000c4 	addi	r5,r2,3
   82f14:	01800084 	movi	r6,2
   82f18:	e1fffd17 	ldw	r7,-12(fp)
   82f1c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+5,3,color);
   82f20:	e0bffa17 	ldw	r2,-24(fp)
   82f24:	11000084 	addi	r4,r2,2
   82f28:	e0bffb17 	ldw	r2,-20(fp)
   82f2c:	11400144 	addi	r5,r2,5
   82f30:	018000c4 	movi	r6,3
   82f34:	e1fffd17 	ldw	r7,-12(fp)
   82f38:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,3,color);
   82f3c:	e0bffa17 	ldw	r2,-24(fp)
   82f40:	11000084 	addi	r4,r2,2
   82f44:	e0bffb17 	ldw	r2,-20(fp)
   82f48:	114001c4 	addi	r5,r2,7
   82f4c:	018000c4 	movi	r6,3
   82f50:	e1fffd17 	ldw	r7,-12(fp)
   82f54:	00813580 	call	81358 <drawHLine>
			return 6;
   82f58:	00c00184 	movi	r3,6
   82f5c:	e0fffe15 	stw	r3,-8(fp)
   82f60:	00051506 	br	843b8 <write_letter+0x29b4>

		case 'f':
			drawVLine(x+2,y+1,7,color);
   82f64:	e0bffa17 	ldw	r2,-24(fp)
   82f68:	11000084 	addi	r4,r2,2
   82f6c:	e0bffb17 	ldw	r2,-20(fp)
   82f70:	11400044 	addi	r5,r2,1
   82f74:	018001c4 	movi	r6,7
   82f78:	e1fffd17 	ldw	r7,-12(fp)
   82f7c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+1,2,color);
   82f80:	e0bffa17 	ldw	r2,-24(fp)
   82f84:	11000104 	addi	r4,r2,4
   82f88:	e0bffb17 	ldw	r2,-20(fp)
   82f8c:	11400044 	addi	r5,r2,1
   82f90:	01800084 	movi	r6,2
   82f94:	e1fffd17 	ldw	r7,-12(fp)
   82f98:	00815340 	call	81534 <drawVLine>
			drawHLine(x+3,y,1,color);
   82f9c:	e0bffa17 	ldw	r2,-24(fp)
   82fa0:	110000c4 	addi	r4,r2,3
   82fa4:	e17ffb17 	ldw	r5,-20(fp)
   82fa8:	01800044 	movi	r6,1
   82fac:	e1fffd17 	ldw	r7,-12(fp)
   82fb0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+4,3,color);
   82fb4:	e0bffa17 	ldw	r2,-24(fp)
   82fb8:	11000044 	addi	r4,r2,1
   82fbc:	e0bffb17 	ldw	r2,-20(fp)
   82fc0:	11400104 	addi	r5,r2,4
   82fc4:	018000c4 	movi	r6,3
   82fc8:	e1fffd17 	ldw	r7,-12(fp)
   82fcc:	00813580 	call	81358 <drawHLine>
			return 6;
   82fd0:	01000184 	movi	r4,6
   82fd4:	e13ffe15 	stw	r4,-8(fp)
   82fd8:	0004f706 	br	843b8 <write_letter+0x29b4>

		case 'g':
			drawVLine(x+1,y+4,3,color);
   82fdc:	e0bffa17 	ldw	r2,-24(fp)
   82fe0:	11000044 	addi	r4,r2,1
   82fe4:	e0bffb17 	ldw	r2,-20(fp)
   82fe8:	11400104 	addi	r5,r2,4
   82fec:	018000c4 	movi	r6,3
   82ff0:	e1fffd17 	ldw	r7,-12(fp)
   82ff4:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+3,7,color);
   82ff8:	e0bffa17 	ldw	r2,-24(fp)
   82ffc:	11000104 	addi	r4,r2,4
   83000:	e0bffb17 	ldw	r2,-20(fp)
   83004:	114000c4 	addi	r5,r2,3
   83008:	018001c4 	movi	r6,7
   8300c:	e1fffd17 	ldw	r7,-12(fp)
   83010:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+3,3,color);
   83014:	e0bffa17 	ldw	r2,-24(fp)
   83018:	11000084 	addi	r4,r2,2
   8301c:	e0bffb17 	ldw	r2,-20(fp)
   83020:	114000c4 	addi	r5,r2,3
   83024:	018000c4 	movi	r6,3
   83028:	e1fffd17 	ldw	r7,-12(fp)
   8302c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,3,color);
   83030:	e0bffa17 	ldw	r2,-24(fp)
   83034:	11000084 	addi	r4,r2,2
   83038:	e0bffb17 	ldw	r2,-20(fp)
   8303c:	114001c4 	addi	r5,r2,7
   83040:	018000c4 	movi	r6,3
   83044:	e1fffd17 	ldw	r7,-12(fp)
   83048:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+9,1,color);
   8304c:	e0bffa17 	ldw	r2,-24(fp)
   83050:	11000044 	addi	r4,r2,1
   83054:	e0bffb17 	ldw	r2,-20(fp)
   83058:	11400244 	addi	r5,r2,9
   8305c:	01800044 	movi	r6,1
   83060:	e1fffd17 	ldw	r7,-12(fp)
   83064:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+10,2,color);
   83068:	e0bffa17 	ldw	r2,-24(fp)
   8306c:	11000084 	addi	r4,r2,2
   83070:	e0bffb17 	ldw	r2,-20(fp)
   83074:	11400284 	addi	r5,r2,10
   83078:	01800084 	movi	r6,2
   8307c:	e1fffd17 	ldw	r7,-12(fp)
   83080:	00813580 	call	81358 <drawHLine>
			return 6;
   83084:	00800184 	movi	r2,6
   83088:	e0bffe15 	stw	r2,-8(fp)
   8308c:	0004ca06 	br	843b8 <write_letter+0x29b4>

		case 'h':
			drawVLine(x+1,y,8,color);
   83090:	e0bffa17 	ldw	r2,-24(fp)
   83094:	11000044 	addi	r4,r2,1
   83098:	e17ffb17 	ldw	r5,-20(fp)
   8309c:	01800204 	movi	r6,8
   830a0:	e1fffd17 	ldw	r7,-12(fp)
   830a4:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+4,4,color);
   830a8:	e0bffa17 	ldw	r2,-24(fp)
   830ac:	11000104 	addi	r4,r2,4
   830b0:	e0bffb17 	ldw	r2,-20(fp)
   830b4:	11400104 	addi	r5,r2,4
   830b8:	01800104 	movi	r6,4
   830bc:	e1fffd17 	ldw	r7,-12(fp)
   830c0:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+3,3,color);
   830c4:	e0bffa17 	ldw	r2,-24(fp)
   830c8:	11000044 	addi	r4,r2,1
   830cc:	e0bffb17 	ldw	r2,-20(fp)
   830d0:	114000c4 	addi	r5,r2,3
   830d4:	018000c4 	movi	r6,3
   830d8:	e1fffd17 	ldw	r7,-12(fp)
   830dc:	00813580 	call	81358 <drawHLine>
			return 6;
   830e0:	00c00184 	movi	r3,6
   830e4:	e0fffe15 	stw	r3,-8(fp)
   830e8:	0004b306 	br	843b8 <write_letter+0x29b4>

		case 'i':
			drawVLine(x+1,y+1,1,color);
   830ec:	e0bffa17 	ldw	r2,-24(fp)
   830f0:	11000044 	addi	r4,r2,1
   830f4:	e0bffb17 	ldw	r2,-20(fp)
   830f8:	11400044 	addi	r5,r2,1
   830fc:	01800044 	movi	r6,1
   83100:	e1fffd17 	ldw	r7,-12(fp)
   83104:	00815340 	call	81534 <drawVLine>
			drawVLine(x+1,y+3,5,color);
   83108:	e0bffa17 	ldw	r2,-24(fp)
   8310c:	11000044 	addi	r4,r2,1
   83110:	e0bffb17 	ldw	r2,-20(fp)
   83114:	114000c4 	addi	r5,r2,3
   83118:	01800144 	movi	r6,5
   8311c:	e1fffd17 	ldw	r7,-12(fp)
   83120:	00815340 	call	81534 <drawVLine>
			return 3;
   83124:	010000c4 	movi	r4,3
   83128:	e13ffe15 	stw	r4,-8(fp)
   8312c:	0004a206 	br	843b8 <write_letter+0x29b4>

		case 'j':
			drawVLine(x+4,y+3,7,color);
   83130:	e0bffa17 	ldw	r2,-24(fp)
   83134:	11000104 	addi	r4,r2,4
   83138:	e0bffb17 	ldw	r2,-20(fp)
   8313c:	114000c4 	addi	r5,r2,3
   83140:	018001c4 	movi	r6,7
   83144:	e1fffd17 	ldw	r7,-12(fp)
   83148:	00815340 	call	81534 <drawVLine>
			drawHLine(x+4,y+1,1,color);
   8314c:	e0bffa17 	ldw	r2,-24(fp)
   83150:	11000104 	addi	r4,r2,4
   83154:	e0bffb17 	ldw	r2,-20(fp)
   83158:	11400044 	addi	r5,r2,1
   8315c:	01800044 	movi	r6,1
   83160:	e1fffd17 	ldw	r7,-12(fp)
   83164:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+9,1,color);
   83168:	e0bffa17 	ldw	r2,-24(fp)
   8316c:	11000044 	addi	r4,r2,1
   83170:	e0bffb17 	ldw	r2,-20(fp)
   83174:	11400244 	addi	r5,r2,9
   83178:	01800044 	movi	r6,1
   8317c:	e1fffd17 	ldw	r7,-12(fp)
   83180:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+10,2,color);
   83184:	e0bffa17 	ldw	r2,-24(fp)
   83188:	11000084 	addi	r4,r2,2
   8318c:	e0bffb17 	ldw	r2,-20(fp)
   83190:	11400284 	addi	r5,r2,10
   83194:	01800084 	movi	r6,2
   83198:	e1fffd17 	ldw	r7,-12(fp)
   8319c:	00813580 	call	81358 <drawHLine>
			return 6;
   831a0:	00800184 	movi	r2,6
   831a4:	e0bffe15 	stw	r2,-8(fp)
   831a8:	00048306 	br	843b8 <write_letter+0x29b4>

		case 'k':
			drawVLine(x+1,y,8,color);
   831ac:	e0bffa17 	ldw	r2,-24(fp)
   831b0:	11000044 	addi	r4,r2,1
   831b4:	e17ffb17 	ldw	r5,-20(fp)
   831b8:	01800204 	movi	r6,8
   831bc:	e1fffd17 	ldw	r7,-12(fp)
   831c0:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+2,1,color);
   831c4:	e0bffa17 	ldw	r2,-24(fp)
   831c8:	11000104 	addi	r4,r2,4
   831cc:	e0bffb17 	ldw	r2,-20(fp)
   831d0:	11400084 	addi	r5,r2,2
   831d4:	01800044 	movi	r6,1
   831d8:	e1fffd17 	ldw	r7,-12(fp)
   831dc:	00815340 	call	81534 <drawVLine>
			drawVLine(x+3,y+3,1,color);
   831e0:	e0bffa17 	ldw	r2,-24(fp)
   831e4:	110000c4 	addi	r4,r2,3
   831e8:	e0bffb17 	ldw	r2,-20(fp)
   831ec:	114000c4 	addi	r5,r2,3
   831f0:	01800044 	movi	r6,1
   831f4:	e1fffd17 	ldw	r7,-12(fp)
   831f8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+2,y+4,2,color);
   831fc:	e0bffa17 	ldw	r2,-24(fp)
   83200:	11000084 	addi	r4,r2,2
   83204:	e0bffb17 	ldw	r2,-20(fp)
   83208:	11400104 	addi	r5,r2,4
   8320c:	01800084 	movi	r6,2
   83210:	e1fffd17 	ldw	r7,-12(fp)
   83214:	00815340 	call	81534 <drawVLine>
			drawVLine(x+3,y+6,1,color);
   83218:	e0bffa17 	ldw	r2,-24(fp)
   8321c:	110000c4 	addi	r4,r2,3
   83220:	e0bffb17 	ldw	r2,-20(fp)
   83224:	11400184 	addi	r5,r2,6
   83228:	01800044 	movi	r6,1
   8322c:	e1fffd17 	ldw	r7,-12(fp)
   83230:	00815340 	call	81534 <drawVLine>
			drawVLine(x+4,y+7,1,color);
   83234:	e0bffa17 	ldw	r2,-24(fp)
   83238:	11000104 	addi	r4,r2,4
   8323c:	e0bffb17 	ldw	r2,-20(fp)
   83240:	114001c4 	addi	r5,r2,7
   83244:	01800044 	movi	r6,1
   83248:	e1fffd17 	ldw	r7,-12(fp)
   8324c:	00815340 	call	81534 <drawVLine>
			return 6;
   83250:	00c00184 	movi	r3,6
   83254:	e0fffe15 	stw	r3,-8(fp)
   83258:	00045706 	br	843b8 <write_letter+0x29b4>

		case 'l':
			drawVLine(x+1,y,7,color);
   8325c:	e0bffa17 	ldw	r2,-24(fp)
   83260:	11000044 	addi	r4,r2,1
   83264:	e17ffb17 	ldw	r5,-20(fp)
   83268:	018001c4 	movi	r6,7
   8326c:	e1fffd17 	ldw	r7,-12(fp)
   83270:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+7,2,color);
   83274:	e0bffa17 	ldw	r2,-24(fp)
   83278:	11000084 	addi	r4,r2,2
   8327c:	e0bffb17 	ldw	r2,-20(fp)
   83280:	114001c4 	addi	r5,r2,7
   83284:	01800084 	movi	r6,2
   83288:	e1fffd17 	ldw	r7,-12(fp)
   8328c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+6,1,color);
   83290:	e0bffa17 	ldw	r2,-24(fp)
   83294:	11000104 	addi	r4,r2,4
   83298:	e0bffb17 	ldw	r2,-20(fp)
   8329c:	11400184 	addi	r5,r2,6
   832a0:	01800044 	movi	r6,1
   832a4:	e1fffd17 	ldw	r7,-12(fp)
   832a8:	00813580 	call	81358 <drawHLine>
			return 6;
   832ac:	01000184 	movi	r4,6
   832b0:	e13ffe15 	stw	r4,-8(fp)
   832b4:	00044006 	br	843b8 <write_letter+0x29b4>
		case 'm':
		drawVLine(x+1,y+3,5,color);
   832b8:	e0bffa17 	ldw	r2,-24(fp)
   832bc:	11000044 	addi	r4,r2,1
   832c0:	e0bffb17 	ldw	r2,-20(fp)
   832c4:	114000c4 	addi	r5,r2,3
   832c8:	01800144 	movi	r6,5
   832cc:	e1fffd17 	ldw	r7,-12(fp)
   832d0:	00815340 	call	81534 <drawVLine>
		drawVLine(x+2,y+4,1,color);
   832d4:	e0bffa17 	ldw	r2,-24(fp)
   832d8:	11000084 	addi	r4,r2,2
   832dc:	e0bffb17 	ldw	r2,-20(fp)
   832e0:	11400104 	addi	r5,r2,4
   832e4:	01800044 	movi	r6,1
   832e8:	e1fffd17 	ldw	r7,-12(fp)
   832ec:	00815340 	call	81534 <drawVLine>
		drawVLine(x+3,y+3,1,color);
   832f0:	e0bffa17 	ldw	r2,-24(fp)
   832f4:	110000c4 	addi	r4,r2,3
   832f8:	e0bffb17 	ldw	r2,-20(fp)
   832fc:	114000c4 	addi	r5,r2,3
   83300:	01800044 	movi	r6,1
   83304:	e1fffd17 	ldw	r7,-12(fp)
   83308:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+4,4,color);
   8330c:	e0bffa17 	ldw	r2,-24(fp)
   83310:	11000104 	addi	r4,r2,4
   83314:	e0bffb17 	ldw	r2,-20(fp)
   83318:	11400104 	addi	r5,r2,4
   8331c:	01800104 	movi	r6,4
   83320:	e1fffd17 	ldw	r7,-12(fp)
   83324:	00815340 	call	81534 <drawVLine>
		drawVLine(x+5,y+4,1,color);
   83328:	e0bffa17 	ldw	r2,-24(fp)
   8332c:	11000144 	addi	r4,r2,5
   83330:	e0bffb17 	ldw	r2,-20(fp)
   83334:	11400104 	addi	r5,r2,4
   83338:	01800044 	movi	r6,1
   8333c:	e1fffd17 	ldw	r7,-12(fp)
   83340:	00815340 	call	81534 <drawVLine>
		drawVLine(x+6,y+3,1,color);
   83344:	e0bffa17 	ldw	r2,-24(fp)
   83348:	11000184 	addi	r4,r2,6
   8334c:	e0bffb17 	ldw	r2,-20(fp)
   83350:	114000c4 	addi	r5,r2,3
   83354:	01800044 	movi	r6,1
   83358:	e1fffd17 	ldw	r7,-12(fp)
   8335c:	00815340 	call	81534 <drawVLine>
		drawVLine(x+7,y+4,4,color);
   83360:	e0bffa17 	ldw	r2,-24(fp)
   83364:	110001c4 	addi	r4,r2,7
   83368:	e0bffb17 	ldw	r2,-20(fp)
   8336c:	11400104 	addi	r5,r2,4
   83370:	01800104 	movi	r6,4
   83374:	e1fffd17 	ldw	r7,-12(fp)
   83378:	00815340 	call	81534 <drawVLine>
		return 9;
   8337c:	00800244 	movi	r2,9
   83380:	e0bffe15 	stw	r2,-8(fp)
   83384:	00040c06 	br	843b8 <write_letter+0x29b4>

		case 'n':
		drawVLine(x+1,y+3,5,color);
   83388:	e0bffa17 	ldw	r2,-24(fp)
   8338c:	11000044 	addi	r4,r2,1
   83390:	e0bffb17 	ldw	r2,-20(fp)
   83394:	114000c4 	addi	r5,r2,3
   83398:	01800144 	movi	r6,5
   8339c:	e1fffd17 	ldw	r7,-12(fp)
   833a0:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+4,4,color);
   833a4:	e0bffa17 	ldw	r2,-24(fp)
   833a8:	11000104 	addi	r4,r2,4
   833ac:	e0bffb17 	ldw	r2,-20(fp)
   833b0:	11400104 	addi	r5,r2,4
   833b4:	01800104 	movi	r6,4
   833b8:	e1fffd17 	ldw	r7,-12(fp)
   833bc:	00815340 	call	81534 <drawVLine>
		drawHLine(x+1,y+3,3,color);
   833c0:	e0bffa17 	ldw	r2,-24(fp)
   833c4:	11000044 	addi	r4,r2,1
   833c8:	e0bffb17 	ldw	r2,-20(fp)
   833cc:	114000c4 	addi	r5,r2,3
   833d0:	018000c4 	movi	r6,3
   833d4:	e1fffd17 	ldw	r7,-12(fp)
   833d8:	00813580 	call	81358 <drawHLine>
		return 6;
   833dc:	00c00184 	movi	r3,6
   833e0:	e0fffe15 	stw	r3,-8(fp)
   833e4:	0003f406 	br	843b8 <write_letter+0x29b4>

		case 'o':
		drawVLine(x+1,y+4,3,color);
   833e8:	e0bffa17 	ldw	r2,-24(fp)
   833ec:	11000044 	addi	r4,r2,1
   833f0:	e0bffb17 	ldw	r2,-20(fp)
   833f4:	11400104 	addi	r5,r2,4
   833f8:	018000c4 	movi	r6,3
   833fc:	e1fffd17 	ldw	r7,-12(fp)
   83400:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+4,3,color);
   83404:	e0bffa17 	ldw	r2,-24(fp)
   83408:	11000104 	addi	r4,r2,4
   8340c:	e0bffb17 	ldw	r2,-20(fp)
   83410:	11400104 	addi	r5,r2,4
   83414:	018000c4 	movi	r6,3
   83418:	e1fffd17 	ldw	r7,-12(fp)
   8341c:	00815340 	call	81534 <drawVLine>
		drawHLine(x+2,y+3,2,color);
   83420:	e0bffa17 	ldw	r2,-24(fp)
   83424:	11000084 	addi	r4,r2,2
   83428:	e0bffb17 	ldw	r2,-20(fp)
   8342c:	114000c4 	addi	r5,r2,3
   83430:	01800084 	movi	r6,2
   83434:	e1fffd17 	ldw	r7,-12(fp)
   83438:	00813580 	call	81358 <drawHLine>
		drawHLine(x+2,y+7,2,color);
   8343c:	e0bffa17 	ldw	r2,-24(fp)
   83440:	11000084 	addi	r4,r2,2
   83444:	e0bffb17 	ldw	r2,-20(fp)
   83448:	114001c4 	addi	r5,r2,7
   8344c:	01800084 	movi	r6,2
   83450:	e1fffd17 	ldw	r7,-12(fp)
   83454:	00813580 	call	81358 <drawHLine>
		return 6;
   83458:	01000184 	movi	r4,6
   8345c:	e13ffe15 	stw	r4,-8(fp)
   83460:	0003d506 	br	843b8 <write_letter+0x29b4>

		case 'p':
		drawVLine(x+1,y+3,8,color);
   83464:	e0bffa17 	ldw	r2,-24(fp)
   83468:	11000044 	addi	r4,r2,1
   8346c:	e0bffb17 	ldw	r2,-20(fp)
   83470:	114000c4 	addi	r5,r2,3
   83474:	01800204 	movi	r6,8
   83478:	e1fffd17 	ldw	r7,-12(fp)
   8347c:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+4,3,color);
   83480:	e0bffa17 	ldw	r2,-24(fp)
   83484:	11000104 	addi	r4,r2,4
   83488:	e0bffb17 	ldw	r2,-20(fp)
   8348c:	11400104 	addi	r5,r2,4
   83490:	018000c4 	movi	r6,3
   83494:	e1fffd17 	ldw	r7,-12(fp)
   83498:	00815340 	call	81534 <drawVLine>
		drawHLine(x+2,y+3,2,color);
   8349c:	e0bffa17 	ldw	r2,-24(fp)
   834a0:	11000084 	addi	r4,r2,2
   834a4:	e0bffb17 	ldw	r2,-20(fp)
   834a8:	114000c4 	addi	r5,r2,3
   834ac:	01800084 	movi	r6,2
   834b0:	e1fffd17 	ldw	r7,-12(fp)
   834b4:	00813580 	call	81358 <drawHLine>
		drawHLine(x+2,y+7,2,color);
   834b8:	e0bffa17 	ldw	r2,-24(fp)
   834bc:	11000084 	addi	r4,r2,2
   834c0:	e0bffb17 	ldw	r2,-20(fp)
   834c4:	114001c4 	addi	r5,r2,7
   834c8:	01800084 	movi	r6,2
   834cc:	e1fffd17 	ldw	r7,-12(fp)
   834d0:	00813580 	call	81358 <drawHLine>
		return 6;
   834d4:	00800184 	movi	r2,6
   834d8:	e0bffe15 	stw	r2,-8(fp)
   834dc:	0003b606 	br	843b8 <write_letter+0x29b4>

		case 'q':
		drawVLine(x+1,y+4,3,color);
   834e0:	e0bffa17 	ldw	r2,-24(fp)
   834e4:	11000044 	addi	r4,r2,1
   834e8:	e0bffb17 	ldw	r2,-20(fp)
   834ec:	11400104 	addi	r5,r2,4
   834f0:	018000c4 	movi	r6,3
   834f4:	e1fffd17 	ldw	r7,-12(fp)
   834f8:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+3,8,color);
   834fc:	e0bffa17 	ldw	r2,-24(fp)
   83500:	11000104 	addi	r4,r2,4
   83504:	e0bffb17 	ldw	r2,-20(fp)
   83508:	114000c4 	addi	r5,r2,3
   8350c:	01800204 	movi	r6,8
   83510:	e1fffd17 	ldw	r7,-12(fp)
   83514:	00815340 	call	81534 <drawVLine>
		drawHLine(x+2,y+3,2,color);
   83518:	e0bffa17 	ldw	r2,-24(fp)
   8351c:	11000084 	addi	r4,r2,2
   83520:	e0bffb17 	ldw	r2,-20(fp)
   83524:	114000c4 	addi	r5,r2,3
   83528:	01800084 	movi	r6,2
   8352c:	e1fffd17 	ldw	r7,-12(fp)
   83530:	00813580 	call	81358 <drawHLine>
		drawHLine(x+2,y+7,2,color);
   83534:	e0bffa17 	ldw	r2,-24(fp)
   83538:	11000084 	addi	r4,r2,2
   8353c:	e0bffb17 	ldw	r2,-20(fp)
   83540:	114001c4 	addi	r5,r2,7
   83544:	01800084 	movi	r6,2
   83548:	e1fffd17 	ldw	r7,-12(fp)
   8354c:	00813580 	call	81358 <drawHLine>
		return 6;
   83550:	00c00184 	movi	r3,6
   83554:	e0fffe15 	stw	r3,-8(fp)
   83558:	00039706 	br	843b8 <write_letter+0x29b4>

		case 'r':
		drawVLine(x+1,y+3,5,color);
   8355c:	e0bffa17 	ldw	r2,-24(fp)
   83560:	11000044 	addi	r4,r2,1
   83564:	e0bffb17 	ldw	r2,-20(fp)
   83568:	114000c4 	addi	r5,r2,3
   8356c:	01800144 	movi	r6,5
   83570:	e1fffd17 	ldw	r7,-12(fp)
   83574:	00815340 	call	81534 <drawVLine>
		drawVLine(x+2,y+4,1,color);
   83578:	e0bffa17 	ldw	r2,-24(fp)
   8357c:	11000084 	addi	r4,r2,2
   83580:	e0bffb17 	ldw	r2,-20(fp)
   83584:	11400104 	addi	r5,r2,4
   83588:	01800044 	movi	r6,1
   8358c:	e1fffd17 	ldw	r7,-12(fp)
   83590:	00815340 	call	81534 <drawVLine>
		drawVLine(x+3,y+3,1,color);
   83594:	e0bffa17 	ldw	r2,-24(fp)
   83598:	110000c4 	addi	r4,r2,3
   8359c:	e0bffb17 	ldw	r2,-20(fp)
   835a0:	114000c4 	addi	r5,r2,3
   835a4:	01800044 	movi	r6,1
   835a8:	e1fffd17 	ldw	r7,-12(fp)
   835ac:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+4,1,color);
   835b0:	e0bffa17 	ldw	r2,-24(fp)
   835b4:	11000104 	addi	r4,r2,4
   835b8:	e0bffb17 	ldw	r2,-20(fp)
   835bc:	11400104 	addi	r5,r2,4
   835c0:	01800044 	movi	r6,1
   835c4:	e1fffd17 	ldw	r7,-12(fp)
   835c8:	00815340 	call	81534 <drawVLine>
		return 6;
   835cc:	01000184 	movi	r4,6
   835d0:	e13ffe15 	stw	r4,-8(fp)
   835d4:	00037806 	br	843b8 <write_letter+0x29b4>

		case 's':
		drawHLine(x+2,y+3,3,color);
   835d8:	e0bffa17 	ldw	r2,-24(fp)
   835dc:	11000084 	addi	r4,r2,2
   835e0:	e0bffb17 	ldw	r2,-20(fp)
   835e4:	114000c4 	addi	r5,r2,3
   835e8:	018000c4 	movi	r6,3
   835ec:	e1fffd17 	ldw	r7,-12(fp)
   835f0:	00813580 	call	81358 <drawHLine>
		drawHLine(x+1,y+4,1,color);
   835f4:	e0bffa17 	ldw	r2,-24(fp)
   835f8:	11000044 	addi	r4,r2,1
   835fc:	e0bffb17 	ldw	r2,-20(fp)
   83600:	11400104 	addi	r5,r2,4
   83604:	01800044 	movi	r6,1
   83608:	e1fffd17 	ldw	r7,-12(fp)
   8360c:	00813580 	call	81358 <drawHLine>
		drawHLine(x+2,y+5,2,color);
   83610:	e0bffa17 	ldw	r2,-24(fp)
   83614:	11000084 	addi	r4,r2,2
   83618:	e0bffb17 	ldw	r2,-20(fp)
   8361c:	11400144 	addi	r5,r2,5
   83620:	01800084 	movi	r6,2
   83624:	e1fffd17 	ldw	r7,-12(fp)
   83628:	00813580 	call	81358 <drawHLine>
		drawHLine(x+4,y+6,1,color);
   8362c:	e0bffa17 	ldw	r2,-24(fp)
   83630:	11000104 	addi	r4,r2,4
   83634:	e0bffb17 	ldw	r2,-20(fp)
   83638:	11400184 	addi	r5,r2,6
   8363c:	01800044 	movi	r6,1
   83640:	e1fffd17 	ldw	r7,-12(fp)
   83644:	00813580 	call	81358 <drawHLine>
		drawHLine(x+1,y+7,3,color);
   83648:	e0bffa17 	ldw	r2,-24(fp)
   8364c:	11000044 	addi	r4,r2,1
   83650:	e0bffb17 	ldw	r2,-20(fp)
   83654:	114001c4 	addi	r5,r2,7
   83658:	018000c4 	movi	r6,3
   8365c:	e1fffd17 	ldw	r7,-12(fp)
   83660:	00813580 	call	81358 <drawHLine>
		return 6;
   83664:	00800184 	movi	r2,6
   83668:	e0bffe15 	stw	r2,-8(fp)
   8366c:	00035206 	br	843b8 <write_letter+0x29b4>

		case 't':
		drawVLine(x+2,y,7,color);
   83670:	e0bffa17 	ldw	r2,-24(fp)
   83674:	11000084 	addi	r4,r2,2
   83678:	e17ffb17 	ldw	r5,-20(fp)
   8367c:	018001c4 	movi	r6,7
   83680:	e1fffd17 	ldw	r7,-12(fp)
   83684:	00815340 	call	81534 <drawVLine>
		drawHLine(x+1,y+3,3,color);
   83688:	e0bffa17 	ldw	r2,-24(fp)
   8368c:	11000044 	addi	r4,r2,1
   83690:	e0bffb17 	ldw	r2,-20(fp)
   83694:	114000c4 	addi	r5,r2,3
   83698:	018000c4 	movi	r6,3
   8369c:	e1fffd17 	ldw	r7,-12(fp)
   836a0:	00813580 	call	81358 <drawHLine>
		drawHLine(x+3,y+7,2,color);
   836a4:	e0bffa17 	ldw	r2,-24(fp)
   836a8:	110000c4 	addi	r4,r2,3
   836ac:	e0bffb17 	ldw	r2,-20(fp)
   836b0:	114001c4 	addi	r5,r2,7
   836b4:	01800084 	movi	r6,2
   836b8:	e1fffd17 	ldw	r7,-12(fp)
   836bc:	00813580 	call	81358 <drawHLine>
		drawHLine(x+5,y+6,1,color);
   836c0:	e0bffa17 	ldw	r2,-24(fp)
   836c4:	11000144 	addi	r4,r2,5
   836c8:	e0bffb17 	ldw	r2,-20(fp)
   836cc:	11400184 	addi	r5,r2,6
   836d0:	01800044 	movi	r6,1
   836d4:	e1fffd17 	ldw	r7,-12(fp)
   836d8:	00813580 	call	81358 <drawHLine>
		return 7;
   836dc:	00c001c4 	movi	r3,7
   836e0:	e0fffe15 	stw	r3,-8(fp)
   836e4:	00033406 	br	843b8 <write_letter+0x29b4>

		case 'u':
		drawVLine(x+1,y+3,4,color);
   836e8:	e0bffa17 	ldw	r2,-24(fp)
   836ec:	11000044 	addi	r4,r2,1
   836f0:	e0bffb17 	ldw	r2,-20(fp)
   836f4:	114000c4 	addi	r5,r2,3
   836f8:	01800104 	movi	r6,4
   836fc:	e1fffd17 	ldw	r7,-12(fp)
   83700:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+3,5,color);
   83704:	e0bffa17 	ldw	r2,-24(fp)
   83708:	11000104 	addi	r4,r2,4
   8370c:	e0bffb17 	ldw	r2,-20(fp)
   83710:	114000c4 	addi	r5,r2,3
   83714:	01800144 	movi	r6,5
   83718:	e1fffd17 	ldw	r7,-12(fp)
   8371c:	00815340 	call	81534 <drawVLine>
		drawHLine(x+2,y+7,3,color);
   83720:	e0bffa17 	ldw	r2,-24(fp)
   83724:	11000084 	addi	r4,r2,2
   83728:	e0bffb17 	ldw	r2,-20(fp)
   8372c:	114001c4 	addi	r5,r2,7
   83730:	018000c4 	movi	r6,3
   83734:	e1fffd17 	ldw	r7,-12(fp)
   83738:	00813580 	call	81358 <drawHLine>
		return 6;
   8373c:	01000184 	movi	r4,6
   83740:	e13ffe15 	stw	r4,-8(fp)
   83744:	00031c06 	br	843b8 <write_letter+0x29b4>

		case 'v':
		drawVLine(x+1,y+3,2,color);
   83748:	e0bffa17 	ldw	r2,-24(fp)
   8374c:	11000044 	addi	r4,r2,1
   83750:	e0bffb17 	ldw	r2,-20(fp)
   83754:	114000c4 	addi	r5,r2,3
   83758:	01800084 	movi	r6,2
   8375c:	e1fffd17 	ldw	r7,-12(fp)
   83760:	00815340 	call	81534 <drawVLine>
		drawVLine(x+2,y+5,2,color);
   83764:	e0bffa17 	ldw	r2,-24(fp)
   83768:	11000084 	addi	r4,r2,2
   8376c:	e0bffb17 	ldw	r2,-20(fp)
   83770:	11400144 	addi	r5,r2,5
   83774:	01800084 	movi	r6,2
   83778:	e1fffd17 	ldw	r7,-12(fp)
   8377c:	00815340 	call	81534 <drawVLine>
		drawVLine(x+3,y+7,1,color);
   83780:	e0bffa17 	ldw	r2,-24(fp)
   83784:	110000c4 	addi	r4,r2,3
   83788:	e0bffb17 	ldw	r2,-20(fp)
   8378c:	114001c4 	addi	r5,r2,7
   83790:	01800044 	movi	r6,1
   83794:	e1fffd17 	ldw	r7,-12(fp)
   83798:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+5,2,color);
   8379c:	e0bffa17 	ldw	r2,-24(fp)
   837a0:	11000104 	addi	r4,r2,4
   837a4:	e0bffb17 	ldw	r2,-20(fp)
   837a8:	11400144 	addi	r5,r2,5
   837ac:	01800084 	movi	r6,2
   837b0:	e1fffd17 	ldw	r7,-12(fp)
   837b4:	00815340 	call	81534 <drawVLine>
		drawVLine(x+5,y+3,2,color);
   837b8:	e0bffa17 	ldw	r2,-24(fp)
   837bc:	11000144 	addi	r4,r2,5
   837c0:	e0bffb17 	ldw	r2,-20(fp)
   837c4:	114000c4 	addi	r5,r2,3
   837c8:	01800084 	movi	r6,2
   837cc:	e1fffd17 	ldw	r7,-12(fp)
   837d0:	00815340 	call	81534 <drawVLine>
		return 7;
   837d4:	008001c4 	movi	r2,7
   837d8:	e0bffe15 	stw	r2,-8(fp)
   837dc:	0002f606 	br	843b8 <write_letter+0x29b4>

		case 'w':
		drawVLine(x+1,y+3,3,color);
   837e0:	e0bffa17 	ldw	r2,-24(fp)
   837e4:	11000044 	addi	r4,r2,1
   837e8:	e0bffb17 	ldw	r2,-20(fp)
   837ec:	114000c4 	addi	r5,r2,3
   837f0:	018000c4 	movi	r6,3
   837f4:	e1fffd17 	ldw	r7,-12(fp)
   837f8:	00815340 	call	81534 <drawVLine>
		drawVLine(x+2,y+6,2,color);
   837fc:	e0bffa17 	ldw	r2,-24(fp)
   83800:	11000084 	addi	r4,r2,2
   83804:	e0bffb17 	ldw	r2,-20(fp)
   83808:	11400184 	addi	r5,r2,6
   8380c:	01800084 	movi	r6,2
   83810:	e1fffd17 	ldw	r7,-12(fp)
   83814:	00815340 	call	81534 <drawVLine>
		drawVLine(x+3,y+5,1,color);
   83818:	e0bffa17 	ldw	r2,-24(fp)
   8381c:	110000c4 	addi	r4,r2,3
   83820:	e0bffb17 	ldw	r2,-20(fp)
   83824:	11400144 	addi	r5,r2,5
   83828:	01800044 	movi	r6,1
   8382c:	e1fffd17 	ldw	r7,-12(fp)
   83830:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+6,2,color);
   83834:	e0bffa17 	ldw	r2,-24(fp)
   83838:	11000104 	addi	r4,r2,4
   8383c:	e0bffb17 	ldw	r2,-20(fp)
   83840:	11400184 	addi	r5,r2,6
   83844:	01800084 	movi	r6,2
   83848:	e1fffd17 	ldw	r7,-12(fp)
   8384c:	00815340 	call	81534 <drawVLine>
		drawVLine(x+5,y+3,3,color);
   83850:	e0bffa17 	ldw	r2,-24(fp)
   83854:	11000144 	addi	r4,r2,5
   83858:	e0bffb17 	ldw	r2,-20(fp)
   8385c:	114000c4 	addi	r5,r2,3
   83860:	018000c4 	movi	r6,3
   83864:	e1fffd17 	ldw	r7,-12(fp)
   83868:	00815340 	call	81534 <drawVLine>
		return 7;
   8386c:	00c001c4 	movi	r3,7
   83870:	e0fffe15 	stw	r3,-8(fp)
   83874:	0002d006 	br	843b8 <write_letter+0x29b4>

		case 'x':
		drawVLine(x+1,y+3,1,color);
   83878:	e0bffa17 	ldw	r2,-24(fp)
   8387c:	11000044 	addi	r4,r2,1
   83880:	e0bffb17 	ldw	r2,-20(fp)
   83884:	114000c4 	addi	r5,r2,3
   83888:	01800044 	movi	r6,1
   8388c:	e1fffd17 	ldw	r7,-12(fp)
   83890:	00815340 	call	81534 <drawVLine>
		drawVLine(x+2,y+4,1,color);
   83894:	e0bffa17 	ldw	r2,-24(fp)
   83898:	11000084 	addi	r4,r2,2
   8389c:	e0bffb17 	ldw	r2,-20(fp)
   838a0:	11400104 	addi	r5,r2,4
   838a4:	01800044 	movi	r6,1
   838a8:	e1fffd17 	ldw	r7,-12(fp)
   838ac:	00815340 	call	81534 <drawVLine>
		drawVLine(x+3,y+5,1,color);
   838b0:	e0bffa17 	ldw	r2,-24(fp)
   838b4:	110000c4 	addi	r4,r2,3
   838b8:	e0bffb17 	ldw	r2,-20(fp)
   838bc:	11400144 	addi	r5,r2,5
   838c0:	01800044 	movi	r6,1
   838c4:	e1fffd17 	ldw	r7,-12(fp)
   838c8:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+6,1,color);
   838cc:	e0bffa17 	ldw	r2,-24(fp)
   838d0:	11000104 	addi	r4,r2,4
   838d4:	e0bffb17 	ldw	r2,-20(fp)
   838d8:	11400184 	addi	r5,r2,6
   838dc:	01800044 	movi	r6,1
   838e0:	e1fffd17 	ldw	r7,-12(fp)
   838e4:	00815340 	call	81534 <drawVLine>
		drawVLine(x+5,y+7,1,color);
   838e8:	e0bffa17 	ldw	r2,-24(fp)
   838ec:	11000144 	addi	r4,r2,5
   838f0:	e0bffb17 	ldw	r2,-20(fp)
   838f4:	114001c4 	addi	r5,r2,7
   838f8:	01800044 	movi	r6,1
   838fc:	e1fffd17 	ldw	r7,-12(fp)
   83900:	00815340 	call	81534 <drawVLine>
		drawVLine(x+1,y+7,1,color);
   83904:	e0bffa17 	ldw	r2,-24(fp)
   83908:	11000044 	addi	r4,r2,1
   8390c:	e0bffb17 	ldw	r2,-20(fp)
   83910:	114001c4 	addi	r5,r2,7
   83914:	01800044 	movi	r6,1
   83918:	e1fffd17 	ldw	r7,-12(fp)
   8391c:	00815340 	call	81534 <drawVLine>
		drawVLine(x+2,y+6,1,color);
   83920:	e0bffa17 	ldw	r2,-24(fp)
   83924:	11000084 	addi	r4,r2,2
   83928:	e0bffb17 	ldw	r2,-20(fp)
   8392c:	11400184 	addi	r5,r2,6
   83930:	01800044 	movi	r6,1
   83934:	e1fffd17 	ldw	r7,-12(fp)
   83938:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+4,1,color);
   8393c:	e0bffa17 	ldw	r2,-24(fp)
   83940:	11000104 	addi	r4,r2,4
   83944:	e0bffb17 	ldw	r2,-20(fp)
   83948:	11400104 	addi	r5,r2,4
   8394c:	01800044 	movi	r6,1
   83950:	e1fffd17 	ldw	r7,-12(fp)
   83954:	00815340 	call	81534 <drawVLine>
		drawVLine(x+5,y+3,1,color);
   83958:	e0bffa17 	ldw	r2,-24(fp)
   8395c:	11000144 	addi	r4,r2,5
   83960:	e0bffb17 	ldw	r2,-20(fp)
   83964:	114000c4 	addi	r5,r2,3
   83968:	01800044 	movi	r6,1
   8396c:	e1fffd17 	ldw	r7,-12(fp)
   83970:	00815340 	call	81534 <drawVLine>
		return 7;
   83974:	010001c4 	movi	r4,7
   83978:	e13ffe15 	stw	r4,-8(fp)
   8397c:	00028e06 	br	843b8 <write_letter+0x29b4>

		case 'y':
		drawVLine(x+1,y+3,4,color);
   83980:	e0bffa17 	ldw	r2,-24(fp)
   83984:	11000044 	addi	r4,r2,1
   83988:	e0bffb17 	ldw	r2,-20(fp)
   8398c:	114000c4 	addi	r5,r2,3
   83990:	01800104 	movi	r6,4
   83994:	e1fffd17 	ldw	r7,-12(fp)
   83998:	00815340 	call	81534 <drawVLine>
		drawVLine(x+4,y+3,7,color);
   8399c:	e0bffa17 	ldw	r2,-24(fp)
   839a0:	11000104 	addi	r4,r2,4
   839a4:	e0bffb17 	ldw	r2,-20(fp)
   839a8:	114000c4 	addi	r5,r2,3
   839ac:	018001c4 	movi	r6,7
   839b0:	e1fffd17 	ldw	r7,-12(fp)
   839b4:	00815340 	call	81534 <drawVLine>
		drawHLine(x+2,y+7,3,color);
   839b8:	e0bffa17 	ldw	r2,-24(fp)
   839bc:	11000084 	addi	r4,r2,2
   839c0:	e0bffb17 	ldw	r2,-20(fp)
   839c4:	114001c4 	addi	r5,r2,7
   839c8:	018000c4 	movi	r6,3
   839cc:	e1fffd17 	ldw	r7,-12(fp)
   839d0:	00813580 	call	81358 <drawHLine>
		drawHLine(x+1,y+9,1,color);
   839d4:	e0bffa17 	ldw	r2,-24(fp)
   839d8:	11000044 	addi	r4,r2,1
   839dc:	e0bffb17 	ldw	r2,-20(fp)
   839e0:	11400244 	addi	r5,r2,9
   839e4:	01800044 	movi	r6,1
   839e8:	e1fffd17 	ldw	r7,-12(fp)
   839ec:	00813580 	call	81358 <drawHLine>
		drawHLine(x+2,y+10,2,color);
   839f0:	e0bffa17 	ldw	r2,-24(fp)
   839f4:	11000084 	addi	r4,r2,2
   839f8:	e0bffb17 	ldw	r2,-20(fp)
   839fc:	11400284 	addi	r5,r2,10
   83a00:	01800084 	movi	r6,2
   83a04:	e1fffd17 	ldw	r7,-12(fp)
   83a08:	00813580 	call	81358 <drawHLine>
		return 6;
   83a0c:	00800184 	movi	r2,6
   83a10:	e0bffe15 	stw	r2,-8(fp)
   83a14:	00026806 	br	843b8 <write_letter+0x29b4>

		case 'z':
			drawHLine(x+1,y+3,4,color);
   83a18:	e0bffa17 	ldw	r2,-24(fp)
   83a1c:	11000044 	addi	r4,r2,1
   83a20:	e0bffb17 	ldw	r2,-20(fp)
   83a24:	114000c4 	addi	r5,r2,3
   83a28:	01800104 	movi	r6,4
   83a2c:	e1fffd17 	ldw	r7,-12(fp)
   83a30:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,4,color);
   83a34:	e0bffa17 	ldw	r2,-24(fp)
   83a38:	11000044 	addi	r4,r2,1
   83a3c:	e0bffb17 	ldw	r2,-20(fp)
   83a40:	114001c4 	addi	r5,r2,7
   83a44:	01800104 	movi	r6,4
   83a48:	e1fffd17 	ldw	r7,-12(fp)
   83a4c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+4,1,color);
   83a50:	e0bffa17 	ldw	r2,-24(fp)
   83a54:	110000c4 	addi	r4,r2,3
   83a58:	e0bffb17 	ldw	r2,-20(fp)
   83a5c:	11400104 	addi	r5,r2,4
   83a60:	01800044 	movi	r6,1
   83a64:	e1fffd17 	ldw	r7,-12(fp)
   83a68:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+5,1,color);
   83a6c:	e0bffa17 	ldw	r2,-24(fp)
   83a70:	11000084 	addi	r4,r2,2
   83a74:	e0bffb17 	ldw	r2,-20(fp)
   83a78:	11400144 	addi	r5,r2,5
   83a7c:	01800044 	movi	r6,1
   83a80:	e1fffd17 	ldw	r7,-12(fp)
   83a84:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+6,1,color);
   83a88:	e0bffa17 	ldw	r2,-24(fp)
   83a8c:	11000044 	addi	r4,r2,1
   83a90:	e0bffb17 	ldw	r2,-20(fp)
   83a94:	11400184 	addi	r5,r2,6
   83a98:	01800044 	movi	r6,1
   83a9c:	e1fffd17 	ldw	r7,-12(fp)
   83aa0:	00813580 	call	81358 <drawHLine>
			return 6;
   83aa4:	00c00184 	movi	r3,6
   83aa8:	e0fffe15 	stw	r3,-8(fp)
   83aac:	00024206 	br	843b8 <write_letter+0x29b4>

		case '0':
			drawVLine(x+1,y+2,5,color);
   83ab0:	e0bffa17 	ldw	r2,-24(fp)
   83ab4:	11000044 	addi	r4,r2,1
   83ab8:	e0bffb17 	ldw	r2,-20(fp)
   83abc:	11400084 	addi	r5,r2,2
   83ac0:	01800144 	movi	r6,5
   83ac4:	e1fffd17 	ldw	r7,-12(fp)
   83ac8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+2,5,color);
   83acc:	e0bffa17 	ldw	r2,-24(fp)
   83ad0:	11000144 	addi	r4,r2,5
   83ad4:	e0bffb17 	ldw	r2,-20(fp)
   83ad8:	11400084 	addi	r5,r2,2
   83adc:	01800144 	movi	r6,5
   83ae0:	e1fffd17 	ldw	r7,-12(fp)
   83ae4:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+1,3,color);
   83ae8:	e0bffa17 	ldw	r2,-24(fp)
   83aec:	11000084 	addi	r4,r2,2
   83af0:	e0bffb17 	ldw	r2,-20(fp)
   83af4:	11400044 	addi	r5,r2,1
   83af8:	018000c4 	movi	r6,3
   83afc:	e1fffd17 	ldw	r7,-12(fp)
   83b00:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,3,color);
   83b04:	e0bffa17 	ldw	r2,-24(fp)
   83b08:	11000084 	addi	r4,r2,2
   83b0c:	e0bffb17 	ldw	r2,-20(fp)
   83b10:	114001c4 	addi	r5,r2,7
   83b14:	018000c4 	movi	r6,3
   83b18:	e1fffd17 	ldw	r7,-12(fp)
   83b1c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+3,1,color);
   83b20:	e0bffa17 	ldw	r2,-24(fp)
   83b24:	11000084 	addi	r4,r2,2
   83b28:	e0bffb17 	ldw	r2,-20(fp)
   83b2c:	114000c4 	addi	r5,r2,3
   83b30:	01800044 	movi	r6,1
   83b34:	e1fffd17 	ldw	r7,-12(fp)
   83b38:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+4,1,color);
   83b3c:	e0bffa17 	ldw	r2,-24(fp)
   83b40:	110000c4 	addi	r4,r2,3
   83b44:	e0bffb17 	ldw	r2,-20(fp)
   83b48:	11400104 	addi	r5,r2,4
   83b4c:	01800044 	movi	r6,1
   83b50:	e1fffd17 	ldw	r7,-12(fp)
   83b54:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+5,1,color);
   83b58:	e0bffa17 	ldw	r2,-24(fp)
   83b5c:	11000104 	addi	r4,r2,4
   83b60:	e0bffb17 	ldw	r2,-20(fp)
   83b64:	11400144 	addi	r5,r2,5
   83b68:	01800044 	movi	r6,1
   83b6c:	e1fffd17 	ldw	r7,-12(fp)
   83b70:	00813580 	call	81358 <drawHLine>
			return 7;
   83b74:	010001c4 	movi	r4,7
   83b78:	e13ffe15 	stw	r4,-8(fp)
   83b7c:	00020e06 	br	843b8 <write_letter+0x29b4>

		case '1':
			drawVLine(x+2,y+1,7,color);
   83b80:	e0bffa17 	ldw	r2,-24(fp)
   83b84:	11000084 	addi	r4,r2,2
   83b88:	e0bffb17 	ldw	r2,-20(fp)
   83b8c:	11400044 	addi	r5,r2,1
   83b90:	018001c4 	movi	r6,7
   83b94:	e1fffd17 	ldw	r7,-12(fp)
   83b98:	00815340 	call	81534 <drawVLine>
			drawVLine(x+1,y+2,1,color);;
   83b9c:	e0bffa17 	ldw	r2,-24(fp)
   83ba0:	11000044 	addi	r4,r2,1
   83ba4:	e0bffb17 	ldw	r2,-20(fp)
   83ba8:	11400084 	addi	r5,r2,2
   83bac:	01800044 	movi	r6,1
   83bb0:	e1fffd17 	ldw	r7,-12(fp)
   83bb4:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+7,3,color);
   83bb8:	e0bffa17 	ldw	r2,-24(fp)
   83bbc:	11000044 	addi	r4,r2,1
   83bc0:	e0bffb17 	ldw	r2,-20(fp)
   83bc4:	114001c4 	addi	r5,r2,7
   83bc8:	018000c4 	movi	r6,3
   83bcc:	e1fffd17 	ldw	r7,-12(fp)
   83bd0:	00813580 	call	81358 <drawHLine>
			return 5;
   83bd4:	00800144 	movi	r2,5
   83bd8:	e0bffe15 	stw	r2,-8(fp)
   83bdc:	0001f606 	br	843b8 <write_letter+0x29b4>

		case '2':
			drawVLine(x+5,y+2,2,color);
   83be0:	e0bffa17 	ldw	r2,-24(fp)
   83be4:	11000144 	addi	r4,r2,5
   83be8:	e0bffb17 	ldw	r2,-20(fp)
   83bec:	11400084 	addi	r5,r2,2
   83bf0:	01800084 	movi	r6,2
   83bf4:	e1fffd17 	ldw	r7,-12(fp)
   83bf8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+1,y+2,1,color);
   83bfc:	e0bffa17 	ldw	r2,-24(fp)
   83c00:	11000044 	addi	r4,r2,1
   83c04:	e0bffb17 	ldw	r2,-20(fp)
   83c08:	11400084 	addi	r5,r2,2
   83c0c:	01800044 	movi	r6,1
   83c10:	e1fffd17 	ldw	r7,-12(fp)
   83c14:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+1,3,color);
   83c18:	e0bffa17 	ldw	r2,-24(fp)
   83c1c:	11000084 	addi	r4,r2,2
   83c20:	e0bffb17 	ldw	r2,-20(fp)
   83c24:	11400044 	addi	r5,r2,1
   83c28:	018000c4 	movi	r6,3
   83c2c:	e1fffd17 	ldw	r7,-12(fp)
   83c30:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+7,5,color);
   83c34:	e0bffa17 	ldw	r2,-24(fp)
   83c38:	11000044 	addi	r4,r2,1
   83c3c:	e0bffb17 	ldw	r2,-20(fp)
   83c40:	114001c4 	addi	r5,r2,7
   83c44:	01800144 	movi	r6,5
   83c48:	e1fffd17 	ldw	r7,-12(fp)
   83c4c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+4,1,color);
   83c50:	e0bffa17 	ldw	r2,-24(fp)
   83c54:	11000104 	addi	r4,r2,4
   83c58:	e0bffb17 	ldw	r2,-20(fp)
   83c5c:	11400104 	addi	r5,r2,4
   83c60:	01800044 	movi	r6,1
   83c64:	e1fffd17 	ldw	r7,-12(fp)
   83c68:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+5,1,color);
   83c6c:	e0bffa17 	ldw	r2,-24(fp)
   83c70:	110000c4 	addi	r4,r2,3
   83c74:	e0bffb17 	ldw	r2,-20(fp)
   83c78:	11400144 	addi	r5,r2,5
   83c7c:	01800044 	movi	r6,1
   83c80:	e1fffd17 	ldw	r7,-12(fp)
   83c84:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+6,1,color);
   83c88:	e0bffa17 	ldw	r2,-24(fp)
   83c8c:	11000084 	addi	r4,r2,2
   83c90:	e0bffb17 	ldw	r2,-20(fp)
   83c94:	11400184 	addi	r5,r2,6
   83c98:	01800044 	movi	r6,1
   83c9c:	e1fffd17 	ldw	r7,-12(fp)
   83ca0:	00813580 	call	81358 <drawHLine>
			return 7;
   83ca4:	00c001c4 	movi	r3,7
   83ca8:	e0fffe15 	stw	r3,-8(fp)
   83cac:	0001c206 	br	843b8 <write_letter+0x29b4>

		case '3':
			drawVLine(x+5,y+2,2,color);
   83cb0:	e0bffa17 	ldw	r2,-24(fp)
   83cb4:	11000144 	addi	r4,r2,5
   83cb8:	e0bffb17 	ldw	r2,-20(fp)
   83cbc:	11400084 	addi	r5,r2,2
   83cc0:	01800084 	movi	r6,2
   83cc4:	e1fffd17 	ldw	r7,-12(fp)
   83cc8:	00815340 	call	81534 <drawVLine>
			drawVLine(x+1,y+2,1,color);
   83ccc:	e0bffa17 	ldw	r2,-24(fp)
   83cd0:	11000044 	addi	r4,r2,1
   83cd4:	e0bffb17 	ldw	r2,-20(fp)
   83cd8:	11400084 	addi	r5,r2,2
   83cdc:	01800044 	movi	r6,1
   83ce0:	e1fffd17 	ldw	r7,-12(fp)
   83ce4:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+1,3,color);
   83ce8:	e0bffa17 	ldw	r2,-24(fp)
   83cec:	11000084 	addi	r4,r2,2
   83cf0:	e0bffb17 	ldw	r2,-20(fp)
   83cf4:	11400044 	addi	r5,r2,1
   83cf8:	018000c4 	movi	r6,3
   83cfc:	e1fffd17 	ldw	r7,-12(fp)
   83d00:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+4,2,color);
   83d04:	e0bffa17 	ldw	r2,-24(fp)
   83d08:	110000c4 	addi	r4,r2,3
   83d0c:	e0bffb17 	ldw	r2,-20(fp)
   83d10:	11400104 	addi	r5,r2,4
   83d14:	01800084 	movi	r6,2
   83d18:	e1fffd17 	ldw	r7,-12(fp)
   83d1c:	00813580 	call	81358 <drawHLine>
			drawVLine(x+5,y+5,2,color);
   83d20:	e0bffa17 	ldw	r2,-24(fp)
   83d24:	11000144 	addi	r4,r2,5
   83d28:	e0bffb17 	ldw	r2,-20(fp)
   83d2c:	11400144 	addi	r5,r2,5
   83d30:	01800084 	movi	r6,2
   83d34:	e1fffd17 	ldw	r7,-12(fp)
   83d38:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+7,3,color);
   83d3c:	e0bffa17 	ldw	r2,-24(fp)
   83d40:	11000084 	addi	r4,r2,2
   83d44:	e0bffb17 	ldw	r2,-20(fp)
   83d48:	114001c4 	addi	r5,r2,7
   83d4c:	018000c4 	movi	r6,3
   83d50:	e1fffd17 	ldw	r7,-12(fp)
   83d54:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+6,1,color);
   83d58:	e0bffa17 	ldw	r2,-24(fp)
   83d5c:	11000044 	addi	r4,r2,1
   83d60:	e0bffb17 	ldw	r2,-20(fp)
   83d64:	11400184 	addi	r5,r2,6
   83d68:	01800044 	movi	r6,1
   83d6c:	e1fffd17 	ldw	r7,-12(fp)
   83d70:	00813580 	call	81358 <drawHLine>
			return 7;
   83d74:	010001c4 	movi	r4,7
   83d78:	e13ffe15 	stw	r4,-8(fp)
   83d7c:	00018e06 	br	843b8 <write_letter+0x29b4>

		case '4':
			drawVLine(x+4,y+1,7,color);
   83d80:	e0bffa17 	ldw	r2,-24(fp)
   83d84:	11000104 	addi	r4,r2,4
   83d88:	e0bffb17 	ldw	r2,-20(fp)
   83d8c:	11400044 	addi	r5,r2,1
   83d90:	018001c4 	movi	r6,7
   83d94:	e1fffd17 	ldw	r7,-12(fp)
   83d98:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+5,5,color);
   83d9c:	e0bffa17 	ldw	r2,-24(fp)
   83da0:	11000044 	addi	r4,r2,1
   83da4:	e0bffb17 	ldw	r2,-20(fp)
   83da8:	11400144 	addi	r5,r2,5
   83dac:	01800144 	movi	r6,5
   83db0:	e1fffd17 	ldw	r7,-12(fp)
   83db4:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+4,1,color);
   83db8:	e0bffa17 	ldw	r2,-24(fp)
   83dbc:	11000044 	addi	r4,r2,1
   83dc0:	e0bffb17 	ldw	r2,-20(fp)
   83dc4:	11400104 	addi	r5,r2,4
   83dc8:	01800044 	movi	r6,1
   83dcc:	e1fffd17 	ldw	r7,-12(fp)
   83dd0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+3,1,color);
   83dd4:	e0bffa17 	ldw	r2,-24(fp)
   83dd8:	11000084 	addi	r4,r2,2
   83ddc:	e0bffb17 	ldw	r2,-20(fp)
   83de0:	114000c4 	addi	r5,r2,3
   83de4:	01800044 	movi	r6,1
   83de8:	e1fffd17 	ldw	r7,-12(fp)
   83dec:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+2,1,color);
   83df0:	e0bffa17 	ldw	r2,-24(fp)
   83df4:	110000c4 	addi	r4,r2,3
   83df8:	e0bffb17 	ldw	r2,-20(fp)
   83dfc:	11400084 	addi	r5,r2,2
   83e00:	01800044 	movi	r6,1
   83e04:	e1fffd17 	ldw	r7,-12(fp)
   83e08:	00813580 	call	81358 <drawHLine>
			return 7;
   83e0c:	008001c4 	movi	r2,7
   83e10:	e0bffe15 	stw	r2,-8(fp)
   83e14:	00016806 	br	843b8 <write_letter+0x29b4>

		case '5':
			drawVLine(x+1,y+1,4,color);
   83e18:	e0bffa17 	ldw	r2,-24(fp)
   83e1c:	11000044 	addi	r4,r2,1
   83e20:	e0bffb17 	ldw	r2,-20(fp)
   83e24:	11400044 	addi	r5,r2,1
   83e28:	01800104 	movi	r6,4
   83e2c:	e1fffd17 	ldw	r7,-12(fp)
   83e30:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+1,5,color);
   83e34:	e0bffa17 	ldw	r2,-24(fp)
   83e38:	11000044 	addi	r4,r2,1
   83e3c:	e0bffb17 	ldw	r2,-20(fp)
   83e40:	11400044 	addi	r5,r2,1
   83e44:	01800144 	movi	r6,5
   83e48:	e1fffd17 	ldw	r7,-12(fp)
   83e4c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+4,4,color);
   83e50:	e0bffa17 	ldw	r2,-24(fp)
   83e54:	11000044 	addi	r4,r2,1
   83e58:	e0bffb17 	ldw	r2,-20(fp)
   83e5c:	11400104 	addi	r5,r2,4
   83e60:	01800104 	movi	r6,4
   83e64:	e1fffd17 	ldw	r7,-12(fp)
   83e68:	00813580 	call	81358 <drawHLine>
			drawVLine(x+5,y+5,2,color);
   83e6c:	e0bffa17 	ldw	r2,-24(fp)
   83e70:	11000144 	addi	r4,r2,5
   83e74:	e0bffb17 	ldw	r2,-20(fp)
   83e78:	11400144 	addi	r5,r2,5
   83e7c:	01800084 	movi	r6,2
   83e80:	e1fffd17 	ldw	r7,-12(fp)
   83e84:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+7,3,color);
   83e88:	e0bffa17 	ldw	r2,-24(fp)
   83e8c:	11000084 	addi	r4,r2,2
   83e90:	e0bffb17 	ldw	r2,-20(fp)
   83e94:	114001c4 	addi	r5,r2,7
   83e98:	018000c4 	movi	r6,3
   83e9c:	e1fffd17 	ldw	r7,-12(fp)
   83ea0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+1,y+6,1,color);
   83ea4:	e0bffa17 	ldw	r2,-24(fp)
   83ea8:	11000044 	addi	r4,r2,1
   83eac:	e0bffb17 	ldw	r2,-20(fp)
   83eb0:	11400184 	addi	r5,r2,6
   83eb4:	01800044 	movi	r6,1
   83eb8:	e1fffd17 	ldw	r7,-12(fp)
   83ebc:	00813580 	call	81358 <drawHLine>
			return 7;
   83ec0:	00c001c4 	movi	r3,7
   83ec4:	e0fffe15 	stw	r3,-8(fp)
   83ec8:	00013b06 	br	843b8 <write_letter+0x29b4>

		case '6':
			drawVLine(x+1,y+2,5,color);
   83ecc:	e0bffa17 	ldw	r2,-24(fp)
   83ed0:	11000044 	addi	r4,r2,1
   83ed4:	e0bffb17 	ldw	r2,-20(fp)
   83ed8:	11400084 	addi	r5,r2,2
   83edc:	01800144 	movi	r6,5
   83ee0:	e1fffd17 	ldw	r7,-12(fp)
   83ee4:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+5,2,color);
   83ee8:	e0bffa17 	ldw	r2,-24(fp)
   83eec:	11000144 	addi	r4,r2,5
   83ef0:	e0bffb17 	ldw	r2,-20(fp)
   83ef4:	11400144 	addi	r5,r2,5
   83ef8:	01800084 	movi	r6,2
   83efc:	e1fffd17 	ldw	r7,-12(fp)
   83f00:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+1,3,color);
   83f04:	e0bffa17 	ldw	r2,-24(fp)
   83f08:	11000084 	addi	r4,r2,2
   83f0c:	e0bffb17 	ldw	r2,-20(fp)
   83f10:	11400044 	addi	r5,r2,1
   83f14:	018000c4 	movi	r6,3
   83f18:	e1fffd17 	ldw	r7,-12(fp)
   83f1c:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,3,color);
   83f20:	e0bffa17 	ldw	r2,-24(fp)
   83f24:	11000084 	addi	r4,r2,2
   83f28:	e0bffb17 	ldw	r2,-20(fp)
   83f2c:	114001c4 	addi	r5,r2,7
   83f30:	018000c4 	movi	r6,3
   83f34:	e1fffd17 	ldw	r7,-12(fp)
   83f38:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+4,3,color);
   83f3c:	e0bffa17 	ldw	r2,-24(fp)
   83f40:	11000084 	addi	r4,r2,2
   83f44:	e0bffb17 	ldw	r2,-20(fp)
   83f48:	11400104 	addi	r5,r2,4
   83f4c:	018000c4 	movi	r6,3
   83f50:	e1fffd17 	ldw	r7,-12(fp)
   83f54:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+2,1,color);
   83f58:	e0bffa17 	ldw	r2,-24(fp)
   83f5c:	11000144 	addi	r4,r2,5
   83f60:	e0bffb17 	ldw	r2,-20(fp)
   83f64:	11400084 	addi	r5,r2,2
   83f68:	01800044 	movi	r6,1
   83f6c:	e1fffd17 	ldw	r7,-12(fp)
   83f70:	00813580 	call	81358 <drawHLine>
			return 7;
   83f74:	010001c4 	movi	r4,7
   83f78:	e13ffe15 	stw	r4,-8(fp)
   83f7c:	00010e06 	br	843b8 <write_letter+0x29b4>

		case '7':
			drawVLine(x+2,y+5,3,color);
   83f80:	e0bffa17 	ldw	r2,-24(fp)
   83f84:	11000084 	addi	r4,r2,2
   83f88:	e0bffb17 	ldw	r2,-20(fp)
   83f8c:	11400144 	addi	r5,r2,5
   83f90:	018000c4 	movi	r6,3
   83f94:	e1fffd17 	ldw	r7,-12(fp)
   83f98:	00815340 	call	81534 <drawVLine>
			drawHLine(x+1,y+1,5,color);
   83f9c:	e0bffa17 	ldw	r2,-24(fp)
   83fa0:	11000044 	addi	r4,r2,1
   83fa4:	e0bffb17 	ldw	r2,-20(fp)
   83fa8:	11400044 	addi	r5,r2,1
   83fac:	01800144 	movi	r6,5
   83fb0:	e1fffd17 	ldw	r7,-12(fp)
   83fb4:	00813580 	call	81358 <drawHLine>
			drawHLine(x+5,y+2,1,color);
   83fb8:	e0bffa17 	ldw	r2,-24(fp)
   83fbc:	11000144 	addi	r4,r2,5
   83fc0:	e0bffb17 	ldw	r2,-20(fp)
   83fc4:	11400084 	addi	r5,r2,2
   83fc8:	01800044 	movi	r6,1
   83fcc:	e1fffd17 	ldw	r7,-12(fp)
   83fd0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+4,y+3,1,color);
   83fd4:	e0bffa17 	ldw	r2,-24(fp)
   83fd8:	11000104 	addi	r4,r2,4
   83fdc:	e0bffb17 	ldw	r2,-20(fp)
   83fe0:	114000c4 	addi	r5,r2,3
   83fe4:	01800044 	movi	r6,1
   83fe8:	e1fffd17 	ldw	r7,-12(fp)
   83fec:	00813580 	call	81358 <drawHLine>
			drawHLine(x+3,y+4,1,color);
   83ff0:	e0bffa17 	ldw	r2,-24(fp)
   83ff4:	110000c4 	addi	r4,r2,3
   83ff8:	e0bffb17 	ldw	r2,-20(fp)
   83ffc:	11400104 	addi	r5,r2,4
   84000:	01800044 	movi	r6,1
   84004:	e1fffd17 	ldw	r7,-12(fp)
   84008:	00813580 	call	81358 <drawHLine>
			return 7;
   8400c:	008001c4 	movi	r2,7
   84010:	e0bffe15 	stw	r2,-8(fp)
   84014:	0000e806 	br	843b8 <write_letter+0x29b4>

		case '8':
			drawVLine(x+1,y+2,2,color);
   84018:	e0bffa17 	ldw	r2,-24(fp)
   8401c:	11000044 	addi	r4,r2,1
   84020:	e0bffb17 	ldw	r2,-20(fp)
   84024:	11400084 	addi	r5,r2,2
   84028:	01800084 	movi	r6,2
   8402c:	e1fffd17 	ldw	r7,-12(fp)
   84030:	00815340 	call	81534 <drawVLine>
			drawVLine(x+1,y+5,2,color);
   84034:	e0bffa17 	ldw	r2,-24(fp)
   84038:	11000044 	addi	r4,r2,1
   8403c:	e0bffb17 	ldw	r2,-20(fp)
   84040:	11400144 	addi	r5,r2,5
   84044:	01800084 	movi	r6,2
   84048:	e1fffd17 	ldw	r7,-12(fp)
   8404c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+2,2,color);
   84050:	e0bffa17 	ldw	r2,-24(fp)
   84054:	11000144 	addi	r4,r2,5
   84058:	e0bffb17 	ldw	r2,-20(fp)
   8405c:	11400084 	addi	r5,r2,2
   84060:	01800084 	movi	r6,2
   84064:	e1fffd17 	ldw	r7,-12(fp)
   84068:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+5,2,color);
   8406c:	e0bffa17 	ldw	r2,-24(fp)
   84070:	11000144 	addi	r4,r2,5
   84074:	e0bffb17 	ldw	r2,-20(fp)
   84078:	11400144 	addi	r5,r2,5
   8407c:	01800084 	movi	r6,2
   84080:	e1fffd17 	ldw	r7,-12(fp)
   84084:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+1,3,color);
   84088:	e0bffa17 	ldw	r2,-24(fp)
   8408c:	11000084 	addi	r4,r2,2
   84090:	e0bffb17 	ldw	r2,-20(fp)
   84094:	11400044 	addi	r5,r2,1
   84098:	018000c4 	movi	r6,3
   8409c:	e1fffd17 	ldw	r7,-12(fp)
   840a0:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+4,3,color);
   840a4:	e0bffa17 	ldw	r2,-24(fp)
   840a8:	11000084 	addi	r4,r2,2
   840ac:	e0bffb17 	ldw	r2,-20(fp)
   840b0:	11400104 	addi	r5,r2,4
   840b4:	018000c4 	movi	r6,3
   840b8:	e1fffd17 	ldw	r7,-12(fp)
   840bc:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,3,color);
   840c0:	e0bffa17 	ldw	r2,-24(fp)
   840c4:	11000084 	addi	r4,r2,2
   840c8:	e0bffb17 	ldw	r2,-20(fp)
   840cc:	114001c4 	addi	r5,r2,7
   840d0:	018000c4 	movi	r6,3
   840d4:	e1fffd17 	ldw	r7,-12(fp)
   840d8:	00813580 	call	81358 <drawHLine>
			return 7;
   840dc:	00c001c4 	movi	r3,7
   840e0:	e0fffe15 	stw	r3,-8(fp)
   840e4:	0000b406 	br	843b8 <write_letter+0x29b4>

		case '9':
			drawVLine(x+1,y+2,2,color);
   840e8:	e0bffa17 	ldw	r2,-24(fp)
   840ec:	11000044 	addi	r4,r2,1
   840f0:	e0bffb17 	ldw	r2,-20(fp)
   840f4:	11400084 	addi	r5,r2,2
   840f8:	01800084 	movi	r6,2
   840fc:	e1fffd17 	ldw	r7,-12(fp)
   84100:	00815340 	call	81534 <drawVLine>
			drawVLine(x+1,y+6,1,color);
   84104:	e0bffa17 	ldw	r2,-24(fp)
   84108:	11000044 	addi	r4,r2,1
   8410c:	e0bffb17 	ldw	r2,-20(fp)
   84110:	11400184 	addi	r5,r2,6
   84114:	01800044 	movi	r6,1
   84118:	e1fffd17 	ldw	r7,-12(fp)
   8411c:	00815340 	call	81534 <drawVLine>
			drawVLine(x+5,y+2,5,color);
   84120:	e0bffa17 	ldw	r2,-24(fp)
   84124:	11000144 	addi	r4,r2,5
   84128:	e0bffb17 	ldw	r2,-20(fp)
   8412c:	11400084 	addi	r5,r2,2
   84130:	01800144 	movi	r6,5
   84134:	e1fffd17 	ldw	r7,-12(fp)
   84138:	00815340 	call	81534 <drawVLine>
			drawHLine(x+2,y+1,3,color);
   8413c:	e0bffa17 	ldw	r2,-24(fp)
   84140:	11000084 	addi	r4,r2,2
   84144:	e0bffb17 	ldw	r2,-20(fp)
   84148:	11400044 	addi	r5,r2,1
   8414c:	018000c4 	movi	r6,3
   84150:	e1fffd17 	ldw	r7,-12(fp)
   84154:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+4,3,color);
   84158:	e0bffa17 	ldw	r2,-24(fp)
   8415c:	11000084 	addi	r4,r2,2
   84160:	e0bffb17 	ldw	r2,-20(fp)
   84164:	11400104 	addi	r5,r2,4
   84168:	018000c4 	movi	r6,3
   8416c:	e1fffd17 	ldw	r7,-12(fp)
   84170:	00813580 	call	81358 <drawHLine>
			drawHLine(x+2,y+7,3,color);
   84174:	e0bffa17 	ldw	r2,-24(fp)
   84178:	11000084 	addi	r4,r2,2
   8417c:	e0bffb17 	ldw	r2,-20(fp)
   84180:	114001c4 	addi	r5,r2,7
   84184:	018000c4 	movi	r6,3
   84188:	e1fffd17 	ldw	r7,-12(fp)
   8418c:	00813580 	call	81358 <drawHLine>
			return 7;
   84190:	010001c4 	movi	r4,7
   84194:	e13ffe15 	stw	r4,-8(fp)
   84198:	00008706 	br	843b8 <write_letter+0x29b4>

		case '?':
		drawHLine(x,y,100,color);
   8419c:	e13ffa17 	ldw	r4,-24(fp)
   841a0:	e17ffb17 	ldw	r5,-20(fp)
   841a4:	01801904 	movi	r6,100
   841a8:	e1fffd17 	ldw	r7,-12(fp)
   841ac:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+1,100,color);
   841b0:	e0bffb17 	ldw	r2,-20(fp)
   841b4:	11400044 	addi	r5,r2,1
   841b8:	e13ffa17 	ldw	r4,-24(fp)
   841bc:	01801904 	movi	r6,100
   841c0:	e1fffd17 	ldw	r7,-12(fp)
   841c4:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+2,100,color);
   841c8:	e0bffb17 	ldw	r2,-20(fp)
   841cc:	11400084 	addi	r5,r2,2
   841d0:	e13ffa17 	ldw	r4,-24(fp)
   841d4:	01801904 	movi	r6,100
   841d8:	e1fffd17 	ldw	r7,-12(fp)
   841dc:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+3,100,color);
   841e0:	e0bffb17 	ldw	r2,-20(fp)
   841e4:	114000c4 	addi	r5,r2,3
   841e8:	e13ffa17 	ldw	r4,-24(fp)
   841ec:	01801904 	movi	r6,100
   841f0:	e1fffd17 	ldw	r7,-12(fp)
   841f4:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+4,100,color);
   841f8:	e0bffb17 	ldw	r2,-20(fp)
   841fc:	11400104 	addi	r5,r2,4
   84200:	e13ffa17 	ldw	r4,-24(fp)
   84204:	01801904 	movi	r6,100
   84208:	e1fffd17 	ldw	r7,-12(fp)
   8420c:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+5,100,color);
   84210:	e0bffb17 	ldw	r2,-20(fp)
   84214:	11400144 	addi	r5,r2,5
   84218:	e13ffa17 	ldw	r4,-24(fp)
   8421c:	01801904 	movi	r6,100
   84220:	e1fffd17 	ldw	r7,-12(fp)
   84224:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+6,100,color);
   84228:	e0bffb17 	ldw	r2,-20(fp)
   8422c:	11400184 	addi	r5,r2,6
   84230:	e13ffa17 	ldw	r4,-24(fp)
   84234:	01801904 	movi	r6,100
   84238:	e1fffd17 	ldw	r7,-12(fp)
   8423c:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+7,100,color);
   84240:	e0bffb17 	ldw	r2,-20(fp)
   84244:	114001c4 	addi	r5,r2,7
   84248:	e13ffa17 	ldw	r4,-24(fp)
   8424c:	01801904 	movi	r6,100
   84250:	e1fffd17 	ldw	r7,-12(fp)
   84254:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+8,100,color);
   84258:	e0bffb17 	ldw	r2,-20(fp)
   8425c:	11400204 	addi	r5,r2,8
   84260:	e13ffa17 	ldw	r4,-24(fp)
   84264:	01801904 	movi	r6,100
   84268:	e1fffd17 	ldw	r7,-12(fp)
   8426c:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+9,100,color);
   84270:	e0bffb17 	ldw	r2,-20(fp)
   84274:	11400244 	addi	r5,r2,9
   84278:	e13ffa17 	ldw	r4,-24(fp)
   8427c:	01801904 	movi	r6,100
   84280:	e1fffd17 	ldw	r7,-12(fp)
   84284:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+10,100,color);
   84288:	e0bffb17 	ldw	r2,-20(fp)
   8428c:	11400284 	addi	r5,r2,10
   84290:	e13ffa17 	ldw	r4,-24(fp)
   84294:	01801904 	movi	r6,100
   84298:	e1fffd17 	ldw	r7,-12(fp)
   8429c:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+11,100,color);
   842a0:	e0bffb17 	ldw	r2,-20(fp)
   842a4:	114002c4 	addi	r5,r2,11
   842a8:	e13ffa17 	ldw	r4,-24(fp)
   842ac:	01801904 	movi	r6,100
   842b0:	e1fffd17 	ldw	r7,-12(fp)
   842b4:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+12,100,color);
   842b8:	e0bffb17 	ldw	r2,-20(fp)
   842bc:	11400304 	addi	r5,r2,12
   842c0:	e13ffa17 	ldw	r4,-24(fp)
   842c4:	01801904 	movi	r6,100
   842c8:	e1fffd17 	ldw	r7,-12(fp)
   842cc:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+13,100,color);
   842d0:	e0bffb17 	ldw	r2,-20(fp)
   842d4:	11400344 	addi	r5,r2,13
   842d8:	e13ffa17 	ldw	r4,-24(fp)
   842dc:	01801904 	movi	r6,100
   842e0:	e1fffd17 	ldw	r7,-12(fp)
   842e4:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+14,100,color);
   842e8:	e0bffb17 	ldw	r2,-20(fp)
   842ec:	11400384 	addi	r5,r2,14
   842f0:	e13ffa17 	ldw	r4,-24(fp)
   842f4:	01801904 	movi	r6,100
   842f8:	e1fffd17 	ldw	r7,-12(fp)
   842fc:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+15,100,color);
   84300:	e0bffb17 	ldw	r2,-20(fp)
   84304:	114003c4 	addi	r5,r2,15
   84308:	e13ffa17 	ldw	r4,-24(fp)
   8430c:	01801904 	movi	r6,100
   84310:	e1fffd17 	ldw	r7,-12(fp)
   84314:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+16,100,color);
   84318:	e0bffb17 	ldw	r2,-20(fp)
   8431c:	11400404 	addi	r5,r2,16
   84320:	e13ffa17 	ldw	r4,-24(fp)
   84324:	01801904 	movi	r6,100
   84328:	e1fffd17 	ldw	r7,-12(fp)
   8432c:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+17,100,color);
   84330:	e0bffb17 	ldw	r2,-20(fp)
   84334:	11400444 	addi	r5,r2,17
   84338:	e13ffa17 	ldw	r4,-24(fp)
   8433c:	01801904 	movi	r6,100
   84340:	e1fffd17 	ldw	r7,-12(fp)
   84344:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+18,100,color);
   84348:	e0bffb17 	ldw	r2,-20(fp)
   8434c:	11400484 	addi	r5,r2,18
   84350:	e13ffa17 	ldw	r4,-24(fp)
   84354:	01801904 	movi	r6,100
   84358:	e1fffd17 	ldw	r7,-12(fp)
   8435c:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+19,100,color);
   84360:	e0bffb17 	ldw	r2,-20(fp)
   84364:	114004c4 	addi	r5,r2,19
   84368:	e13ffa17 	ldw	r4,-24(fp)
   8436c:	01801904 	movi	r6,100
   84370:	e1fffd17 	ldw	r7,-12(fp)
   84374:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+20,100,color);
   84378:	e0bffb17 	ldw	r2,-20(fp)
   8437c:	11400504 	addi	r5,r2,20
   84380:	e13ffa17 	ldw	r4,-24(fp)
   84384:	01801904 	movi	r6,100
   84388:	e1fffd17 	ldw	r7,-12(fp)
   8438c:	00813580 	call	81358 <drawHLine>
		drawHLine(x,y+21,100,color);
   84390:	e0bffb17 	ldw	r2,-20(fp)
   84394:	11400544 	addi	r5,r2,21
   84398:	e13ffa17 	ldw	r4,-24(fp)
   8439c:	01801904 	movi	r6,100
   843a0:	e1fffd17 	ldw	r7,-12(fp)
   843a4:	00813580 	call	81358 <drawHLine>
		return 100;
   843a8:	00801904 	movi	r2,100
   843ac:	e0bffe15 	stw	r2,-8(fp)
   843b0:	00000106 	br	843b8 <write_letter+0x29b4>

		default:
			return 0;
   843b4:	e03ffe15 	stw	zero,-8(fp)
   843b8:	e0bffe17 	ldw	r2,-8(fp)
			break;
	}
}
   843bc:	e037883a 	mov	sp,fp
   843c0:	dfc00117 	ldw	ra,4(sp)
   843c4:	df000017 	ldw	fp,0(sp)
   843c8:	dec00204 	addi	sp,sp,8
   843cc:	f800283a 	ret

000843d0 <write_message>:

static void write_message(int x, int y, char message[], int color){
   843d0:	defff704 	addi	sp,sp,-36
   843d4:	dfc00815 	stw	ra,32(sp)
   843d8:	df000715 	stw	fp,28(sp)
   843dc:	df000704 	addi	fp,sp,28
   843e0:	e13ffc15 	stw	r4,-16(fp)
   843e4:	e17ffd15 	stw	r5,-12(fp)
   843e8:	e1bffe15 	stw	r6,-8(fp)
   843ec:	e1ffff15 	stw	r7,-4(fp)
	int taille_mess = strlen(message);
   843f0:	e13ffe17 	ldw	r4,-8(fp)
   843f4:	00889680 	call	88968 <strlen>
   843f8:	e0bffb15 	stw	r2,-20(fp)
	int i = 0, offset = 0;
   843fc:	e03ffa15 	stw	zero,-24(fp)
   84400:	e03ff915 	stw	zero,-28(fp)
	for(i = 0; i < taille_mess ; i++){
   84404:	e03ffa15 	stw	zero,-24(fp)
   84408:	00001506 	br	84460 <write_message+0x90>
		offset += write_letter(x + offset, y, message[i], color);
   8440c:	e0fffc17 	ldw	r3,-16(fp)
   84410:	e0bff917 	ldw	r2,-28(fp)
   84414:	1889883a 	add	r4,r3,r2
   84418:	e0bffa17 	ldw	r2,-24(fp)
   8441c:	1007883a 	mov	r3,r2
   84420:	e0bffe17 	ldw	r2,-8(fp)
   84424:	1885883a 	add	r2,r3,r2
   84428:	10800003 	ldbu	r2,0(r2)
   8442c:	11803fcc 	andi	r6,r2,255
   84430:	3180201c 	xori	r6,r6,128
   84434:	31bfe004 	addi	r6,r6,-128
   84438:	e17ffd17 	ldw	r5,-12(fp)
   8443c:	e1ffff17 	ldw	r7,-4(fp)
   84440:	0081a040 	call	81a04 <write_letter>
   84444:	1007883a 	mov	r3,r2
   84448:	e0bff917 	ldw	r2,-28(fp)
   8444c:	10c5883a 	add	r2,r2,r3
   84450:	e0bff915 	stw	r2,-28(fp)
}

static void write_message(int x, int y, char message[], int color){
	int taille_mess = strlen(message);
	int i = 0, offset = 0;
	for(i = 0; i < taille_mess ; i++){
   84454:	e0bffa17 	ldw	r2,-24(fp)
   84458:	10800044 	addi	r2,r2,1
   8445c:	e0bffa15 	stw	r2,-24(fp)
   84460:	e0fffa17 	ldw	r3,-24(fp)
   84464:	e0bffb17 	ldw	r2,-20(fp)
   84468:	18bfe816 	blt	r3,r2,8440c <write_message+0x3c>
		offset += write_letter(x + offset, y, message[i], color);
	}
}
   8446c:	e037883a 	mov	sp,fp
   84470:	dfc00117 	ldw	ra,4(sp)
   84474:	df000017 	ldw	fp,0(sp)
   84478:	dec00204 	addi	sp,sp,8
   8447c:	f800283a 	ret

00084480 <pow>:
   84480:	deffee04 	addi	sp,sp,-72
   84484:	ddc01015 	stw	r23,64(sp)
   84488:	05c002f4 	movhi	r23,11
   8448c:	bdc99604 	addi	r23,r23,9816
   84490:	dd800f15 	stw	r22,60(sp)
   84494:	dd400e15 	stw	r21,56(sp)
   84498:	dd000d15 	stw	r20,52(sp)
   8449c:	dcc00c15 	stw	r19,48(sp)
   844a0:	dc800b15 	stw	r18,44(sp)
   844a4:	dc400a15 	stw	r17,40(sp)
   844a8:	dc000915 	stw	r16,36(sp)
   844ac:	2029883a 	mov	r20,r4
   844b0:	dfc01115 	stw	ra,68(sp)
   844b4:	3025883a 	mov	r18,r6
   844b8:	282b883a 	mov	r21,r5
   844bc:	3827883a 	mov	r19,r7
   844c0:	00849080 	call	84908 <__ieee754_pow>
   844c4:	b9000017 	ldw	r4,0(r23)
   844c8:	05bfffc4 	movi	r22,-1
   844cc:	1021883a 	mov	r16,r2
   844d0:	1823883a 	mov	r17,r3
   844d4:	25800426 	beq	r4,r22,844e8 <pow+0x68>
   844d8:	9009883a 	mov	r4,r18
   844dc:	980b883a 	mov	r5,r19
   844e0:	0085f040 	call	85f04 <__isnand>
   844e4:	10000d26 	beq	r2,zero,8451c <pow+0x9c>
   844e8:	8005883a 	mov	r2,r16
   844ec:	8807883a 	mov	r3,r17
   844f0:	dfc01117 	ldw	ra,68(sp)
   844f4:	ddc01017 	ldw	r23,64(sp)
   844f8:	dd800f17 	ldw	r22,60(sp)
   844fc:	dd400e17 	ldw	r21,56(sp)
   84500:	dd000d17 	ldw	r20,52(sp)
   84504:	dcc00c17 	ldw	r19,48(sp)
   84508:	dc800b17 	ldw	r18,44(sp)
   8450c:	dc400a17 	ldw	r17,40(sp)
   84510:	dc000917 	ldw	r16,36(sp)
   84514:	dec01204 	addi	sp,sp,72
   84518:	f800283a 	ret
   8451c:	a009883a 	mov	r4,r20
   84520:	a80b883a 	mov	r5,r21
   84524:	0085f040 	call	85f04 <__isnand>
   84528:	1000151e 	bne	r2,zero,84580 <pow+0x100>
   8452c:	000d883a 	mov	r6,zero
   84530:	000f883a 	mov	r7,zero
   84534:	a009883a 	mov	r4,r20
   84538:	a80b883a 	mov	r5,r21
   8453c:	00877a00 	call	877a0 <__eqdf2>
   84540:	1000541e 	bne	r2,zero,84694 <pow+0x214>
   84544:	000d883a 	mov	r6,zero
   84548:	000f883a 	mov	r7,zero
   8454c:	9009883a 	mov	r4,r18
   84550:	980b883a 	mov	r5,r19
   84554:	00877a00 	call	877a0 <__eqdf2>
   84558:	10002c1e 	bne	r2,zero,8460c <pow+0x18c>
   8455c:	b8800017 	ldw	r2,0(r23)
   84560:	d8000615 	stw	zero,24(sp)
   84564:	d8000715 	stw	zero,28(sp)
   84568:	10001226 	beq	r2,zero,845b4 <pow+0x134>
   8456c:	008ffc34 	movhi	r2,16368
   84570:	d8800715 	stw	r2,28(sp)
   84574:	dc000617 	ldw	r16,24(sp)
   84578:	dc400717 	ldw	r17,28(sp)
   8457c:	003fda06 	br	844e8 <pow+0x68>
   84580:	000d883a 	mov	r6,zero
   84584:	000f883a 	mov	r7,zero
   84588:	9009883a 	mov	r4,r18
   8458c:	980b883a 	mov	r5,r19
   84590:	00877a00 	call	877a0 <__eqdf2>
   84594:	103fd41e 	bne	r2,zero,844e8 <pow+0x68>
   84598:	b8c00017 	ldw	r3,0(r23)
   8459c:	010ffc34 	movhi	r4,16368
   845a0:	d8000615 	stw	zero,24(sp)
   845a4:	d9000715 	stw	r4,28(sp)
   845a8:	1d801526 	beq	r3,r22,84600 <pow+0x180>
   845ac:	00800084 	movi	r2,2
   845b0:	18801326 	beq	r3,r2,84600 <pow+0x180>
   845b4:	00800274 	movhi	r2,9
   845b8:	108e6c04 	addi	r2,r2,14768
   845bc:	00c00044 	movi	r3,1
   845c0:	d809883a 	mov	r4,sp
   845c4:	dcc00515 	stw	r19,20(sp)
   845c8:	dd400315 	stw	r21,12(sp)
   845cc:	d8800115 	stw	r2,4(sp)
   845d0:	d8c00015 	stw	r3,0(sp)
   845d4:	dc800415 	stw	r18,16(sp)
   845d8:	dd000215 	stw	r20,8(sp)
   845dc:	d8000815 	stw	zero,32(sp)
   845e0:	0085f340 	call	85f34 <matherr>
   845e4:	10002726 	beq	r2,zero,84684 <pow+0x204>
   845e8:	d8800817 	ldw	r2,32(sp)
   845ec:	103fe126 	beq	r2,zero,84574 <pow+0xf4>
   845f0:	00888080 	call	88808 <__errno>
   845f4:	d8c00817 	ldw	r3,32(sp)
   845f8:	10c00015 	stw	r3,0(r2)
   845fc:	003fdd06 	br	84574 <pow+0xf4>
   84600:	d9000715 	stw	r4,28(sp)
   84604:	d8000615 	stw	zero,24(sp)
   84608:	003fda06 	br	84574 <pow+0xf4>
   8460c:	9009883a 	mov	r4,r18
   84610:	980b883a 	mov	r5,r19
   84614:	0085ee80 	call	85ee8 <finite>
   84618:	103fb326 	beq	r2,zero,844e8 <pow+0x68>
   8461c:	000d883a 	mov	r6,zero
   84620:	000f883a 	mov	r7,zero
   84624:	9009883a 	mov	r4,r18
   84628:	980b883a 	mov	r5,r19
   8462c:	00879c00 	call	879c0 <__ltdf2>
   84630:	103fad0e 	bge	r2,zero,844e8 <pow+0x68>
   84634:	b9000017 	ldw	r4,0(r23)
   84638:	00800044 	movi	r2,1
   8463c:	00c00274 	movhi	r3,9
   84640:	18ce6c04 	addi	r3,r3,14768
   84644:	d8800015 	stw	r2,0(sp)
   84648:	d8c00115 	stw	r3,4(sp)
   8464c:	dd400315 	stw	r21,12(sp)
   84650:	dcc00515 	stw	r19,20(sp)
   84654:	d8000815 	stw	zero,32(sp)
   84658:	dd000215 	stw	r20,8(sp)
   8465c:	dc800415 	stw	r18,16(sp)
   84660:	20005626 	beq	r4,zero,847bc <pow+0x33c>
   84664:	00bffc34 	movhi	r2,65520
   84668:	d8800715 	stw	r2,28(sp)
   8466c:	00800084 	movi	r2,2
   84670:	d8000615 	stw	zero,24(sp)
   84674:	20800326 	beq	r4,r2,84684 <pow+0x204>
   84678:	d809883a 	mov	r4,sp
   8467c:	0085f340 	call	85f34 <matherr>
   84680:	103fd91e 	bne	r2,zero,845e8 <pow+0x168>
   84684:	00888080 	call	88808 <__errno>
   84688:	00c00844 	movi	r3,33
   8468c:	10c00015 	stw	r3,0(r2)
   84690:	003fd506 	br	845e8 <pow+0x168>
   84694:	8009883a 	mov	r4,r16
   84698:	880b883a 	mov	r5,r17
   8469c:	0085ee80 	call	85ee8 <finite>
   846a0:	10002426 	beq	r2,zero,84734 <pow+0x2b4>
   846a4:	000d883a 	mov	r6,zero
   846a8:	000f883a 	mov	r7,zero
   846ac:	8009883a 	mov	r4,r16
   846b0:	880b883a 	mov	r5,r17
   846b4:	00877a00 	call	877a0 <__eqdf2>
   846b8:	103f8b1e 	bne	r2,zero,844e8 <pow+0x68>
   846bc:	a009883a 	mov	r4,r20
   846c0:	a80b883a 	mov	r5,r21
   846c4:	0085ee80 	call	85ee8 <finite>
   846c8:	103f8726 	beq	r2,zero,844e8 <pow+0x68>
   846cc:	9009883a 	mov	r4,r18
   846d0:	980b883a 	mov	r5,r19
   846d4:	0085ee80 	call	85ee8 <finite>
   846d8:	103f8326 	beq	r2,zero,844e8 <pow+0x68>
   846dc:	b9000017 	ldw	r4,0(r23)
   846e0:	00800104 	movi	r2,4
   846e4:	d8800015 	stw	r2,0(sp)
   846e8:	00c00274 	movhi	r3,9
   846ec:	18ce6c04 	addi	r3,r3,14768
   846f0:	00800084 	movi	r2,2
   846f4:	d8c00115 	stw	r3,4(sp)
   846f8:	dd400315 	stw	r21,12(sp)
   846fc:	dcc00515 	stw	r19,20(sp)
   84700:	d8000815 	stw	zero,32(sp)
   84704:	dd000215 	stw	r20,8(sp)
   84708:	dc800415 	stw	r18,16(sp)
   8470c:	d8000615 	stw	zero,24(sp)
   84710:	d8000715 	stw	zero,28(sp)
   84714:	20800326 	beq	r4,r2,84724 <pow+0x2a4>
   84718:	d809883a 	mov	r4,sp
   8471c:	0085f340 	call	85f34 <matherr>
   84720:	103fb11e 	bne	r2,zero,845e8 <pow+0x168>
   84724:	00888080 	call	88808 <__errno>
   84728:	00c00884 	movi	r3,34
   8472c:	10c00015 	stw	r3,0(r2)
   84730:	003fad06 	br	845e8 <pow+0x168>
   84734:	a009883a 	mov	r4,r20
   84738:	a80b883a 	mov	r5,r21
   8473c:	0085ee80 	call	85ee8 <finite>
   84740:	103fd826 	beq	r2,zero,846a4 <pow+0x224>
   84744:	9009883a 	mov	r4,r18
   84748:	980b883a 	mov	r5,r19
   8474c:	0085ee80 	call	85ee8 <finite>
   84750:	103fd426 	beq	r2,zero,846a4 <pow+0x224>
   84754:	880b883a 	mov	r5,r17
   84758:	8009883a 	mov	r4,r16
   8475c:	0085f040 	call	85f04 <__isnand>
   84760:	10001926 	beq	r2,zero,847c8 <pow+0x348>
   84764:	bc000017 	ldw	r16,0(r23)
   84768:	00800044 	movi	r2,1
   8476c:	00c00274 	movhi	r3,9
   84770:	18ce6c04 	addi	r3,r3,14768
   84774:	d8800015 	stw	r2,0(sp)
   84778:	d8c00115 	stw	r3,4(sp)
   8477c:	dd400315 	stw	r21,12(sp)
   84780:	dcc00515 	stw	r19,20(sp)
   84784:	d8000815 	stw	zero,32(sp)
   84788:	dd000215 	stw	r20,8(sp)
   8478c:	dc800415 	stw	r18,16(sp)
   84790:	80000a26 	beq	r16,zero,847bc <pow+0x33c>
   84794:	0009883a 	mov	r4,zero
   84798:	000d883a 	mov	r6,zero
   8479c:	000b883a 	mov	r5,zero
   847a0:	000f883a 	mov	r7,zero
   847a4:	00875480 	call	87548 <__divdf3>
   847a8:	d8800615 	stw	r2,24(sp)
   847ac:	00800084 	movi	r2,2
   847b0:	d8c00715 	stw	r3,28(sp)
   847b4:	80bfb01e 	bne	r16,r2,84678 <pow+0x1f8>
   847b8:	003fb206 	br	84684 <pow+0x204>
   847bc:	d8000615 	stw	zero,24(sp)
   847c0:	d8000715 	stw	zero,28(sp)
   847c4:	003fac06 	br	84678 <pow+0x1f8>
   847c8:	b8800017 	ldw	r2,0(r23)
   847cc:	00c000c4 	movi	r3,3
   847d0:	01000274 	movhi	r4,9
   847d4:	210e6c04 	addi	r4,r4,14768
   847d8:	d8c00015 	stw	r3,0(sp)
   847dc:	d9000115 	stw	r4,4(sp)
   847e0:	d8000815 	stw	zero,32(sp)
   847e4:	dd000215 	stw	r20,8(sp)
   847e8:	dd400315 	stw	r21,12(sp)
   847ec:	dc800415 	stw	r18,16(sp)
   847f0:	dcc00515 	stw	r19,20(sp)
   847f4:	1000251e 	bne	r2,zero,8488c <pow+0x40c>
   847f8:	05b80034 	movhi	r22,57344
   847fc:	0091fc34 	movhi	r2,18416
   84800:	10bfffc4 	addi	r2,r2,-1
   84804:	000d883a 	mov	r6,zero
   84808:	000f883a 	mov	r7,zero
   8480c:	a80b883a 	mov	r5,r21
   84810:	a009883a 	mov	r4,r20
   84814:	d8800715 	stw	r2,28(sp)
   84818:	dd800615 	stw	r22,24(sp)
   8481c:	00879c00 	call	879c0 <__ltdf2>
   84820:	103fbd0e 	bge	r2,zero,84718 <pow+0x298>
   84824:	0005883a 	mov	r2,zero
   84828:	00cff834 	movhi	r3,16352
   8482c:	180f883a 	mov	r7,r3
   84830:	100d883a 	mov	r6,r2
   84834:	980b883a 	mov	r5,r19
   84838:	9009883a 	mov	r4,r18
   8483c:	00871840 	call	87184 <__muldf3>
   84840:	1009883a 	mov	r4,r2
   84844:	180b883a 	mov	r5,r3
   84848:	1021883a 	mov	r16,r2
   8484c:	1823883a 	mov	r17,r3
   84850:	0085f4c0 	call	85f4c <rint>
   84854:	180f883a 	mov	r7,r3
   84858:	8009883a 	mov	r4,r16
   8485c:	880b883a 	mov	r5,r17
   84860:	100d883a 	mov	r6,r2
   84864:	00878280 	call	87828 <__nedf2>
   84868:	10000426 	beq	r2,zero,8487c <pow+0x3fc>
   8486c:	00b1fc34 	movhi	r2,51184
   84870:	10bfffc4 	addi	r2,r2,-1
   84874:	dd800615 	stw	r22,24(sp)
   84878:	d8800715 	stw	r2,28(sp)
   8487c:	b8c00017 	ldw	r3,0(r23)
   84880:	00800084 	movi	r2,2
   84884:	18bfa41e 	bne	r3,r2,84718 <pow+0x298>
   84888:	003fa606 	br	84724 <pow+0x2a4>
   8488c:	009ffc34 	movhi	r2,32752
   84890:	000d883a 	mov	r6,zero
   84894:	000f883a 	mov	r7,zero
   84898:	a80b883a 	mov	r5,r21
   8489c:	a009883a 	mov	r4,r20
   848a0:	d8800715 	stw	r2,28(sp)
   848a4:	d8000615 	stw	zero,24(sp)
   848a8:	00879c00 	call	879c0 <__ltdf2>
   848ac:	103ff30e 	bge	r2,zero,8487c <pow+0x3fc>
   848b0:	0005883a 	mov	r2,zero
   848b4:	00cff834 	movhi	r3,16352
   848b8:	180f883a 	mov	r7,r3
   848bc:	100d883a 	mov	r6,r2
   848c0:	980b883a 	mov	r5,r19
   848c4:	9009883a 	mov	r4,r18
   848c8:	00871840 	call	87184 <__muldf3>
   848cc:	1009883a 	mov	r4,r2
   848d0:	180b883a 	mov	r5,r3
   848d4:	1021883a 	mov	r16,r2
   848d8:	1823883a 	mov	r17,r3
   848dc:	0085f4c0 	call	85f4c <rint>
   848e0:	180f883a 	mov	r7,r3
   848e4:	8009883a 	mov	r4,r16
   848e8:	880b883a 	mov	r5,r17
   848ec:	100d883a 	mov	r6,r2
   848f0:	00878280 	call	87828 <__nedf2>
   848f4:	103fe126 	beq	r2,zero,8487c <pow+0x3fc>
   848f8:	00bffc34 	movhi	r2,65520
   848fc:	d8800715 	stw	r2,28(sp)
   84900:	d8000615 	stw	zero,24(sp)
   84904:	003fdd06 	br	8487c <pow+0x3fc>

00084908 <__ieee754_pow>:
   84908:	deffbb04 	addi	sp,sp,-276
   8490c:	3005883a 	mov	r2,r6
   84910:	dd404015 	stw	r21,256(sp)
   84914:	dd003f15 	stw	r20,252(sp)
   84918:	d9802815 	stw	r6,160(sp)
   8491c:	2029883a 	mov	r20,r4
   84920:	282b883a 	mov	r21,r5
   84924:	3009883a 	mov	r4,r6
   84928:	380b883a 	mov	r5,r7
   8492c:	01a00034 	movhi	r6,32768
   84930:	31bfffc4 	addi	r6,r6,-1
   84934:	dc003b15 	stw	r16,236(sp)
   84938:	29a0703a 	and	r16,r5,r6
   8493c:	1404b03a 	or	r2,r2,r16
   84940:	dd804115 	stw	r22,260(sp)
   84944:	dc403c15 	stw	r17,240(sp)
   84948:	d9c02915 	stw	r7,164(sp)
   8494c:	382d883a 	mov	r22,r7
   84950:	dfc04415 	stw	ra,272(sp)
   84954:	200f883a 	mov	r7,r4
   84958:	df004315 	stw	fp,268(sp)
   8495c:	ddc04215 	stw	r23,264(sp)
   84960:	dcc03e15 	stw	r19,248(sp)
   84964:	dc803d15 	stw	r18,244(sp)
   84968:	a023883a 	mov	r17,r20
   8496c:	2809883a 	mov	r4,r5
   84970:	10000826 	beq	r2,zero,84994 <__ieee754_pow+0x8c>
   84974:	a9a4703a 	and	r18,r21,r6
   84978:	009ffc34 	movhi	r2,32752
   8497c:	a827883a 	mov	r19,r21
   84980:	1480180e 	bge	r2,r18,849e4 <__ieee754_pow+0xdc>
   84984:	00b00434 	movhi	r2,49168
   84988:	9085883a 	add	r2,r18,r2
   8498c:	8884b03a 	or	r2,r17,r2
   84990:	1000321e 	bne	r2,zero,84a5c <__ieee754_pow+0x154>
   84994:	0009883a 	mov	r4,zero
   84998:	014ffc34 	movhi	r5,16368
   8499c:	d9002815 	stw	r4,160(sp)
   849a0:	d9402915 	stw	r5,164(sp)
   849a4:	d9002817 	ldw	r4,160(sp)
   849a8:	d9402917 	ldw	r5,164(sp)
   849ac:	2005883a 	mov	r2,r4
   849b0:	2807883a 	mov	r3,r5
   849b4:	dfc04417 	ldw	ra,272(sp)
   849b8:	df004317 	ldw	fp,268(sp)
   849bc:	ddc04217 	ldw	r23,264(sp)
   849c0:	dd804117 	ldw	r22,260(sp)
   849c4:	dd404017 	ldw	r21,256(sp)
   849c8:	dd003f17 	ldw	r20,252(sp)
   849cc:	dcc03e17 	ldw	r19,248(sp)
   849d0:	dc803d17 	ldw	r18,244(sp)
   849d4:	dc403c17 	ldw	r17,240(sp)
   849d8:	dc003b17 	ldw	r16,236(sp)
   849dc:	dec04504 	addi	sp,sp,276
   849e0:	f800283a 	ret
   849e4:	90802b26 	beq	r18,r2,84a94 <__ieee754_pow+0x18c>
   849e8:	143fe616 	blt	r2,r16,84984 <__ieee754_pow+0x7c>
   849ec:	80806126 	beq	r16,r2,84b74 <__ieee754_pow+0x26c>
   849f0:	982e403a 	cmpge	r23,r19,zero
   849f4:	b8004e26 	beq	r23,zero,84b30 <__ieee754_pow+0x228>
   849f8:	0039883a 	mov	fp,zero
   849fc:	3800281e 	bne	r7,zero,84aa0 <__ieee754_pow+0x198>
   84a00:	009ffc34 	movhi	r2,32752
   84a04:	80804f26 	beq	r16,r2,84b44 <__ieee754_pow+0x23c>
   84a08:	008ffc34 	movhi	r2,16368
   84a0c:	80808226 	beq	r16,r2,84c18 <__ieee754_pow+0x310>
   84a10:	00900034 	movhi	r2,16384
   84a14:	20828426 	beq	r4,r2,85428 <__ieee754_pow+0xb20>
   84a18:	008ff834 	movhi	r2,16352
   84a1c:	2080201e 	bne	r4,r2,84aa0 <__ieee754_pow+0x198>
   84a20:	98001f16 	blt	r19,zero,84aa0 <__ieee754_pow+0x198>
   84a24:	a80b883a 	mov	r5,r21
   84a28:	a009883a 	mov	r4,r20
   84a2c:	dfc04417 	ldw	ra,272(sp)
   84a30:	df004317 	ldw	fp,268(sp)
   84a34:	ddc04217 	ldw	r23,264(sp)
   84a38:	dd804117 	ldw	r22,260(sp)
   84a3c:	dd404017 	ldw	r21,256(sp)
   84a40:	dd003f17 	ldw	r20,252(sp)
   84a44:	dcc03e17 	ldw	r19,248(sp)
   84a48:	dc803d17 	ldw	r18,244(sp)
   84a4c:	dc403c17 	ldw	r17,240(sp)
   84a50:	dc003b17 	ldw	r16,236(sp)
   84a54:	dec04504 	addi	sp,sp,276
   84a58:	0085c081 	jmpi	85c08 <__ieee754_sqrt>
   84a5c:	01000274 	movhi	r4,9
   84a60:	210ed704 	addi	r4,r4,15196
   84a64:	dfc04417 	ldw	ra,272(sp)
   84a68:	df004317 	ldw	fp,268(sp)
   84a6c:	ddc04217 	ldw	r23,264(sp)
   84a70:	dd804117 	ldw	r22,260(sp)
   84a74:	dd404017 	ldw	r21,256(sp)
   84a78:	dd003f17 	ldw	r20,252(sp)
   84a7c:	dcc03e17 	ldw	r19,248(sp)
   84a80:	dc803d17 	ldw	r18,244(sp)
   84a84:	dc403c17 	ldw	r17,240(sp)
   84a88:	dc003b17 	ldw	r16,236(sp)
   84a8c:	dec04504 	addi	sp,sp,276
   84a90:	0085f3c1 	jmpi	85f3c <nan>
   84a94:	a03fbb1e 	bne	r20,zero,84984 <__ieee754_pow+0x7c>
   84a98:	003fd306 	br	849e8 <__ieee754_pow+0xe0>
   84a9c:	0039883a 	mov	fp,zero
   84aa0:	a009883a 	mov	r4,r20
   84aa4:	a80b883a 	mov	r5,r21
   84aa8:	0085ed00 	call	85ed0 <fabs>
   84aac:	1015883a 	mov	r10,r2
   84ab0:	1817883a 	mov	r11,r3
   84ab4:	88001226 	beq	r17,zero,84b00 <__ieee754_pow+0x1f8>
   84ab8:	9804d7fa 	srli	r2,r19,31
   84abc:	10bfffc4 	addi	r2,r2,-1
   84ac0:	1706b03a 	or	r3,r2,fp
   84ac4:	d8802515 	stw	r2,148(sp)
   84ac8:	18002c1e 	bne	r3,zero,84b7c <__ieee754_pow+0x274>
   84acc:	a80f883a 	mov	r7,r21
   84ad0:	a009883a 	mov	r4,r20
   84ad4:	a80b883a 	mov	r5,r21
   84ad8:	a00d883a 	mov	r6,r20
   84adc:	00870900 	call	87090 <__subdf3>
   84ae0:	1009883a 	mov	r4,r2
   84ae4:	180b883a 	mov	r5,r3
   84ae8:	100d883a 	mov	r6,r2
   84aec:	180f883a 	mov	r7,r3
   84af0:	00875480 	call	87548 <__divdf3>
   84af4:	d8802815 	stw	r2,160(sp)
   84af8:	d8c02915 	stw	r3,164(sp)
   84afc:	003fa906 	br	849a4 <__ieee754_pow+0x9c>
   84b00:	009ffc34 	movhi	r2,32752
   84b04:	90800326 	beq	r18,r2,84b14 <__ieee754_pow+0x20c>
   84b08:	90000226 	beq	r18,zero,84b14 <__ieee754_pow+0x20c>
   84b0c:	008ffc34 	movhi	r2,16368
   84b10:	90bfe91e 	bne	r18,r2,84ab8 <__ieee754_pow+0x1b0>
   84b14:	b0026316 	blt	r22,zero,854a4 <__ieee754_pow+0xb9c>
   84b18:	5011883a 	mov	r8,r10
   84b1c:	5813883a 	mov	r9,r11
   84b20:	b8023126 	beq	r23,zero,853e8 <__ieee754_pow+0xae0>
   84b24:	da002815 	stw	r8,160(sp)
   84b28:	da402915 	stw	r9,164(sp)
   84b2c:	003f9d06 	br	849a4 <__ieee754_pow+0x9c>
   84b30:	0090d034 	movhi	r2,17216
   84b34:	10bfffc4 	addi	r2,r2,-1
   84b38:	1400270e 	bge	r2,r16,84bd8 <__ieee754_pow+0x2d0>
   84b3c:	07000084 	movi	fp,2
   84b40:	003fae06 	br	849fc <__ieee754_pow+0xf4>
   84b44:	00b00434 	movhi	r2,49168
   84b48:	9085883a 	add	r2,r18,r2
   84b4c:	8884b03a 	or	r2,r17,r2
   84b50:	103f9026 	beq	r2,zero,84994 <__ieee754_pow+0x8c>
   84b54:	008ffc34 	movhi	r2,16368
   84b58:	10bfffc4 	addi	r2,r2,-1
   84b5c:	1482d00e 	bge	r2,r18,856a0 <__ieee754_pow+0xd98>
   84b60:	b03f900e 	bge	r22,zero,849a4 <__ieee754_pow+0x9c>
   84b64:	0005883a 	mov	r2,zero
   84b68:	d8802815 	stw	r2,160(sp)
   84b6c:	d8802915 	stw	r2,164(sp)
   84b70:	003f8c06 	br	849a4 <__ieee754_pow+0x9c>
   84b74:	383f9e26 	beq	r7,zero,849f0 <__ieee754_pow+0xe8>
   84b78:	003f8206 	br	84984 <__ieee754_pow+0x7c>
   84b7c:	00907834 	movhi	r2,16864
   84b80:	1400290e 	bge	r2,r16,84c28 <__ieee754_pow+0x320>
   84b84:	0090fc34 	movhi	r2,17392
   84b88:	1402500e 	bge	r2,r16,854cc <__ieee754_pow+0xbc4>
   84b8c:	008ffc34 	movhi	r2,16368
   84b90:	10bfffc4 	addi	r2,r2,-1
   84b94:	14800b0e 	bge	r2,r18,84bc4 <__ieee754_pow+0x2bc>
   84b98:	05800b0e 	bge	zero,r22,84bc8 <__ieee754_pow+0x2c0>
   84b9c:	00a20034 	movhi	r2,34816
   84ba0:	109d6704 	addi	r2,r2,30108
   84ba4:	00df8e34 	movhi	r3,32312
   84ba8:	18f90f04 	addi	r3,r3,-7108
   84bac:	100d883a 	mov	r6,r2
   84bb0:	180f883a 	mov	r7,r3
   84bb4:	1009883a 	mov	r4,r2
   84bb8:	180b883a 	mov	r5,r3
   84bbc:	00871840 	call	87184 <__muldf3>
   84bc0:	003fcc06 	br	84af4 <__ieee754_pow+0x1ec>
   84bc4:	b03ff516 	blt	r22,zero,84b9c <__ieee754_pow+0x294>
   84bc8:	0007883a 	mov	r3,zero
   84bcc:	d8c02815 	stw	r3,160(sp)
   84bd0:	d8c02915 	stw	r3,164(sp)
   84bd4:	003f7306 	br	849a4 <__ieee754_pow+0x9c>
   84bd8:	008ffc34 	movhi	r2,16368
   84bdc:	10bfffc4 	addi	r2,r2,-1
   84be0:	143f850e 	bge	r2,r16,849f8 <__ieee754_pow+0xf0>
   84be4:	8005d53a 	srai	r2,r16,20
   84be8:	01400504 	movi	r5,20
   84bec:	10ff0044 	addi	r3,r2,-1023
   84bf0:	28c3e10e 	bge	r5,r3,85b78 <__ieee754_pow+0x1270>
   84bf4:	00800d04 	movi	r2,52
   84bf8:	10c5c83a 	sub	r2,r2,r3
   84bfc:	3886d83a 	srl	r3,r7,r2
   84c00:	1884983a 	sll	r2,r3,r2
   84c04:	38bf7c1e 	bne	r7,r2,849f8 <__ieee754_pow+0xf0>
   84c08:	18c0004c 	andi	r3,r3,1
   84c0c:	00800084 	movi	r2,2
   84c10:	10f9c83a 	sub	fp,r2,r3
   84c14:	003f7906 	br	849fc <__ieee754_pow+0xf4>
   84c18:	b0038516 	blt	r22,zero,85a30 <__ieee754_pow+0x1128>
   84c1c:	dd002815 	stw	r20,160(sp)
   84c20:	dd402915 	stw	r21,164(sp)
   84c24:	003f5f06 	br	849a4 <__ieee754_pow+0x9c>
   84c28:	00800434 	movhi	r2,16
   84c2c:	10bfffc4 	addi	r2,r2,-1
   84c30:	1482900e 	bge	r2,r18,85674 <__ieee754_pow+0xd6c>
   84c34:	000b883a 	mov	r5,zero
   84c38:	9005d53a 	srai	r2,r18,20
   84c3c:	00c00434 	movhi	r3,16
   84c40:	18ffffc4 	addi	r3,r3,-1
   84c44:	90c8703a 	and	r4,r18,r3
   84c48:	2887883a 	add	r3,r5,r2
   84c4c:	18bf0044 	addi	r2,r3,-1023
   84c50:	d8800015 	stw	r2,0(sp)
   84c54:	00800134 	movhi	r2,4
   84c58:	10a62384 	addi	r2,r2,-26482
   84c5c:	250ffc34 	orhi	r20,r4,16368
   84c60:	1101ee0e 	bge	r2,r4,8541c <__ieee754_pow+0xb14>
   84c64:	00800334 	movhi	r2,12
   84c68:	10ad9e44 	addi	r2,r2,-18823
   84c6c:	1101e716 	blt	r2,r4,8540c <__ieee754_pow+0xb04>
   84c70:	01000044 	movi	r4,1
   84c74:	04000334 	movhi	r16,12
   84c78:	200890fa 	slli	r4,r4,3
   84c7c:	da800115 	stw	r10,4(sp)
   84c80:	dd000215 	stw	r20,8(sp)
   84c84:	d9002c15 	stw	r4,176(sp)
   84c88:	d9402c17 	ldw	r5,176(sp)
   84c8c:	01000274 	movhi	r4,9
   84c90:	210e6d04 	addi	r4,r4,14772
   84c94:	a02bd07a 	srai	r21,r20,1
   84c98:	2909883a 	add	r4,r5,r4
   84c9c:	25800017 	ldw	r22,0(r4)
   84ca0:	25c00117 	ldw	r23,4(r4)
   84ca4:	a00b883a 	mov	r5,r20
   84ca8:	5009883a 	mov	r4,r10
   84cac:	b00d883a 	mov	r6,r22
   84cb0:	b80f883a 	mov	r7,r23
   84cb4:	00870900 	call	87090 <__subdf3>
   84cb8:	d9000117 	ldw	r4,4(sp)
   84cbc:	a00b883a 	mov	r5,r20
   84cc0:	b00d883a 	mov	r6,r22
   84cc4:	b80f883a 	mov	r7,r23
   84cc8:	1025883a 	mov	r18,r2
   84ccc:	1827883a 	mov	r19,r3
   84cd0:	00871100 	call	87110 <__adddf3>
   84cd4:	0011883a 	mov	r8,zero
   84cd8:	024ffc34 	movhi	r9,16368
   84cdc:	480b883a 	mov	r5,r9
   84ce0:	4009883a 	mov	r4,r8
   84ce4:	180f883a 	mov	r7,r3
   84ce8:	100d883a 	mov	r6,r2
   84cec:	00875480 	call	87548 <__divdf3>
   84cf0:	d8c02e15 	stw	r3,184(sp)
   84cf4:	d8800f15 	stw	r2,60(sp)
   84cf8:	d8802d15 	stw	r2,180(sp)
   84cfc:	d8802e17 	ldw	r2,184(sp)
   84d00:	d9800f17 	ldw	r6,60(sp)
   84d04:	9009883a 	mov	r4,r18
   84d08:	980b883a 	mov	r5,r19
   84d0c:	100f883a 	mov	r7,r2
   84d10:	dc800b15 	stw	r18,44(sp)
   84d14:	dcc00c15 	stw	r19,48(sp)
   84d18:	d8801015 	stw	r2,64(sp)
   84d1c:	00871840 	call	87184 <__muldf3>
   84d20:	d8c03015 	stw	r3,192(sp)
   84d24:	d9003017 	ldw	r4,192(sp)
   84d28:	d8802f15 	stw	r2,188(sp)
   84d2c:	d8800315 	stw	r2,12(sp)
   84d30:	ad480034 	orhi	r21,r21,8192
   84d34:	0005883a 	mov	r2,zero
   84d38:	ac2b883a 	add	r21,r21,r16
   84d3c:	000b883a 	mov	r5,zero
   84d40:	1021883a 	mov	r16,r2
   84d44:	2005883a 	mov	r2,r4
   84d48:	800d883a 	mov	r6,r16
   84d4c:	a80f883a 	mov	r7,r21
   84d50:	d9000415 	stw	r4,16(sp)
   84d54:	d9002715 	stw	r4,156(sp)
   84d58:	d9402615 	stw	r5,152(sp)
   84d5c:	d9401615 	stw	r5,88(sp)
   84d60:	d9001715 	stw	r4,92(sp)
   84d64:	100b883a 	mov	r5,r2
   84d68:	0009883a 	mov	r4,zero
   84d6c:	00871840 	call	87184 <__muldf3>
   84d70:	d9000b17 	ldw	r4,44(sp)
   84d74:	980b883a 	mov	r5,r19
   84d78:	180f883a 	mov	r7,r3
   84d7c:	100d883a 	mov	r6,r2
   84d80:	00870900 	call	87090 <__subdf3>
   84d84:	8009883a 	mov	r4,r16
   84d88:	a80b883a 	mov	r5,r21
   84d8c:	b80f883a 	mov	r7,r23
   84d90:	b00d883a 	mov	r6,r22
   84d94:	1021883a 	mov	r16,r2
   84d98:	1823883a 	mov	r17,r3
   84d9c:	00870900 	call	87090 <__subdf3>
   84da0:	d9000117 	ldw	r4,4(sp)
   84da4:	a00b883a 	mov	r5,r20
   84da8:	180f883a 	mov	r7,r3
   84dac:	100d883a 	mov	r6,r2
   84db0:	00870900 	call	87090 <__subdf3>
   84db4:	d9001617 	ldw	r4,88(sp)
   84db8:	d9402717 	ldw	r5,156(sp)
   84dbc:	180f883a 	mov	r7,r3
   84dc0:	100d883a 	mov	r6,r2
   84dc4:	00871840 	call	87184 <__muldf3>
   84dc8:	180f883a 	mov	r7,r3
   84dcc:	880b883a 	mov	r5,r17
   84dd0:	8009883a 	mov	r4,r16
   84dd4:	100d883a 	mov	r6,r2
   84dd8:	00870900 	call	87090 <__subdf3>
   84ddc:	d9000f17 	ldw	r4,60(sp)
   84de0:	d9402e17 	ldw	r5,184(sp)
   84de4:	180f883a 	mov	r7,r3
   84de8:	100d883a 	mov	r6,r2
   84dec:	00871840 	call	87184 <__muldf3>
   84df0:	d9000317 	ldw	r4,12(sp)
   84df4:	d9403017 	ldw	r5,192(sp)
   84df8:	d8803115 	stw	r2,196(sp)
   84dfc:	200d883a 	mov	r6,r4
   84e00:	280f883a 	mov	r7,r5
   84e04:	d8c03215 	stw	r3,200(sp)
   84e08:	00871840 	call	87184 <__muldf3>
   84e0c:	1009883a 	mov	r4,r2
   84e10:	180b883a 	mov	r5,r3
   84e14:	100d883a 	mov	r6,r2
   84e18:	180f883a 	mov	r7,r3
   84e1c:	1021883a 	mov	r16,r2
   84e20:	1823883a 	mov	r17,r3
   84e24:	00871840 	call	87184 <__muldf3>
   84e28:	02129174 	movhi	r8,19013
   84e2c:	4213bbc4 	addi	r8,r8,20207
   84e30:	024ff2b4 	movhi	r9,16330
   84e34:	4a5f8a04 	addi	r9,r9,32296
   84e38:	480f883a 	mov	r7,r9
   84e3c:	8009883a 	mov	r4,r16
   84e40:	880b883a 	mov	r5,r17
   84e44:	400d883a 	mov	r6,r8
   84e48:	1029883a 	mov	r20,r2
   84e4c:	182b883a 	mov	r21,r3
   84e50:	00871840 	call	87184 <__muldf3>
   84e54:	0224f2b4 	movhi	r8,37834
   84e58:	4236d944 	addi	r8,r8,-9371
   84e5c:	024ff3b4 	movhi	r9,16334
   84e60:	4a619284 	addi	r9,r9,-31158
   84e64:	480f883a 	mov	r7,r9
   84e68:	400d883a 	mov	r6,r8
   84e6c:	180b883a 	mov	r5,r3
   84e70:	1009883a 	mov	r4,r2
   84e74:	00871100 	call	87110 <__adddf3>
   84e78:	180f883a 	mov	r7,r3
   84e7c:	8009883a 	mov	r4,r16
   84e80:	880b883a 	mov	r5,r17
   84e84:	100d883a 	mov	r6,r2
   84e88:	00871840 	call	87184 <__muldf3>
   84e8c:	022a4774 	movhi	r8,43293
   84e90:	42104044 	addi	r8,r8,16641
   84e94:	024ff474 	movhi	r9,16337
   84e98:	4a5d1804 	addi	r9,r9,29792
   84e9c:	480f883a 	mov	r7,r9
   84ea0:	400d883a 	mov	r6,r8
   84ea4:	180b883a 	mov	r5,r3
   84ea8:	1009883a 	mov	r4,r2
   84eac:	00871100 	call	87110 <__adddf3>
   84eb0:	180f883a 	mov	r7,r3
   84eb4:	8009883a 	mov	r4,r16
   84eb8:	880b883a 	mov	r5,r17
   84ebc:	100d883a 	mov	r6,r2
   84ec0:	00871840 	call	87184 <__muldf3>
   84ec4:	021463f4 	movhi	r8,20879
   84ec8:	42099344 	addi	r8,r8,9805
   84ecc:	024ff574 	movhi	r9,16341
   84ed0:	4a555544 	addi	r9,r9,21845
   84ed4:	480f883a 	mov	r7,r9
   84ed8:	400d883a 	mov	r6,r8
   84edc:	180b883a 	mov	r5,r3
   84ee0:	1009883a 	mov	r4,r2
   84ee4:	00871100 	call	87110 <__adddf3>
   84ee8:	180f883a 	mov	r7,r3
   84eec:	8009883a 	mov	r4,r16
   84ef0:	880b883a 	mov	r5,r17
   84ef4:	100d883a 	mov	r6,r2
   84ef8:	00871840 	call	87184 <__muldf3>
   84efc:	0236dc34 	movhi	r8,56176
   84f00:	422affc4 	addi	r8,r8,-21505
   84f04:	024ff6f4 	movhi	r9,16347
   84f08:	4a5b6d84 	addi	r9,r9,28086
   84f0c:	480f883a 	mov	r7,r9
   84f10:	400d883a 	mov	r6,r8
   84f14:	180b883a 	mov	r5,r3
   84f18:	1009883a 	mov	r4,r2
   84f1c:	00871100 	call	87110 <__adddf3>
   84f20:	180f883a 	mov	r7,r3
   84f24:	8009883a 	mov	r4,r16
   84f28:	880b883a 	mov	r5,r17
   84f2c:	100d883a 	mov	r6,r2
   84f30:	00871840 	call	87184 <__muldf3>
   84f34:	020cccf4 	movhi	r8,13107
   84f38:	420cc0c4 	addi	r8,r8,13059
   84f3c:	024ff8f4 	movhi	r9,16355
   84f40:	4a4cccc4 	addi	r9,r9,13107
   84f44:	480f883a 	mov	r7,r9
   84f48:	400d883a 	mov	r6,r8
   84f4c:	180b883a 	mov	r5,r3
   84f50:	1009883a 	mov	r4,r2
   84f54:	00871100 	call	87110 <__adddf3>
   84f58:	180f883a 	mov	r7,r3
   84f5c:	a80b883a 	mov	r5,r21
   84f60:	a009883a 	mov	r4,r20
   84f64:	100d883a 	mov	r6,r2
   84f68:	00871840 	call	87184 <__muldf3>
   84f6c:	d9000317 	ldw	r4,12(sp)
   84f70:	d9403017 	ldw	r5,192(sp)
   84f74:	d9801617 	ldw	r6,88(sp)
   84f78:	d9c02717 	ldw	r7,156(sp)
   84f7c:	1021883a 	mov	r16,r2
   84f80:	1823883a 	mov	r17,r3
   84f84:	00871100 	call	87110 <__adddf3>
   84f88:	d9003117 	ldw	r4,196(sp)
   84f8c:	d9403217 	ldw	r5,200(sp)
   84f90:	180f883a 	mov	r7,r3
   84f94:	100d883a 	mov	r6,r2
   84f98:	d9001415 	stw	r4,80(sp)
   84f9c:	d9401515 	stw	r5,84(sp)
   84fa0:	00871840 	call	87184 <__muldf3>
   84fa4:	180f883a 	mov	r7,r3
   84fa8:	8009883a 	mov	r4,r16
   84fac:	880b883a 	mov	r5,r17
   84fb0:	100d883a 	mov	r6,r2
   84fb4:	00871100 	call	87110 <__adddf3>
   84fb8:	d9001617 	ldw	r4,88(sp)
   84fbc:	d9402717 	ldw	r5,156(sp)
   84fc0:	d8803315 	stw	r2,204(sp)
   84fc4:	200d883a 	mov	r6,r4
   84fc8:	280f883a 	mov	r7,r5
   84fcc:	d8c03415 	stw	r3,208(sp)
   84fd0:	00871840 	call	87184 <__muldf3>
   84fd4:	182f883a 	mov	r23,r3
   84fd8:	05500234 	movhi	r21,16392
   84fdc:	0029883a 	mov	r20,zero
   84fe0:	b80b883a 	mov	r5,r23
   84fe4:	a00d883a 	mov	r6,r20
   84fe8:	a80f883a 	mov	r7,r21
   84fec:	1009883a 	mov	r4,r2
   84ff0:	d8800715 	stw	r2,28(sp)
   84ff4:	d8c00815 	stw	r3,32(sp)
   84ff8:	00871100 	call	87110 <__adddf3>
   84ffc:	d9003317 	ldw	r4,204(sp)
   85000:	d9403417 	ldw	r5,208(sp)
   85004:	180f883a 	mov	r7,r3
   85008:	100d883a 	mov	r6,r2
   8500c:	d9000515 	stw	r4,20(sp)
   85010:	d9400615 	stw	r5,24(sp)
   85014:	00871100 	call	87110 <__adddf3>
   85018:	d9001617 	ldw	r4,88(sp)
   8501c:	d9402717 	ldw	r5,156(sp)
   85020:	0025883a 	mov	r18,zero
   85024:	900d883a 	mov	r6,r18
   85028:	180f883a 	mov	r7,r3
   8502c:	1823883a 	mov	r17,r3
   85030:	00871840 	call	87184 <__muldf3>
   85034:	d9001417 	ldw	r4,80(sp)
   85038:	d9403217 	ldw	r5,200(sp)
   8503c:	880f883a 	mov	r7,r17
   85040:	900d883a 	mov	r6,r18
   85044:	d8803515 	stw	r2,212(sp)
   85048:	d8c03615 	stw	r3,216(sp)
   8504c:	00871840 	call	87184 <__muldf3>
   85050:	a80f883a 	mov	r7,r21
   85054:	880b883a 	mov	r5,r17
   85058:	000d883a 	mov	r6,zero
   8505c:	9009883a 	mov	r4,r18
   85060:	1021883a 	mov	r16,r2
   85064:	1823883a 	mov	r17,r3
   85068:	00870900 	call	87090 <__subdf3>
   8506c:	d9800717 	ldw	r6,28(sp)
   85070:	b80f883a 	mov	r7,r23
   85074:	180b883a 	mov	r5,r3
   85078:	1009883a 	mov	r4,r2
   8507c:	00870900 	call	87090 <__subdf3>
   85080:	d9000517 	ldw	r4,20(sp)
   85084:	d9403417 	ldw	r5,208(sp)
   85088:	180f883a 	mov	r7,r3
   8508c:	100d883a 	mov	r6,r2
   85090:	00870900 	call	87090 <__subdf3>
   85094:	d9000317 	ldw	r4,12(sp)
   85098:	d9403017 	ldw	r5,192(sp)
   8509c:	180f883a 	mov	r7,r3
   850a0:	100d883a 	mov	r6,r2
   850a4:	00871840 	call	87184 <__muldf3>
   850a8:	180f883a 	mov	r7,r3
   850ac:	880b883a 	mov	r5,r17
   850b0:	8009883a 	mov	r4,r16
   850b4:	100d883a 	mov	r6,r2
   850b8:	00871100 	call	87110 <__adddf3>
   850bc:	102d883a 	mov	r22,r2
   850c0:	d9003617 	ldw	r4,216(sp)
   850c4:	d8803517 	ldw	r2,212(sp)
   850c8:	d9403617 	ldw	r5,216(sp)
   850cc:	182f883a 	mov	r23,r3
   850d0:	b00d883a 	mov	r6,r22
   850d4:	b80f883a 	mov	r7,r23
   850d8:	d9000a15 	stw	r4,40(sp)
   850dc:	1009883a 	mov	r4,r2
   850e0:	054ffbf4 	movhi	r21,16367
   850e4:	ad71c244 	addi	r21,r21,-14583
   850e8:	dd800d15 	stw	r22,52(sp)
   850ec:	ddc00e15 	stw	r23,56(sp)
   850f0:	05380034 	movhi	r20,57344
   850f4:	d8800915 	stw	r2,36(sp)
   850f8:	00871100 	call	87110 <__adddf3>
   850fc:	180b883a 	mov	r5,r3
   85100:	a00d883a 	mov	r6,r20
   85104:	a80f883a 	mov	r7,r21
   85108:	9009883a 	mov	r4,r18
   8510c:	1823883a 	mov	r17,r3
   85110:	00871840 	call	87184 <__muldf3>
   85114:	020516f4 	movhi	r8,5211
   85118:	42007d44 	addi	r8,r8,501
   8511c:	026f8fb4 	movhi	r9,48702
   85120:	4a4bf804 	addi	r9,r9,12256
   85124:	480f883a 	mov	r7,r9
   85128:	400d883a 	mov	r6,r8
   8512c:	880b883a 	mov	r5,r17
   85130:	9009883a 	mov	r4,r18
   85134:	d8803715 	stw	r2,220(sp)
   85138:	d8c03815 	stw	r3,224(sp)
   8513c:	00871840 	call	87184 <__muldf3>
   85140:	d9800917 	ldw	r6,36(sp)
   85144:	d9c03617 	ldw	r7,216(sp)
   85148:	880b883a 	mov	r5,r17
   8514c:	9009883a 	mov	r4,r18
   85150:	1021883a 	mov	r16,r2
   85154:	1823883a 	mov	r17,r3
   85158:	00870900 	call	87090 <__subdf3>
   8515c:	d9000d17 	ldw	r4,52(sp)
   85160:	b80b883a 	mov	r5,r23
   85164:	180f883a 	mov	r7,r3
   85168:	100d883a 	mov	r6,r2
   8516c:	00870900 	call	87090 <__subdf3>
   85170:	180b883a 	mov	r5,r3
   85174:	a80f883a 	mov	r7,r21
   85178:	01b70eb4 	movhi	r6,56378
   8517c:	3180ff44 	addi	r6,r6,1021
   85180:	1009883a 	mov	r4,r2
   85184:	00871840 	call	87184 <__muldf3>
   85188:	180f883a 	mov	r7,r3
   8518c:	880b883a 	mov	r5,r17
   85190:	8009883a 	mov	r4,r16
   85194:	100d883a 	mov	r6,r2
   85198:	00871100 	call	87110 <__adddf3>
   8519c:	d9402c17 	ldw	r5,176(sp)
   851a0:	01000274 	movhi	r4,9
   851a4:	210e7104 	addi	r4,r4,14788
   851a8:	2909883a 	add	r4,r5,r4
   851ac:	22400117 	ldw	r9,4(r4)
   851b0:	22000017 	ldw	r8,0(r4)
   851b4:	180b883a 	mov	r5,r3
   851b8:	480f883a 	mov	r7,r9
   851bc:	400d883a 	mov	r6,r8
   851c0:	1009883a 	mov	r4,r2
   851c4:	00871100 	call	87110 <__adddf3>
   851c8:	d9000017 	ldw	r4,0(sp)
   851cc:	182f883a 	mov	r23,r3
   851d0:	102d883a 	mov	r22,r2
   851d4:	0087ad00 	call	87ad0 <__floatsidf>
   851d8:	d9402c17 	ldw	r5,176(sp)
   851dc:	01000274 	movhi	r4,9
   851e0:	210e7504 	addi	r4,r4,14804
   851e4:	b00d883a 	mov	r6,r22
   851e8:	2911883a 	add	r8,r5,r4
   851ec:	d9003717 	ldw	r4,220(sp)
   851f0:	d9403817 	ldw	r5,224(sp)
   851f4:	45000017 	ldw	r20,0(r8)
   851f8:	d9002315 	stw	r4,140(sp)
   851fc:	d9003817 	ldw	r4,224(sp)
   85200:	45400117 	ldw	r21,4(r8)
   85204:	b80f883a 	mov	r7,r23
   85208:	d9002415 	stw	r4,144(sp)
   8520c:	d9002317 	ldw	r4,140(sp)
   85210:	1021883a 	mov	r16,r2
   85214:	1823883a 	mov	r17,r3
   85218:	dd802115 	stw	r22,132(sp)
   8521c:	ddc02215 	stw	r23,136(sp)
   85220:	00871100 	call	87110 <__adddf3>
   85224:	180b883a 	mov	r5,r3
   85228:	1009883a 	mov	r4,r2
   8522c:	a00d883a 	mov	r6,r20
   85230:	a80f883a 	mov	r7,r21
   85234:	00871100 	call	87110 <__adddf3>
   85238:	180f883a 	mov	r7,r3
   8523c:	8009883a 	mov	r4,r16
   85240:	880b883a 	mov	r5,r17
   85244:	100d883a 	mov	r6,r2
   85248:	00871100 	call	87110 <__adddf3>
   8524c:	180b883a 	mov	r5,r3
   85250:	0009883a 	mov	r4,zero
   85254:	800d883a 	mov	r6,r16
   85258:	880f883a 	mov	r7,r17
   8525c:	d9001b15 	stw	r4,108(sp)
   85260:	d8c01c15 	stw	r3,112(sp)
   85264:	00870900 	call	87090 <__subdf3>
   85268:	180b883a 	mov	r5,r3
   8526c:	a80f883a 	mov	r7,r21
   85270:	1009883a 	mov	r4,r2
   85274:	a00d883a 	mov	r6,r20
   85278:	00870900 	call	87090 <__subdf3>
   8527c:	d9802317 	ldw	r6,140(sp)
   85280:	d9c03817 	ldw	r7,224(sp)
   85284:	180b883a 	mov	r5,r3
   85288:	1009883a 	mov	r4,r2
   8528c:	00870900 	call	87090 <__subdf3>
   85290:	d9002117 	ldw	r4,132(sp)
   85294:	1011883a 	mov	r8,r2
   85298:	1813883a 	mov	r9,r3
   8529c:	b80b883a 	mov	r5,r23
   852a0:	480f883a 	mov	r7,r9
   852a4:	400d883a 	mov	r6,r8
   852a8:	00870900 	call	87090 <__subdf3>
   852ac:	1823883a 	mov	r17,r3
   852b0:	d8c02517 	ldw	r3,148(sp)
   852b4:	1021883a 	mov	r16,r2
   852b8:	e0bfffc4 	addi	r2,fp,-1
   852bc:	1884b03a 	or	r2,r3,r2
   852c0:	1000731e 	bne	r2,zero,85490 <__ieee754_pow+0xb88>
   852c4:	0009883a 	mov	r4,zero
   852c8:	016ffc34 	movhi	r5,49136
   852cc:	d9001915 	stw	r4,100(sp)
   852d0:	d9401a15 	stw	r5,104(sp)
   852d4:	d9402917 	ldw	r5,164(sp)
   852d8:	d9002817 	ldw	r4,160(sp)
   852dc:	0029883a 	mov	r20,zero
   852e0:	a00d883a 	mov	r6,r20
   852e4:	280f883a 	mov	r7,r5
   852e8:	2827883a 	mov	r19,r5
   852ec:	00870900 	call	87090 <__subdf3>
   852f0:	d9001b17 	ldw	r4,108(sp)
   852f4:	d9401c17 	ldw	r5,112(sp)
   852f8:	180f883a 	mov	r7,r3
   852fc:	100d883a 	mov	r6,r2
   85300:	00871840 	call	87184 <__muldf3>
   85304:	d9c02917 	ldw	r7,164(sp)
   85308:	d9802817 	ldw	r6,160(sp)
   8530c:	880b883a 	mov	r5,r17
   85310:	8009883a 	mov	r4,r16
   85314:	1823883a 	mov	r17,r3
   85318:	1021883a 	mov	r16,r2
   8531c:	00871840 	call	87184 <__muldf3>
   85320:	180f883a 	mov	r7,r3
   85324:	880b883a 	mov	r5,r17
   85328:	8009883a 	mov	r4,r16
   8532c:	100d883a 	mov	r6,r2
   85330:	00871100 	call	87110 <__adddf3>
   85334:	d9401c17 	ldw	r5,112(sp)
   85338:	d9001b17 	ldw	r4,108(sp)
   8533c:	a00d883a 	mov	r6,r20
   85340:	980f883a 	mov	r7,r19
   85344:	1029883a 	mov	r20,r2
   85348:	182b883a 	mov	r21,r3
   8534c:	00871840 	call	87184 <__muldf3>
   85350:	1025883a 	mov	r18,r2
   85354:	1827883a 	mov	r19,r3
   85358:	a009883a 	mov	r4,r20
   8535c:	a80b883a 	mov	r5,r21
   85360:	900d883a 	mov	r6,r18
   85364:	980f883a 	mov	r7,r19
   85368:	dd001d15 	stw	r20,116(sp)
   8536c:	dc801f15 	stw	r18,124(sp)
   85370:	dd401e15 	stw	r21,120(sp)
   85374:	dcc02015 	stw	r19,128(sp)
   85378:	00871100 	call	87110 <__adddf3>
   8537c:	1823883a 	mov	r17,r3
   85380:	01102434 	movhi	r4,16528
   85384:	213fffc4 	addi	r4,r4,-1
   85388:	1021883a 	mov	r16,r2
   8538c:	182f883a 	mov	r23,r3
   85390:	dc401815 	stw	r17,96(sp)
   85394:	100b883a 	mov	r5,r2
   85398:	20c02c0e 	bge	r4,r3,8544c <__ieee754_pow+0xb44>
   8539c:	00afdc34 	movhi	r2,49008
   853a0:	1885883a 	add	r2,r3,r2
   853a4:	2884b03a 	or	r2,r5,r2
   853a8:	1001a626 	beq	r2,zero,85a44 <__ieee754_pow+0x113c>
   853ac:	04220034 	movhi	r16,34816
   853b0:	841d6704 	addi	r16,r16,30108
   853b4:	045f8e34 	movhi	r17,32312
   853b8:	8c790f04 	addi	r17,r17,-7108
   853bc:	d9401a17 	ldw	r5,104(sp)
   853c0:	d9001917 	ldw	r4,100(sp)
   853c4:	800d883a 	mov	r6,r16
   853c8:	880f883a 	mov	r7,r17
   853cc:	00871840 	call	87184 <__muldf3>
   853d0:	180b883a 	mov	r5,r3
   853d4:	800d883a 	mov	r6,r16
   853d8:	880f883a 	mov	r7,r17
   853dc:	1009883a 	mov	r4,r2
   853e0:	00871840 	call	87184 <__muldf3>
   853e4:	003dc306 	br	84af4 <__ieee754_pow+0x1ec>
   853e8:	00b00434 	movhi	r2,49168
   853ec:	9085883a 	add	r2,r18,r2
   853f0:	e084b03a 	or	r2,fp,r2
   853f4:	1000af1e 	bne	r2,zero,856b4 <__ieee754_pow+0xdac>
   853f8:	480f883a 	mov	r7,r9
   853fc:	4009883a 	mov	r4,r8
   85400:	480b883a 	mov	r5,r9
   85404:	400d883a 	mov	r6,r8
   85408:	003db406 	br	84adc <__ieee754_pow+0x1d4>
   8540c:	00bffc34 	movhi	r2,65520
   85410:	18ff0084 	addi	r3,r3,-1022
   85414:	a0a9883a 	add	r20,r20,r2
   85418:	d8c00015 	stw	r3,0(sp)
   8541c:	0009883a 	mov	r4,zero
   85420:	04000234 	movhi	r16,8
   85424:	003e1406 	br	84c78 <__ieee754_pow+0x370>
   85428:	a80f883a 	mov	r7,r21
   8542c:	a009883a 	mov	r4,r20
   85430:	a80b883a 	mov	r5,r21
   85434:	a00d883a 	mov	r6,r20
   85438:	00871840 	call	87184 <__muldf3>
   8543c:	180b883a 	mov	r5,r3
   85440:	d8802815 	stw	r2,160(sp)
   85444:	d9402915 	stw	r5,164(sp)
   85448:	003d5606 	br	849a4 <__ieee754_pow+0x9c>
   8544c:	d9001817 	ldw	r4,96(sp)
   85450:	00a00034 	movhi	r2,32768
   85454:	10bfffc4 	addi	r2,r2,-1
   85458:	00d02474 	movhi	r3,16529
   8545c:	18f2ffc4 	addi	r3,r3,-13313
   85460:	20b8703a 	and	fp,r4,r2
   85464:	1f009d0e 	bge	r3,fp,856dc <__ieee754_pow+0xdd4>
   85468:	008fdbf4 	movhi	r2,16239
   8546c:	108d0004 	addi	r2,r2,13312
   85470:	2085883a 	add	r2,r4,r2
   85474:	1144b03a 	or	r2,r2,r5
   85478:	1001c626 	beq	r2,zero,85b94 <__ieee754_pow+0x128c>
   8547c:	0430be74 	movhi	r16,49913
   85480:	843cd644 	addi	r16,r16,-3239
   85484:	04406974 	movhi	r17,421
   85488:	8c5b87c4 	addi	r17,r17,28191
   8548c:	003fcb06 	br	853bc <__ieee754_pow+0xab4>
   85490:	0005883a 	mov	r2,zero
   85494:	00cffc34 	movhi	r3,16368
   85498:	d8801915 	stw	r2,100(sp)
   8549c:	d8c01a15 	stw	r3,104(sp)
   854a0:	003f8c06 	br	852d4 <__ieee754_pow+0x9cc>
   854a4:	0005883a 	mov	r2,zero
   854a8:	00cffc34 	movhi	r3,16368
   854ac:	180b883a 	mov	r5,r3
   854b0:	580f883a 	mov	r7,r11
   854b4:	1009883a 	mov	r4,r2
   854b8:	500d883a 	mov	r6,r10
   854bc:	00875480 	call	87548 <__divdf3>
   854c0:	1011883a 	mov	r8,r2
   854c4:	1813883a 	mov	r9,r3
   854c8:	003d9506 	br	84b20 <__ieee754_pow+0x218>
   854cc:	008ffc34 	movhi	r2,16368
   854d0:	10bfff84 	addi	r2,r2,-2
   854d4:	14bdbb0e 	bge	r2,r18,84bc4 <__ieee754_pow+0x2bc>
   854d8:	008ffc34 	movhi	r2,16368
   854dc:	14bdae16 	blt	r2,r18,84b98 <__ieee754_pow+0x290>
   854e0:	580b883a 	mov	r5,r11
   854e4:	5009883a 	mov	r4,r10
   854e8:	000d883a 	mov	r6,zero
   854ec:	100f883a 	mov	r7,r2
   854f0:	00870900 	call	87090 <__subdf3>
   854f4:	1021883a 	mov	r16,r2
   854f8:	1823883a 	mov	r17,r3
   854fc:	00980034 	movhi	r2,24576
   85500:	00cffdf4 	movhi	r3,16375
   85504:	18c551c4 	addi	r3,r3,5447
   85508:	8009883a 	mov	r4,r16
   8550c:	880b883a 	mov	r5,r17
   85510:	180f883a 	mov	r7,r3
   85514:	100d883a 	mov	r6,r2
   85518:	00871840 	call	87184 <__muldf3>
   8551c:	023e17b4 	movhi	r8,63582
   85520:	4237d104 	addi	r8,r8,-8380
   85524:	024f9574 	movhi	r9,15957
   85528:	4a6b82c4 	addi	r9,r9,-20981
   8552c:	480f883a 	mov	r7,r9
   85530:	400d883a 	mov	r6,r8
   85534:	8009883a 	mov	r4,r16
   85538:	880b883a 	mov	r5,r17
   8553c:	102d883a 	mov	r22,r2
   85540:	182f883a 	mov	r23,r3
   85544:	00871840 	call	87184 <__muldf3>
   85548:	8009883a 	mov	r4,r16
   8554c:	880b883a 	mov	r5,r17
   85550:	800d883a 	mov	r6,r16
   85554:	880f883a 	mov	r7,r17
   85558:	d8802a15 	stw	r2,168(sp)
   8555c:	d8c02b15 	stw	r3,172(sp)
   85560:	00871840 	call	87184 <__muldf3>
   85564:	0011883a 	mov	r8,zero
   85568:	026ff434 	movhi	r9,49104
   8556c:	480f883a 	mov	r7,r9
   85570:	8009883a 	mov	r4,r16
   85574:	880b883a 	mov	r5,r17
   85578:	400d883a 	mov	r6,r8
   8557c:	1029883a 	mov	r20,r2
   85580:	182b883a 	mov	r21,r3
   85584:	00871840 	call	87184 <__muldf3>
   85588:	02155574 	movhi	r8,21845
   8558c:	42155544 	addi	r8,r8,21845
   85590:	024ff574 	movhi	r9,16341
   85594:	4a555544 	addi	r9,r9,21845
   85598:	480f883a 	mov	r7,r9
   8559c:	400d883a 	mov	r6,r8
   855a0:	180b883a 	mov	r5,r3
   855a4:	1009883a 	mov	r4,r2
   855a8:	00871100 	call	87110 <__adddf3>
   855ac:	180f883a 	mov	r7,r3
   855b0:	8009883a 	mov	r4,r16
   855b4:	880b883a 	mov	r5,r17
   855b8:	100d883a 	mov	r6,r2
   855bc:	00871840 	call	87184 <__muldf3>
   855c0:	0011883a 	mov	r8,zero
   855c4:	024ff834 	movhi	r9,16352
   855c8:	480b883a 	mov	r5,r9
   855cc:	4009883a 	mov	r4,r8
   855d0:	180f883a 	mov	r7,r3
   855d4:	100d883a 	mov	r6,r2
   855d8:	00870900 	call	87090 <__subdf3>
   855dc:	180f883a 	mov	r7,r3
   855e0:	a80b883a 	mov	r5,r21
   855e4:	a009883a 	mov	r4,r20
   855e8:	100d883a 	mov	r6,r2
   855ec:	00871840 	call	87184 <__muldf3>
   855f0:	02194b34 	movhi	r8,25900
   855f4:	4220bf84 	addi	r8,r8,-32002
   855f8:	026ffdf4 	movhi	r9,49143
   855fc:	4a4551c4 	addi	r9,r9,5447
   85600:	480f883a 	mov	r7,r9
   85604:	400d883a 	mov	r6,r8
   85608:	180b883a 	mov	r5,r3
   8560c:	1009883a 	mov	r4,r2
   85610:	00871840 	call	87184 <__muldf3>
   85614:	d9402b17 	ldw	r5,172(sp)
   85618:	d9002a17 	ldw	r4,168(sp)
   8561c:	180f883a 	mov	r7,r3
   85620:	100d883a 	mov	r6,r2
   85624:	00871100 	call	87110 <__adddf3>
   85628:	100d883a 	mov	r6,r2
   8562c:	b009883a 	mov	r4,r22
   85630:	b80b883a 	mov	r5,r23
   85634:	180f883a 	mov	r7,r3
   85638:	1021883a 	mov	r16,r2
   8563c:	1823883a 	mov	r17,r3
   85640:	00871100 	call	87110 <__adddf3>
   85644:	180b883a 	mov	r5,r3
   85648:	0009883a 	mov	r4,zero
   8564c:	b00d883a 	mov	r6,r22
   85650:	b80f883a 	mov	r7,r23
   85654:	d9001b15 	stw	r4,108(sp)
   85658:	d8c01c15 	stw	r3,112(sp)
   8565c:	00870900 	call	87090 <__subdf3>
   85660:	1011883a 	mov	r8,r2
   85664:	1813883a 	mov	r9,r3
   85668:	8009883a 	mov	r4,r16
   8566c:	880b883a 	mov	r5,r17
   85670:	003f0b06 	br	852a0 <__ieee754_pow+0x998>
   85674:	0005883a 	mov	r2,zero
   85678:	00d0d034 	movhi	r3,17216
   8567c:	580b883a 	mov	r5,r11
   85680:	5009883a 	mov	r4,r10
   85684:	180f883a 	mov	r7,r3
   85688:	100d883a 	mov	r6,r2
   8568c:	00871840 	call	87184 <__muldf3>
   85690:	1015883a 	mov	r10,r2
   85694:	1825883a 	mov	r18,r3
   85698:	017ff2c4 	movi	r5,-53
   8569c:	003d6606 	br	84c38 <__ieee754_pow+0x330>
   856a0:	b03d300e 	bge	r22,zero,84b64 <__ieee754_pow+0x25c>
   856a4:	d9402917 	ldw	r5,164(sp)
   856a8:	28e0003c 	xorhi	r3,r5,32768
   856ac:	d8c02915 	stw	r3,164(sp)
   856b0:	003cbc06 	br	849a4 <__ieee754_pow+0x9c>
   856b4:	00800044 	movi	r2,1
   856b8:	e0bd1a1e 	bne	fp,r2,84b24 <__ieee754_pow+0x21c>
   856bc:	48e0003c 	xorhi	r3,r9,32768
   856c0:	da002815 	stw	r8,160(sp)
   856c4:	d8c02915 	stw	r3,164(sp)
   856c8:	003cb606 	br	849a4 <__ieee754_pow+0x9c>
   856cc:	d9001817 	ldw	r4,96(sp)
   856d0:	00a00034 	movhi	r2,32768
   856d4:	10bfffc4 	addi	r2,r2,-1
   856d8:	20b8703a 	and	fp,r4,r2
   856dc:	008ff834 	movhi	r2,16352
   856e0:	1700fc16 	blt	r2,fp,85ad4 <__ieee754_pow+0x11cc>
   856e4:	0039883a 	mov	fp,zero
   856e8:	d8001315 	stw	zero,76(sp)
   856ec:	0025883a 	mov	r18,zero
   856f0:	0005883a 	mov	r2,zero
   856f4:	00cff9b4 	movhi	r3,16358
   856f8:	18cb90c4 	addi	r3,r3,11843
   856fc:	9009883a 	mov	r4,r18
   85700:	b80b883a 	mov	r5,r23
   85704:	180f883a 	mov	r7,r3
   85708:	100d883a 	mov	r6,r2
   8570c:	00871840 	call	87184 <__muldf3>
   85710:	d9c02017 	ldw	r7,128(sp)
   85714:	d9801f17 	ldw	r6,124(sp)
   85718:	9009883a 	mov	r4,r18
   8571c:	b80b883a 	mov	r5,r23
   85720:	b823883a 	mov	r17,r23
   85724:	102d883a 	mov	r22,r2
   85728:	182f883a 	mov	r23,r3
   8572c:	00870900 	call	87090 <__subdf3>
   85730:	d9401e17 	ldw	r5,120(sp)
   85734:	d9001d17 	ldw	r4,116(sp)
   85738:	180f883a 	mov	r7,r3
   8573c:	100d883a 	mov	r6,r2
   85740:	00870900 	call	87090 <__subdf3>
   85744:	023fbeb4 	movhi	r8,65274
   85748:	420e7bc4 	addi	r8,r8,14831
   8574c:	024ff9b4 	movhi	r9,16358
   85750:	4a4b9084 	addi	r9,r9,11842
   85754:	480f883a 	mov	r7,r9
   85758:	400d883a 	mov	r6,r8
   8575c:	180b883a 	mov	r5,r3
   85760:	1009883a 	mov	r4,r2
   85764:	00871840 	call	87184 <__muldf3>
   85768:	02032a34 	movhi	r8,3240
   8576c:	421b0e44 	addi	r8,r8,27705
   85770:	026f8834 	movhi	r9,48672
   85774:	4a571844 	addi	r9,r9,23649
   85778:	480f883a 	mov	r7,r9
   8577c:	400d883a 	mov	r6,r8
   85780:	9009883a 	mov	r4,r18
   85784:	880b883a 	mov	r5,r17
   85788:	1021883a 	mov	r16,r2
   8578c:	1823883a 	mov	r17,r3
   85790:	00871840 	call	87184 <__muldf3>
   85794:	180f883a 	mov	r7,r3
   85798:	880b883a 	mov	r5,r17
   8579c:	8009883a 	mov	r4,r16
   857a0:	100d883a 	mov	r6,r2
   857a4:	00871100 	call	87110 <__adddf3>
   857a8:	100d883a 	mov	r6,r2
   857ac:	b009883a 	mov	r4,r22
   857b0:	b80b883a 	mov	r5,r23
   857b4:	180f883a 	mov	r7,r3
   857b8:	1021883a 	mov	r16,r2
   857bc:	1823883a 	mov	r17,r3
   857c0:	00871100 	call	87110 <__adddf3>
   857c4:	1009883a 	mov	r4,r2
   857c8:	180b883a 	mov	r5,r3
   857cc:	b00d883a 	mov	r6,r22
   857d0:	b80f883a 	mov	r7,r23
   857d4:	d8803915 	stw	r2,228(sp)
   857d8:	d8c03a15 	stw	r3,232(sp)
   857dc:	d8801115 	stw	r2,68(sp)
   857e0:	d8c01215 	stw	r3,72(sp)
   857e4:	00870900 	call	87090 <__subdf3>
   857e8:	180f883a 	mov	r7,r3
   857ec:	8009883a 	mov	r4,r16
   857f0:	880b883a 	mov	r5,r17
   857f4:	100d883a 	mov	r6,r2
   857f8:	00870900 	call	87090 <__subdf3>
   857fc:	d9001117 	ldw	r4,68(sp)
   85800:	d9403a17 	ldw	r5,232(sp)
   85804:	1029883a 	mov	r20,r2
   85808:	200d883a 	mov	r6,r4
   8580c:	280f883a 	mov	r7,r5
   85810:	182b883a 	mov	r21,r3
   85814:	00871840 	call	87184 <__muldf3>
   85818:	1021883a 	mov	r16,r2
   8581c:	1823883a 	mov	r17,r3
   85820:	009caff4 	movhi	r2,29375
   85824:	10a93404 	addi	r2,r2,-23344
   85828:	00cf99b4 	movhi	r3,15974
   8582c:	18cdda44 	addi	r3,r3,14185
   85830:	8009883a 	mov	r4,r16
   85834:	880b883a 	mov	r5,r17
   85838:	180f883a 	mov	r7,r3
   8583c:	100d883a 	mov	r6,r2
   85840:	00871840 	call	87184 <__muldf3>
   85844:	023174b4 	movhi	r8,50642
   85848:	421afc44 	addi	r8,r8,27633
   8584c:	024faf34 	movhi	r9,16060
   85850:	4a6f5044 	addi	r9,r9,-17087
   85854:	480f883a 	mov	r7,r9
   85858:	400d883a 	mov	r6,r8
   8585c:	180b883a 	mov	r5,r3
   85860:	1009883a 	mov	r4,r2
   85864:	00870900 	call	87090 <__subdf3>
   85868:	180f883a 	mov	r7,r3
   8586c:	8009883a 	mov	r4,r16
   85870:	880b883a 	mov	r5,r17
   85874:	100d883a 	mov	r6,r2
   85878:	00871840 	call	87184 <__muldf3>
   8587c:	022bc9b4 	movhi	r8,44838
   85880:	42378b04 	addi	r8,r8,-8660
   85884:	024fc474 	movhi	r9,16145
   85888:	4a559a84 	addi	r9,r9,22122
   8588c:	480f883a 	mov	r7,r9
   85890:	400d883a 	mov	r6,r8
   85894:	180b883a 	mov	r5,r3
   85898:	1009883a 	mov	r4,r2
   8589c:	00871100 	call	87110 <__adddf3>
   858a0:	180f883a 	mov	r7,r3
   858a4:	8009883a 	mov	r4,r16
   858a8:	880b883a 	mov	r5,r17
   858ac:	100d883a 	mov	r6,r2
   858b0:	00871840 	call	87184 <__muldf3>
   858b4:	0205aff4 	movhi	r8,5823
   858b8:	422f64c4 	addi	r8,r8,-17005
   858bc:	024fd9f4 	movhi	r9,16231
   858c0:	4a705b04 	addi	r9,r9,-16020
   858c4:	480f883a 	mov	r7,r9
   858c8:	400d883a 	mov	r6,r8
   858cc:	180b883a 	mov	r5,r3
   858d0:	1009883a 	mov	r4,r2
   858d4:	00870900 	call	87090 <__subdf3>
   858d8:	180f883a 	mov	r7,r3
   858dc:	8009883a 	mov	r4,r16
   858e0:	880b883a 	mov	r5,r17
   858e4:	100d883a 	mov	r6,r2
   858e8:	00871840 	call	87184 <__muldf3>
   858ec:	02155574 	movhi	r8,21845
   858f0:	42154f84 	addi	r8,r8,21822
   858f4:	024ff174 	movhi	r9,16325
   858f8:	4a555544 	addi	r9,r9,21845
   858fc:	480f883a 	mov	r7,r9
   85900:	400d883a 	mov	r6,r8
   85904:	180b883a 	mov	r5,r3
   85908:	1009883a 	mov	r4,r2
   8590c:	00871100 	call	87110 <__adddf3>
   85910:	180f883a 	mov	r7,r3
   85914:	8009883a 	mov	r4,r16
   85918:	880b883a 	mov	r5,r17
   8591c:	100d883a 	mov	r6,r2
   85920:	00871840 	call	87184 <__muldf3>
   85924:	d9001117 	ldw	r4,68(sp)
   85928:	d9403a17 	ldw	r5,232(sp)
   8592c:	180f883a 	mov	r7,r3
   85930:	100d883a 	mov	r6,r2
   85934:	00870900 	call	87090 <__subdf3>
   85938:	d9001117 	ldw	r4,68(sp)
   8593c:	d9403a17 	ldw	r5,232(sp)
   85940:	100d883a 	mov	r6,r2
   85944:	180f883a 	mov	r7,r3
   85948:	1021883a 	mov	r16,r2
   8594c:	1823883a 	mov	r17,r3
   85950:	00871840 	call	87184 <__muldf3>
   85954:	0011883a 	mov	r8,zero
   85958:	02500034 	movhi	r9,16384
   8595c:	480f883a 	mov	r7,r9
   85960:	400d883a 	mov	r6,r8
   85964:	8009883a 	mov	r4,r16
   85968:	880b883a 	mov	r5,r17
   8596c:	1021883a 	mov	r16,r2
   85970:	1823883a 	mov	r17,r3
   85974:	00870900 	call	87090 <__subdf3>
   85978:	180f883a 	mov	r7,r3
   8597c:	880b883a 	mov	r5,r17
   85980:	8009883a 	mov	r4,r16
   85984:	100d883a 	mov	r6,r2
   85988:	00875480 	call	87548 <__divdf3>
   8598c:	d9001117 	ldw	r4,68(sp)
   85990:	d9403a17 	ldw	r5,232(sp)
   85994:	a00d883a 	mov	r6,r20
   85998:	a80f883a 	mov	r7,r21
   8599c:	1025883a 	mov	r18,r2
   859a0:	1827883a 	mov	r19,r3
   859a4:	00871840 	call	87184 <__muldf3>
   859a8:	180f883a 	mov	r7,r3
   859ac:	a009883a 	mov	r4,r20
   859b0:	a80b883a 	mov	r5,r21
   859b4:	100d883a 	mov	r6,r2
   859b8:	00871100 	call	87110 <__adddf3>
   859bc:	180f883a 	mov	r7,r3
   859c0:	980b883a 	mov	r5,r19
   859c4:	9009883a 	mov	r4,r18
   859c8:	100d883a 	mov	r6,r2
   859cc:	00870900 	call	87090 <__subdf3>
   859d0:	d9801117 	ldw	r6,68(sp)
   859d4:	d9c03a17 	ldw	r7,232(sp)
   859d8:	180b883a 	mov	r5,r3
   859dc:	1009883a 	mov	r4,r2
   859e0:	00870900 	call	87090 <__subdf3>
   859e4:	0011883a 	mov	r8,zero
   859e8:	024ffc34 	movhi	r9,16368
   859ec:	480b883a 	mov	r5,r9
   859f0:	180f883a 	mov	r7,r3
   859f4:	4009883a 	mov	r4,r8
   859f8:	100d883a 	mov	r6,r2
   859fc:	00870900 	call	87090 <__subdf3>
   85a00:	100b883a 	mov	r5,r2
   85a04:	d8801317 	ldw	r2,76(sp)
   85a08:	10d5883a 	add	r10,r2,r3
   85a0c:	5005d53a 	srai	r2,r10,20
   85a10:	0080720e 	bge	zero,r2,85bdc <__ieee754_pow+0x12d4>
   85a14:	2811883a 	mov	r8,r5
   85a18:	5013883a 	mov	r9,r10
   85a1c:	d9c01a17 	ldw	r7,104(sp)
   85a20:	d9801917 	ldw	r6,100(sp)
   85a24:	480b883a 	mov	r5,r9
   85a28:	4009883a 	mov	r4,r8
   85a2c:	003e8206 	br	85438 <__ieee754_pow+0xb30>
   85a30:	0009883a 	mov	r4,zero
   85a34:	800b883a 	mov	r5,r16
   85a38:	a80f883a 	mov	r7,r21
   85a3c:	a00d883a 	mov	r6,r20
   85a40:	003c2b06 	br	84af0 <__ieee754_pow+0x1e8>
   85a44:	d9001d17 	ldw	r4,116(sp)
   85a48:	00994b34 	movhi	r2,25900
   85a4c:	10a0bf84 	addi	r2,r2,-32002
   85a50:	00cf25f4 	movhi	r3,15511
   85a54:	18c551c4 	addi	r3,r3,5447
   85a58:	a80b883a 	mov	r5,r21
   85a5c:	180f883a 	mov	r7,r3
   85a60:	100d883a 	mov	r6,r2
   85a64:	00871100 	call	87110 <__adddf3>
   85a68:	d9801f17 	ldw	r6,124(sp)
   85a6c:	880b883a 	mov	r5,r17
   85a70:	8009883a 	mov	r4,r16
   85a74:	980f883a 	mov	r7,r19
   85a78:	1021883a 	mov	r16,r2
   85a7c:	1823883a 	mov	r17,r3
   85a80:	00870900 	call	87090 <__subdf3>
   85a84:	180f883a 	mov	r7,r3
   85a88:	880b883a 	mov	r5,r17
   85a8c:	8009883a 	mov	r4,r16
   85a90:	100d883a 	mov	r6,r2
   85a94:	00878b00 	call	878b0 <__gtdf2>
   85a98:	00bf0c0e 	bge	zero,r2,856cc <__ieee754_pow+0xdc4>
   85a9c:	04220034 	movhi	r16,34816
   85aa0:	841d6704 	addi	r16,r16,30108
   85aa4:	045f8e34 	movhi	r17,32312
   85aa8:	8c790f04 	addi	r17,r17,-7108
   85aac:	d9401a17 	ldw	r5,104(sp)
   85ab0:	d9001917 	ldw	r4,100(sp)
   85ab4:	800d883a 	mov	r6,r16
   85ab8:	880f883a 	mov	r7,r17
   85abc:	00871840 	call	87184 <__muldf3>
   85ac0:	180b883a 	mov	r5,r3
   85ac4:	800d883a 	mov	r6,r16
   85ac8:	880f883a 	mov	r7,r17
   85acc:	1009883a 	mov	r4,r2
   85ad0:	003e5906 	br	85438 <__ieee754_pow+0xb30>
   85ad4:	e005d53a 	srai	r2,fp,20
   85ad8:	01800434 	movhi	r6,16
   85adc:	d9401817 	ldw	r5,96(sp)
   85ae0:	10bf0084 	addi	r2,r2,-1022
   85ae4:	308dd83a 	sra	r6,r6,r2
   85ae8:	02000434 	movhi	r8,16
   85aec:	423fffc4 	addi	r8,r8,-1
   85af0:	0005883a 	mov	r2,zero
   85af4:	298d883a 	add	r6,r5,r6
   85af8:	318b883a 	add	r5,r6,r6
   85afc:	320e703a 	and	r7,r6,r8
   85b00:	1013883a 	mov	r9,r2
   85b04:	280ad57a 	srli	r5,r5,21
   85b08:	d8801817 	ldw	r2,96(sp)
   85b0c:	01000504 	movi	r4,20
   85b10:	297f0044 	addi	r5,r5,-1023
   85b14:	4151d83a 	sra	r8,r8,r5
   85b18:	39c00434 	orhi	r7,r7,16
   85b1c:	2149c83a 	sub	r4,r4,r5
   85b20:	0210303a 	nor	r8,zero,r8
   85b24:	3939d83a 	sra	fp,r7,r4
   85b28:	320e703a 	and	r7,r6,r8
   85b2c:	10002916 	blt	r2,zero,85bd4 <__ieee754_pow+0x12cc>
   85b30:	d9402017 	ldw	r5,128(sp)
   85b34:	d9001f17 	ldw	r4,124(sp)
   85b38:	480d883a 	mov	r6,r9
   85b3c:	00870900 	call	87090 <__subdf3>
   85b40:	180b883a 	mov	r5,r3
   85b44:	d9402015 	stw	r5,128(sp)
   85b48:	280f883a 	mov	r7,r5
   85b4c:	d9001d17 	ldw	r4,116(sp)
   85b50:	d9401e17 	ldw	r5,120(sp)
   85b54:	1007883a 	mov	r3,r2
   85b58:	180d883a 	mov	r6,r3
   85b5c:	d8801f15 	stw	r2,124(sp)
   85b60:	00871100 	call	87110 <__adddf3>
   85b64:	180b883a 	mov	r5,r3
   85b68:	e006953a 	slli	r3,fp,20
   85b6c:	282f883a 	mov	r23,r5
   85b70:	d8c01315 	stw	r3,76(sp)
   85b74:	003edd06 	br	856ec <__ieee754_pow+0xde4>
   85b78:	383bc81e 	bne	r7,zero,84a9c <__ieee754_pow+0x194>
   85b7c:	28c5c83a 	sub	r2,r5,r3
   85b80:	8087d83a 	sra	r3,r16,r2
   85b84:	1884983a 	sll	r2,r3,r2
   85b88:	80801b26 	beq	r16,r2,85bf8 <__ieee754_pow+0x12f0>
   85b8c:	0039883a 	mov	fp,zero
   85b90:	003b9d06 	br	84a08 <__ieee754_pow+0x100>
   85b94:	d9801f17 	ldw	r6,124(sp)
   85b98:	8009883a 	mov	r4,r16
   85b9c:	880b883a 	mov	r5,r17
   85ba0:	980f883a 	mov	r7,r19
   85ba4:	00870900 	call	87090 <__subdf3>
   85ba8:	d9001d17 	ldw	r4,116(sp)
   85bac:	a80b883a 	mov	r5,r21
   85bb0:	180f883a 	mov	r7,r3
   85bb4:	100d883a 	mov	r6,r2
   85bb8:	0087a480 	call	87a48 <__ledf2>
   85bbc:	00bfc516 	blt	zero,r2,85ad4 <__ieee754_pow+0x11cc>
   85bc0:	0430be74 	movhi	r16,49913
   85bc4:	843cd644 	addi	r16,r16,-3239
   85bc8:	04406974 	movhi	r17,421
   85bcc:	8c5b87c4 	addi	r17,r17,28191
   85bd0:	003fb606 	br	85aac <__ieee754_pow+0x11a4>
   85bd4:	0739c83a 	sub	fp,zero,fp
   85bd8:	003fd506 	br	85b30 <__ieee754_pow+0x1228>
   85bdc:	2809883a 	mov	r4,r5
   85be0:	e00d883a 	mov	r6,fp
   85be4:	180b883a 	mov	r5,r3
   85be8:	008615c0 	call	8615c <scalbn>
   85bec:	1011883a 	mov	r8,r2
   85bf0:	1813883a 	mov	r9,r3
   85bf4:	003f8906 	br	85a1c <__ieee754_pow+0x1114>
   85bf8:	18c0004c 	andi	r3,r3,1
   85bfc:	00800084 	movi	r2,2
   85c00:	10f9c83a 	sub	fp,r2,r3
   85c04:	003b8006 	br	84a08 <__ieee754_pow+0x100>

00085c08 <__ieee754_sqrt>:
   85c08:	defffd04 	addi	sp,sp,-12
   85c0c:	dc000015 	stw	r16,0(sp)
   85c10:	009ffc34 	movhi	r2,32752
   85c14:	2021883a 	mov	r16,r4
   85c18:	291ffc2c 	andhi	r4,r5,32752
   85c1c:	dc400115 	stw	r17,4(sp)
   85c20:	dfc00215 	stw	ra,8(sp)
   85c24:	2823883a 	mov	r17,r5
   85c28:	280f883a 	mov	r7,r5
   85c2c:	2807883a 	mov	r3,r5
   85c30:	8011883a 	mov	r8,r16
   85c34:	20807d26 	beq	r4,r2,85e2c <__ieee754_sqrt+0x224>
   85c38:	01408d0e 	bge	zero,r5,85e70 <__ieee754_sqrt+0x268>
   85c3c:	380dd53a 	srai	r6,r7,20
   85c40:	3000131e 	bne	r6,zero,85c90 <__ieee754_sqrt+0x88>
   85c44:	1800041e 	bne	r3,zero,85c58 <__ieee754_sqrt+0x50>
   85c48:	400ed2fa 	srli	r7,r8,11
   85c4c:	31bffac4 	addi	r6,r6,-21
   85c50:	4010957a 	slli	r8,r8,21
   85c54:	383ffc26 	beq	r7,zero,85c48 <__ieee754_sqrt+0x40>
   85c58:	3880042c 	andhi	r2,r7,16
   85c5c:	1000991e 	bne	r2,zero,85ec4 <__ieee754_sqrt+0x2bc>
   85c60:	0009883a 	mov	r4,zero
   85c64:	39cf883a 	add	r7,r7,r7
   85c68:	3880042c 	andhi	r2,r7,16
   85c6c:	21000044 	addi	r4,r4,1
   85c70:	103ffc26 	beq	r2,zero,85c64 <__ieee754_sqrt+0x5c>
   85c74:	00800804 	movi	r2,32
   85c78:	1105c83a 	sub	r2,r2,r4
   85c7c:	4086d83a 	srl	r3,r8,r2
   85c80:	4110983a 	sll	r8,r8,r4
   85c84:	3105c83a 	sub	r2,r6,r4
   85c88:	38ceb03a 	or	r7,r7,r3
   85c8c:	11800044 	addi	r6,r2,1
   85c90:	31bf0044 	addi	r6,r6,-1023
   85c94:	30c0004c 	andi	r3,r6,1
   85c98:	00800434 	movhi	r2,16
   85c9c:	10bfffc4 	addi	r2,r2,-1
   85ca0:	3884703a 	and	r2,r7,r2
   85ca4:	1807003a 	cmpeq	r3,r3,zero
   85ca8:	11000434 	orhi	r4,r2,16
   85cac:	18005426 	beq	r3,zero,85e00 <__ieee754_sqrt+0x1f8>
   85cb0:	4004d7fa 	srli	r2,r8,31
   85cb4:	4207883a 	add	r3,r8,r8
   85cb8:	02800834 	movhi	r10,32
   85cbc:	1105883a 	add	r2,r2,r4
   85cc0:	2089883a 	add	r4,r4,r2
   85cc4:	0011883a 	mov	r8,zero
   85cc8:	000b883a 	mov	r5,zero
   85ccc:	0013883a 	mov	r9,zero
   85cd0:	02c00584 	movi	r11,22
   85cd4:	520f883a 	add	r7,r10,r8
   85cd8:	1804d7fa 	srli	r2,r3,31
   85cdc:	4a400044 	addi	r9,r9,1
   85ce0:	18c7883a 	add	r3,r3,r3
   85ce4:	21c00316 	blt	r4,r7,85cf4 <__ieee754_sqrt+0xec>
   85ce8:	21c9c83a 	sub	r4,r4,r7
   85cec:	2a8b883a 	add	r5,r5,r10
   85cf0:	51d1883a 	add	r8,r10,r7
   85cf4:	1105883a 	add	r2,r2,r4
   85cf8:	5014d07a 	srli	r10,r10,1
   85cfc:	2089883a 	add	r4,r4,r2
   85d00:	4afff41e 	bne	r9,r11,85cd4 <__ieee754_sqrt+0xcc>
   85d04:	02600034 	movhi	r9,32768
   85d08:	0017883a 	mov	r11,zero
   85d0c:	0019883a 	mov	r12,zero
   85d10:	0015883a 	mov	r10,zero
   85d14:	4821883a 	mov	r16,r9
   85d18:	03c00804 	movi	r15,32
   85d1c:	00000806 	br	85d40 <__ieee754_sqrt+0x138>
   85d20:	22003426 	beq	r4,r8,85df4 <__ieee754_sqrt+0x1ec>
   85d24:	1804d7fa 	srli	r2,r3,31
   85d28:	52800044 	addi	r10,r10,1
   85d2c:	18c7883a 	add	r3,r3,r3
   85d30:	1105883a 	add	r2,r2,r4
   85d34:	2089883a 	add	r4,r4,r2
   85d38:	4812d07a 	srli	r9,r9,1
   85d3c:	53c01326 	beq	r10,r15,85d8c <__ieee754_sqrt+0x184>
   85d40:	4acf883a 	add	r7,r9,r11
   85d44:	413ff60e 	bge	r8,r4,85d20 <__ieee754_sqrt+0x118>
   85d48:	38a0002c 	andhi	r2,r7,32768
   85d4c:	3a57883a 	add	r11,r7,r9
   85d50:	14002426 	beq	r2,r16,85de4 <__ieee754_sqrt+0x1dc>
   85d54:	4005883a 	mov	r2,r8
   85d58:	2209c83a 	sub	r4,r4,r8
   85d5c:	19c0012e 	bgeu	r3,r7,85d64 <__ieee754_sqrt+0x15c>
   85d60:	213fffc4 	addi	r4,r4,-1
   85d64:	19c7c83a 	sub	r3,r3,r7
   85d68:	1011883a 	mov	r8,r2
   85d6c:	1804d7fa 	srli	r2,r3,31
   85d70:	52800044 	addi	r10,r10,1
   85d74:	6259883a 	add	r12,r12,r9
   85d78:	1105883a 	add	r2,r2,r4
   85d7c:	18c7883a 	add	r3,r3,r3
   85d80:	2089883a 	add	r4,r4,r2
   85d84:	4812d07a 	srli	r9,r9,1
   85d88:	53ffed1e 	bne	r10,r15,85d40 <__ieee754_sqrt+0x138>
   85d8c:	20c4b03a 	or	r2,r4,r3
   85d90:	1000201e 	bne	r2,zero,85e14 <__ieee754_sqrt+0x20c>
   85d94:	600ed07a 	srli	r7,r12,1
   85d98:	2880004c 	andi	r2,r5,1
   85d9c:	1005003a 	cmpeq	r2,r2,zero
   85da0:	1000011e 	bne	r2,zero,85da8 <__ieee754_sqrt+0x1a0>
   85da4:	39e00034 	orhi	r7,r7,32768
   85da8:	300dd07a 	srai	r6,r6,1
   85dac:	280bd07a 	srai	r5,r5,1
   85db0:	010ff834 	movhi	r4,16352
   85db4:	300c953a 	slli	r6,r6,20
   85db8:	290b883a 	add	r5,r5,r4
   85dbc:	3821883a 	mov	r16,r7
   85dc0:	299d883a 	add	r14,r5,r6
   85dc4:	7023883a 	mov	r17,r14
   85dc8:	8005883a 	mov	r2,r16
   85dcc:	8807883a 	mov	r3,r17
   85dd0:	dfc00217 	ldw	ra,8(sp)
   85dd4:	dc400117 	ldw	r17,4(sp)
   85dd8:	dc000017 	ldw	r16,0(sp)
   85ddc:	dec00304 	addi	sp,sp,12
   85de0:	f800283a 	ret
   85de4:	5884703a 	and	r2,r11,r2
   85de8:	103fda1e 	bne	r2,zero,85d54 <__ieee754_sqrt+0x14c>
   85dec:	40800044 	addi	r2,r8,1
   85df0:	003fd906 	br	85d58 <__ieee754_sqrt+0x150>
   85df4:	19ffd42e 	bgeu	r3,r7,85d48 <__ieee754_sqrt+0x140>
   85df8:	2011883a 	mov	r8,r4
   85dfc:	003fc906 	br	85d24 <__ieee754_sqrt+0x11c>
   85e00:	4004d7fa 	srli	r2,r8,31
   85e04:	4211883a 	add	r8,r8,r8
   85e08:	1105883a 	add	r2,r2,r4
   85e0c:	2089883a 	add	r4,r4,r2
   85e10:	003fa706 	br	85cb0 <__ieee754_sqrt+0xa8>
   85e14:	00bfffc4 	movi	r2,-1
   85e18:	60802726 	beq	r12,r2,85eb8 <__ieee754_sqrt+0x2b0>
   85e1c:	6080004c 	andi	r2,r12,1
   85e20:	6085883a 	add	r2,r12,r2
   85e24:	100ed07a 	srli	r7,r2,1
   85e28:	003fdb06 	br	85d98 <__ieee754_sqrt+0x190>
   85e2c:	8009883a 	mov	r4,r16
   85e30:	800d883a 	mov	r6,r16
   85e34:	00871840 	call	87184 <__muldf3>
   85e38:	180f883a 	mov	r7,r3
   85e3c:	880b883a 	mov	r5,r17
   85e40:	8009883a 	mov	r4,r16
   85e44:	100d883a 	mov	r6,r2
   85e48:	00871100 	call	87110 <__adddf3>
   85e4c:	1021883a 	mov	r16,r2
   85e50:	1823883a 	mov	r17,r3
   85e54:	8005883a 	mov	r2,r16
   85e58:	8807883a 	mov	r3,r17
   85e5c:	dfc00217 	ldw	ra,8(sp)
   85e60:	dc400117 	ldw	r17,4(sp)
   85e64:	dc000017 	ldw	r16,0(sp)
   85e68:	dec00304 	addi	sp,sp,12
   85e6c:	f800283a 	ret
   85e70:	00a00034 	movhi	r2,32768
   85e74:	10bfffc4 	addi	r2,r2,-1
   85e78:	2884703a 	and	r2,r5,r2
   85e7c:	8084b03a 	or	r2,r16,r2
   85e80:	103fd126 	beq	r2,zero,85dc8 <__ieee754_sqrt+0x1c0>
   85e84:	283f6d26 	beq	r5,zero,85c3c <__ieee754_sqrt+0x34>
   85e88:	280f883a 	mov	r7,r5
   85e8c:	8009883a 	mov	r4,r16
   85e90:	800d883a 	mov	r6,r16
   85e94:	00870900 	call	87090 <__subdf3>
   85e98:	1009883a 	mov	r4,r2
   85e9c:	180b883a 	mov	r5,r3
   85ea0:	100d883a 	mov	r6,r2
   85ea4:	180f883a 	mov	r7,r3
   85ea8:	00875480 	call	87548 <__divdf3>
   85eac:	1021883a 	mov	r16,r2
   85eb0:	1823883a 	mov	r17,r3
   85eb4:	003fc406 	br	85dc8 <__ieee754_sqrt+0x1c0>
   85eb8:	29400044 	addi	r5,r5,1
   85ebc:	000f883a 	mov	r7,zero
   85ec0:	003fb506 	br	85d98 <__ieee754_sqrt+0x190>
   85ec4:	0009883a 	mov	r4,zero
   85ec8:	00800804 	movi	r2,32
   85ecc:	003f6b06 	br	85c7c <__ieee754_sqrt+0x74>

00085ed0 <fabs>:
   85ed0:	01e00034 	movhi	r7,32768
   85ed4:	39ffffc4 	addi	r7,r7,-1
   85ed8:	394e703a 	and	r7,r7,r5
   85edc:	2005883a 	mov	r2,r4
   85ee0:	3807883a 	mov	r3,r7
   85ee4:	f800283a 	ret

00085ee8 <finite>:
   85ee8:	00a00034 	movhi	r2,32768
   85eec:	10bfffc4 	addi	r2,r2,-1
   85ef0:	2884703a 	and	r2,r5,r2
   85ef4:	01600434 	movhi	r5,32784
   85ef8:	1145883a 	add	r2,r2,r5
   85efc:	1004d7fa 	srli	r2,r2,31
   85f00:	f800283a 	ret

00085f04 <__isnand>:
   85f04:	200d883a 	mov	r6,r4
   85f08:	0109c83a 	sub	r4,zero,r4
   85f0c:	2188b03a 	or	r4,r4,r6
   85f10:	2008d7fa 	srli	r4,r4,31
   85f14:	00a00034 	movhi	r2,32768
   85f18:	10bfffc4 	addi	r2,r2,-1
   85f1c:	1144703a 	and	r2,r2,r5
   85f20:	2088b03a 	or	r4,r4,r2
   85f24:	009ffc34 	movhi	r2,32752
   85f28:	1105c83a 	sub	r2,r2,r4
   85f2c:	1004d7fa 	srli	r2,r2,31
   85f30:	f800283a 	ret

00085f34 <matherr>:
   85f34:	0005883a 	mov	r2,zero
   85f38:	f800283a 	ret

00085f3c <nan>:
   85f3c:	015ffe34 	movhi	r5,32760
   85f40:	0005883a 	mov	r2,zero
   85f44:	2807883a 	mov	r3,r5
   85f48:	f800283a 	ret

00085f4c <rint>:
   85f4c:	2015883a 	mov	r10,r4
   85f50:	2809d53a 	srai	r4,r5,20
   85f54:	defff904 	addi	sp,sp,-28
   85f58:	034004c4 	movi	r13,19
   85f5c:	2101ffcc 	andi	r4,r4,2047
   85f60:	227f0044 	addi	r9,r4,-1023
   85f64:	dc800415 	stw	r18,16(sp)
   85f68:	dfc00615 	stw	ra,24(sp)
   85f6c:	dcc00515 	stw	r19,20(sp)
   85f70:	dc400315 	stw	r17,12(sp)
   85f74:	dc000215 	stw	r16,8(sp)
   85f78:	2817883a 	mov	r11,r5
   85f7c:	500d883a 	mov	r6,r10
   85f80:	2824d7fa 	srli	r18,r5,31
   85f84:	6a403016 	blt	r13,r9,86048 <rint+0xfc>
   85f88:	48004916 	blt	r9,zero,860b0 <rint+0x164>
   85f8c:	00800434 	movhi	r2,16
   85f90:	10bfffc4 	addi	r2,r2,-1
   85f94:	1247d83a 	sra	r3,r2,r9
   85f98:	2809883a 	mov	r4,r5
   85f9c:	1944703a 	and	r2,r3,r5
   85fa0:	5084b03a 	or	r2,r10,r2
   85fa4:	10001f26 	beq	r2,zero,86024 <rint+0xd8>
   85fa8:	180ad07a 	srli	r5,r3,1
   85fac:	5944703a 	and	r2,r11,r5
   85fb0:	5084b03a 	or	r2,r10,r2
   85fb4:	10000626 	beq	r2,zero,85fd0 <rint+0x84>
   85fb8:	4b406626 	beq	r9,r13,86154 <rint+0x208>
   85fbc:	00c000b4 	movhi	r3,2
   85fc0:	1a47d83a 	sra	r3,r3,r9
   85fc4:	0144303a 	nor	r2,zero,r5
   85fc8:	5884703a 	and	r2,r11,r2
   85fcc:	10c8b03a 	or	r4,r2,r3
   85fd0:	900690fa 	slli	r3,r18,3
   85fd4:	00800274 	movhi	r2,9
   85fd8:	108e7904 	addi	r2,r2,14820
   85fdc:	200f883a 	mov	r7,r4
   85fe0:	1887883a 	add	r3,r3,r2
   85fe4:	1c000017 	ldw	r16,0(r3)
   85fe8:	1c400117 	ldw	r17,4(r3)
   85fec:	8009883a 	mov	r4,r16
   85ff0:	880b883a 	mov	r5,r17
   85ff4:	00871100 	call	87110 <__adddf3>
   85ff8:	d8800015 	stw	r2,0(sp)
   85ffc:	d8c00115 	stw	r3,4(sp)
   86000:	d8800017 	ldw	r2,0(sp)
   86004:	d8c00117 	ldw	r3,4(sp)
   86008:	880f883a 	mov	r7,r17
   8600c:	800d883a 	mov	r6,r16
   86010:	180b883a 	mov	r5,r3
   86014:	1009883a 	mov	r4,r2
   86018:	00870900 	call	87090 <__subdf3>
   8601c:	1015883a 	mov	r10,r2
   86020:	1817883a 	mov	r11,r3
   86024:	5005883a 	mov	r2,r10
   86028:	5807883a 	mov	r3,r11
   8602c:	dfc00617 	ldw	ra,24(sp)
   86030:	dcc00517 	ldw	r19,20(sp)
   86034:	dc800417 	ldw	r18,16(sp)
   86038:	dc400317 	ldw	r17,12(sp)
   8603c:	dc000217 	ldw	r16,8(sp)
   86040:	dec00704 	addi	sp,sp,28
   86044:	f800283a 	ret
   86048:	00800cc4 	movi	r2,51
   8604c:	12400f16 	blt	r2,r9,8608c <rint+0x140>
   86050:	213efb44 	addi	r4,r4,-1043
   86054:	00bfffc4 	movi	r2,-1
   86058:	1104d83a 	srl	r2,r2,r4
   8605c:	5086703a 	and	r3,r10,r2
   86060:	183ff026 	beq	r3,zero,86024 <rint+0xd8>
   86064:	100ad07a 	srli	r5,r2,1
   86068:	5144703a 	and	r2,r10,r5
   8606c:	10000526 	beq	r2,zero,86084 <rint+0x138>
   86070:	00d00034 	movhi	r3,16384
   86074:	1907d83a 	sra	r3,r3,r4
   86078:	0144303a 	nor	r2,zero,r5
   8607c:	5084703a 	and	r2,r10,r2
   86080:	10ccb03a 	or	r6,r2,r3
   86084:	5809883a 	mov	r4,r11
   86088:	003fd106 	br	85fd0 <rint+0x84>
   8608c:	00810004 	movi	r2,1024
   86090:	48bfe41e 	bne	r9,r2,86024 <rint+0xd8>
   86094:	5009883a 	mov	r4,r10
   86098:	500d883a 	mov	r6,r10
   8609c:	280f883a 	mov	r7,r5
   860a0:	00871100 	call	87110 <__adddf3>
   860a4:	1015883a 	mov	r10,r2
   860a8:	1817883a 	mov	r11,r3
   860ac:	003fdd06 	br	86024 <rint+0xd8>
   860b0:	04e00034 	movhi	r19,32768
   860b4:	9cffffc4 	addi	r19,r19,-1
   860b8:	2cc4703a 	and	r2,r5,r19
   860bc:	5084b03a 	or	r2,r10,r2
   860c0:	103fd826 	beq	r2,zero,86024 <rint+0xd8>
   860c4:	00c00434 	movhi	r3,16
   860c8:	18ffffc4 	addi	r3,r3,-1
   860cc:	28c6703a 	and	r3,r5,r3
   860d0:	50c6b03a 	or	r3,r10,r3
   860d4:	00cdc83a 	sub	r6,zero,r3
   860d8:	900a90fa 	slli	r5,r18,3
   860dc:	1986b03a 	or	r3,r3,r6
   860e0:	01000274 	movhi	r4,9
   860e4:	210e7904 	addi	r4,r4,14820
   860e8:	1806d33a 	srli	r3,r3,12
   860ec:	290b883a 	add	r5,r5,r4
   860f0:	2c000017 	ldw	r16,0(r5)
   860f4:	2c400117 	ldw	r17,4(r5)
   860f8:	593fffac 	andhi	r4,r11,65534
   860fc:	18c0022c 	andhi	r3,r3,8
   86100:	1906b03a 	or	r3,r3,r4
   86104:	500d883a 	mov	r6,r10
   86108:	180f883a 	mov	r7,r3
   8610c:	8009883a 	mov	r4,r16
   86110:	880b883a 	mov	r5,r17
   86114:	00871100 	call	87110 <__adddf3>
   86118:	d8800015 	stw	r2,0(sp)
   8611c:	d8c00115 	stw	r3,4(sp)
   86120:	d8800017 	ldw	r2,0(sp)
   86124:	d8c00117 	ldw	r3,4(sp)
   86128:	880f883a 	mov	r7,r17
   8612c:	800d883a 	mov	r6,r16
   86130:	180b883a 	mov	r5,r3
   86134:	1009883a 	mov	r4,r2
   86138:	00870900 	call	87090 <__subdf3>
   8613c:	901297fa 	slli	r9,r18,31
   86140:	98d0703a 	and	r8,r19,r3
   86144:	1015883a 	mov	r10,r2
   86148:	4250b03a 	or	r8,r8,r9
   8614c:	4017883a 	mov	r11,r8
   86150:	003fb406 	br	86024 <rint+0xd8>
   86154:	01900034 	movhi	r6,16384
   86158:	003f9d06 	br	85fd0 <rint+0x84>

0008615c <scalbn>:
   8615c:	2011883a 	mov	r8,r4
   86160:	291ffc2c 	andhi	r4,r5,32752
   86164:	2009d53a 	srai	r4,r4,20
   86168:	defffd04 	addi	sp,sp,-12
   8616c:	dc000015 	stw	r16,0(sp)
   86170:	dfc00215 	stw	ra,8(sp)
   86174:	dc400115 	stw	r17,4(sp)
   86178:	2813883a 	mov	r9,r5
   8617c:	2815883a 	mov	r10,r5
   86180:	3021883a 	mov	r16,r6
   86184:	2000281e 	bne	r4,zero,86228 <scalbn+0xcc>
   86188:	00a00034 	movhi	r2,32768
   8618c:	10bfffc4 	addi	r2,r2,-1
   86190:	2884703a 	and	r2,r5,r2
   86194:	4084b03a 	or	r2,r8,r2
   86198:	10001826 	beq	r2,zero,861fc <scalbn+0xa0>
   8619c:	0005883a 	mov	r2,zero
   861a0:	00d0d434 	movhi	r3,17232
   861a4:	4009883a 	mov	r4,r8
   861a8:	100d883a 	mov	r6,r2
   861ac:	180f883a 	mov	r7,r3
   861b0:	00871840 	call	87184 <__muldf3>
   861b4:	100b883a 	mov	r5,r2
   861b8:	1011883a 	mov	r8,r2
   861bc:	00bffff4 	movhi	r2,65535
   861c0:	108f2c04 	addi	r2,r2,15536
   861c4:	180d883a 	mov	r6,r3
   861c8:	1813883a 	mov	r9,r3
   861cc:	8080120e 	bge	r16,r2,86218 <scalbn+0xbc>
   861d0:	00b0be74 	movhi	r2,49913
   861d4:	10bcd644 	addi	r2,r2,-3239
   861d8:	00c06974 	movhi	r3,421
   861dc:	18db87c4 	addi	r3,r3,28191
   861e0:	2809883a 	mov	r4,r5
   861e4:	180f883a 	mov	r7,r3
   861e8:	300b883a 	mov	r5,r6
   861ec:	100d883a 	mov	r6,r2
   861f0:	00871840 	call	87184 <__muldf3>
   861f4:	1011883a 	mov	r8,r2
   861f8:	1813883a 	mov	r9,r3
   861fc:	4005883a 	mov	r2,r8
   86200:	4807883a 	mov	r3,r9
   86204:	dfc00217 	ldw	ra,8(sp)
   86208:	dc400117 	ldw	r17,4(sp)
   8620c:	dc000017 	ldw	r16,0(sp)
   86210:	dec00304 	addi	sp,sp,12
   86214:	f800283a 	ret
   86218:	189ffc2c 	andhi	r2,r3,32752
   8621c:	1005d53a 	srai	r2,r2,20
   86220:	1815883a 	mov	r10,r3
   86224:	113ff284 	addi	r4,r2,-54
   86228:	0081ffc4 	movi	r2,2047
   8622c:	20801126 	beq	r4,r2,86274 <scalbn+0x118>
   86230:	2409883a 	add	r4,r4,r16
   86234:	0081ff84 	movi	r2,2046
   86238:	11001c16 	blt	r2,r4,862ac <scalbn+0x150>
   8623c:	0100290e 	bge	zero,r4,862e4 <scalbn+0x188>
   86240:	200a953a 	slli	r5,r4,20
   86244:	01200434 	movhi	r4,32784
   86248:	213fffc4 	addi	r4,r4,-1
   8624c:	5108703a 	and	r4,r10,r4
   86250:	2148b03a 	or	r4,r4,r5
   86254:	2013883a 	mov	r9,r4
   86258:	4005883a 	mov	r2,r8
   8625c:	4807883a 	mov	r3,r9
   86260:	dfc00217 	ldw	ra,8(sp)
   86264:	dc400117 	ldw	r17,4(sp)
   86268:	dc000017 	ldw	r16,0(sp)
   8626c:	dec00304 	addi	sp,sp,12
   86270:	f800283a 	ret
   86274:	480f883a 	mov	r7,r9
   86278:	4009883a 	mov	r4,r8
   8627c:	480b883a 	mov	r5,r9
   86280:	400d883a 	mov	r6,r8
   86284:	00871100 	call	87110 <__adddf3>
   86288:	1011883a 	mov	r8,r2
   8628c:	1813883a 	mov	r9,r3
   86290:	4005883a 	mov	r2,r8
   86294:	4807883a 	mov	r3,r9
   86298:	dfc00217 	ldw	ra,8(sp)
   8629c:	dc400117 	ldw	r17,4(sp)
   862a0:	dc000017 	ldw	r16,0(sp)
   862a4:	dec00304 	addi	sp,sp,12
   862a8:	f800283a 	ret
   862ac:	04220034 	movhi	r16,34816
   862b0:	841d6704 	addi	r16,r16,30108
   862b4:	045f8e34 	movhi	r17,32312
   862b8:	8c790f04 	addi	r17,r17,-7108
   862bc:	480f883a 	mov	r7,r9
   862c0:	400d883a 	mov	r6,r8
   862c4:	8009883a 	mov	r4,r16
   862c8:	880b883a 	mov	r5,r17
   862cc:	008633c0 	call	8633c <copysign>
   862d0:	180b883a 	mov	r5,r3
   862d4:	800d883a 	mov	r6,r16
   862d8:	880f883a 	mov	r7,r17
   862dc:	1009883a 	mov	r4,r2
   862e0:	003fc306 	br	861f0 <scalbn+0x94>
   862e4:	00bff284 	movi	r2,-54
   862e8:	11000716 	blt	r2,r4,86308 <scalbn+0x1ac>
   862ec:	00b0d414 	movui	r2,50000
   862f0:	143fee16 	blt	r2,r16,862ac <scalbn+0x150>
   862f4:	0430be74 	movhi	r16,49913
   862f8:	843cd644 	addi	r16,r16,-3239
   862fc:	04406974 	movhi	r17,421
   86300:	8c5b87c4 	addi	r17,r17,28191
   86304:	003fed06 	br	862bc <scalbn+0x160>
   86308:	21000d84 	addi	r4,r4,54
   8630c:	2008953a 	slli	r4,r4,20
   86310:	01e00434 	movhi	r7,32784
   86314:	39ffffc4 	addi	r7,r7,-1
   86318:	51ce703a 	and	r7,r10,r7
   8631c:	390eb03a 	or	r7,r7,r4
   86320:	024f2434 	movhi	r9,15504
   86324:	4009883a 	mov	r4,r8
   86328:	0011883a 	mov	r8,zero
   8632c:	380b883a 	mov	r5,r7
   86330:	400d883a 	mov	r6,r8
   86334:	480f883a 	mov	r7,r9
   86338:	003fad06 	br	861f0 <scalbn+0x94>

0008633c <copysign>:
   8633c:	3813883a 	mov	r9,r7
   86340:	01e00034 	movhi	r7,32768
   86344:	39ffffc4 	addi	r7,r7,-1
   86348:	394e703a 	and	r7,r7,r5
   8634c:	4aa0002c 	andhi	r10,r9,32768
   86350:	3a8eb03a 	or	r7,r7,r10
   86354:	2005883a 	mov	r2,r4
   86358:	3807883a 	mov	r3,r7
   8635c:	f800283a 	ret

00086360 <__fixunsdfsi>:
   86360:	defffb04 	addi	sp,sp,-20
   86364:	dc400115 	stw	r17,4(sp)
   86368:	dc000015 	stw	r16,0(sp)
   8636c:	04507834 	movhi	r17,16864
   86370:	0021883a 	mov	r16,zero
   86374:	800d883a 	mov	r6,r16
   86378:	880f883a 	mov	r7,r17
   8637c:	dcc00315 	stw	r19,12(sp)
   86380:	dc800215 	stw	r18,8(sp)
   86384:	2827883a 	mov	r19,r5
   86388:	2025883a 	mov	r18,r4
   8638c:	dfc00415 	stw	ra,16(sp)
   86390:	00879380 	call	87938 <__gedf2>
   86394:	000d883a 	mov	r6,zero
   86398:	880f883a 	mov	r7,r17
   8639c:	980b883a 	mov	r5,r19
   863a0:	9009883a 	mov	r4,r18
   863a4:	10000d16 	blt	r2,zero,863dc <__fixunsdfsi+0x7c>
   863a8:	00870900 	call	87090 <__subdf3>
   863ac:	180b883a 	mov	r5,r3
   863b0:	1009883a 	mov	r4,r2
   863b4:	0087bc80 	call	87bc8 <__fixdfsi>
   863b8:	00e00034 	movhi	r3,32768
   863bc:	10c5883a 	add	r2,r2,r3
   863c0:	dfc00417 	ldw	ra,16(sp)
   863c4:	dcc00317 	ldw	r19,12(sp)
   863c8:	dc800217 	ldw	r18,8(sp)
   863cc:	dc400117 	ldw	r17,4(sp)
   863d0:	dc000017 	ldw	r16,0(sp)
   863d4:	dec00504 	addi	sp,sp,20
   863d8:	f800283a 	ret
   863dc:	980b883a 	mov	r5,r19
   863e0:	9009883a 	mov	r4,r18
   863e4:	0087bc80 	call	87bc8 <__fixdfsi>
   863e8:	dfc00417 	ldw	ra,16(sp)
   863ec:	dcc00317 	ldw	r19,12(sp)
   863f0:	dc800217 	ldw	r18,8(sp)
   863f4:	dc400117 	ldw	r17,4(sp)
   863f8:	dc000017 	ldw	r16,0(sp)
   863fc:	dec00504 	addi	sp,sp,20
   86400:	f800283a 	ret

00086404 <_fpadd_parts>:
   86404:	21c00017 	ldw	r7,0(r4)
   86408:	02000044 	movi	r8,1
   8640c:	41c0332e 	bgeu	r8,r7,864dc <_fpadd_parts+0xd8>
   86410:	28800017 	ldw	r2,0(r5)
   86414:	4080462e 	bgeu	r8,r2,86530 <_fpadd_parts+0x12c>
   86418:	00c00104 	movi	r3,4
   8641c:	38c06b26 	beq	r7,r3,865cc <_fpadd_parts+0x1c8>
   86420:	10c04326 	beq	r2,r3,86530 <_fpadd_parts+0x12c>
   86424:	00c00084 	movi	r3,2
   86428:	10c02e26 	beq	r2,r3,864e4 <_fpadd_parts+0xe0>
   8642c:	38c04026 	beq	r7,r3,86530 <_fpadd_parts+0x12c>
   86430:	22800217 	ldw	r10,8(r4)
   86434:	28c00217 	ldw	r3,8(r5)
   86438:	23000317 	ldw	r12,12(r4)
   8643c:	2a400317 	ldw	r9,12(r5)
   86440:	50cfc83a 	sub	r7,r10,r3
   86444:	3817883a 	mov	r11,r7
   86448:	38004f16 	blt	r7,zero,86588 <_fpadd_parts+0x184>
   8644c:	008007c4 	movi	r2,31
   86450:	11c03316 	blt	r2,r7,86520 <_fpadd_parts+0x11c>
   86454:	02c0540e 	bge	zero,r11,865a8 <_fpadd_parts+0x1a4>
   86458:	41c4983a 	sll	r2,r8,r7
   8645c:	49c6d83a 	srl	r3,r9,r7
   86460:	10bfffc4 	addi	r2,r2,-1
   86464:	4884703a 	and	r2,r9,r2
   86468:	1004c03a 	cmpne	r2,r2,zero
   8646c:	1892b03a 	or	r9,r3,r2
   86470:	20c00117 	ldw	r3,4(r4)
   86474:	28800117 	ldw	r2,4(r5)
   86478:	18803c26 	beq	r3,r2,8656c <_fpadd_parts+0x168>
   8647c:	18002f26 	beq	r3,zero,8653c <_fpadd_parts+0x138>
   86480:	4b05c83a 	sub	r2,r9,r12
   86484:	10004216 	blt	r2,zero,86590 <_fpadd_parts+0x18c>
   86488:	32800215 	stw	r10,8(r6)
   8648c:	30800315 	stw	r2,12(r6)
   86490:	30000115 	stw	zero,4(r6)
   86494:	31000317 	ldw	r4,12(r6)
   86498:	01d00034 	movhi	r7,16384
   8649c:	39ffff84 	addi	r7,r7,-2
   864a0:	20bfffc4 	addi	r2,r4,-1
   864a4:	2007883a 	mov	r3,r4
   864a8:	38800836 	bltu	r7,r2,864cc <_fpadd_parts+0xc8>
   864ac:	31400217 	ldw	r5,8(r6)
   864b0:	18c9883a 	add	r4,r3,r3
   864b4:	20bfffc4 	addi	r2,r4,-1
   864b8:	297fffc4 	addi	r5,r5,-1
   864bc:	2007883a 	mov	r3,r4
   864c0:	38bffb2e 	bgeu	r7,r2,864b0 <_fpadd_parts+0xac>
   864c4:	31400215 	stw	r5,8(r6)
   864c8:	31000315 	stw	r4,12(r6)
   864cc:	008000c4 	movi	r2,3
   864d0:	30800015 	stw	r2,0(r6)
   864d4:	20001b16 	blt	r4,zero,86544 <_fpadd_parts+0x140>
   864d8:	3009883a 	mov	r4,r6
   864dc:	2005883a 	mov	r2,r4
   864e0:	f800283a 	ret
   864e4:	38fffd1e 	bne	r7,r3,864dc <_fpadd_parts+0xd8>
   864e8:	31c00015 	stw	r7,0(r6)
   864ec:	20800117 	ldw	r2,4(r4)
   864f0:	30800115 	stw	r2,4(r6)
   864f4:	20c00217 	ldw	r3,8(r4)
   864f8:	30c00215 	stw	r3,8(r6)
   864fc:	20800317 	ldw	r2,12(r4)
   86500:	30800315 	stw	r2,12(r6)
   86504:	20c00117 	ldw	r3,4(r4)
   86508:	28800117 	ldw	r2,4(r5)
   8650c:	3009883a 	mov	r4,r6
   86510:	1886703a 	and	r3,r3,r2
   86514:	2005883a 	mov	r2,r4
   86518:	30c00115 	stw	r3,4(r6)
   8651c:	f800283a 	ret
   86520:	1a801716 	blt	r3,r10,86580 <_fpadd_parts+0x17c>
   86524:	1815883a 	mov	r10,r3
   86528:	0019883a 	mov	r12,zero
   8652c:	003fd006 	br	86470 <_fpadd_parts+0x6c>
   86530:	2809883a 	mov	r4,r5
   86534:	2005883a 	mov	r2,r4
   86538:	f800283a 	ret
   8653c:	6245c83a 	sub	r2,r12,r9
   86540:	003fd006 	br	86484 <_fpadd_parts+0x80>
   86544:	30800217 	ldw	r2,8(r6)
   86548:	2006d07a 	srli	r3,r4,1
   8654c:	2100004c 	andi	r4,r4,1
   86550:	10800044 	addi	r2,r2,1
   86554:	1906b03a 	or	r3,r3,r4
   86558:	3009883a 	mov	r4,r6
   8655c:	30800215 	stw	r2,8(r6)
   86560:	2005883a 	mov	r2,r4
   86564:	30c00315 	stw	r3,12(r6)
   86568:	f800283a 	ret
   8656c:	4b09883a 	add	r4,r9,r12
   86570:	30c00115 	stw	r3,4(r6)
   86574:	32800215 	stw	r10,8(r6)
   86578:	31000315 	stw	r4,12(r6)
   8657c:	003fd306 	br	864cc <_fpadd_parts+0xc8>
   86580:	0013883a 	mov	r9,zero
   86584:	003fba06 	br	86470 <_fpadd_parts+0x6c>
   86588:	01cfc83a 	sub	r7,zero,r7
   8658c:	003faf06 	br	8644c <_fpadd_parts+0x48>
   86590:	0089c83a 	sub	r4,zero,r2
   86594:	00800044 	movi	r2,1
   86598:	30800115 	stw	r2,4(r6)
   8659c:	32800215 	stw	r10,8(r6)
   865a0:	31000315 	stw	r4,12(r6)
   865a4:	003fbb06 	br	86494 <_fpadd_parts+0x90>
   865a8:	583fb126 	beq	r11,zero,86470 <_fpadd_parts+0x6c>
   865ac:	41c4983a 	sll	r2,r8,r7
   865b0:	61c6d83a 	srl	r3,r12,r7
   865b4:	51d5883a 	add	r10,r10,r7
   865b8:	10bfffc4 	addi	r2,r2,-1
   865bc:	6084703a 	and	r2,r12,r2
   865c0:	1004c03a 	cmpne	r2,r2,zero
   865c4:	1898b03a 	or	r12,r3,r2
   865c8:	003fa906 	br	86470 <_fpadd_parts+0x6c>
   865cc:	11ffc31e 	bne	r2,r7,864dc <_fpadd_parts+0xd8>
   865d0:	28c00117 	ldw	r3,4(r5)
   865d4:	20800117 	ldw	r2,4(r4)
   865d8:	10ffc026 	beq	r2,r3,864dc <_fpadd_parts+0xd8>
   865dc:	01000274 	movhi	r4,9
   865e0:	210e7d04 	addi	r4,r4,14836
   865e4:	003fbd06 	br	864dc <_fpadd_parts+0xd8>

000865e8 <__subsf3>:
   865e8:	deffef04 	addi	sp,sp,-68
   865ec:	dcc00f15 	stw	r19,60(sp)
   865f0:	dcc00204 	addi	r19,sp,8
   865f4:	dc400e15 	stw	r17,56(sp)
   865f8:	d9000015 	stw	r4,0(sp)
   865fc:	d9400115 	stw	r5,4(sp)
   86600:	d809883a 	mov	r4,sp
   86604:	980b883a 	mov	r5,r19
   86608:	dc400604 	addi	r17,sp,24
   8660c:	dfc01015 	stw	ra,64(sp)
   86610:	00881580 	call	88158 <__unpack_f>
   86614:	d9000104 	addi	r4,sp,4
   86618:	880b883a 	mov	r5,r17
   8661c:	00881580 	call	88158 <__unpack_f>
   86620:	d8800717 	ldw	r2,28(sp)
   86624:	9809883a 	mov	r4,r19
   86628:	880b883a 	mov	r5,r17
   8662c:	d9800a04 	addi	r6,sp,40
   86630:	1080005c 	xori	r2,r2,1
   86634:	d8800715 	stw	r2,28(sp)
   86638:	00864040 	call	86404 <_fpadd_parts>
   8663c:	1009883a 	mov	r4,r2
   86640:	0087ff80 	call	87ff8 <__pack_f>
   86644:	dfc01017 	ldw	ra,64(sp)
   86648:	dcc00f17 	ldw	r19,60(sp)
   8664c:	dc400e17 	ldw	r17,56(sp)
   86650:	dec01104 	addi	sp,sp,68
   86654:	f800283a 	ret

00086658 <__addsf3>:
   86658:	deffef04 	addi	sp,sp,-68
   8665c:	dcc00f15 	stw	r19,60(sp)
   86660:	dcc00204 	addi	r19,sp,8
   86664:	dc400e15 	stw	r17,56(sp)
   86668:	d9000015 	stw	r4,0(sp)
   8666c:	d9400115 	stw	r5,4(sp)
   86670:	d809883a 	mov	r4,sp
   86674:	980b883a 	mov	r5,r19
   86678:	dc400604 	addi	r17,sp,24
   8667c:	dfc01015 	stw	ra,64(sp)
   86680:	00881580 	call	88158 <__unpack_f>
   86684:	d9000104 	addi	r4,sp,4
   86688:	880b883a 	mov	r5,r17
   8668c:	00881580 	call	88158 <__unpack_f>
   86690:	d9800a04 	addi	r6,sp,40
   86694:	9809883a 	mov	r4,r19
   86698:	880b883a 	mov	r5,r17
   8669c:	00864040 	call	86404 <_fpadd_parts>
   866a0:	1009883a 	mov	r4,r2
   866a4:	0087ff80 	call	87ff8 <__pack_f>
   866a8:	dfc01017 	ldw	ra,64(sp)
   866ac:	dcc00f17 	ldw	r19,60(sp)
   866b0:	dc400e17 	ldw	r17,56(sp)
   866b4:	dec01104 	addi	sp,sp,68
   866b8:	f800283a 	ret

000866bc <__mulsf3>:
   866bc:	deffef04 	addi	sp,sp,-68
   866c0:	dc400f15 	stw	r17,60(sp)
   866c4:	dc400204 	addi	r17,sp,8
   866c8:	dc000e15 	stw	r16,56(sp)
   866cc:	d9000015 	stw	r4,0(sp)
   866d0:	d9400115 	stw	r5,4(sp)
   866d4:	d809883a 	mov	r4,sp
   866d8:	880b883a 	mov	r5,r17
   866dc:	dc000604 	addi	r16,sp,24
   866e0:	dfc01015 	stw	ra,64(sp)
   866e4:	00881580 	call	88158 <__unpack_f>
   866e8:	d9000104 	addi	r4,sp,4
   866ec:	800b883a 	mov	r5,r16
   866f0:	00881580 	call	88158 <__unpack_f>
   866f4:	d9000217 	ldw	r4,8(sp)
   866f8:	00800044 	movi	r2,1
   866fc:	01400104 	movi	r5,4
   86700:	1100142e 	bgeu	r2,r4,86754 <__mulsf3+0x98>
   86704:	d8c00617 	ldw	r3,24(sp)
   86708:	10c0052e 	bgeu	r2,r3,86720 <__mulsf3+0x64>
   8670c:	21400f26 	beq	r4,r5,8674c <__mulsf3+0x90>
   86710:	19405d26 	beq	r3,r5,86888 <__mulsf3+0x1cc>
   86714:	00800084 	movi	r2,2
   86718:	20800e26 	beq	r4,r2,86754 <__mulsf3+0x98>
   8671c:	1880181e 	bne	r3,r2,86780 <__mulsf3+0xc4>
   86720:	d8c00717 	ldw	r3,28(sp)
   86724:	d8800317 	ldw	r2,12(sp)
   86728:	8009883a 	mov	r4,r16
   8672c:	10c4c03a 	cmpne	r2,r2,r3
   86730:	d8800715 	stw	r2,28(sp)
   86734:	0087ff80 	call	87ff8 <__pack_f>
   86738:	dfc01017 	ldw	ra,64(sp)
   8673c:	dc400f17 	ldw	r17,60(sp)
   86740:	dc000e17 	ldw	r16,56(sp)
   86744:	dec01104 	addi	sp,sp,68
   86748:	f800283a 	ret
   8674c:	00800084 	movi	r2,2
   86750:	18804f26 	beq	r3,r2,86890 <__mulsf3+0x1d4>
   86754:	d8800317 	ldw	r2,12(sp)
   86758:	d8c00717 	ldw	r3,28(sp)
   8675c:	8809883a 	mov	r4,r17
   86760:	10c4c03a 	cmpne	r2,r2,r3
   86764:	d8800315 	stw	r2,12(sp)
   86768:	0087ff80 	call	87ff8 <__pack_f>
   8676c:	dfc01017 	ldw	ra,64(sp)
   86770:	dc400f17 	ldw	r17,60(sp)
   86774:	dc000e17 	ldw	r16,56(sp)
   86778:	dec01104 	addi	sp,sp,68
   8677c:	f800283a 	ret
   86780:	d8800517 	ldw	r2,20(sp)
   86784:	da000917 	ldw	r8,36(sp)
   86788:	0013883a 	mov	r9,zero
   8678c:	0007883a 	mov	r3,zero
   86790:	480f883a 	mov	r7,r9
   86794:	180b883a 	mov	r5,r3
   86798:	400d883a 	mov	r6,r8
   8679c:	1009883a 	mov	r4,r2
   867a0:	0087ee00 	call	87ee0 <__muldi3>
   867a4:	da800417 	ldw	r10,16(sp)
   867a8:	d9800817 	ldw	r6,32(sp)
   867ac:	da400317 	ldw	r9,12(sp)
   867b0:	52800084 	addi	r10,r10,2
   867b4:	3295883a 	add	r10,r6,r10
   867b8:	d9800717 	ldw	r6,28(sp)
   867bc:	180b883a 	mov	r5,r3
   867c0:	180f883a 	mov	r7,r3
   867c4:	4992c03a 	cmpne	r9,r9,r6
   867c8:	da400b15 	stw	r9,44(sp)
   867cc:	1007883a 	mov	r3,r2
   867d0:	da800c15 	stw	r10,48(sp)
   867d4:	2800070e 	bge	r5,zero,867f4 <__mulsf3+0x138>
   867d8:	2880004c 	andi	r2,r5,1
   867dc:	1005003a 	cmpeq	r2,r2,zero
   867e0:	500d883a 	mov	r6,r10
   867e4:	10001e26 	beq	r2,zero,86860 <__mulsf3+0x1a4>
   867e8:	380ed07a 	srli	r7,r7,1
   867ec:	31800044 	addi	r6,r6,1
   867f0:	d9800c15 	stw	r6,48(sp)
   867f4:	01100034 	movhi	r4,16384
   867f8:	213fffc4 	addi	r4,r4,-1
   867fc:	21c00b36 	bltu	r4,r7,8682c <__mulsf3+0x170>
   86800:	d8800c17 	ldw	r2,48(sp)
   86804:	00000206 	br	86810 <__mulsf3+0x154>
   86808:	18c7883a 	add	r3,r3,r3
   8680c:	21c00636 	bltu	r4,r7,86828 <__mulsf3+0x16c>
   86810:	10bfffc4 	addi	r2,r2,-1
   86814:	39cf883a 	add	r7,r7,r7
   86818:	183ffb0e 	bge	r3,zero,86808 <__mulsf3+0x14c>
   8681c:	39c00054 	ori	r7,r7,1
   86820:	18c7883a 	add	r3,r3,r3
   86824:	21fffa2e 	bgeu	r4,r7,86810 <__mulsf3+0x154>
   86828:	d8800c15 	stw	r2,48(sp)
   8682c:	39001fcc 	andi	r4,r7,127
   86830:	00801004 	movi	r2,64
   86834:	20800d26 	beq	r4,r2,8686c <__mulsf3+0x1b0>
   86838:	008000c4 	movi	r2,3
   8683c:	d9000a04 	addi	r4,sp,40
   86840:	d9c00d15 	stw	r7,52(sp)
   86844:	d8800a15 	stw	r2,40(sp)
   86848:	0087ff80 	call	87ff8 <__pack_f>
   8684c:	dfc01017 	ldw	ra,64(sp)
   86850:	dc400f17 	ldw	r17,60(sp)
   86854:	dc000e17 	ldw	r16,56(sp)
   86858:	dec01104 	addi	sp,sp,68
   8685c:	f800283a 	ret
   86860:	1804d07a 	srli	r2,r3,1
   86864:	10e00034 	orhi	r3,r2,32768
   86868:	003fdf06 	br	867e8 <__mulsf3+0x12c>
   8686c:	3880200c 	andi	r2,r7,128
   86870:	103ff11e 	bne	r2,zero,86838 <__mulsf3+0x17c>
   86874:	183ff026 	beq	r3,zero,86838 <__mulsf3+0x17c>
   86878:	3907883a 	add	r3,r7,r4
   8687c:	00bfe004 	movi	r2,-128
   86880:	188e703a 	and	r7,r3,r2
   86884:	003fec06 	br	86838 <__mulsf3+0x17c>
   86888:	00800084 	movi	r2,2
   8688c:	20bfa41e 	bne	r4,r2,86720 <__mulsf3+0x64>
   86890:	01000274 	movhi	r4,9
   86894:	210e7d04 	addi	r4,r4,14836
   86898:	003fb306 	br	86768 <__mulsf3+0xac>

0008689c <__divsf3>:
   8689c:	defff304 	addi	sp,sp,-52
   868a0:	dc400b15 	stw	r17,44(sp)
   868a4:	dc400204 	addi	r17,sp,8
   868a8:	dc000a15 	stw	r16,40(sp)
   868ac:	d9000015 	stw	r4,0(sp)
   868b0:	d9400115 	stw	r5,4(sp)
   868b4:	d809883a 	mov	r4,sp
   868b8:	880b883a 	mov	r5,r17
   868bc:	dc000604 	addi	r16,sp,24
   868c0:	dfc00c15 	stw	ra,48(sp)
   868c4:	00881580 	call	88158 <__unpack_f>
   868c8:	d9000104 	addi	r4,sp,4
   868cc:	800b883a 	mov	r5,r16
   868d0:	00881580 	call	88158 <__unpack_f>
   868d4:	d9000217 	ldw	r4,8(sp)
   868d8:	00800044 	movi	r2,1
   868dc:	01800104 	movi	r6,4
   868e0:	11000a2e 	bgeu	r2,r4,8690c <__divsf3+0x70>
   868e4:	d9400617 	ldw	r5,24(sp)
   868e8:	1140432e 	bgeu	r2,r5,869f8 <__divsf3+0x15c>
   868ec:	d8800317 	ldw	r2,12(sp)
   868f0:	d8c00717 	ldw	r3,28(sp)
   868f4:	10c4f03a 	xor	r2,r2,r3
   868f8:	d8800315 	stw	r2,12(sp)
   868fc:	21800226 	beq	r4,r6,86908 <__divsf3+0x6c>
   86900:	00800084 	movi	r2,2
   86904:	2080101e 	bne	r4,r2,86948 <__divsf3+0xac>
   86908:	29000726 	beq	r5,r4,86928 <__divsf3+0x8c>
   8690c:	8809883a 	mov	r4,r17
   86910:	0087ff80 	call	87ff8 <__pack_f>
   86914:	dfc00c17 	ldw	ra,48(sp)
   86918:	dc400b17 	ldw	r17,44(sp)
   8691c:	dc000a17 	ldw	r16,40(sp)
   86920:	dec00d04 	addi	sp,sp,52
   86924:	f800283a 	ret
   86928:	01000274 	movhi	r4,9
   8692c:	210e7d04 	addi	r4,r4,14836
   86930:	0087ff80 	call	87ff8 <__pack_f>
   86934:	dfc00c17 	ldw	ra,48(sp)
   86938:	dc400b17 	ldw	r17,44(sp)
   8693c:	dc000a17 	ldw	r16,40(sp)
   86940:	dec00d04 	addi	sp,sp,52
   86944:	f800283a 	ret
   86948:	29802d26 	beq	r5,r6,86a00 <__divsf3+0x164>
   8694c:	28801a26 	beq	r5,r2,869b8 <__divsf3+0x11c>
   86950:	d8c00417 	ldw	r3,16(sp)
   86954:	d8800817 	ldw	r2,32(sp)
   86958:	d9000517 	ldw	r4,20(sp)
   8695c:	d9800917 	ldw	r6,36(sp)
   86960:	1885c83a 	sub	r2,r3,r2
   86964:	d8800415 	stw	r2,16(sp)
   86968:	2180032e 	bgeu	r4,r6,86978 <__divsf3+0xdc>
   8696c:	10bfffc4 	addi	r2,r2,-1
   86970:	d8800415 	stw	r2,16(sp)
   86974:	2109883a 	add	r4,r4,r4
   86978:	01500034 	movhi	r5,16384
   8697c:	0007883a 	mov	r3,zero
   86980:	0005883a 	mov	r2,zero
   86984:	01c007c4 	movi	r7,31
   86988:	10800044 	addi	r2,r2,1
   8698c:	21800236 	bltu	r4,r6,86998 <__divsf3+0xfc>
   86990:	1946b03a 	or	r3,r3,r5
   86994:	2189c83a 	sub	r4,r4,r6
   86998:	280ad07a 	srli	r5,r5,1
   8699c:	2109883a 	add	r4,r4,r4
   869a0:	11fff91e 	bne	r2,r7,86988 <__divsf3+0xec>
   869a4:	19401fcc 	andi	r5,r3,127
   869a8:	00801004 	movi	r2,64
   869ac:	28800a26 	beq	r5,r2,869d8 <__divsf3+0x13c>
   869b0:	d8c00515 	stw	r3,20(sp)
   869b4:	003fd506 	br	8690c <__divsf3+0x70>
   869b8:	8809883a 	mov	r4,r17
   869bc:	d9800215 	stw	r6,8(sp)
   869c0:	0087ff80 	call	87ff8 <__pack_f>
   869c4:	dfc00c17 	ldw	ra,48(sp)
   869c8:	dc400b17 	ldw	r17,44(sp)
   869cc:	dc000a17 	ldw	r16,40(sp)
   869d0:	dec00d04 	addi	sp,sp,52
   869d4:	f800283a 	ret
   869d8:	1880200c 	andi	r2,r3,128
   869dc:	103ff41e 	bne	r2,zero,869b0 <__divsf3+0x114>
   869e0:	203ff326 	beq	r4,zero,869b0 <__divsf3+0x114>
   869e4:	1947883a 	add	r3,r3,r5
   869e8:	00bfe004 	movi	r2,-128
   869ec:	1886703a 	and	r3,r3,r2
   869f0:	d8c00515 	stw	r3,20(sp)
   869f4:	003fc506 	br	8690c <__divsf3+0x70>
   869f8:	8009883a 	mov	r4,r16
   869fc:	003fc406 	br	86910 <__divsf3+0x74>
   86a00:	8809883a 	mov	r4,r17
   86a04:	d8000515 	stw	zero,20(sp)
   86a08:	d8000415 	stw	zero,16(sp)
   86a0c:	003fc006 	br	86910 <__divsf3+0x74>

00086a10 <__gtsf2>:
   86a10:	defff304 	addi	sp,sp,-52
   86a14:	dc400b15 	stw	r17,44(sp)
   86a18:	dc400204 	addi	r17,sp,8
   86a1c:	dc000a15 	stw	r16,40(sp)
   86a20:	d9000015 	stw	r4,0(sp)
   86a24:	d9400115 	stw	r5,4(sp)
   86a28:	d809883a 	mov	r4,sp
   86a2c:	880b883a 	mov	r5,r17
   86a30:	dc000604 	addi	r16,sp,24
   86a34:	dfc00c15 	stw	ra,48(sp)
   86a38:	00881580 	call	88158 <__unpack_f>
   86a3c:	d9000104 	addi	r4,sp,4
   86a40:	800b883a 	mov	r5,r16
   86a44:	00881580 	call	88158 <__unpack_f>
   86a48:	d8800217 	ldw	r2,8(sp)
   86a4c:	00c00044 	movi	r3,1
   86a50:	01bfffc4 	movi	r6,-1
   86a54:	1880062e 	bgeu	r3,r2,86a70 <__gtsf2+0x60>
   86a58:	d8800617 	ldw	r2,24(sp)
   86a5c:	8809883a 	mov	r4,r17
   86a60:	800b883a 	mov	r5,r16
   86a64:	1880022e 	bgeu	r3,r2,86a70 <__gtsf2+0x60>
   86a68:	00882200 	call	88220 <__fpcmp_parts_f>
   86a6c:	100d883a 	mov	r6,r2
   86a70:	3005883a 	mov	r2,r6
   86a74:	dfc00c17 	ldw	ra,48(sp)
   86a78:	dc400b17 	ldw	r17,44(sp)
   86a7c:	dc000a17 	ldw	r16,40(sp)
   86a80:	dec00d04 	addi	sp,sp,52
   86a84:	f800283a 	ret

00086a88 <__ltsf2>:
   86a88:	defff304 	addi	sp,sp,-52
   86a8c:	dc400b15 	stw	r17,44(sp)
   86a90:	dc400204 	addi	r17,sp,8
   86a94:	dc000a15 	stw	r16,40(sp)
   86a98:	d9000015 	stw	r4,0(sp)
   86a9c:	d9400115 	stw	r5,4(sp)
   86aa0:	d809883a 	mov	r4,sp
   86aa4:	880b883a 	mov	r5,r17
   86aa8:	dc000604 	addi	r16,sp,24
   86aac:	dfc00c15 	stw	ra,48(sp)
   86ab0:	00881580 	call	88158 <__unpack_f>
   86ab4:	d9000104 	addi	r4,sp,4
   86ab8:	800b883a 	mov	r5,r16
   86abc:	00881580 	call	88158 <__unpack_f>
   86ac0:	d8800217 	ldw	r2,8(sp)
   86ac4:	00c00044 	movi	r3,1
   86ac8:	180d883a 	mov	r6,r3
   86acc:	1880062e 	bgeu	r3,r2,86ae8 <__ltsf2+0x60>
   86ad0:	d8800617 	ldw	r2,24(sp)
   86ad4:	8809883a 	mov	r4,r17
   86ad8:	800b883a 	mov	r5,r16
   86adc:	1880022e 	bgeu	r3,r2,86ae8 <__ltsf2+0x60>
   86ae0:	00882200 	call	88220 <__fpcmp_parts_f>
   86ae4:	100d883a 	mov	r6,r2
   86ae8:	3005883a 	mov	r2,r6
   86aec:	dfc00c17 	ldw	ra,48(sp)
   86af0:	dc400b17 	ldw	r17,44(sp)
   86af4:	dc000a17 	ldw	r16,40(sp)
   86af8:	dec00d04 	addi	sp,sp,52
   86afc:	f800283a 	ret

00086b00 <__floatsisf>:
   86b00:	2006d7fa 	srli	r3,r4,31
   86b04:	defffa04 	addi	sp,sp,-24
   86b08:	008000c4 	movi	r2,3
   86b0c:	dfc00515 	stw	ra,20(sp)
   86b10:	dc000415 	stw	r16,16(sp)
   86b14:	d8800015 	stw	r2,0(sp)
   86b18:	d8c00115 	stw	r3,4(sp)
   86b1c:	2000081e 	bne	r4,zero,86b40 <__floatsisf+0x40>
   86b20:	00800084 	movi	r2,2
   86b24:	d8800015 	stw	r2,0(sp)
   86b28:	d809883a 	mov	r4,sp
   86b2c:	0087ff80 	call	87ff8 <__pack_f>
   86b30:	dfc00517 	ldw	ra,20(sp)
   86b34:	dc000417 	ldw	r16,16(sp)
   86b38:	dec00604 	addi	sp,sp,24
   86b3c:	f800283a 	ret
   86b40:	00800784 	movi	r2,30
   86b44:	1807003a 	cmpeq	r3,r3,zero
   86b48:	d8800215 	stw	r2,8(sp)
   86b4c:	18000e1e 	bne	r3,zero,86b88 <__floatsisf+0x88>
   86b50:	00a00034 	movhi	r2,32768
   86b54:	20800e26 	beq	r4,r2,86b90 <__floatsisf+0x90>
   86b58:	0121c83a 	sub	r16,zero,r4
   86b5c:	8009883a 	mov	r4,r16
   86b60:	dc000315 	stw	r16,12(sp)
   86b64:	0087f780 	call	87f78 <__clzsi2>
   86b68:	117fffc4 	addi	r5,r2,-1
   86b6c:	017fee0e 	bge	zero,r5,86b28 <__floatsisf+0x28>
   86b70:	d8800217 	ldw	r2,8(sp)
   86b74:	8146983a 	sll	r3,r16,r5
   86b78:	1145c83a 	sub	r2,r2,r5
   86b7c:	d8c00315 	stw	r3,12(sp)
   86b80:	d8800215 	stw	r2,8(sp)
   86b84:	003fe806 	br	86b28 <__floatsisf+0x28>
   86b88:	2021883a 	mov	r16,r4
   86b8c:	003ff306 	br	86b5c <__floatsisf+0x5c>
   86b90:	00b3c034 	movhi	r2,52992
   86b94:	003fe606 	br	86b30 <__floatsisf+0x30>

00086b98 <__fixsfsi>:
   86b98:	defffa04 	addi	sp,sp,-24
   86b9c:	d9000015 	stw	r4,0(sp)
   86ba0:	d9400104 	addi	r5,sp,4
   86ba4:	d809883a 	mov	r4,sp
   86ba8:	dfc00515 	stw	ra,20(sp)
   86bac:	00881580 	call	88158 <__unpack_f>
   86bb0:	d8c00117 	ldw	r3,4(sp)
   86bb4:	00800084 	movi	r2,2
   86bb8:	1880041e 	bne	r3,r2,86bcc <__fixsfsi+0x34>
   86bbc:	0005883a 	mov	r2,zero
   86bc0:	dfc00517 	ldw	ra,20(sp)
   86bc4:	dec00604 	addi	sp,sp,24
   86bc8:	f800283a 	ret
   86bcc:	00800044 	movi	r2,1
   86bd0:	10fffa2e 	bgeu	r2,r3,86bbc <__fixsfsi+0x24>
   86bd4:	00800104 	movi	r2,4
   86bd8:	18800426 	beq	r3,r2,86bec <__fixsfsi+0x54>
   86bdc:	d8800317 	ldw	r2,12(sp)
   86be0:	103ff616 	blt	r2,zero,86bbc <__fixsfsi+0x24>
   86be4:	00c00784 	movi	r3,30
   86be8:	1880070e 	bge	r3,r2,86c08 <__fixsfsi+0x70>
   86bec:	d8800217 	ldw	r2,8(sp)
   86bf0:	10000c1e 	bne	r2,zero,86c24 <__fixsfsi+0x8c>
   86bf4:	00a00034 	movhi	r2,32768
   86bf8:	10bfffc4 	addi	r2,r2,-1
   86bfc:	dfc00517 	ldw	ra,20(sp)
   86c00:	dec00604 	addi	sp,sp,24
   86c04:	f800283a 	ret
   86c08:	1885c83a 	sub	r2,r3,r2
   86c0c:	d9000217 	ldw	r4,8(sp)
   86c10:	d8c00417 	ldw	r3,16(sp)
   86c14:	1884d83a 	srl	r2,r3,r2
   86c18:	203fe926 	beq	r4,zero,86bc0 <__fixsfsi+0x28>
   86c1c:	0085c83a 	sub	r2,zero,r2
   86c20:	003fe706 	br	86bc0 <__fixsfsi+0x28>
   86c24:	00a00034 	movhi	r2,32768
   86c28:	003fe506 	br	86bc0 <__fixsfsi+0x28>

00086c2c <__extendsfdf2>:
   86c2c:	defff904 	addi	sp,sp,-28
   86c30:	d9000115 	stw	r4,4(sp)
   86c34:	d9400204 	addi	r5,sp,8
   86c38:	d9000104 	addi	r4,sp,4
   86c3c:	dfc00615 	stw	ra,24(sp)
   86c40:	00881580 	call	88158 <__unpack_f>
   86c44:	d9c00517 	ldw	r7,20(sp)
   86c48:	0011883a 	mov	r8,zero
   86c4c:	400697ba 	slli	r3,r8,30
   86c50:	3812d0ba 	srli	r9,r7,2
   86c54:	380497ba 	slli	r2,r7,30
   86c58:	d9000217 	ldw	r4,8(sp)
   86c5c:	d9400317 	ldw	r5,12(sp)
   86c60:	d9800417 	ldw	r6,16(sp)
   86c64:	48c6b03a 	or	r3,r9,r3
   86c68:	100f883a 	mov	r7,r2
   86c6c:	d8c00015 	stw	r3,0(sp)
   86c70:	0087ca00 	call	87ca0 <__make_dp>
   86c74:	dfc00617 	ldw	ra,24(sp)
   86c78:	dec00704 	addi	sp,sp,28
   86c7c:	f800283a 	ret

00086c80 <_fpadd_parts>:
   86c80:	defff804 	addi	sp,sp,-32
   86c84:	dcc00315 	stw	r19,12(sp)
   86c88:	2027883a 	mov	r19,r4
   86c8c:	21000017 	ldw	r4,0(r4)
   86c90:	00c00044 	movi	r3,1
   86c94:	dd400515 	stw	r21,20(sp)
   86c98:	dd000415 	stw	r20,16(sp)
   86c9c:	ddc00715 	stw	r23,28(sp)
   86ca0:	dd800615 	stw	r22,24(sp)
   86ca4:	dc800215 	stw	r18,8(sp)
   86ca8:	dc400115 	stw	r17,4(sp)
   86cac:	dc000015 	stw	r16,0(sp)
   86cb0:	282b883a 	mov	r21,r5
   86cb4:	3029883a 	mov	r20,r6
   86cb8:	1900632e 	bgeu	r3,r4,86e48 <_fpadd_parts+0x1c8>
   86cbc:	28800017 	ldw	r2,0(r5)
   86cc0:	1880812e 	bgeu	r3,r2,86ec8 <_fpadd_parts+0x248>
   86cc4:	00c00104 	movi	r3,4
   86cc8:	20c0dc26 	beq	r4,r3,8703c <_fpadd_parts+0x3bc>
   86ccc:	10c07e26 	beq	r2,r3,86ec8 <_fpadd_parts+0x248>
   86cd0:	00c00084 	movi	r3,2
   86cd4:	10c06726 	beq	r2,r3,86e74 <_fpadd_parts+0x1f4>
   86cd8:	20c07b26 	beq	r4,r3,86ec8 <_fpadd_parts+0x248>
   86cdc:	9dc00217 	ldw	r23,8(r19)
   86ce0:	28c00217 	ldw	r3,8(r5)
   86ce4:	9c400317 	ldw	r17,12(r19)
   86ce8:	2bc00317 	ldw	r15,12(r5)
   86cec:	b8cdc83a 	sub	r6,r23,r3
   86cf0:	9c800417 	ldw	r18,16(r19)
   86cf4:	2c000417 	ldw	r16,16(r5)
   86cf8:	3009883a 	mov	r4,r6
   86cfc:	30009716 	blt	r6,zero,86f5c <_fpadd_parts+0x2dc>
   86d00:	00800fc4 	movi	r2,63
   86d04:	11806b16 	blt	r2,r6,86eb4 <_fpadd_parts+0x234>
   86d08:	0100a40e 	bge	zero,r4,86f9c <_fpadd_parts+0x31c>
   86d0c:	35bff804 	addi	r22,r6,-32
   86d10:	b000bc16 	blt	r22,zero,87004 <_fpadd_parts+0x384>
   86d14:	8596d83a 	srl	r11,r16,r22
   86d18:	0019883a 	mov	r12,zero
   86d1c:	0013883a 	mov	r9,zero
   86d20:	01000044 	movi	r4,1
   86d24:	0015883a 	mov	r10,zero
   86d28:	b000be16 	blt	r22,zero,87024 <_fpadd_parts+0x3a4>
   86d2c:	2590983a 	sll	r8,r4,r22
   86d30:	000f883a 	mov	r7,zero
   86d34:	00bfffc4 	movi	r2,-1
   86d38:	3889883a 	add	r4,r7,r2
   86d3c:	408b883a 	add	r5,r8,r2
   86d40:	21cd803a 	cmpltu	r6,r4,r7
   86d44:	314b883a 	add	r5,r6,r5
   86d48:	7904703a 	and	r2,r15,r4
   86d4c:	8146703a 	and	r3,r16,r5
   86d50:	10c4b03a 	or	r2,r2,r3
   86d54:	10000226 	beq	r2,zero,86d60 <_fpadd_parts+0xe0>
   86d58:	02400044 	movi	r9,1
   86d5c:	0015883a 	mov	r10,zero
   86d60:	5a5eb03a 	or	r15,r11,r9
   86d64:	62a0b03a 	or	r16,r12,r10
   86d68:	99400117 	ldw	r5,4(r19)
   86d6c:	a8800117 	ldw	r2,4(r21)
   86d70:	28806e26 	beq	r5,r2,86f2c <_fpadd_parts+0x2ac>
   86d74:	28006626 	beq	r5,zero,86f10 <_fpadd_parts+0x290>
   86d78:	7c45c83a 	sub	r2,r15,r17
   86d7c:	7889803a 	cmpltu	r4,r15,r2
   86d80:	8487c83a 	sub	r3,r16,r18
   86d84:	1909c83a 	sub	r4,r3,r4
   86d88:	100d883a 	mov	r6,r2
   86d8c:	200f883a 	mov	r7,r4
   86d90:	38007716 	blt	r7,zero,86f70 <_fpadd_parts+0x2f0>
   86d94:	a5c00215 	stw	r23,8(r20)
   86d98:	a1c00415 	stw	r7,16(r20)
   86d9c:	a0000115 	stw	zero,4(r20)
   86da0:	a1800315 	stw	r6,12(r20)
   86da4:	a2000317 	ldw	r8,12(r20)
   86da8:	a2400417 	ldw	r9,16(r20)
   86dac:	00bfffc4 	movi	r2,-1
   86db0:	408b883a 	add	r5,r8,r2
   86db4:	2a09803a 	cmpltu	r4,r5,r8
   86db8:	488d883a 	add	r6,r9,r2
   86dbc:	01c40034 	movhi	r7,4096
   86dc0:	39ffffc4 	addi	r7,r7,-1
   86dc4:	218d883a 	add	r6,r4,r6
   86dc8:	39801736 	bltu	r7,r6,86e28 <_fpadd_parts+0x1a8>
   86dcc:	31c06526 	beq	r6,r7,86f64 <_fpadd_parts+0x2e4>
   86dd0:	a3000217 	ldw	r12,8(r20)
   86dd4:	4209883a 	add	r4,r8,r8
   86dd8:	00bfffc4 	movi	r2,-1
   86ddc:	220f803a 	cmpltu	r7,r4,r8
   86de0:	4a4b883a 	add	r5,r9,r9
   86de4:	394f883a 	add	r7,r7,r5
   86de8:	2095883a 	add	r10,r4,r2
   86dec:	3897883a 	add	r11,r7,r2
   86df0:	510d803a 	cmpltu	r6,r10,r4
   86df4:	6099883a 	add	r12,r12,r2
   86df8:	32d7883a 	add	r11,r6,r11
   86dfc:	00840034 	movhi	r2,4096
   86e00:	10bfffc4 	addi	r2,r2,-1
   86e04:	2011883a 	mov	r8,r4
   86e08:	3813883a 	mov	r9,r7
   86e0c:	a1000315 	stw	r4,12(r20)
   86e10:	a1c00415 	stw	r7,16(r20)
   86e14:	a3000215 	stw	r12,8(r20)
   86e18:	12c00336 	bltu	r2,r11,86e28 <_fpadd_parts+0x1a8>
   86e1c:	58bfed1e 	bne	r11,r2,86dd4 <_fpadd_parts+0x154>
   86e20:	00bfff84 	movi	r2,-2
   86e24:	12bfeb2e 	bgeu	r2,r10,86dd4 <_fpadd_parts+0x154>
   86e28:	a2800417 	ldw	r10,16(r20)
   86e2c:	008000c4 	movi	r2,3
   86e30:	00c80034 	movhi	r3,8192
   86e34:	18ffffc4 	addi	r3,r3,-1
   86e38:	a2400317 	ldw	r9,12(r20)
   86e3c:	a0800015 	stw	r2,0(r20)
   86e40:	1a802336 	bltu	r3,r10,86ed0 <_fpadd_parts+0x250>
   86e44:	a027883a 	mov	r19,r20
   86e48:	9805883a 	mov	r2,r19
   86e4c:	ddc00717 	ldw	r23,28(sp)
   86e50:	dd800617 	ldw	r22,24(sp)
   86e54:	dd400517 	ldw	r21,20(sp)
   86e58:	dd000417 	ldw	r20,16(sp)
   86e5c:	dcc00317 	ldw	r19,12(sp)
   86e60:	dc800217 	ldw	r18,8(sp)
   86e64:	dc400117 	ldw	r17,4(sp)
   86e68:	dc000017 	ldw	r16,0(sp)
   86e6c:	dec00804 	addi	sp,sp,32
   86e70:	f800283a 	ret
   86e74:	20fff41e 	bne	r4,r3,86e48 <_fpadd_parts+0x1c8>
   86e78:	31000015 	stw	r4,0(r6)
   86e7c:	98800117 	ldw	r2,4(r19)
   86e80:	30800115 	stw	r2,4(r6)
   86e84:	98c00217 	ldw	r3,8(r19)
   86e88:	30c00215 	stw	r3,8(r6)
   86e8c:	98800317 	ldw	r2,12(r19)
   86e90:	30800315 	stw	r2,12(r6)
   86e94:	98c00417 	ldw	r3,16(r19)
   86e98:	30c00415 	stw	r3,16(r6)
   86e9c:	98800117 	ldw	r2,4(r19)
   86ea0:	28c00117 	ldw	r3,4(r5)
   86ea4:	3027883a 	mov	r19,r6
   86ea8:	10c4703a 	and	r2,r2,r3
   86eac:	30800115 	stw	r2,4(r6)
   86eb0:	003fe506 	br	86e48 <_fpadd_parts+0x1c8>
   86eb4:	1dc02616 	blt	r3,r23,86f50 <_fpadd_parts+0x2d0>
   86eb8:	0023883a 	mov	r17,zero
   86ebc:	182f883a 	mov	r23,r3
   86ec0:	0025883a 	mov	r18,zero
   86ec4:	003fa806 	br	86d68 <_fpadd_parts+0xe8>
   86ec8:	a827883a 	mov	r19,r21
   86ecc:	003fde06 	br	86e48 <_fpadd_parts+0x1c8>
   86ed0:	01800044 	movi	r6,1
   86ed4:	500497fa 	slli	r2,r10,31
   86ed8:	4808d07a 	srli	r4,r9,1
   86edc:	518ad83a 	srl	r5,r10,r6
   86ee0:	a2000217 	ldw	r8,8(r20)
   86ee4:	1108b03a 	or	r4,r2,r4
   86ee8:	0007883a 	mov	r3,zero
   86eec:	4984703a 	and	r2,r9,r6
   86ef0:	208cb03a 	or	r6,r4,r2
   86ef4:	28ceb03a 	or	r7,r5,r3
   86ef8:	42000044 	addi	r8,r8,1
   86efc:	a027883a 	mov	r19,r20
   86f00:	a1c00415 	stw	r7,16(r20)
   86f04:	a2000215 	stw	r8,8(r20)
   86f08:	a1800315 	stw	r6,12(r20)
   86f0c:	003fce06 	br	86e48 <_fpadd_parts+0x1c8>
   86f10:	8bc5c83a 	sub	r2,r17,r15
   86f14:	8889803a 	cmpltu	r4,r17,r2
   86f18:	9407c83a 	sub	r3,r18,r16
   86f1c:	1909c83a 	sub	r4,r3,r4
   86f20:	100d883a 	mov	r6,r2
   86f24:	200f883a 	mov	r7,r4
   86f28:	003f9906 	br	86d90 <_fpadd_parts+0x110>
   86f2c:	7c45883a 	add	r2,r15,r17
   86f30:	13c9803a 	cmpltu	r4,r2,r15
   86f34:	8487883a 	add	r3,r16,r18
   86f38:	20c9883a 	add	r4,r4,r3
   86f3c:	a1400115 	stw	r5,4(r20)
   86f40:	a5c00215 	stw	r23,8(r20)
   86f44:	a0800315 	stw	r2,12(r20)
   86f48:	a1000415 	stw	r4,16(r20)
   86f4c:	003fb606 	br	86e28 <_fpadd_parts+0x1a8>
   86f50:	001f883a 	mov	r15,zero
   86f54:	0021883a 	mov	r16,zero
   86f58:	003f8306 	br	86d68 <_fpadd_parts+0xe8>
   86f5c:	018dc83a 	sub	r6,zero,r6
   86f60:	003f6706 	br	86d00 <_fpadd_parts+0x80>
   86f64:	00bfff84 	movi	r2,-2
   86f68:	117faf36 	bltu	r2,r5,86e28 <_fpadd_parts+0x1a8>
   86f6c:	003f9806 	br	86dd0 <_fpadd_parts+0x150>
   86f70:	0005883a 	mov	r2,zero
   86f74:	1189c83a 	sub	r4,r2,r6
   86f78:	1105803a 	cmpltu	r2,r2,r4
   86f7c:	01cbc83a 	sub	r5,zero,r7
   86f80:	2885c83a 	sub	r2,r5,r2
   86f84:	01800044 	movi	r6,1
   86f88:	a1800115 	stw	r6,4(r20)
   86f8c:	a5c00215 	stw	r23,8(r20)
   86f90:	a1000315 	stw	r4,12(r20)
   86f94:	a0800415 	stw	r2,16(r20)
   86f98:	003f8206 	br	86da4 <_fpadd_parts+0x124>
   86f9c:	203f7226 	beq	r4,zero,86d68 <_fpadd_parts+0xe8>
   86fa0:	35bff804 	addi	r22,r6,-32
   86fa4:	b9af883a 	add	r23,r23,r6
   86fa8:	b0003116 	blt	r22,zero,87070 <_fpadd_parts+0x3f0>
   86fac:	959ad83a 	srl	r13,r18,r22
   86fb0:	001d883a 	mov	r14,zero
   86fb4:	000f883a 	mov	r7,zero
   86fb8:	01000044 	movi	r4,1
   86fbc:	0011883a 	mov	r8,zero
   86fc0:	b0002516 	blt	r22,zero,87058 <_fpadd_parts+0x3d8>
   86fc4:	2594983a 	sll	r10,r4,r22
   86fc8:	0013883a 	mov	r9,zero
   86fcc:	00bfffc4 	movi	r2,-1
   86fd0:	4889883a 	add	r4,r9,r2
   86fd4:	508b883a 	add	r5,r10,r2
   86fd8:	224d803a 	cmpltu	r6,r4,r9
   86fdc:	314b883a 	add	r5,r6,r5
   86fe0:	8904703a 	and	r2,r17,r4
   86fe4:	9146703a 	and	r3,r18,r5
   86fe8:	10c4b03a 	or	r2,r2,r3
   86fec:	10000226 	beq	r2,zero,86ff8 <_fpadd_parts+0x378>
   86ff0:	01c00044 	movi	r7,1
   86ff4:	0011883a 	mov	r8,zero
   86ff8:	69e2b03a 	or	r17,r13,r7
   86ffc:	7224b03a 	or	r18,r14,r8
   87000:	003f5906 	br	86d68 <_fpadd_parts+0xe8>
   87004:	8407883a 	add	r3,r16,r16
   87008:	008007c4 	movi	r2,31
   8700c:	1185c83a 	sub	r2,r2,r6
   87010:	1886983a 	sll	r3,r3,r2
   87014:	7996d83a 	srl	r11,r15,r6
   87018:	8198d83a 	srl	r12,r16,r6
   8701c:	1ad6b03a 	or	r11,r3,r11
   87020:	003f3e06 	br	86d1c <_fpadd_parts+0x9c>
   87024:	2006d07a 	srli	r3,r4,1
   87028:	008007c4 	movi	r2,31
   8702c:	1185c83a 	sub	r2,r2,r6
   87030:	1890d83a 	srl	r8,r3,r2
   87034:	218e983a 	sll	r7,r4,r6
   87038:	003f3e06 	br	86d34 <_fpadd_parts+0xb4>
   8703c:	113f821e 	bne	r2,r4,86e48 <_fpadd_parts+0x1c8>
   87040:	28c00117 	ldw	r3,4(r5)
   87044:	98800117 	ldw	r2,4(r19)
   87048:	10ff7f26 	beq	r2,r3,86e48 <_fpadd_parts+0x1c8>
   8704c:	04c00274 	movhi	r19,9
   87050:	9cce8104 	addi	r19,r19,14852
   87054:	003f7c06 	br	86e48 <_fpadd_parts+0x1c8>
   87058:	2006d07a 	srli	r3,r4,1
   8705c:	008007c4 	movi	r2,31
   87060:	1185c83a 	sub	r2,r2,r6
   87064:	1894d83a 	srl	r10,r3,r2
   87068:	2192983a 	sll	r9,r4,r6
   8706c:	003fd706 	br	86fcc <_fpadd_parts+0x34c>
   87070:	9487883a 	add	r3,r18,r18
   87074:	008007c4 	movi	r2,31
   87078:	1185c83a 	sub	r2,r2,r6
   8707c:	1886983a 	sll	r3,r3,r2
   87080:	899ad83a 	srl	r13,r17,r6
   87084:	919cd83a 	srl	r14,r18,r6
   87088:	1b5ab03a 	or	r13,r3,r13
   8708c:	003fc906 	br	86fb4 <_fpadd_parts+0x334>

00087090 <__subdf3>:
   87090:	deffea04 	addi	sp,sp,-88
   87094:	dcc01415 	stw	r19,80(sp)
   87098:	dcc00404 	addi	r19,sp,16
   8709c:	2011883a 	mov	r8,r4
   870a0:	2813883a 	mov	r9,r5
   870a4:	dc401315 	stw	r17,76(sp)
   870a8:	d809883a 	mov	r4,sp
   870ac:	980b883a 	mov	r5,r19
   870b0:	dc400904 	addi	r17,sp,36
   870b4:	dfc01515 	stw	ra,84(sp)
   870b8:	da400115 	stw	r9,4(sp)
   870bc:	d9c00315 	stw	r7,12(sp)
   870c0:	da000015 	stw	r8,0(sp)
   870c4:	d9800215 	stw	r6,8(sp)
   870c8:	00886080 	call	88608 <__unpack_d>
   870cc:	d9000204 	addi	r4,sp,8
   870d0:	880b883a 	mov	r5,r17
   870d4:	00886080 	call	88608 <__unpack_d>
   870d8:	d8800a17 	ldw	r2,40(sp)
   870dc:	880b883a 	mov	r5,r17
   870e0:	9809883a 	mov	r4,r19
   870e4:	d9800e04 	addi	r6,sp,56
   870e8:	1080005c 	xori	r2,r2,1
   870ec:	d8800a15 	stw	r2,40(sp)
   870f0:	0086c800 	call	86c80 <_fpadd_parts>
   870f4:	1009883a 	mov	r4,r2
   870f8:	00882f40 	call	882f4 <__pack_d>
   870fc:	dfc01517 	ldw	ra,84(sp)
   87100:	dcc01417 	ldw	r19,80(sp)
   87104:	dc401317 	ldw	r17,76(sp)
   87108:	dec01604 	addi	sp,sp,88
   8710c:	f800283a 	ret

00087110 <__adddf3>:
   87110:	deffea04 	addi	sp,sp,-88
   87114:	dcc01415 	stw	r19,80(sp)
   87118:	dcc00404 	addi	r19,sp,16
   8711c:	2011883a 	mov	r8,r4
   87120:	2813883a 	mov	r9,r5
   87124:	dc401315 	stw	r17,76(sp)
   87128:	d809883a 	mov	r4,sp
   8712c:	980b883a 	mov	r5,r19
   87130:	dc400904 	addi	r17,sp,36
   87134:	dfc01515 	stw	ra,84(sp)
   87138:	da400115 	stw	r9,4(sp)
   8713c:	d9c00315 	stw	r7,12(sp)
   87140:	da000015 	stw	r8,0(sp)
   87144:	d9800215 	stw	r6,8(sp)
   87148:	00886080 	call	88608 <__unpack_d>
   8714c:	d9000204 	addi	r4,sp,8
   87150:	880b883a 	mov	r5,r17
   87154:	00886080 	call	88608 <__unpack_d>
   87158:	d9800e04 	addi	r6,sp,56
   8715c:	9809883a 	mov	r4,r19
   87160:	880b883a 	mov	r5,r17
   87164:	0086c800 	call	86c80 <_fpadd_parts>
   87168:	1009883a 	mov	r4,r2
   8716c:	00882f40 	call	882f4 <__pack_d>
   87170:	dfc01517 	ldw	ra,84(sp)
   87174:	dcc01417 	ldw	r19,80(sp)
   87178:	dc401317 	ldw	r17,76(sp)
   8717c:	dec01604 	addi	sp,sp,88
   87180:	f800283a 	ret

00087184 <__muldf3>:
   87184:	deffe004 	addi	sp,sp,-128
   87188:	dc401815 	stw	r17,96(sp)
   8718c:	dc400404 	addi	r17,sp,16
   87190:	2011883a 	mov	r8,r4
   87194:	2813883a 	mov	r9,r5
   87198:	dc001715 	stw	r16,92(sp)
   8719c:	d809883a 	mov	r4,sp
   871a0:	880b883a 	mov	r5,r17
   871a4:	dc000904 	addi	r16,sp,36
   871a8:	dfc01f15 	stw	ra,124(sp)
   871ac:	da400115 	stw	r9,4(sp)
   871b0:	d9c00315 	stw	r7,12(sp)
   871b4:	da000015 	stw	r8,0(sp)
   871b8:	d9800215 	stw	r6,8(sp)
   871bc:	ddc01e15 	stw	r23,120(sp)
   871c0:	dd801d15 	stw	r22,116(sp)
   871c4:	dd401c15 	stw	r21,112(sp)
   871c8:	dd001b15 	stw	r20,108(sp)
   871cc:	dcc01a15 	stw	r19,104(sp)
   871d0:	dc801915 	stw	r18,100(sp)
   871d4:	00886080 	call	88608 <__unpack_d>
   871d8:	d9000204 	addi	r4,sp,8
   871dc:	800b883a 	mov	r5,r16
   871e0:	00886080 	call	88608 <__unpack_d>
   871e4:	d9000417 	ldw	r4,16(sp)
   871e8:	00800044 	movi	r2,1
   871ec:	1100102e 	bgeu	r2,r4,87230 <__muldf3+0xac>
   871f0:	d8c00917 	ldw	r3,36(sp)
   871f4:	10c0062e 	bgeu	r2,r3,87210 <__muldf3+0x8c>
   871f8:	00800104 	movi	r2,4
   871fc:	20800a26 	beq	r4,r2,87228 <__muldf3+0xa4>
   87200:	1880cc26 	beq	r3,r2,87534 <__muldf3+0x3b0>
   87204:	00800084 	movi	r2,2
   87208:	20800926 	beq	r4,r2,87230 <__muldf3+0xac>
   8720c:	1880191e 	bne	r3,r2,87274 <__muldf3+0xf0>
   87210:	d8c00a17 	ldw	r3,40(sp)
   87214:	d8800517 	ldw	r2,20(sp)
   87218:	8009883a 	mov	r4,r16
   8721c:	10c4c03a 	cmpne	r2,r2,r3
   87220:	d8800a15 	stw	r2,40(sp)
   87224:	00000706 	br	87244 <__muldf3+0xc0>
   87228:	00800084 	movi	r2,2
   8722c:	1880c326 	beq	r3,r2,8753c <__muldf3+0x3b8>
   87230:	d8800517 	ldw	r2,20(sp)
   87234:	d8c00a17 	ldw	r3,40(sp)
   87238:	8809883a 	mov	r4,r17
   8723c:	10c4c03a 	cmpne	r2,r2,r3
   87240:	d8800515 	stw	r2,20(sp)
   87244:	00882f40 	call	882f4 <__pack_d>
   87248:	dfc01f17 	ldw	ra,124(sp)
   8724c:	ddc01e17 	ldw	r23,120(sp)
   87250:	dd801d17 	ldw	r22,116(sp)
   87254:	dd401c17 	ldw	r21,112(sp)
   87258:	dd001b17 	ldw	r20,108(sp)
   8725c:	dcc01a17 	ldw	r19,104(sp)
   87260:	dc801917 	ldw	r18,100(sp)
   87264:	dc401817 	ldw	r17,96(sp)
   87268:	dc001717 	ldw	r16,92(sp)
   8726c:	dec02004 	addi	sp,sp,128
   87270:	f800283a 	ret
   87274:	dd800717 	ldw	r22,28(sp)
   87278:	dc800c17 	ldw	r18,48(sp)
   8727c:	002b883a 	mov	r21,zero
   87280:	0023883a 	mov	r17,zero
   87284:	a80b883a 	mov	r5,r21
   87288:	b00d883a 	mov	r6,r22
   8728c:	880f883a 	mov	r7,r17
   87290:	ddc00817 	ldw	r23,32(sp)
   87294:	dcc00d17 	ldw	r19,52(sp)
   87298:	9009883a 	mov	r4,r18
   8729c:	0087ee00 	call	87ee0 <__muldi3>
   872a0:	001b883a 	mov	r13,zero
   872a4:	680f883a 	mov	r7,r13
   872a8:	b009883a 	mov	r4,r22
   872ac:	000b883a 	mov	r5,zero
   872b0:	980d883a 	mov	r6,r19
   872b4:	b82d883a 	mov	r22,r23
   872b8:	002f883a 	mov	r23,zero
   872bc:	db401615 	stw	r13,88(sp)
   872c0:	d8801315 	stw	r2,76(sp)
   872c4:	d8c01415 	stw	r3,80(sp)
   872c8:	dcc01515 	stw	r19,84(sp)
   872cc:	0087ee00 	call	87ee0 <__muldi3>
   872d0:	b00d883a 	mov	r6,r22
   872d4:	000b883a 	mov	r5,zero
   872d8:	9009883a 	mov	r4,r18
   872dc:	b80f883a 	mov	r7,r23
   872e0:	1021883a 	mov	r16,r2
   872e4:	1823883a 	mov	r17,r3
   872e8:	0087ee00 	call	87ee0 <__muldi3>
   872ec:	8085883a 	add	r2,r16,r2
   872f0:	140d803a 	cmpltu	r6,r2,r16
   872f4:	88c7883a 	add	r3,r17,r3
   872f8:	30cd883a 	add	r6,r6,r3
   872fc:	1029883a 	mov	r20,r2
   87300:	302b883a 	mov	r21,r6
   87304:	da801317 	ldw	r10,76(sp)
   87308:	dac01417 	ldw	r11,80(sp)
   8730c:	db001517 	ldw	r12,84(sp)
   87310:	db401617 	ldw	r13,88(sp)
   87314:	3440612e 	bgeu	r6,r17,8749c <__muldf3+0x318>
   87318:	0009883a 	mov	r4,zero
   8731c:	5105883a 	add	r2,r10,r4
   87320:	128d803a 	cmpltu	r6,r2,r10
   87324:	5d07883a 	add	r3,r11,r20
   87328:	30cd883a 	add	r6,r6,r3
   8732c:	0021883a 	mov	r16,zero
   87330:	04400044 	movi	r17,1
   87334:	1025883a 	mov	r18,r2
   87338:	3027883a 	mov	r19,r6
   8733c:	32c06236 	bltu	r6,r11,874c8 <__muldf3+0x344>
   87340:	59807a26 	beq	r11,r6,8752c <__muldf3+0x3a8>
   87344:	680b883a 	mov	r5,r13
   87348:	b80f883a 	mov	r7,r23
   8734c:	6009883a 	mov	r4,r12
   87350:	b00d883a 	mov	r6,r22
   87354:	0087ee00 	call	87ee0 <__muldi3>
   87358:	1009883a 	mov	r4,r2
   8735c:	000f883a 	mov	r7,zero
   87360:	1545883a 	add	r2,r2,r21
   87364:	1111803a 	cmpltu	r8,r2,r4
   87368:	19c7883a 	add	r3,r3,r7
   8736c:	40c7883a 	add	r3,r8,r3
   87370:	88cb883a 	add	r5,r17,r3
   87374:	d8c00617 	ldw	r3,24(sp)
   87378:	8089883a 	add	r4,r16,r2
   8737c:	d8800b17 	ldw	r2,44(sp)
   87380:	18c00104 	addi	r3,r3,4
   87384:	240d803a 	cmpltu	r6,r4,r16
   87388:	10c7883a 	add	r3,r2,r3
   8738c:	2013883a 	mov	r9,r4
   87390:	d8800a17 	ldw	r2,40(sp)
   87394:	d9000517 	ldw	r4,20(sp)
   87398:	314d883a 	add	r6,r6,r5
   8739c:	3015883a 	mov	r10,r6
   873a0:	2088c03a 	cmpne	r4,r4,r2
   873a4:	00880034 	movhi	r2,8192
   873a8:	10bfffc4 	addi	r2,r2,-1
   873ac:	d9000f15 	stw	r4,60(sp)
   873b0:	d8c01015 	stw	r3,64(sp)
   873b4:	1180162e 	bgeu	r2,r6,87410 <__muldf3+0x28c>
   873b8:	1811883a 	mov	r8,r3
   873bc:	101f883a 	mov	r15,r2
   873c0:	980497fa 	slli	r2,r19,31
   873c4:	9016d07a 	srli	r11,r18,1
   873c8:	500697fa 	slli	r3,r10,31
   873cc:	480cd07a 	srli	r6,r9,1
   873d0:	500ed07a 	srli	r7,r10,1
   873d4:	12d6b03a 	or	r11,r2,r11
   873d8:	00800044 	movi	r2,1
   873dc:	198cb03a 	or	r6,r3,r6
   873e0:	4888703a 	and	r4,r9,r2
   873e4:	9818d07a 	srli	r12,r19,1
   873e8:	001b883a 	mov	r13,zero
   873ec:	03a00034 	movhi	r14,32768
   873f0:	3013883a 	mov	r9,r6
   873f4:	3815883a 	mov	r10,r7
   873f8:	4091883a 	add	r8,r8,r2
   873fc:	20000226 	beq	r4,zero,87408 <__muldf3+0x284>
   87400:	5b64b03a 	or	r18,r11,r13
   87404:	63a6b03a 	or	r19,r12,r14
   87408:	7abfed36 	bltu	r15,r10,873c0 <__muldf3+0x23c>
   8740c:	da001015 	stw	r8,64(sp)
   87410:	00840034 	movhi	r2,4096
   87414:	10bfffc4 	addi	r2,r2,-1
   87418:	12801436 	bltu	r2,r10,8746c <__muldf3+0x2e8>
   8741c:	da001017 	ldw	r8,64(sp)
   87420:	101f883a 	mov	r15,r2
   87424:	4a45883a 	add	r2,r9,r9
   87428:	124d803a 	cmpltu	r6,r2,r9
   8742c:	5287883a 	add	r3,r10,r10
   87430:	9497883a 	add	r11,r18,r18
   87434:	5c8f803a 	cmpltu	r7,r11,r18
   87438:	9cd9883a 	add	r12,r19,r19
   8743c:	01000044 	movi	r4,1
   87440:	30cd883a 	add	r6,r6,r3
   87444:	3b0f883a 	add	r7,r7,r12
   87448:	423fffc4 	addi	r8,r8,-1
   8744c:	1013883a 	mov	r9,r2
   87450:	3015883a 	mov	r10,r6
   87454:	111ab03a 	or	r13,r2,r4
   87458:	98003016 	blt	r19,zero,8751c <__muldf3+0x398>
   8745c:	5825883a 	mov	r18,r11
   87460:	3827883a 	mov	r19,r7
   87464:	7abfef2e 	bgeu	r15,r10,87424 <__muldf3+0x2a0>
   87468:	da001015 	stw	r8,64(sp)
   8746c:	00803fc4 	movi	r2,255
   87470:	488e703a 	and	r7,r9,r2
   87474:	00802004 	movi	r2,128
   87478:	0007883a 	mov	r3,zero
   8747c:	0011883a 	mov	r8,zero
   87480:	38801826 	beq	r7,r2,874e4 <__muldf3+0x360>
   87484:	008000c4 	movi	r2,3
   87488:	d9000e04 	addi	r4,sp,56
   8748c:	da801215 	stw	r10,72(sp)
   87490:	d8800e15 	stw	r2,56(sp)
   87494:	da401115 	stw	r9,68(sp)
   87498:	003f6a06 	br	87244 <__muldf3+0xc0>
   8749c:	89802126 	beq	r17,r6,87524 <__muldf3+0x3a0>
   874a0:	0009883a 	mov	r4,zero
   874a4:	5105883a 	add	r2,r10,r4
   874a8:	128d803a 	cmpltu	r6,r2,r10
   874ac:	5d07883a 	add	r3,r11,r20
   874b0:	30cd883a 	add	r6,r6,r3
   874b4:	0021883a 	mov	r16,zero
   874b8:	0023883a 	mov	r17,zero
   874bc:	1025883a 	mov	r18,r2
   874c0:	3027883a 	mov	r19,r6
   874c4:	32ff9e2e 	bgeu	r6,r11,87340 <__muldf3+0x1bc>
   874c8:	00800044 	movi	r2,1
   874cc:	8089883a 	add	r4,r16,r2
   874d0:	240d803a 	cmpltu	r6,r4,r16
   874d4:	344d883a 	add	r6,r6,r17
   874d8:	2021883a 	mov	r16,r4
   874dc:	3023883a 	mov	r17,r6
   874e0:	003f9806 	br	87344 <__muldf3+0x1c0>
   874e4:	403fe71e 	bne	r8,zero,87484 <__muldf3+0x300>
   874e8:	01004004 	movi	r4,256
   874ec:	4904703a 	and	r2,r9,r4
   874f0:	10c4b03a 	or	r2,r2,r3
   874f4:	103fe31e 	bne	r2,zero,87484 <__muldf3+0x300>
   874f8:	94c4b03a 	or	r2,r18,r19
   874fc:	103fe126 	beq	r2,zero,87484 <__muldf3+0x300>
   87500:	49c5883a 	add	r2,r9,r7
   87504:	1251803a 	cmpltu	r8,r2,r9
   87508:	4291883a 	add	r8,r8,r10
   8750c:	013fc004 	movi	r4,-256
   87510:	1112703a 	and	r9,r2,r4
   87514:	4015883a 	mov	r10,r8
   87518:	003fda06 	br	87484 <__muldf3+0x300>
   8751c:	6813883a 	mov	r9,r13
   87520:	003fce06 	br	8745c <__muldf3+0x2d8>
   87524:	143f7c36 	bltu	r2,r16,87318 <__muldf3+0x194>
   87528:	003fdd06 	br	874a0 <__muldf3+0x31c>
   8752c:	12bf852e 	bgeu	r2,r10,87344 <__muldf3+0x1c0>
   87530:	003fe506 	br	874c8 <__muldf3+0x344>
   87534:	00800084 	movi	r2,2
   87538:	20bf351e 	bne	r4,r2,87210 <__muldf3+0x8c>
   8753c:	01000274 	movhi	r4,9
   87540:	210e8104 	addi	r4,r4,14852
   87544:	003f3f06 	br	87244 <__muldf3+0xc0>

00087548 <__divdf3>:
   87548:	deffed04 	addi	sp,sp,-76
   8754c:	dcc01115 	stw	r19,68(sp)
   87550:	dcc00404 	addi	r19,sp,16
   87554:	2011883a 	mov	r8,r4
   87558:	2813883a 	mov	r9,r5
   8755c:	dc000e15 	stw	r16,56(sp)
   87560:	d809883a 	mov	r4,sp
   87564:	980b883a 	mov	r5,r19
   87568:	dc000904 	addi	r16,sp,36
   8756c:	dfc01215 	stw	ra,72(sp)
   87570:	da400115 	stw	r9,4(sp)
   87574:	d9c00315 	stw	r7,12(sp)
   87578:	da000015 	stw	r8,0(sp)
   8757c:	d9800215 	stw	r6,8(sp)
   87580:	dc801015 	stw	r18,64(sp)
   87584:	dc400f15 	stw	r17,60(sp)
   87588:	00886080 	call	88608 <__unpack_d>
   8758c:	d9000204 	addi	r4,sp,8
   87590:	800b883a 	mov	r5,r16
   87594:	00886080 	call	88608 <__unpack_d>
   87598:	d9000417 	ldw	r4,16(sp)
   8759c:	00800044 	movi	r2,1
   875a0:	11000b2e 	bgeu	r2,r4,875d0 <__divdf3+0x88>
   875a4:	d9400917 	ldw	r5,36(sp)
   875a8:	1140762e 	bgeu	r2,r5,87784 <__divdf3+0x23c>
   875ac:	d8800517 	ldw	r2,20(sp)
   875b0:	d8c00a17 	ldw	r3,40(sp)
   875b4:	01800104 	movi	r6,4
   875b8:	10c4f03a 	xor	r2,r2,r3
   875bc:	d8800515 	stw	r2,20(sp)
   875c0:	21800226 	beq	r4,r6,875cc <__divdf3+0x84>
   875c4:	00800084 	movi	r2,2
   875c8:	2080141e 	bne	r4,r2,8761c <__divdf3+0xd4>
   875cc:	29000926 	beq	r5,r4,875f4 <__divdf3+0xac>
   875d0:	9809883a 	mov	r4,r19
   875d4:	00882f40 	call	882f4 <__pack_d>
   875d8:	dfc01217 	ldw	ra,72(sp)
   875dc:	dcc01117 	ldw	r19,68(sp)
   875e0:	dc801017 	ldw	r18,64(sp)
   875e4:	dc400f17 	ldw	r17,60(sp)
   875e8:	dc000e17 	ldw	r16,56(sp)
   875ec:	dec01304 	addi	sp,sp,76
   875f0:	f800283a 	ret
   875f4:	01000274 	movhi	r4,9
   875f8:	210e8104 	addi	r4,r4,14852
   875fc:	00882f40 	call	882f4 <__pack_d>
   87600:	dfc01217 	ldw	ra,72(sp)
   87604:	dcc01117 	ldw	r19,68(sp)
   87608:	dc801017 	ldw	r18,64(sp)
   8760c:	dc400f17 	ldw	r17,60(sp)
   87610:	dc000e17 	ldw	r16,56(sp)
   87614:	dec01304 	addi	sp,sp,76
   87618:	f800283a 	ret
   8761c:	29805b26 	beq	r5,r6,8778c <__divdf3+0x244>
   87620:	28802d26 	beq	r5,r2,876d8 <__divdf3+0x190>
   87624:	d8c00617 	ldw	r3,24(sp)
   87628:	d8800b17 	ldw	r2,44(sp)
   8762c:	d9c00817 	ldw	r7,32(sp)
   87630:	dc400d17 	ldw	r17,52(sp)
   87634:	188bc83a 	sub	r5,r3,r2
   87638:	d9800717 	ldw	r6,28(sp)
   8763c:	dc000c17 	ldw	r16,48(sp)
   87640:	d9400615 	stw	r5,24(sp)
   87644:	3c403836 	bltu	r7,r17,87728 <__divdf3+0x1e0>
   87648:	89c03626 	beq	r17,r7,87724 <__divdf3+0x1dc>
   8764c:	0015883a 	mov	r10,zero
   87650:	001d883a 	mov	r14,zero
   87654:	02c40034 	movhi	r11,4096
   87658:	001f883a 	mov	r15,zero
   8765c:	003f883a 	mov	ra,zero
   87660:	04800f44 	movi	r18,61
   87664:	00000f06 	br	876a4 <__divdf3+0x15c>
   87668:	601d883a 	mov	r14,r12
   8766c:	681f883a 	mov	r15,r13
   87670:	400d883a 	mov	r6,r8
   87674:	100f883a 	mov	r7,r2
   87678:	3191883a 	add	r8,r6,r6
   8767c:	5808d07a 	srli	r4,r11,1
   87680:	4185803a 	cmpltu	r2,r8,r6
   87684:	39d3883a 	add	r9,r7,r7
   87688:	28c6b03a 	or	r3,r5,r3
   8768c:	1245883a 	add	r2,r2,r9
   87690:	1815883a 	mov	r10,r3
   87694:	2017883a 	mov	r11,r4
   87698:	400d883a 	mov	r6,r8
   8769c:	100f883a 	mov	r7,r2
   876a0:	fc801726 	beq	ra,r18,87700 <__divdf3+0x1b8>
   876a4:	580a97fa 	slli	r5,r11,31
   876a8:	5006d07a 	srli	r3,r10,1
   876ac:	ffc00044 	addi	ra,ra,1
   876b0:	3c7ff136 	bltu	r7,r17,87678 <__divdf3+0x130>
   876b4:	3411c83a 	sub	r8,r6,r16
   876b8:	3205803a 	cmpltu	r2,r6,r8
   876bc:	3c53c83a 	sub	r9,r7,r17
   876c0:	7298b03a 	or	r12,r14,r10
   876c4:	7adab03a 	or	r13,r15,r11
   876c8:	4885c83a 	sub	r2,r9,r2
   876cc:	89ffe61e 	bne	r17,r7,87668 <__divdf3+0x120>
   876d0:	343fe936 	bltu	r6,r16,87678 <__divdf3+0x130>
   876d4:	003fe406 	br	87668 <__divdf3+0x120>
   876d8:	9809883a 	mov	r4,r19
   876dc:	d9800415 	stw	r6,16(sp)
   876e0:	00882f40 	call	882f4 <__pack_d>
   876e4:	dfc01217 	ldw	ra,72(sp)
   876e8:	dcc01117 	ldw	r19,68(sp)
   876ec:	dc801017 	ldw	r18,64(sp)
   876f0:	dc400f17 	ldw	r17,60(sp)
   876f4:	dc000e17 	ldw	r16,56(sp)
   876f8:	dec01304 	addi	sp,sp,76
   876fc:	f800283a 	ret
   87700:	00803fc4 	movi	r2,255
   87704:	7090703a 	and	r8,r14,r2
   87708:	00802004 	movi	r2,128
   8770c:	0007883a 	mov	r3,zero
   87710:	0013883a 	mov	r9,zero
   87714:	40800d26 	beq	r8,r2,8774c <__divdf3+0x204>
   87718:	dbc00815 	stw	r15,32(sp)
   8771c:	db800715 	stw	r14,28(sp)
   87720:	003fab06 	br	875d0 <__divdf3+0x88>
   87724:	343fc92e 	bgeu	r6,r16,8764c <__divdf3+0x104>
   87728:	3185883a 	add	r2,r6,r6
   8772c:	1189803a 	cmpltu	r4,r2,r6
   87730:	39c7883a 	add	r3,r7,r7
   87734:	20c9883a 	add	r4,r4,r3
   87738:	297fffc4 	addi	r5,r5,-1
   8773c:	100d883a 	mov	r6,r2
   87740:	200f883a 	mov	r7,r4
   87744:	d9400615 	stw	r5,24(sp)
   87748:	003fc006 	br	8764c <__divdf3+0x104>
   8774c:	483ff21e 	bne	r9,zero,87718 <__divdf3+0x1d0>
   87750:	01004004 	movi	r4,256
   87754:	7104703a 	and	r2,r14,r4
   87758:	10c4b03a 	or	r2,r2,r3
   8775c:	103fee1e 	bne	r2,zero,87718 <__divdf3+0x1d0>
   87760:	31c4b03a 	or	r2,r6,r7
   87764:	103fec26 	beq	r2,zero,87718 <__divdf3+0x1d0>
   87768:	7205883a 	add	r2,r14,r8
   8776c:	1391803a 	cmpltu	r8,r2,r14
   87770:	43d1883a 	add	r8,r8,r15
   87774:	013fc004 	movi	r4,-256
   87778:	111c703a 	and	r14,r2,r4
   8777c:	401f883a 	mov	r15,r8
   87780:	003fe506 	br	87718 <__divdf3+0x1d0>
   87784:	8009883a 	mov	r4,r16
   87788:	003f9206 	br	875d4 <__divdf3+0x8c>
   8778c:	9809883a 	mov	r4,r19
   87790:	d8000715 	stw	zero,28(sp)
   87794:	d8000815 	stw	zero,32(sp)
   87798:	d8000615 	stw	zero,24(sp)
   8779c:	003f8d06 	br	875d4 <__divdf3+0x8c>

000877a0 <__eqdf2>:
   877a0:	deffef04 	addi	sp,sp,-68
   877a4:	dc400f15 	stw	r17,60(sp)
   877a8:	dc400404 	addi	r17,sp,16
   877ac:	2005883a 	mov	r2,r4
   877b0:	2807883a 	mov	r3,r5
   877b4:	dc000e15 	stw	r16,56(sp)
   877b8:	d809883a 	mov	r4,sp
   877bc:	880b883a 	mov	r5,r17
   877c0:	dc000904 	addi	r16,sp,36
   877c4:	d8c00115 	stw	r3,4(sp)
   877c8:	d8800015 	stw	r2,0(sp)
   877cc:	d9800215 	stw	r6,8(sp)
   877d0:	dfc01015 	stw	ra,64(sp)
   877d4:	d9c00315 	stw	r7,12(sp)
   877d8:	00886080 	call	88608 <__unpack_d>
   877dc:	d9000204 	addi	r4,sp,8
   877e0:	800b883a 	mov	r5,r16
   877e4:	00886080 	call	88608 <__unpack_d>
   877e8:	d8800417 	ldw	r2,16(sp)
   877ec:	00c00044 	movi	r3,1
   877f0:	180d883a 	mov	r6,r3
   877f4:	1880062e 	bgeu	r3,r2,87810 <__eqdf2+0x70>
   877f8:	d8800917 	ldw	r2,36(sp)
   877fc:	8809883a 	mov	r4,r17
   87800:	800b883a 	mov	r5,r16
   87804:	1880022e 	bgeu	r3,r2,87810 <__eqdf2+0x70>
   87808:	00887400 	call	88740 <__fpcmp_parts_d>
   8780c:	100d883a 	mov	r6,r2
   87810:	3005883a 	mov	r2,r6
   87814:	dfc01017 	ldw	ra,64(sp)
   87818:	dc400f17 	ldw	r17,60(sp)
   8781c:	dc000e17 	ldw	r16,56(sp)
   87820:	dec01104 	addi	sp,sp,68
   87824:	f800283a 	ret

00087828 <__nedf2>:
   87828:	deffef04 	addi	sp,sp,-68
   8782c:	dc400f15 	stw	r17,60(sp)
   87830:	dc400404 	addi	r17,sp,16
   87834:	2005883a 	mov	r2,r4
   87838:	2807883a 	mov	r3,r5
   8783c:	dc000e15 	stw	r16,56(sp)
   87840:	d809883a 	mov	r4,sp
   87844:	880b883a 	mov	r5,r17
   87848:	dc000904 	addi	r16,sp,36
   8784c:	d8c00115 	stw	r3,4(sp)
   87850:	d8800015 	stw	r2,0(sp)
   87854:	d9800215 	stw	r6,8(sp)
   87858:	dfc01015 	stw	ra,64(sp)
   8785c:	d9c00315 	stw	r7,12(sp)
   87860:	00886080 	call	88608 <__unpack_d>
   87864:	d9000204 	addi	r4,sp,8
   87868:	800b883a 	mov	r5,r16
   8786c:	00886080 	call	88608 <__unpack_d>
   87870:	d8800417 	ldw	r2,16(sp)
   87874:	00c00044 	movi	r3,1
   87878:	180d883a 	mov	r6,r3
   8787c:	1880062e 	bgeu	r3,r2,87898 <__nedf2+0x70>
   87880:	d8800917 	ldw	r2,36(sp)
   87884:	8809883a 	mov	r4,r17
   87888:	800b883a 	mov	r5,r16
   8788c:	1880022e 	bgeu	r3,r2,87898 <__nedf2+0x70>
   87890:	00887400 	call	88740 <__fpcmp_parts_d>
   87894:	100d883a 	mov	r6,r2
   87898:	3005883a 	mov	r2,r6
   8789c:	dfc01017 	ldw	ra,64(sp)
   878a0:	dc400f17 	ldw	r17,60(sp)
   878a4:	dc000e17 	ldw	r16,56(sp)
   878a8:	dec01104 	addi	sp,sp,68
   878ac:	f800283a 	ret

000878b0 <__gtdf2>:
   878b0:	deffef04 	addi	sp,sp,-68
   878b4:	dc400f15 	stw	r17,60(sp)
   878b8:	dc400404 	addi	r17,sp,16
   878bc:	2005883a 	mov	r2,r4
   878c0:	2807883a 	mov	r3,r5
   878c4:	dc000e15 	stw	r16,56(sp)
   878c8:	d809883a 	mov	r4,sp
   878cc:	880b883a 	mov	r5,r17
   878d0:	dc000904 	addi	r16,sp,36
   878d4:	d8c00115 	stw	r3,4(sp)
   878d8:	d8800015 	stw	r2,0(sp)
   878dc:	d9800215 	stw	r6,8(sp)
   878e0:	dfc01015 	stw	ra,64(sp)
   878e4:	d9c00315 	stw	r7,12(sp)
   878e8:	00886080 	call	88608 <__unpack_d>
   878ec:	d9000204 	addi	r4,sp,8
   878f0:	800b883a 	mov	r5,r16
   878f4:	00886080 	call	88608 <__unpack_d>
   878f8:	d8800417 	ldw	r2,16(sp)
   878fc:	00c00044 	movi	r3,1
   87900:	01bfffc4 	movi	r6,-1
   87904:	1880062e 	bgeu	r3,r2,87920 <__gtdf2+0x70>
   87908:	d8800917 	ldw	r2,36(sp)
   8790c:	8809883a 	mov	r4,r17
   87910:	800b883a 	mov	r5,r16
   87914:	1880022e 	bgeu	r3,r2,87920 <__gtdf2+0x70>
   87918:	00887400 	call	88740 <__fpcmp_parts_d>
   8791c:	100d883a 	mov	r6,r2
   87920:	3005883a 	mov	r2,r6
   87924:	dfc01017 	ldw	ra,64(sp)
   87928:	dc400f17 	ldw	r17,60(sp)
   8792c:	dc000e17 	ldw	r16,56(sp)
   87930:	dec01104 	addi	sp,sp,68
   87934:	f800283a 	ret

00087938 <__gedf2>:
   87938:	deffef04 	addi	sp,sp,-68
   8793c:	dc400f15 	stw	r17,60(sp)
   87940:	dc400404 	addi	r17,sp,16
   87944:	2005883a 	mov	r2,r4
   87948:	2807883a 	mov	r3,r5
   8794c:	dc000e15 	stw	r16,56(sp)
   87950:	d809883a 	mov	r4,sp
   87954:	880b883a 	mov	r5,r17
   87958:	dc000904 	addi	r16,sp,36
   8795c:	d8c00115 	stw	r3,4(sp)
   87960:	d8800015 	stw	r2,0(sp)
   87964:	d9800215 	stw	r6,8(sp)
   87968:	dfc01015 	stw	ra,64(sp)
   8796c:	d9c00315 	stw	r7,12(sp)
   87970:	00886080 	call	88608 <__unpack_d>
   87974:	d9000204 	addi	r4,sp,8
   87978:	800b883a 	mov	r5,r16
   8797c:	00886080 	call	88608 <__unpack_d>
   87980:	d8800417 	ldw	r2,16(sp)
   87984:	00c00044 	movi	r3,1
   87988:	01bfffc4 	movi	r6,-1
   8798c:	1880062e 	bgeu	r3,r2,879a8 <__gedf2+0x70>
   87990:	d8800917 	ldw	r2,36(sp)
   87994:	8809883a 	mov	r4,r17
   87998:	800b883a 	mov	r5,r16
   8799c:	1880022e 	bgeu	r3,r2,879a8 <__gedf2+0x70>
   879a0:	00887400 	call	88740 <__fpcmp_parts_d>
   879a4:	100d883a 	mov	r6,r2
   879a8:	3005883a 	mov	r2,r6
   879ac:	dfc01017 	ldw	ra,64(sp)
   879b0:	dc400f17 	ldw	r17,60(sp)
   879b4:	dc000e17 	ldw	r16,56(sp)
   879b8:	dec01104 	addi	sp,sp,68
   879bc:	f800283a 	ret

000879c0 <__ltdf2>:
   879c0:	deffef04 	addi	sp,sp,-68
   879c4:	dc400f15 	stw	r17,60(sp)
   879c8:	dc400404 	addi	r17,sp,16
   879cc:	2005883a 	mov	r2,r4
   879d0:	2807883a 	mov	r3,r5
   879d4:	dc000e15 	stw	r16,56(sp)
   879d8:	d809883a 	mov	r4,sp
   879dc:	880b883a 	mov	r5,r17
   879e0:	dc000904 	addi	r16,sp,36
   879e4:	d8c00115 	stw	r3,4(sp)
   879e8:	d8800015 	stw	r2,0(sp)
   879ec:	d9800215 	stw	r6,8(sp)
   879f0:	dfc01015 	stw	ra,64(sp)
   879f4:	d9c00315 	stw	r7,12(sp)
   879f8:	00886080 	call	88608 <__unpack_d>
   879fc:	d9000204 	addi	r4,sp,8
   87a00:	800b883a 	mov	r5,r16
   87a04:	00886080 	call	88608 <__unpack_d>
   87a08:	d8800417 	ldw	r2,16(sp)
   87a0c:	00c00044 	movi	r3,1
   87a10:	180d883a 	mov	r6,r3
   87a14:	1880062e 	bgeu	r3,r2,87a30 <__ltdf2+0x70>
   87a18:	d8800917 	ldw	r2,36(sp)
   87a1c:	8809883a 	mov	r4,r17
   87a20:	800b883a 	mov	r5,r16
   87a24:	1880022e 	bgeu	r3,r2,87a30 <__ltdf2+0x70>
   87a28:	00887400 	call	88740 <__fpcmp_parts_d>
   87a2c:	100d883a 	mov	r6,r2
   87a30:	3005883a 	mov	r2,r6
   87a34:	dfc01017 	ldw	ra,64(sp)
   87a38:	dc400f17 	ldw	r17,60(sp)
   87a3c:	dc000e17 	ldw	r16,56(sp)
   87a40:	dec01104 	addi	sp,sp,68
   87a44:	f800283a 	ret

00087a48 <__ledf2>:
   87a48:	deffef04 	addi	sp,sp,-68
   87a4c:	dc400f15 	stw	r17,60(sp)
   87a50:	dc400404 	addi	r17,sp,16
   87a54:	2005883a 	mov	r2,r4
   87a58:	2807883a 	mov	r3,r5
   87a5c:	dc000e15 	stw	r16,56(sp)
   87a60:	d809883a 	mov	r4,sp
   87a64:	880b883a 	mov	r5,r17
   87a68:	dc000904 	addi	r16,sp,36
   87a6c:	d8c00115 	stw	r3,4(sp)
   87a70:	d8800015 	stw	r2,0(sp)
   87a74:	d9800215 	stw	r6,8(sp)
   87a78:	dfc01015 	stw	ra,64(sp)
   87a7c:	d9c00315 	stw	r7,12(sp)
   87a80:	00886080 	call	88608 <__unpack_d>
   87a84:	d9000204 	addi	r4,sp,8
   87a88:	800b883a 	mov	r5,r16
   87a8c:	00886080 	call	88608 <__unpack_d>
   87a90:	d8800417 	ldw	r2,16(sp)
   87a94:	00c00044 	movi	r3,1
   87a98:	180d883a 	mov	r6,r3
   87a9c:	1880062e 	bgeu	r3,r2,87ab8 <__ledf2+0x70>
   87aa0:	d8800917 	ldw	r2,36(sp)
   87aa4:	8809883a 	mov	r4,r17
   87aa8:	800b883a 	mov	r5,r16
   87aac:	1880022e 	bgeu	r3,r2,87ab8 <__ledf2+0x70>
   87ab0:	00887400 	call	88740 <__fpcmp_parts_d>
   87ab4:	100d883a 	mov	r6,r2
   87ab8:	3005883a 	mov	r2,r6
   87abc:	dfc01017 	ldw	ra,64(sp)
   87ac0:	dc400f17 	ldw	r17,60(sp)
   87ac4:	dc000e17 	ldw	r16,56(sp)
   87ac8:	dec01104 	addi	sp,sp,68
   87acc:	f800283a 	ret

00087ad0 <__floatsidf>:
   87ad0:	2006d7fa 	srli	r3,r4,31
   87ad4:	defff604 	addi	sp,sp,-40
   87ad8:	008000c4 	movi	r2,3
   87adc:	dfc00915 	stw	ra,36(sp)
   87ae0:	dcc00815 	stw	r19,32(sp)
   87ae4:	dc800715 	stw	r18,28(sp)
   87ae8:	dc400615 	stw	r17,24(sp)
   87aec:	dc000515 	stw	r16,20(sp)
   87af0:	d8800015 	stw	r2,0(sp)
   87af4:	d8c00115 	stw	r3,4(sp)
   87af8:	20000f1e 	bne	r4,zero,87b38 <__floatsidf+0x68>
   87afc:	00800084 	movi	r2,2
   87b00:	d8800015 	stw	r2,0(sp)
   87b04:	d809883a 	mov	r4,sp
   87b08:	00882f40 	call	882f4 <__pack_d>
   87b0c:	1009883a 	mov	r4,r2
   87b10:	180b883a 	mov	r5,r3
   87b14:	2005883a 	mov	r2,r4
   87b18:	2807883a 	mov	r3,r5
   87b1c:	dfc00917 	ldw	ra,36(sp)
   87b20:	dcc00817 	ldw	r19,32(sp)
   87b24:	dc800717 	ldw	r18,28(sp)
   87b28:	dc400617 	ldw	r17,24(sp)
   87b2c:	dc000517 	ldw	r16,20(sp)
   87b30:	dec00a04 	addi	sp,sp,40
   87b34:	f800283a 	ret
   87b38:	00800f04 	movi	r2,60
   87b3c:	1807003a 	cmpeq	r3,r3,zero
   87b40:	d8800215 	stw	r2,8(sp)
   87b44:	18001126 	beq	r3,zero,87b8c <__floatsidf+0xbc>
   87b48:	0027883a 	mov	r19,zero
   87b4c:	2025883a 	mov	r18,r4
   87b50:	d9000315 	stw	r4,12(sp)
   87b54:	dcc00415 	stw	r19,16(sp)
   87b58:	0087f780 	call	87f78 <__clzsi2>
   87b5c:	11000744 	addi	r4,r2,29
   87b60:	013fe80e 	bge	zero,r4,87b04 <__floatsidf+0x34>
   87b64:	10bfff44 	addi	r2,r2,-3
   87b68:	10000c16 	blt	r2,zero,87b9c <__floatsidf+0xcc>
   87b6c:	90a2983a 	sll	r17,r18,r2
   87b70:	0021883a 	mov	r16,zero
   87b74:	d8800217 	ldw	r2,8(sp)
   87b78:	dc400415 	stw	r17,16(sp)
   87b7c:	dc000315 	stw	r16,12(sp)
   87b80:	1105c83a 	sub	r2,r2,r4
   87b84:	d8800215 	stw	r2,8(sp)
   87b88:	003fde06 	br	87b04 <__floatsidf+0x34>
   87b8c:	00a00034 	movhi	r2,32768
   87b90:	20800a26 	beq	r4,r2,87bbc <__floatsidf+0xec>
   87b94:	0109c83a 	sub	r4,zero,r4
   87b98:	003feb06 	br	87b48 <__floatsidf+0x78>
   87b9c:	9006d07a 	srli	r3,r18,1
   87ba0:	008007c4 	movi	r2,31
   87ba4:	1105c83a 	sub	r2,r2,r4
   87ba8:	1886d83a 	srl	r3,r3,r2
   87bac:	9922983a 	sll	r17,r19,r4
   87bb0:	9120983a 	sll	r16,r18,r4
   87bb4:	1c62b03a 	or	r17,r3,r17
   87bb8:	003fee06 	br	87b74 <__floatsidf+0xa4>
   87bbc:	0009883a 	mov	r4,zero
   87bc0:	01707834 	movhi	r5,49632
   87bc4:	003fd306 	br	87b14 <__floatsidf+0x44>

00087bc8 <__fixdfsi>:
   87bc8:	defff804 	addi	sp,sp,-32
   87bcc:	2005883a 	mov	r2,r4
   87bd0:	2807883a 	mov	r3,r5
   87bd4:	d809883a 	mov	r4,sp
   87bd8:	d9400204 	addi	r5,sp,8
   87bdc:	d8c00115 	stw	r3,4(sp)
   87be0:	d8800015 	stw	r2,0(sp)
   87be4:	dfc00715 	stw	ra,28(sp)
   87be8:	00886080 	call	88608 <__unpack_d>
   87bec:	d8c00217 	ldw	r3,8(sp)
   87bf0:	00800084 	movi	r2,2
   87bf4:	1880051e 	bne	r3,r2,87c0c <__fixdfsi+0x44>
   87bf8:	0007883a 	mov	r3,zero
   87bfc:	1805883a 	mov	r2,r3
   87c00:	dfc00717 	ldw	ra,28(sp)
   87c04:	dec00804 	addi	sp,sp,32
   87c08:	f800283a 	ret
   87c0c:	00800044 	movi	r2,1
   87c10:	10fff92e 	bgeu	r2,r3,87bf8 <__fixdfsi+0x30>
   87c14:	00800104 	movi	r2,4
   87c18:	18800426 	beq	r3,r2,87c2c <__fixdfsi+0x64>
   87c1c:	d8c00417 	ldw	r3,16(sp)
   87c20:	183ff516 	blt	r3,zero,87bf8 <__fixdfsi+0x30>
   87c24:	00800784 	movi	r2,30
   87c28:	10c0080e 	bge	r2,r3,87c4c <__fixdfsi+0x84>
   87c2c:	d8800317 	ldw	r2,12(sp)
   87c30:	1000121e 	bne	r2,zero,87c7c <__fixdfsi+0xb4>
   87c34:	00e00034 	movhi	r3,32768
   87c38:	18ffffc4 	addi	r3,r3,-1
   87c3c:	1805883a 	mov	r2,r3
   87c40:	dfc00717 	ldw	ra,28(sp)
   87c44:	dec00804 	addi	sp,sp,32
   87c48:	f800283a 	ret
   87c4c:	00800f04 	movi	r2,60
   87c50:	10d1c83a 	sub	r8,r2,r3
   87c54:	40bff804 	addi	r2,r8,-32
   87c58:	d9800517 	ldw	r6,20(sp)
   87c5c:	d9c00617 	ldw	r7,24(sp)
   87c60:	10000816 	blt	r2,zero,87c84 <__fixdfsi+0xbc>
   87c64:	3888d83a 	srl	r4,r7,r2
   87c68:	d8800317 	ldw	r2,12(sp)
   87c6c:	2007883a 	mov	r3,r4
   87c70:	103fe226 	beq	r2,zero,87bfc <__fixdfsi+0x34>
   87c74:	0107c83a 	sub	r3,zero,r4
   87c78:	003fe006 	br	87bfc <__fixdfsi+0x34>
   87c7c:	00e00034 	movhi	r3,32768
   87c80:	003fde06 	br	87bfc <__fixdfsi+0x34>
   87c84:	39c7883a 	add	r3,r7,r7
   87c88:	008007c4 	movi	r2,31
   87c8c:	1205c83a 	sub	r2,r2,r8
   87c90:	1886983a 	sll	r3,r3,r2
   87c94:	3208d83a 	srl	r4,r6,r8
   87c98:	1908b03a 	or	r4,r3,r4
   87c9c:	003ff206 	br	87c68 <__fixdfsi+0xa0>

00087ca0 <__make_dp>:
   87ca0:	defff904 	addi	sp,sp,-28
   87ca4:	d8c00717 	ldw	r3,28(sp)
   87ca8:	d9000015 	stw	r4,0(sp)
   87cac:	d809883a 	mov	r4,sp
   87cb0:	dfc00515 	stw	ra,20(sp)
   87cb4:	d9c00615 	stw	r7,24(sp)
   87cb8:	d9400115 	stw	r5,4(sp)
   87cbc:	d9800215 	stw	r6,8(sp)
   87cc0:	d8c00415 	stw	r3,16(sp)
   87cc4:	d9c00315 	stw	r7,12(sp)
   87cc8:	00882f40 	call	882f4 <__pack_d>
   87ccc:	dfc00517 	ldw	ra,20(sp)
   87cd0:	dec00704 	addi	sp,sp,28
   87cd4:	f800283a 	ret

00087cd8 <__truncdfsf2>:
   87cd8:	defff804 	addi	sp,sp,-32
   87cdc:	2005883a 	mov	r2,r4
   87ce0:	2807883a 	mov	r3,r5
   87ce4:	d809883a 	mov	r4,sp
   87ce8:	d9400204 	addi	r5,sp,8
   87cec:	d8c00115 	stw	r3,4(sp)
   87cf0:	d8800015 	stw	r2,0(sp)
   87cf4:	dfc00715 	stw	ra,28(sp)
   87cf8:	00886080 	call	88608 <__unpack_d>
   87cfc:	d9c00517 	ldw	r7,20(sp)
   87d00:	da000617 	ldw	r8,24(sp)
   87d04:	02d00034 	movhi	r11,16384
   87d08:	5affffc4 	addi	r11,r11,-1
   87d0c:	3812d7ba 	srli	r9,r7,30
   87d10:	401a90ba 	slli	r13,r8,2
   87d14:	3ac4703a 	and	r2,r7,r11
   87d18:	0007883a 	mov	r3,zero
   87d1c:	6a52b03a 	or	r9,r13,r9
   87d20:	10c4b03a 	or	r2,r2,r3
   87d24:	d9000217 	ldw	r4,8(sp)
   87d28:	d9400317 	ldw	r5,12(sp)
   87d2c:	d9800417 	ldw	r6,16(sp)
   87d30:	480f883a 	mov	r7,r9
   87d34:	10000126 	beq	r2,zero,87d3c <__truncdfsf2+0x64>
   87d38:	49c00054 	ori	r7,r9,1
   87d3c:	00882c80 	call	882c8 <__make_fp>
   87d40:	dfc00717 	ldw	ra,28(sp)
   87d44:	dec00804 	addi	sp,sp,32
   87d48:	f800283a 	ret

00087d4c <__floatunsidf>:
   87d4c:	defff204 	addi	sp,sp,-56
   87d50:	dfc00d15 	stw	ra,52(sp)
   87d54:	ddc00c15 	stw	r23,48(sp)
   87d58:	dd800b15 	stw	r22,44(sp)
   87d5c:	dd400a15 	stw	r21,40(sp)
   87d60:	dd000915 	stw	r20,36(sp)
   87d64:	dcc00815 	stw	r19,32(sp)
   87d68:	dc800715 	stw	r18,28(sp)
   87d6c:	dc400615 	stw	r17,24(sp)
   87d70:	dc000515 	stw	r16,20(sp)
   87d74:	d8000115 	stw	zero,4(sp)
   87d78:	20000f1e 	bne	r4,zero,87db8 <__floatunsidf+0x6c>
   87d7c:	00800084 	movi	r2,2
   87d80:	d8800015 	stw	r2,0(sp)
   87d84:	d809883a 	mov	r4,sp
   87d88:	00882f40 	call	882f4 <__pack_d>
   87d8c:	dfc00d17 	ldw	ra,52(sp)
   87d90:	ddc00c17 	ldw	r23,48(sp)
   87d94:	dd800b17 	ldw	r22,44(sp)
   87d98:	dd400a17 	ldw	r21,40(sp)
   87d9c:	dd000917 	ldw	r20,36(sp)
   87da0:	dcc00817 	ldw	r19,32(sp)
   87da4:	dc800717 	ldw	r18,28(sp)
   87da8:	dc400617 	ldw	r17,24(sp)
   87dac:	dc000517 	ldw	r16,20(sp)
   87db0:	dec00e04 	addi	sp,sp,56
   87db4:	f800283a 	ret
   87db8:	008000c4 	movi	r2,3
   87dbc:	00c00f04 	movi	r3,60
   87dc0:	002f883a 	mov	r23,zero
   87dc4:	202d883a 	mov	r22,r4
   87dc8:	d8800015 	stw	r2,0(sp)
   87dcc:	d8c00215 	stw	r3,8(sp)
   87dd0:	d9000315 	stw	r4,12(sp)
   87dd4:	ddc00415 	stw	r23,16(sp)
   87dd8:	0087f780 	call	87f78 <__clzsi2>
   87ddc:	12400744 	addi	r9,r2,29
   87de0:	48000b16 	blt	r9,zero,87e10 <__floatunsidf+0xc4>
   87de4:	483fe726 	beq	r9,zero,87d84 <__floatunsidf+0x38>
   87de8:	10bfff44 	addi	r2,r2,-3
   87dec:	10002e16 	blt	r2,zero,87ea8 <__floatunsidf+0x15c>
   87df0:	b0a2983a 	sll	r17,r22,r2
   87df4:	0021883a 	mov	r16,zero
   87df8:	d8800217 	ldw	r2,8(sp)
   87dfc:	dc400415 	stw	r17,16(sp)
   87e00:	dc000315 	stw	r16,12(sp)
   87e04:	1245c83a 	sub	r2,r2,r9
   87e08:	d8800215 	stw	r2,8(sp)
   87e0c:	003fdd06 	br	87d84 <__floatunsidf+0x38>
   87e10:	0255c83a 	sub	r10,zero,r9
   87e14:	51bff804 	addi	r6,r10,-32
   87e18:	30001b16 	blt	r6,zero,87e88 <__floatunsidf+0x13c>
   87e1c:	b9a8d83a 	srl	r20,r23,r6
   87e20:	002b883a 	mov	r21,zero
   87e24:	000f883a 	mov	r7,zero
   87e28:	01000044 	movi	r4,1
   87e2c:	0011883a 	mov	r8,zero
   87e30:	30002516 	blt	r6,zero,87ec8 <__floatunsidf+0x17c>
   87e34:	21a6983a 	sll	r19,r4,r6
   87e38:	0025883a 	mov	r18,zero
   87e3c:	00bfffc4 	movi	r2,-1
   87e40:	9089883a 	add	r4,r18,r2
   87e44:	988b883a 	add	r5,r19,r2
   87e48:	248d803a 	cmpltu	r6,r4,r18
   87e4c:	314b883a 	add	r5,r6,r5
   87e50:	b104703a 	and	r2,r22,r4
   87e54:	b946703a 	and	r3,r23,r5
   87e58:	10c4b03a 	or	r2,r2,r3
   87e5c:	10000226 	beq	r2,zero,87e68 <__floatunsidf+0x11c>
   87e60:	01c00044 	movi	r7,1
   87e64:	0011883a 	mov	r8,zero
   87e68:	d9000217 	ldw	r4,8(sp)
   87e6c:	a1c4b03a 	or	r2,r20,r7
   87e70:	aa06b03a 	or	r3,r21,r8
   87e74:	2249c83a 	sub	r4,r4,r9
   87e78:	d8c00415 	stw	r3,16(sp)
   87e7c:	d9000215 	stw	r4,8(sp)
   87e80:	d8800315 	stw	r2,12(sp)
   87e84:	003fbf06 	br	87d84 <__floatunsidf+0x38>
   87e88:	bdc7883a 	add	r3,r23,r23
   87e8c:	008007c4 	movi	r2,31
   87e90:	1285c83a 	sub	r2,r2,r10
   87e94:	1886983a 	sll	r3,r3,r2
   87e98:	b2a8d83a 	srl	r20,r22,r10
   87e9c:	baaad83a 	srl	r21,r23,r10
   87ea0:	1d28b03a 	or	r20,r3,r20
   87ea4:	003fdf06 	br	87e24 <__floatunsidf+0xd8>
   87ea8:	b006d07a 	srli	r3,r22,1
   87eac:	008007c4 	movi	r2,31
   87eb0:	1245c83a 	sub	r2,r2,r9
   87eb4:	1886d83a 	srl	r3,r3,r2
   87eb8:	ba62983a 	sll	r17,r23,r9
   87ebc:	b260983a 	sll	r16,r22,r9
   87ec0:	1c62b03a 	or	r17,r3,r17
   87ec4:	003fcc06 	br	87df8 <__floatunsidf+0xac>
   87ec8:	2006d07a 	srli	r3,r4,1
   87ecc:	008007c4 	movi	r2,31
   87ed0:	1285c83a 	sub	r2,r2,r10
   87ed4:	18a6d83a 	srl	r19,r3,r2
   87ed8:	22a4983a 	sll	r18,r4,r10
   87edc:	003fd706 	br	87e3c <__floatunsidf+0xf0>

00087ee0 <__muldi3>:
   87ee0:	2011883a 	mov	r8,r4
   87ee4:	427fffcc 	andi	r9,r8,65535
   87ee8:	4018d43a 	srli	r12,r8,16
   87eec:	32bfffcc 	andi	r10,r6,65535
   87ef0:	3016d43a 	srli	r11,r6,16
   87ef4:	4a85383a 	mul	r2,r9,r10
   87ef8:	6295383a 	mul	r10,r12,r10
   87efc:	4ad3383a 	mul	r9,r9,r11
   87f00:	113fffcc 	andi	r4,r2,65535
   87f04:	1004d43a 	srli	r2,r2,16
   87f08:	4a93883a 	add	r9,r9,r10
   87f0c:	3807883a 	mov	r3,r7
   87f10:	1245883a 	add	r2,r2,r9
   87f14:	280f883a 	mov	r7,r5
   87f18:	180b883a 	mov	r5,r3
   87f1c:	1006943a 	slli	r3,r2,16
   87f20:	defffd04 	addi	sp,sp,-12
   87f24:	dc800215 	stw	r18,8(sp)
   87f28:	1907883a 	add	r3,r3,r4
   87f2c:	dc400115 	stw	r17,4(sp)
   87f30:	dc000015 	stw	r16,0(sp)
   87f34:	4165383a 	mul	r18,r8,r5
   87f38:	31e3383a 	mul	r17,r6,r7
   87f3c:	1012d43a 	srli	r9,r2,16
   87f40:	62d9383a 	mul	r12,r12,r11
   87f44:	181f883a 	mov	r15,r3
   87f48:	1280022e 	bgeu	r2,r10,87f54 <__muldi3+0x74>
   87f4c:	00800074 	movhi	r2,1
   87f50:	6099883a 	add	r12,r12,r2
   87f54:	624d883a 	add	r6,r12,r9
   87f58:	9187883a 	add	r3,r18,r6
   87f5c:	88c7883a 	add	r3,r17,r3
   87f60:	7805883a 	mov	r2,r15
   87f64:	dc800217 	ldw	r18,8(sp)
   87f68:	dc400117 	ldw	r17,4(sp)
   87f6c:	dc000017 	ldw	r16,0(sp)
   87f70:	dec00304 	addi	sp,sp,12
   87f74:	f800283a 	ret

00087f78 <__clzsi2>:
   87f78:	00bfffd4 	movui	r2,65535
   87f7c:	11000e36 	bltu	r2,r4,87fb8 <__clzsi2+0x40>
   87f80:	00803fc4 	movi	r2,255
   87f84:	01400204 	movi	r5,8
   87f88:	0007883a 	mov	r3,zero
   87f8c:	11001036 	bltu	r2,r4,87fd0 <__clzsi2+0x58>
   87f90:	000b883a 	mov	r5,zero
   87f94:	20c6d83a 	srl	r3,r4,r3
   87f98:	00800274 	movhi	r2,9
   87f9c:	108e8604 	addi	r2,r2,14872
   87fa0:	1887883a 	add	r3,r3,r2
   87fa4:	18800003 	ldbu	r2,0(r3)
   87fa8:	00c00804 	movi	r3,32
   87fac:	2885883a 	add	r2,r5,r2
   87fb0:	1885c83a 	sub	r2,r3,r2
   87fb4:	f800283a 	ret
   87fb8:	01400404 	movi	r5,16
   87fbc:	00804034 	movhi	r2,256
   87fc0:	10bfffc4 	addi	r2,r2,-1
   87fc4:	2807883a 	mov	r3,r5
   87fc8:	113ff22e 	bgeu	r2,r4,87f94 <__clzsi2+0x1c>
   87fcc:	01400604 	movi	r5,24
   87fd0:	2807883a 	mov	r3,r5
   87fd4:	20c6d83a 	srl	r3,r4,r3
   87fd8:	00800274 	movhi	r2,9
   87fdc:	108e8604 	addi	r2,r2,14872
   87fe0:	1887883a 	add	r3,r3,r2
   87fe4:	18800003 	ldbu	r2,0(r3)
   87fe8:	00c00804 	movi	r3,32
   87fec:	2885883a 	add	r2,r5,r2
   87ff0:	1885c83a 	sub	r2,r3,r2
   87ff4:	f800283a 	ret

00087ff8 <__pack_f>:
   87ff8:	20c00017 	ldw	r3,0(r4)
   87ffc:	01c00044 	movi	r7,1
   88000:	21800317 	ldw	r6,12(r4)
   88004:	21400117 	ldw	r5,4(r4)
   88008:	38c02d2e 	bgeu	r7,r3,880c0 <__pack_f+0xc8>
   8800c:	00800104 	movi	r2,4
   88010:	18802826 	beq	r3,r2,880b4 <__pack_f+0xbc>
   88014:	00800084 	movi	r2,2
   88018:	18800126 	beq	r3,r2,88020 <__pack_f+0x28>
   8801c:	3000101e 	bne	r6,zero,88060 <__pack_f+0x68>
   88020:	000d883a 	mov	r6,zero
   88024:	0007883a 	mov	r3,zero
   88028:	19003fcc 	andi	r4,r3,255
   8802c:	200895fa 	slli	r4,r4,23
   88030:	00c02034 	movhi	r3,128
   88034:	18ffffc4 	addi	r3,r3,-1
   88038:	30c6703a 	and	r3,r6,r3
   8803c:	10a0002c 	andhi	r2,r2,32768
   88040:	10c4b03a 	or	r2,r2,r3
   88044:	280a97fa 	slli	r5,r5,31
   88048:	1104b03a 	or	r2,r2,r4
   8804c:	00e00034 	movhi	r3,32768
   88050:	18ffffc4 	addi	r3,r3,-1
   88054:	10c4703a 	and	r2,r2,r3
   88058:	1144b03a 	or	r2,r2,r5
   8805c:	f800283a 	ret
   88060:	21000217 	ldw	r4,8(r4)
   88064:	00bfe084 	movi	r2,-126
   88068:	20801b16 	blt	r4,r2,880d8 <__pack_f+0xe0>
   8806c:	00801fc4 	movi	r2,127
   88070:	11001016 	blt	r2,r4,880b4 <__pack_f+0xbc>
   88074:	308e703a 	and	r7,r6,r2
   88078:	2087883a 	add	r3,r4,r2
   8807c:	00801004 	movi	r2,64
   88080:	38800526 	beq	r7,r2,88098 <__pack_f+0xa0>
   88084:	31800fc4 	addi	r6,r6,63
   88088:	30000716 	blt	r6,zero,880a8 <__pack_f+0xb0>
   8808c:	300490ba 	slli	r2,r6,2
   88090:	100cd27a 	srli	r6,r2,9
   88094:	003fe406 	br	88028 <__pack_f+0x30>
   88098:	3080200c 	andi	r2,r6,128
   8809c:	103ffa26 	beq	r2,zero,88088 <__pack_f+0x90>
   880a0:	31cd883a 	add	r6,r6,r7
   880a4:	003ff806 	br	88088 <__pack_f+0x90>
   880a8:	300cd07a 	srli	r6,r6,1
   880ac:	18c00044 	addi	r3,r3,1
   880b0:	003ff606 	br	8808c <__pack_f+0x94>
   880b4:	000d883a 	mov	r6,zero
   880b8:	00ffffc4 	movi	r3,-1
   880bc:	003fda06 	br	88028 <__pack_f+0x30>
   880c0:	31800434 	orhi	r6,r6,16
   880c4:	00802034 	movhi	r2,128
   880c8:	10bfffc4 	addi	r2,r2,-1
   880cc:	308c703a 	and	r6,r6,r2
   880d0:	00ffffc4 	movi	r3,-1
   880d4:	003fd406 	br	88028 <__pack_f+0x30>
   880d8:	1109c83a 	sub	r4,r2,r4
   880dc:	00800644 	movi	r2,25
   880e0:	11001216 	blt	r2,r4,8812c <__pack_f+0x134>
   880e4:	3904983a 	sll	r2,r7,r4
   880e8:	3106d83a 	srl	r3,r6,r4
   880ec:	10bfffc4 	addi	r2,r2,-1
   880f0:	3084703a 	and	r2,r6,r2
   880f4:	1004c03a 	cmpne	r2,r2,zero
   880f8:	1886b03a 	or	r3,r3,r2
   880fc:	19001fcc 	andi	r4,r3,127
   88100:	00801004 	movi	r2,64
   88104:	20800c26 	beq	r4,r2,88138 <__pack_f+0x140>
   88108:	18c00fc4 	addi	r3,r3,63
   8810c:	00900034 	movhi	r2,16384
   88110:	10bfffc4 	addi	r2,r2,-1
   88114:	180cd1fa 	srli	r6,r3,7
   88118:	10c7803a 	cmpltu	r3,r2,r3
   8811c:	00802034 	movhi	r2,128
   88120:	10bfffc4 	addi	r2,r2,-1
   88124:	308c703a 	and	r6,r6,r2
   88128:	003fbf06 	br	88028 <__pack_f+0x30>
   8812c:	0007883a 	mov	r3,zero
   88130:	000d883a 	mov	r6,zero
   88134:	003ff906 	br	8811c <__pack_f+0x124>
   88138:	1880200c 	andi	r2,r3,128
   8813c:	10000126 	beq	r2,zero,88144 <__pack_f+0x14c>
   88140:	1907883a 	add	r3,r3,r4
   88144:	180cd1fa 	srli	r6,r3,7
   88148:	00900034 	movhi	r2,16384
   8814c:	10bfffc4 	addi	r2,r2,-1
   88150:	10c7803a 	cmpltu	r3,r2,r3
   88154:	003ff106 	br	8811c <__pack_f+0x124>

00088158 <__unpack_f>:
   88158:	21800017 	ldw	r6,0(r4)
   8815c:	00c02034 	movhi	r3,128
   88160:	18ffffc4 	addi	r3,r3,-1
   88164:	3004d5fa 	srli	r2,r6,23
   88168:	3008d7fa 	srli	r4,r6,31
   8816c:	30ce703a 	and	r7,r6,r3
   88170:	10c03fcc 	andi	r3,r2,255
   88174:	29000115 	stw	r4,4(r5)
   88178:	1800131e 	bne	r3,zero,881c8 <__unpack_f+0x70>
   8817c:	38000f26 	beq	r7,zero,881bc <__unpack_f+0x64>
   88180:	380691fa 	slli	r3,r7,7
   88184:	01bfe084 	movi	r6,-126
   88188:	008000c4 	movi	r2,3
   8818c:	01100034 	movhi	r4,16384
   88190:	213fffc4 	addi	r4,r4,-1
   88194:	28800015 	stw	r2,0(r5)
   88198:	29800215 	stw	r6,8(r5)
   8819c:	20c00536 	bltu	r4,r3,881b4 <__unpack_f+0x5c>
   881a0:	3005883a 	mov	r2,r6
   881a4:	18c7883a 	add	r3,r3,r3
   881a8:	10bfffc4 	addi	r2,r2,-1
   881ac:	20fffd2e 	bgeu	r4,r3,881a4 <__unpack_f+0x4c>
   881b0:	28800215 	stw	r2,8(r5)
   881b4:	28c00315 	stw	r3,12(r5)
   881b8:	f800283a 	ret
   881bc:	00800084 	movi	r2,2
   881c0:	28800015 	stw	r2,0(r5)
   881c4:	f800283a 	ret
   881c8:	00803fc4 	movi	r2,255
   881cc:	18800826 	beq	r3,r2,881f0 <__unpack_f+0x98>
   881d0:	380491fa 	slli	r2,r7,7
   881d4:	18ffe044 	addi	r3,r3,-127
   881d8:	28c00215 	stw	r3,8(r5)
   881dc:	10900034 	orhi	r2,r2,16384
   881e0:	28800315 	stw	r2,12(r5)
   881e4:	008000c4 	movi	r2,3
   881e8:	28800015 	stw	r2,0(r5)
   881ec:	f800283a 	ret
   881f0:	3800031e 	bne	r7,zero,88200 <__unpack_f+0xa8>
   881f4:	00800104 	movi	r2,4
   881f8:	28800015 	stw	r2,0(r5)
   881fc:	f800283a 	ret
   88200:	3080042c 	andhi	r2,r6,16
   88204:	10000426 	beq	r2,zero,88218 <__unpack_f+0xc0>
   88208:	00800044 	movi	r2,1
   8820c:	28800015 	stw	r2,0(r5)
   88210:	29c00315 	stw	r7,12(r5)
   88214:	f800283a 	ret
   88218:	28000015 	stw	zero,0(r5)
   8821c:	003ffc06 	br	88210 <__unpack_f+0xb8>

00088220 <__fpcmp_parts_f>:
   88220:	21800017 	ldw	r6,0(r4)
   88224:	00c00044 	movi	r3,1
   88228:	19800a2e 	bgeu	r3,r6,88254 <__fpcmp_parts_f+0x34>
   8822c:	28800017 	ldw	r2,0(r5)
   88230:	1880082e 	bgeu	r3,r2,88254 <__fpcmp_parts_f+0x34>
   88234:	00c00104 	movi	r3,4
   88238:	30c01e26 	beq	r6,r3,882b4 <__fpcmp_parts_f+0x94>
   8823c:	10c01a26 	beq	r2,r3,882a8 <__fpcmp_parts_f+0x88>
   88240:	00c00084 	movi	r3,2
   88244:	30c00526 	beq	r6,r3,8825c <__fpcmp_parts_f+0x3c>
   88248:	10c0071e 	bne	r2,r3,88268 <__fpcmp_parts_f+0x48>
   8824c:	20800117 	ldw	r2,4(r4)
   88250:	1000091e 	bne	r2,zero,88278 <__fpcmp_parts_f+0x58>
   88254:	00800044 	movi	r2,1
   88258:	f800283a 	ret
   8825c:	10c0121e 	bne	r2,r3,882a8 <__fpcmp_parts_f+0x88>
   88260:	0005883a 	mov	r2,zero
   88264:	f800283a 	ret
   88268:	20c00117 	ldw	r3,4(r4)
   8826c:	28800117 	ldw	r2,4(r5)
   88270:	18800326 	beq	r3,r2,88280 <__fpcmp_parts_f+0x60>
   88274:	183ff726 	beq	r3,zero,88254 <__fpcmp_parts_f+0x34>
   88278:	00bfffc4 	movi	r2,-1
   8827c:	f800283a 	ret
   88280:	21800217 	ldw	r6,8(r4)
   88284:	28800217 	ldw	r2,8(r5)
   88288:	11bffa16 	blt	r2,r6,88274 <__fpcmp_parts_f+0x54>
   8828c:	30800416 	blt	r6,r2,882a0 <__fpcmp_parts_f+0x80>
   88290:	21000317 	ldw	r4,12(r4)
   88294:	29400317 	ldw	r5,12(r5)
   88298:	293ff636 	bltu	r5,r4,88274 <__fpcmp_parts_f+0x54>
   8829c:	217ff02e 	bgeu	r4,r5,88260 <__fpcmp_parts_f+0x40>
   882a0:	183fec1e 	bne	r3,zero,88254 <__fpcmp_parts_f+0x34>
   882a4:	003ff406 	br	88278 <__fpcmp_parts_f+0x58>
   882a8:	28800117 	ldw	r2,4(r5)
   882ac:	103fe91e 	bne	r2,zero,88254 <__fpcmp_parts_f+0x34>
   882b0:	003ff106 	br	88278 <__fpcmp_parts_f+0x58>
   882b4:	11bfe51e 	bne	r2,r6,8824c <__fpcmp_parts_f+0x2c>
   882b8:	28c00117 	ldw	r3,4(r5)
   882bc:	20800117 	ldw	r2,4(r4)
   882c0:	1885c83a 	sub	r2,r3,r2
   882c4:	f800283a 	ret

000882c8 <__make_fp>:
   882c8:	defffb04 	addi	sp,sp,-20
   882cc:	d9000015 	stw	r4,0(sp)
   882d0:	d809883a 	mov	r4,sp
   882d4:	dfc00415 	stw	ra,16(sp)
   882d8:	d9400115 	stw	r5,4(sp)
   882dc:	d9800215 	stw	r6,8(sp)
   882e0:	d9c00315 	stw	r7,12(sp)
   882e4:	0087ff80 	call	87ff8 <__pack_f>
   882e8:	dfc00417 	ldw	ra,16(sp)
   882ec:	dec00504 	addi	sp,sp,20
   882f0:	f800283a 	ret

000882f4 <__pack_d>:
   882f4:	20c00017 	ldw	r3,0(r4)
   882f8:	defffd04 	addi	sp,sp,-12
   882fc:	dc000015 	stw	r16,0(sp)
   88300:	dc800215 	stw	r18,8(sp)
   88304:	dc400115 	stw	r17,4(sp)
   88308:	00800044 	movi	r2,1
   8830c:	22000317 	ldw	r8,12(r4)
   88310:	001f883a 	mov	r15,zero
   88314:	22400417 	ldw	r9,16(r4)
   88318:	24000117 	ldw	r16,4(r4)
   8831c:	10c0552e 	bgeu	r2,r3,88474 <__pack_d+0x180>
   88320:	00800104 	movi	r2,4
   88324:	18804f26 	beq	r3,r2,88464 <__pack_d+0x170>
   88328:	00800084 	movi	r2,2
   8832c:	18800226 	beq	r3,r2,88338 <__pack_d+0x44>
   88330:	4244b03a 	or	r2,r8,r9
   88334:	10001a1e 	bne	r2,zero,883a0 <__pack_d+0xac>
   88338:	000d883a 	mov	r6,zero
   8833c:	000f883a 	mov	r7,zero
   88340:	0011883a 	mov	r8,zero
   88344:	00800434 	movhi	r2,16
   88348:	10bfffc4 	addi	r2,r2,-1
   8834c:	301d883a 	mov	r14,r6
   88350:	3884703a 	and	r2,r7,r2
   88354:	400a953a 	slli	r5,r8,20
   88358:	79bffc2c 	andhi	r6,r15,65520
   8835c:	308cb03a 	or	r6,r6,r2
   88360:	00e00434 	movhi	r3,32784
   88364:	18ffffc4 	addi	r3,r3,-1
   88368:	800497fa 	slli	r2,r16,31
   8836c:	30c6703a 	and	r3,r6,r3
   88370:	1946b03a 	or	r3,r3,r5
   88374:	01600034 	movhi	r5,32768
   88378:	297fffc4 	addi	r5,r5,-1
   8837c:	194a703a 	and	r5,r3,r5
   88380:	288ab03a 	or	r5,r5,r2
   88384:	2807883a 	mov	r3,r5
   88388:	7005883a 	mov	r2,r14
   8838c:	dc800217 	ldw	r18,8(sp)
   88390:	dc400117 	ldw	r17,4(sp)
   88394:	dc000017 	ldw	r16,0(sp)
   88398:	dec00304 	addi	sp,sp,12
   8839c:	f800283a 	ret
   883a0:	21000217 	ldw	r4,8(r4)
   883a4:	00bf0084 	movi	r2,-1022
   883a8:	20803f16 	blt	r4,r2,884a8 <__pack_d+0x1b4>
   883ac:	0080ffc4 	movi	r2,1023
   883b0:	11002c16 	blt	r2,r4,88464 <__pack_d+0x170>
   883b4:	00803fc4 	movi	r2,255
   883b8:	408c703a 	and	r6,r8,r2
   883bc:	00802004 	movi	r2,128
   883c0:	0007883a 	mov	r3,zero
   883c4:	000f883a 	mov	r7,zero
   883c8:	2280ffc4 	addi	r10,r4,1023
   883cc:	30801e26 	beq	r6,r2,88448 <__pack_d+0x154>
   883d0:	00801fc4 	movi	r2,127
   883d4:	4089883a 	add	r4,r8,r2
   883d8:	220d803a 	cmpltu	r6,r4,r8
   883dc:	324d883a 	add	r6,r6,r9
   883e0:	2011883a 	mov	r8,r4
   883e4:	3013883a 	mov	r9,r6
   883e8:	00880034 	movhi	r2,8192
   883ec:	10bfffc4 	addi	r2,r2,-1
   883f0:	12400d36 	bltu	r2,r9,88428 <__pack_d+0x134>
   883f4:	4804963a 	slli	r2,r9,24
   883f8:	400cd23a 	srli	r6,r8,8
   883fc:	480ed23a 	srli	r7,r9,8
   88400:	013fffc4 	movi	r4,-1
   88404:	118cb03a 	or	r6,r2,r6
   88408:	01400434 	movhi	r5,16
   8840c:	297fffc4 	addi	r5,r5,-1
   88410:	3104703a 	and	r2,r6,r4
   88414:	3946703a 	and	r3,r7,r5
   88418:	5201ffcc 	andi	r8,r10,2047
   8841c:	100d883a 	mov	r6,r2
   88420:	180f883a 	mov	r7,r3
   88424:	003fc706 	br	88344 <__pack_d+0x50>
   88428:	480897fa 	slli	r4,r9,31
   8842c:	4004d07a 	srli	r2,r8,1
   88430:	4806d07a 	srli	r3,r9,1
   88434:	52800044 	addi	r10,r10,1
   88438:	2084b03a 	or	r2,r4,r2
   8843c:	1011883a 	mov	r8,r2
   88440:	1813883a 	mov	r9,r3
   88444:	003feb06 	br	883f4 <__pack_d+0x100>
   88448:	383fe11e 	bne	r7,zero,883d0 <__pack_d+0xdc>
   8844c:	01004004 	movi	r4,256
   88450:	4104703a 	and	r2,r8,r4
   88454:	10c4b03a 	or	r2,r2,r3
   88458:	103fe326 	beq	r2,zero,883e8 <__pack_d+0xf4>
   8845c:	3005883a 	mov	r2,r6
   88460:	003fdc06 	br	883d4 <__pack_d+0xe0>
   88464:	000d883a 	mov	r6,zero
   88468:	000f883a 	mov	r7,zero
   8846c:	0201ffc4 	movi	r8,2047
   88470:	003fb406 	br	88344 <__pack_d+0x50>
   88474:	0005883a 	mov	r2,zero
   88478:	00c00234 	movhi	r3,8
   8847c:	408cb03a 	or	r6,r8,r2
   88480:	48ceb03a 	or	r7,r9,r3
   88484:	013fffc4 	movi	r4,-1
   88488:	01400434 	movhi	r5,16
   8848c:	297fffc4 	addi	r5,r5,-1
   88490:	3104703a 	and	r2,r6,r4
   88494:	3946703a 	and	r3,r7,r5
   88498:	100d883a 	mov	r6,r2
   8849c:	180f883a 	mov	r7,r3
   884a0:	0201ffc4 	movi	r8,2047
   884a4:	003fa706 	br	88344 <__pack_d+0x50>
   884a8:	1109c83a 	sub	r4,r2,r4
   884ac:	00800e04 	movi	r2,56
   884b0:	11004316 	blt	r2,r4,885c0 <__pack_d+0x2cc>
   884b4:	21fff804 	addi	r7,r4,-32
   884b8:	38004516 	blt	r7,zero,885d0 <__pack_d+0x2dc>
   884bc:	49d8d83a 	srl	r12,r9,r7
   884c0:	001b883a 	mov	r13,zero
   884c4:	0023883a 	mov	r17,zero
   884c8:	01400044 	movi	r5,1
   884cc:	0025883a 	mov	r18,zero
   884d0:	38004716 	blt	r7,zero,885f0 <__pack_d+0x2fc>
   884d4:	29d6983a 	sll	r11,r5,r7
   884d8:	0015883a 	mov	r10,zero
   884dc:	00bfffc4 	movi	r2,-1
   884e0:	5089883a 	add	r4,r10,r2
   884e4:	588b883a 	add	r5,r11,r2
   884e8:	228d803a 	cmpltu	r6,r4,r10
   884ec:	314b883a 	add	r5,r6,r5
   884f0:	4104703a 	and	r2,r8,r4
   884f4:	4946703a 	and	r3,r9,r5
   884f8:	10c4b03a 	or	r2,r2,r3
   884fc:	10000226 	beq	r2,zero,88508 <__pack_d+0x214>
   88500:	04400044 	movi	r17,1
   88504:	0025883a 	mov	r18,zero
   88508:	00803fc4 	movi	r2,255
   8850c:	644eb03a 	or	r7,r12,r17
   88510:	3892703a 	and	r9,r7,r2
   88514:	00802004 	movi	r2,128
   88518:	6c90b03a 	or	r8,r13,r18
   8851c:	0015883a 	mov	r10,zero
   88520:	48801626 	beq	r9,r2,8857c <__pack_d+0x288>
   88524:	01001fc4 	movi	r4,127
   88528:	3905883a 	add	r2,r7,r4
   8852c:	11cd803a 	cmpltu	r6,r2,r7
   88530:	320d883a 	add	r6,r6,r8
   88534:	100f883a 	mov	r7,r2
   88538:	00840034 	movhi	r2,4096
   8853c:	10bfffc4 	addi	r2,r2,-1
   88540:	3011883a 	mov	r8,r6
   88544:	0007883a 	mov	r3,zero
   88548:	11801b36 	bltu	r2,r6,885b8 <__pack_d+0x2c4>
   8854c:	4004963a 	slli	r2,r8,24
   88550:	3808d23a 	srli	r4,r7,8
   88554:	400ad23a 	srli	r5,r8,8
   88558:	1813883a 	mov	r9,r3
   8855c:	1108b03a 	or	r4,r2,r4
   88560:	00bfffc4 	movi	r2,-1
   88564:	00c00434 	movhi	r3,16
   88568:	18ffffc4 	addi	r3,r3,-1
   8856c:	208c703a 	and	r6,r4,r2
   88570:	28ce703a 	and	r7,r5,r3
   88574:	4a01ffcc 	andi	r8,r9,2047
   88578:	003f7206 	br	88344 <__pack_d+0x50>
   8857c:	503fe91e 	bne	r10,zero,88524 <__pack_d+0x230>
   88580:	01004004 	movi	r4,256
   88584:	3904703a 	and	r2,r7,r4
   88588:	0007883a 	mov	r3,zero
   8858c:	10c4b03a 	or	r2,r2,r3
   88590:	10000626 	beq	r2,zero,885ac <__pack_d+0x2b8>
   88594:	3a45883a 	add	r2,r7,r9
   88598:	11cd803a 	cmpltu	r6,r2,r7
   8859c:	320d883a 	add	r6,r6,r8
   885a0:	100f883a 	mov	r7,r2
   885a4:	3011883a 	mov	r8,r6
   885a8:	0007883a 	mov	r3,zero
   885ac:	00840034 	movhi	r2,4096
   885b0:	10bfffc4 	addi	r2,r2,-1
   885b4:	123fe52e 	bgeu	r2,r8,8854c <__pack_d+0x258>
   885b8:	00c00044 	movi	r3,1
   885bc:	003fe306 	br	8854c <__pack_d+0x258>
   885c0:	0009883a 	mov	r4,zero
   885c4:	0013883a 	mov	r9,zero
   885c8:	000b883a 	mov	r5,zero
   885cc:	003fe406 	br	88560 <__pack_d+0x26c>
   885d0:	4a47883a 	add	r3,r9,r9
   885d4:	008007c4 	movi	r2,31
   885d8:	1105c83a 	sub	r2,r2,r4
   885dc:	1886983a 	sll	r3,r3,r2
   885e0:	4118d83a 	srl	r12,r8,r4
   885e4:	491ad83a 	srl	r13,r9,r4
   885e8:	1b18b03a 	or	r12,r3,r12
   885ec:	003fb506 	br	884c4 <__pack_d+0x1d0>
   885f0:	2806d07a 	srli	r3,r5,1
   885f4:	008007c4 	movi	r2,31
   885f8:	1105c83a 	sub	r2,r2,r4
   885fc:	1896d83a 	srl	r11,r3,r2
   88600:	2914983a 	sll	r10,r5,r4
   88604:	003fb506 	br	884dc <__pack_d+0x1e8>

00088608 <__unpack_d>:
   88608:	20c00117 	ldw	r3,4(r4)
   8860c:	22400017 	ldw	r9,0(r4)
   88610:	00800434 	movhi	r2,16
   88614:	10bfffc4 	addi	r2,r2,-1
   88618:	1808d53a 	srli	r4,r3,20
   8861c:	180cd7fa 	srli	r6,r3,31
   88620:	1894703a 	and	r10,r3,r2
   88624:	2201ffcc 	andi	r8,r4,2047
   88628:	281b883a 	mov	r13,r5
   8862c:	4817883a 	mov	r11,r9
   88630:	29800115 	stw	r6,4(r5)
   88634:	5019883a 	mov	r12,r10
   88638:	40001e1e 	bne	r8,zero,886b4 <__unpack_d+0xac>
   8863c:	4a84b03a 	or	r2,r9,r10
   88640:	10001926 	beq	r2,zero,886a8 <__unpack_d+0xa0>
   88644:	4804d63a 	srli	r2,r9,24
   88648:	500c923a 	slli	r6,r10,8
   8864c:	013f0084 	movi	r4,-1022
   88650:	00c40034 	movhi	r3,4096
   88654:	18ffffc4 	addi	r3,r3,-1
   88658:	118cb03a 	or	r6,r2,r6
   8865c:	008000c4 	movi	r2,3
   88660:	480a923a 	slli	r5,r9,8
   88664:	68800015 	stw	r2,0(r13)
   88668:	69000215 	stw	r4,8(r13)
   8866c:	19800b36 	bltu	r3,r6,8869c <__unpack_d+0x94>
   88670:	200f883a 	mov	r7,r4
   88674:	1811883a 	mov	r8,r3
   88678:	2945883a 	add	r2,r5,r5
   8867c:	1149803a 	cmpltu	r4,r2,r5
   88680:	3187883a 	add	r3,r6,r6
   88684:	20c9883a 	add	r4,r4,r3
   88688:	100b883a 	mov	r5,r2
   8868c:	200d883a 	mov	r6,r4
   88690:	39ffffc4 	addi	r7,r7,-1
   88694:	413ff82e 	bgeu	r8,r4,88678 <__unpack_d+0x70>
   88698:	69c00215 	stw	r7,8(r13)
   8869c:	69800415 	stw	r6,16(r13)
   886a0:	69400315 	stw	r5,12(r13)
   886a4:	f800283a 	ret
   886a8:	00800084 	movi	r2,2
   886ac:	28800015 	stw	r2,0(r5)
   886b0:	f800283a 	ret
   886b4:	0081ffc4 	movi	r2,2047
   886b8:	40800f26 	beq	r8,r2,886f8 <__unpack_d+0xf0>
   886bc:	480cd63a 	srli	r6,r9,24
   886c0:	5006923a 	slli	r3,r10,8
   886c4:	4804923a 	slli	r2,r9,8
   886c8:	0009883a 	mov	r4,zero
   886cc:	30c6b03a 	or	r3,r6,r3
   886d0:	01440034 	movhi	r5,4096
   886d4:	110cb03a 	or	r6,r2,r4
   886d8:	423f0044 	addi	r8,r8,-1023
   886dc:	194eb03a 	or	r7,r3,r5
   886e0:	008000c4 	movi	r2,3
   886e4:	69c00415 	stw	r7,16(r13)
   886e8:	6a000215 	stw	r8,8(r13)
   886ec:	68800015 	stw	r2,0(r13)
   886f0:	69800315 	stw	r6,12(r13)
   886f4:	f800283a 	ret
   886f8:	4a84b03a 	or	r2,r9,r10
   886fc:	1000031e 	bne	r2,zero,8870c <__unpack_d+0x104>
   88700:	00800104 	movi	r2,4
   88704:	28800015 	stw	r2,0(r5)
   88708:	f800283a 	ret
   8870c:	0009883a 	mov	r4,zero
   88710:	01400234 	movhi	r5,8
   88714:	4904703a 	and	r2,r9,r4
   88718:	5146703a 	and	r3,r10,r5
   8871c:	10c4b03a 	or	r2,r2,r3
   88720:	10000526 	beq	r2,zero,88738 <__unpack_d+0x130>
   88724:	00800044 	movi	r2,1
   88728:	68800015 	stw	r2,0(r13)
   8872c:	6b000415 	stw	r12,16(r13)
   88730:	6ac00315 	stw	r11,12(r13)
   88734:	f800283a 	ret
   88738:	68000015 	stw	zero,0(r13)
   8873c:	003ffb06 	br	8872c <__unpack_d+0x124>

00088740 <__fpcmp_parts_d>:
   88740:	21800017 	ldw	r6,0(r4)
   88744:	00c00044 	movi	r3,1
   88748:	19800a2e 	bgeu	r3,r6,88774 <__fpcmp_parts_d+0x34>
   8874c:	28800017 	ldw	r2,0(r5)
   88750:	1880082e 	bgeu	r3,r2,88774 <__fpcmp_parts_d+0x34>
   88754:	00c00104 	movi	r3,4
   88758:	30c02626 	beq	r6,r3,887f4 <__fpcmp_parts_d+0xb4>
   8875c:	10c02226 	beq	r2,r3,887e8 <__fpcmp_parts_d+0xa8>
   88760:	00c00084 	movi	r3,2
   88764:	30c00526 	beq	r6,r3,8877c <__fpcmp_parts_d+0x3c>
   88768:	10c0071e 	bne	r2,r3,88788 <__fpcmp_parts_d+0x48>
   8876c:	20800117 	ldw	r2,4(r4)
   88770:	1000091e 	bne	r2,zero,88798 <__fpcmp_parts_d+0x58>
   88774:	00800044 	movi	r2,1
   88778:	f800283a 	ret
   8877c:	10c01a1e 	bne	r2,r3,887e8 <__fpcmp_parts_d+0xa8>
   88780:	0005883a 	mov	r2,zero
   88784:	f800283a 	ret
   88788:	22000117 	ldw	r8,4(r4)
   8878c:	28800117 	ldw	r2,4(r5)
   88790:	40800326 	beq	r8,r2,887a0 <__fpcmp_parts_d+0x60>
   88794:	403ff726 	beq	r8,zero,88774 <__fpcmp_parts_d+0x34>
   88798:	00bfffc4 	movi	r2,-1
   8879c:	f800283a 	ret
   887a0:	20c00217 	ldw	r3,8(r4)
   887a4:	28800217 	ldw	r2,8(r5)
   887a8:	10fffa16 	blt	r2,r3,88794 <__fpcmp_parts_d+0x54>
   887ac:	18800916 	blt	r3,r2,887d4 <__fpcmp_parts_d+0x94>
   887b0:	21c00417 	ldw	r7,16(r4)
   887b4:	28c00417 	ldw	r3,16(r5)
   887b8:	21800317 	ldw	r6,12(r4)
   887bc:	28800317 	ldw	r2,12(r5)
   887c0:	19fff436 	bltu	r3,r7,88794 <__fpcmp_parts_d+0x54>
   887c4:	38c00526 	beq	r7,r3,887dc <__fpcmp_parts_d+0x9c>
   887c8:	38c00236 	bltu	r7,r3,887d4 <__fpcmp_parts_d+0x94>
   887cc:	19ffec1e 	bne	r3,r7,88780 <__fpcmp_parts_d+0x40>
   887d0:	30bfeb2e 	bgeu	r6,r2,88780 <__fpcmp_parts_d+0x40>
   887d4:	403fe71e 	bne	r8,zero,88774 <__fpcmp_parts_d+0x34>
   887d8:	003fef06 	br	88798 <__fpcmp_parts_d+0x58>
   887dc:	11bffa2e 	bgeu	r2,r6,887c8 <__fpcmp_parts_d+0x88>
   887e0:	403fe426 	beq	r8,zero,88774 <__fpcmp_parts_d+0x34>
   887e4:	003fec06 	br	88798 <__fpcmp_parts_d+0x58>
   887e8:	28800117 	ldw	r2,4(r5)
   887ec:	103fe11e 	bne	r2,zero,88774 <__fpcmp_parts_d+0x34>
   887f0:	003fe906 	br	88798 <__fpcmp_parts_d+0x58>
   887f4:	11bfdd1e 	bne	r2,r6,8876c <__fpcmp_parts_d+0x2c>
   887f8:	28c00117 	ldw	r3,4(r5)
   887fc:	20800117 	ldw	r2,4(r4)
   88800:	1885c83a 	sub	r2,r3,r2
   88804:	f800283a 	ret

00088808 <__errno>:
   88808:	00c002f4 	movhi	r3,11
   8880c:	18c99704 	addi	r3,r3,9820
   88810:	18800017 	ldw	r2,0(r3)
   88814:	f800283a 	ret

00088818 <printf>:
   88818:	defffb04 	addi	sp,sp,-20
   8881c:	dfc00115 	stw	ra,4(sp)
   88820:	d9400215 	stw	r5,8(sp)
   88824:	d9800315 	stw	r6,12(sp)
   88828:	d9c00415 	stw	r7,16(sp)
   8882c:	008002f4 	movhi	r2,11
   88830:	10899704 	addi	r2,r2,9820
   88834:	10c00017 	ldw	r3,0(r2)
   88838:	200b883a 	mov	r5,r4
   8883c:	d8800204 	addi	r2,sp,8
   88840:	19000217 	ldw	r4,8(r3)
   88844:	100d883a 	mov	r6,r2
   88848:	d8800015 	stw	r2,0(sp)
   8884c:	008a8e00 	call	8a8e0 <__vfprintf_internal>
   88850:	dfc00117 	ldw	ra,4(sp)
   88854:	dec00504 	addi	sp,sp,20
   88858:	f800283a 	ret

0008885c <_printf_r>:
   8885c:	defffc04 	addi	sp,sp,-16
   88860:	dfc00115 	stw	ra,4(sp)
   88864:	d9800215 	stw	r6,8(sp)
   88868:	d9c00315 	stw	r7,12(sp)
   8886c:	280d883a 	mov	r6,r5
   88870:	21400217 	ldw	r5,8(r4)
   88874:	d8c00204 	addi	r3,sp,8
   88878:	180f883a 	mov	r7,r3
   8887c:	d8c00015 	stw	r3,0(sp)
   88880:	0088a340 	call	88a34 <___vfprintf_internal_r>
   88884:	dfc00117 	ldw	ra,4(sp)
   88888:	dec00404 	addi	sp,sp,16
   8888c:	f800283a 	ret

00088890 <putchar>:
   88890:	008002f4 	movhi	r2,11
   88894:	10899704 	addi	r2,r2,9820
   88898:	11800017 	ldw	r6,0(r2)
   8889c:	200b883a 	mov	r5,r4
   888a0:	3009883a 	mov	r4,r6
   888a4:	31800217 	ldw	r6,8(r6)
   888a8:	008eee41 	jmpi	8eee4 <_putc_r>

000888ac <_putchar_r>:
   888ac:	21800217 	ldw	r6,8(r4)
   888b0:	008eee41 	jmpi	8eee4 <_putc_r>

000888b4 <_puts_r>:
   888b4:	defff604 	addi	sp,sp,-40
   888b8:	dc400715 	stw	r17,28(sp)
   888bc:	2023883a 	mov	r17,r4
   888c0:	2809883a 	mov	r4,r5
   888c4:	dfc00915 	stw	ra,36(sp)
   888c8:	dcc00815 	stw	r19,32(sp)
   888cc:	2827883a 	mov	r19,r5
   888d0:	00889680 	call	88968 <strlen>
   888d4:	89400217 	ldw	r5,8(r17)
   888d8:	00c00274 	movhi	r3,9
   888dc:	18cec704 	addi	r3,r3,15132
   888e0:	01c00044 	movi	r7,1
   888e4:	12000044 	addi	r8,r2,1
   888e8:	d8c00515 	stw	r3,20(sp)
   888ec:	d9c00615 	stw	r7,24(sp)
   888f0:	d8c00304 	addi	r3,sp,12
   888f4:	01c00084 	movi	r7,2
   888f8:	8809883a 	mov	r4,r17
   888fc:	d80d883a 	mov	r6,sp
   88900:	d8c00015 	stw	r3,0(sp)
   88904:	dcc00315 	stw	r19,12(sp)
   88908:	da000215 	stw	r8,8(sp)
   8890c:	d9c00115 	stw	r7,4(sp)
   88910:	d8800415 	stw	r2,16(sp)
   88914:	008cb3c0 	call	8cb3c <__sfvwrite_r>
   88918:	00ffffc4 	movi	r3,-1
   8891c:	10000626 	beq	r2,zero,88938 <_puts_r+0x84>
   88920:	1805883a 	mov	r2,r3
   88924:	dfc00917 	ldw	ra,36(sp)
   88928:	dcc00817 	ldw	r19,32(sp)
   8892c:	dc400717 	ldw	r17,28(sp)
   88930:	dec00a04 	addi	sp,sp,40
   88934:	f800283a 	ret
   88938:	00c00284 	movi	r3,10
   8893c:	1805883a 	mov	r2,r3
   88940:	dfc00917 	ldw	ra,36(sp)
   88944:	dcc00817 	ldw	r19,32(sp)
   88948:	dc400717 	ldw	r17,28(sp)
   8894c:	dec00a04 	addi	sp,sp,40
   88950:	f800283a 	ret

00088954 <puts>:
   88954:	008002f4 	movhi	r2,11
   88958:	10899704 	addi	r2,r2,9820
   8895c:	200b883a 	mov	r5,r4
   88960:	11000017 	ldw	r4,0(r2)
   88964:	00888b41 	jmpi	888b4 <_puts_r>

00088968 <strlen>:
   88968:	208000cc 	andi	r2,r4,3
   8896c:	2011883a 	mov	r8,r4
   88970:	1000161e 	bne	r2,zero,889cc <strlen+0x64>
   88974:	20c00017 	ldw	r3,0(r4)
   88978:	017fbff4 	movhi	r5,65279
   8897c:	297fbfc4 	addi	r5,r5,-257
   88980:	01e02074 	movhi	r7,32897
   88984:	39e02004 	addi	r7,r7,-32640
   88988:	1945883a 	add	r2,r3,r5
   8898c:	11c4703a 	and	r2,r2,r7
   88990:	00c6303a 	nor	r3,zero,r3
   88994:	1886703a 	and	r3,r3,r2
   88998:	18000c1e 	bne	r3,zero,889cc <strlen+0x64>
   8899c:	280d883a 	mov	r6,r5
   889a0:	380b883a 	mov	r5,r7
   889a4:	21000104 	addi	r4,r4,4
   889a8:	20800017 	ldw	r2,0(r4)
   889ac:	1187883a 	add	r3,r2,r6
   889b0:	1946703a 	and	r3,r3,r5
   889b4:	0084303a 	nor	r2,zero,r2
   889b8:	10c4703a 	and	r2,r2,r3
   889bc:	103ff926 	beq	r2,zero,889a4 <strlen+0x3c>
   889c0:	20800007 	ldb	r2,0(r4)
   889c4:	10000326 	beq	r2,zero,889d4 <strlen+0x6c>
   889c8:	21000044 	addi	r4,r4,1
   889cc:	20800007 	ldb	r2,0(r4)
   889d0:	103ffd1e 	bne	r2,zero,889c8 <strlen+0x60>
   889d4:	2205c83a 	sub	r2,r4,r8
   889d8:	f800283a 	ret

000889dc <__sprint_r>:
   889dc:	30800217 	ldw	r2,8(r6)
   889e0:	defffe04 	addi	sp,sp,-8
   889e4:	dc000015 	stw	r16,0(sp)
   889e8:	dfc00115 	stw	ra,4(sp)
   889ec:	3021883a 	mov	r16,r6
   889f0:	0007883a 	mov	r3,zero
   889f4:	1000061e 	bne	r2,zero,88a10 <__sprint_r+0x34>
   889f8:	1805883a 	mov	r2,r3
   889fc:	30000115 	stw	zero,4(r6)
   88a00:	dfc00117 	ldw	ra,4(sp)
   88a04:	dc000017 	ldw	r16,0(sp)
   88a08:	dec00204 	addi	sp,sp,8
   88a0c:	f800283a 	ret
   88a10:	008cb3c0 	call	8cb3c <__sfvwrite_r>
   88a14:	1007883a 	mov	r3,r2
   88a18:	1805883a 	mov	r2,r3
   88a1c:	80000115 	stw	zero,4(r16)
   88a20:	80000215 	stw	zero,8(r16)
   88a24:	dfc00117 	ldw	ra,4(sp)
   88a28:	dc000017 	ldw	r16,0(sp)
   88a2c:	dec00204 	addi	sp,sp,8
   88a30:	f800283a 	ret

00088a34 <___vfprintf_internal_r>:
   88a34:	defea304 	addi	sp,sp,-1396
   88a38:	dd815915 	stw	r22,1380(sp)
   88a3c:	dc015315 	stw	r16,1356(sp)
   88a40:	d9c15215 	stw	r7,1352(sp)
   88a44:	dfc15c15 	stw	ra,1392(sp)
   88a48:	df015b15 	stw	fp,1388(sp)
   88a4c:	ddc15a15 	stw	r23,1384(sp)
   88a50:	dd415815 	stw	r21,1376(sp)
   88a54:	dd015715 	stw	r20,1372(sp)
   88a58:	dcc15615 	stw	r19,1368(sp)
   88a5c:	dc815515 	stw	r18,1364(sp)
   88a60:	dc415415 	stw	r17,1360(sp)
   88a64:	282d883a 	mov	r22,r5
   88a68:	3021883a 	mov	r16,r6
   88a6c:	d9015015 	stw	r4,1344(sp)
   88a70:	008d1600 	call	8d160 <_localeconv_r>
   88a74:	10800017 	ldw	r2,0(r2)
   88a78:	d9c15217 	ldw	r7,1352(sp)
   88a7c:	d8814a15 	stw	r2,1320(sp)
   88a80:	d8815017 	ldw	r2,1344(sp)
   88a84:	10000226 	beq	r2,zero,88a90 <___vfprintf_internal_r+0x5c>
   88a88:	10800e17 	ldw	r2,56(r2)
   88a8c:	10020d26 	beq	r2,zero,892c4 <___vfprintf_internal_r+0x890>
   88a90:	b080030b 	ldhu	r2,12(r22)
   88a94:	1080020c 	andi	r2,r2,8
   88a98:	10020e26 	beq	r2,zero,892d4 <___vfprintf_internal_r+0x8a0>
   88a9c:	b0800417 	ldw	r2,16(r22)
   88aa0:	10020c26 	beq	r2,zero,892d4 <___vfprintf_internal_r+0x8a0>
   88aa4:	b200030b 	ldhu	r8,12(r22)
   88aa8:	00800284 	movi	r2,10
   88aac:	40c0068c 	andi	r3,r8,26
   88ab0:	18802f1e 	bne	r3,r2,88b70 <___vfprintf_internal_r+0x13c>
   88ab4:	b080038f 	ldh	r2,14(r22)
   88ab8:	10002d16 	blt	r2,zero,88b70 <___vfprintf_internal_r+0x13c>
   88abc:	b240038b 	ldhu	r9,14(r22)
   88ac0:	b2800717 	ldw	r10,28(r22)
   88ac4:	b2c00917 	ldw	r11,36(r22)
   88ac8:	d9015017 	ldw	r4,1344(sp)
   88acc:	dc402a04 	addi	r17,sp,168
   88ad0:	d8804104 	addi	r2,sp,260
   88ad4:	00c10004 	movi	r3,1024
   88ad8:	423fff4c 	andi	r8,r8,65533
   88adc:	800d883a 	mov	r6,r16
   88ae0:	880b883a 	mov	r5,r17
   88ae4:	da002d0d 	sth	r8,180(sp)
   88ae8:	da402d8d 	sth	r9,182(sp)
   88aec:	da803115 	stw	r10,196(sp)
   88af0:	dac03315 	stw	r11,204(sp)
   88af4:	d8802e15 	stw	r2,184(sp)
   88af8:	d8c02f15 	stw	r3,188(sp)
   88afc:	d8802a15 	stw	r2,168(sp)
   88b00:	d8c02c15 	stw	r3,176(sp)
   88b04:	d8003015 	stw	zero,192(sp)
   88b08:	0088a340 	call	88a34 <___vfprintf_internal_r>
   88b0c:	d8814c15 	stw	r2,1328(sp)
   88b10:	10000416 	blt	r2,zero,88b24 <___vfprintf_internal_r+0xf0>
   88b14:	d9015017 	ldw	r4,1344(sp)
   88b18:	880b883a 	mov	r5,r17
   88b1c:	008c20c0 	call	8c20c <_fflush_r>
   88b20:	1002321e 	bne	r2,zero,893ec <___vfprintf_internal_r+0x9b8>
   88b24:	d8802d0b 	ldhu	r2,180(sp)
   88b28:	1080100c 	andi	r2,r2,64
   88b2c:	10000326 	beq	r2,zero,88b3c <___vfprintf_internal_r+0x108>
   88b30:	b080030b 	ldhu	r2,12(r22)
   88b34:	10801014 	ori	r2,r2,64
   88b38:	b080030d 	sth	r2,12(r22)
   88b3c:	d8814c17 	ldw	r2,1328(sp)
   88b40:	dfc15c17 	ldw	ra,1392(sp)
   88b44:	df015b17 	ldw	fp,1388(sp)
   88b48:	ddc15a17 	ldw	r23,1384(sp)
   88b4c:	dd815917 	ldw	r22,1380(sp)
   88b50:	dd415817 	ldw	r21,1376(sp)
   88b54:	dd015717 	ldw	r20,1372(sp)
   88b58:	dcc15617 	ldw	r19,1368(sp)
   88b5c:	dc815517 	ldw	r18,1364(sp)
   88b60:	dc415417 	ldw	r17,1360(sp)
   88b64:	dc015317 	ldw	r16,1356(sp)
   88b68:	dec15d04 	addi	sp,sp,1396
   88b6c:	f800283a 	ret
   88b70:	0005883a 	mov	r2,zero
   88b74:	0007883a 	mov	r3,zero
   88b78:	dd401a04 	addi	r21,sp,104
   88b7c:	d8814315 	stw	r2,1292(sp)
   88b80:	802f883a 	mov	r23,r16
   88b84:	d8c14415 	stw	r3,1296(sp)
   88b88:	d8014c15 	stw	zero,1328(sp)
   88b8c:	d8014915 	stw	zero,1316(sp)
   88b90:	d8014515 	stw	zero,1300(sp)
   88b94:	d8014815 	stw	zero,1312(sp)
   88b98:	dd400d15 	stw	r21,52(sp)
   88b9c:	d8000f15 	stw	zero,60(sp)
   88ba0:	d8000e15 	stw	zero,56(sp)
   88ba4:	b8800007 	ldb	r2,0(r23)
   88ba8:	10001926 	beq	r2,zero,88c10 <___vfprintf_internal_r+0x1dc>
   88bac:	00c00944 	movi	r3,37
   88bb0:	10c01726 	beq	r2,r3,88c10 <___vfprintf_internal_r+0x1dc>
   88bb4:	b821883a 	mov	r16,r23
   88bb8:	00000106 	br	88bc0 <___vfprintf_internal_r+0x18c>
   88bbc:	10c00326 	beq	r2,r3,88bcc <___vfprintf_internal_r+0x198>
   88bc0:	84000044 	addi	r16,r16,1
   88bc4:	80800007 	ldb	r2,0(r16)
   88bc8:	103ffc1e 	bne	r2,zero,88bbc <___vfprintf_internal_r+0x188>
   88bcc:	85e7c83a 	sub	r19,r16,r23
   88bd0:	98000e26 	beq	r19,zero,88c0c <___vfprintf_internal_r+0x1d8>
   88bd4:	dc800f17 	ldw	r18,60(sp)
   88bd8:	dc400e17 	ldw	r17,56(sp)
   88bdc:	008001c4 	movi	r2,7
   88be0:	94e5883a 	add	r18,r18,r19
   88be4:	8c400044 	addi	r17,r17,1
   88be8:	adc00015 	stw	r23,0(r21)
   88bec:	dc800f15 	stw	r18,60(sp)
   88bf0:	acc00115 	stw	r19,4(r21)
   88bf4:	dc400e15 	stw	r17,56(sp)
   88bf8:	14428b16 	blt	r2,r17,89628 <___vfprintf_internal_r+0xbf4>
   88bfc:	ad400204 	addi	r21,r21,8
   88c00:	d9014c17 	ldw	r4,1328(sp)
   88c04:	24c9883a 	add	r4,r4,r19
   88c08:	d9014c15 	stw	r4,1328(sp)
   88c0c:	802f883a 	mov	r23,r16
   88c10:	b8800007 	ldb	r2,0(r23)
   88c14:	10013c26 	beq	r2,zero,89108 <___vfprintf_internal_r+0x6d4>
   88c18:	bdc00044 	addi	r23,r23,1
   88c1c:	d8000405 	stb	zero,16(sp)
   88c20:	b8c00007 	ldb	r3,0(r23)
   88c24:	04ffffc4 	movi	r19,-1
   88c28:	d8014d15 	stw	zero,1332(sp)
   88c2c:	d8014b15 	stw	zero,1324(sp)
   88c30:	d8c14e15 	stw	r3,1336(sp)
   88c34:	bdc00044 	addi	r23,r23,1
   88c38:	d9414e17 	ldw	r5,1336(sp)
   88c3c:	00801604 	movi	r2,88
   88c40:	28fff804 	addi	r3,r5,-32
   88c44:	10c06036 	bltu	r2,r3,88dc8 <___vfprintf_internal_r+0x394>
   88c48:	18c5883a 	add	r2,r3,r3
   88c4c:	1085883a 	add	r2,r2,r2
   88c50:	00c00274 	movhi	r3,9
   88c54:	18e31904 	addi	r3,r3,-29596
   88c58:	10c5883a 	add	r2,r2,r3
   88c5c:	11000017 	ldw	r4,0(r2)
   88c60:	2000683a 	jmp	r4
   88c64:	00089bd8 	cmpnei	zero,zero,8815
   88c68:	00088dc8 	cmpgei	zero,zero,8759
   88c6c:	00088dc8 	cmpgei	zero,zero,8759
   88c70:	00089bc4 	movi	zero,8815
   88c74:	00088dc8 	cmpgei	zero,zero,8759
   88c78:	00088dc8 	cmpgei	zero,zero,8759
   88c7c:	00088dc8 	cmpgei	zero,zero,8759
   88c80:	00088dc8 	cmpgei	zero,zero,8759
   88c84:	00088dc8 	cmpgei	zero,zero,8759
   88c88:	00088dc8 	cmpgei	zero,zero,8759
   88c8c:	000899a4 	muli	zero,zero,8806
   88c90:	00089bb4 	movhi	zero,8814
   88c94:	00088dc8 	cmpgei	zero,zero,8759
   88c98:	000899bc 	xorhi	zero,zero,8806
   88c9c:	00089c50 	cmplti	zero,zero,8817
   88ca0:	00088dc8 	cmpgei	zero,zero,8759
   88ca4:	00089c3c 	xorhi	zero,zero,8816
   88ca8:	00089c04 	movi	zero,8816
   88cac:	00089c04 	movi	zero,8816
   88cb0:	00089c04 	movi	zero,8816
   88cb4:	00089c04 	movi	zero,8816
   88cb8:	00089c04 	movi	zero,8816
   88cbc:	00089c04 	movi	zero,8816
   88cc0:	00089c04 	movi	zero,8816
   88cc4:	00089c04 	movi	zero,8816
   88cc8:	00089c04 	movi	zero,8816
   88ccc:	00088dc8 	cmpgei	zero,zero,8759
   88cd0:	00088dc8 	cmpgei	zero,zero,8759
   88cd4:	00088dc8 	cmpgei	zero,zero,8759
   88cd8:	00088dc8 	cmpgei	zero,zero,8759
   88cdc:	00088dc8 	cmpgei	zero,zero,8759
   88ce0:	00088dc8 	cmpgei	zero,zero,8759
   88ce4:	00088dc8 	cmpgei	zero,zero,8759
   88ce8:	00088dc8 	cmpgei	zero,zero,8759
   88cec:	00088dc8 	cmpgei	zero,zero,8759
   88cf0:	00088dc8 	cmpgei	zero,zero,8759
   88cf4:	00089420 	cmpeqi	zero,zero,8784
   88cf8:	00089a8c 	andi	zero,zero,8810
   88cfc:	00088dc8 	cmpgei	zero,zero,8759
   88d00:	00089a8c 	andi	zero,zero,8810
   88d04:	00088dc8 	cmpgei	zero,zero,8759
   88d08:	00088dc8 	cmpgei	zero,zero,8759
   88d0c:	00088dc8 	cmpgei	zero,zero,8759
   88d10:	00088dc8 	cmpgei	zero,zero,8759
   88d14:	00089bf0 	cmpltui	zero,zero,8815
   88d18:	00088dc8 	cmpgei	zero,zero,8759
   88d1c:	00088dc8 	cmpgei	zero,zero,8759
   88d20:	000894d4 	movui	zero,8787
   88d24:	00088dc8 	cmpgei	zero,zero,8759
   88d28:	00088dc8 	cmpgei	zero,zero,8759
   88d2c:	00088dc8 	cmpgei	zero,zero,8759
   88d30:	00088dc8 	cmpgei	zero,zero,8759
   88d34:	00088dc8 	cmpgei	zero,zero,8759
   88d38:	00089520 	cmpeqi	zero,zero,8788
   88d3c:	00088dc8 	cmpgei	zero,zero,8759
   88d40:	00088dc8 	cmpgei	zero,zero,8759
   88d44:	00089b40 	call	89b4 <__reset-0x7764c>
   88d48:	00088dc8 	cmpgei	zero,zero,8759
   88d4c:	00088dc8 	cmpgei	zero,zero,8759
   88d50:	00088dc8 	cmpgei	zero,zero,8759
   88d54:	00088dc8 	cmpgei	zero,zero,8759
   88d58:	00088dc8 	cmpgei	zero,zero,8759
   88d5c:	00088dc8 	cmpgei	zero,zero,8759
   88d60:	00088dc8 	cmpgei	zero,zero,8759
   88d64:	00088dc8 	cmpgei	zero,zero,8759
   88d68:	00088dc8 	cmpgei	zero,zero,8759
   88d6c:	00088dc8 	cmpgei	zero,zero,8759
   88d70:	00089b14 	movui	zero,8812
   88d74:	0008942c 	andhi	zero,zero,8784
   88d78:	00089a8c 	andi	zero,zero,8810
   88d7c:	00089a8c 	andi	zero,zero,8810
   88d80:	00089a8c 	andi	zero,zero,8810
   88d84:	00089a78 	rdprs	zero,zero,8809
   88d88:	0008942c 	andhi	zero,zero,8784
   88d8c:	00088dc8 	cmpgei	zero,zero,8759
   88d90:	00088dc8 	cmpgei	zero,zero,8759
   88d94:	00089a00 	call	89a0 <__reset-0x77660>
   88d98:	00088dc8 	cmpgei	zero,zero,8759
   88d9c:	000899d0 	cmplti	zero,zero,8807
   88da0:	000894e0 	cmpeqi	zero,zero,8787
   88da4:	00089a30 	cmpltui	zero,zero,8808
   88da8:	00089a1c 	xori	zero,zero,8808
   88dac:	00088dc8 	cmpgei	zero,zero,8759
   88db0:	00089cac 	andhi	zero,zero,8818
   88db4:	00088dc8 	cmpgei	zero,zero,8759
   88db8:	0008952c 	andhi	zero,zero,8788
   88dbc:	00088dc8 	cmpgei	zero,zero,8759
   88dc0:	00088dc8 	cmpgei	zero,zero,8759
   88dc4:	00089ba4 	muli	zero,zero,8814
   88dc8:	d9014e17 	ldw	r4,1336(sp)
   88dcc:	2000ce26 	beq	r4,zero,89108 <___vfprintf_internal_r+0x6d4>
   88dd0:	01400044 	movi	r5,1
   88dd4:	d9801004 	addi	r6,sp,64
   88dd8:	d9c14115 	stw	r7,1284(sp)
   88ddc:	d9414615 	stw	r5,1304(sp)
   88de0:	d9814215 	stw	r6,1288(sp)
   88de4:	280f883a 	mov	r7,r5
   88de8:	d9001005 	stb	r4,64(sp)
   88dec:	d8000405 	stb	zero,16(sp)
   88df0:	d8014715 	stw	zero,1308(sp)
   88df4:	d8c14d17 	ldw	r3,1332(sp)
   88df8:	1880008c 	andi	r2,r3,2
   88dfc:	1005003a 	cmpeq	r2,r2,zero
   88e00:	d8815115 	stw	r2,1348(sp)
   88e04:	1000031e 	bne	r2,zero,88e14 <___vfprintf_internal_r+0x3e0>
   88e08:	d9014617 	ldw	r4,1304(sp)
   88e0c:	21000084 	addi	r4,r4,2
   88e10:	d9014615 	stw	r4,1304(sp)
   88e14:	d9414d17 	ldw	r5,1332(sp)
   88e18:	2940210c 	andi	r5,r5,132
   88e1c:	d9414f15 	stw	r5,1340(sp)
   88e20:	28002d1e 	bne	r5,zero,88ed8 <___vfprintf_internal_r+0x4a4>
   88e24:	d9814b17 	ldw	r6,1324(sp)
   88e28:	d8814617 	ldw	r2,1304(sp)
   88e2c:	30a1c83a 	sub	r16,r6,r2
   88e30:	0400290e 	bge	zero,r16,88ed8 <___vfprintf_internal_r+0x4a4>
   88e34:	00800404 	movi	r2,16
   88e38:	1404580e 	bge	r2,r16,89f9c <___vfprintf_internal_r+0x1568>
   88e3c:	dc800f17 	ldw	r18,60(sp)
   88e40:	dc400e17 	ldw	r17,56(sp)
   88e44:	1027883a 	mov	r19,r2
   88e48:	07000274 	movhi	fp,9
   88e4c:	e70ee404 	addi	fp,fp,15248
   88e50:	050001c4 	movi	r20,7
   88e54:	00000306 	br	88e64 <___vfprintf_internal_r+0x430>
   88e58:	843ffc04 	addi	r16,r16,-16
   88e5c:	ad400204 	addi	r21,r21,8
   88e60:	9c00130e 	bge	r19,r16,88eb0 <___vfprintf_internal_r+0x47c>
   88e64:	94800404 	addi	r18,r18,16
   88e68:	8c400044 	addi	r17,r17,1
   88e6c:	af000015 	stw	fp,0(r21)
   88e70:	acc00115 	stw	r19,4(r21)
   88e74:	dc800f15 	stw	r18,60(sp)
   88e78:	dc400e15 	stw	r17,56(sp)
   88e7c:	a47ff60e 	bge	r20,r17,88e58 <___vfprintf_internal_r+0x424>
   88e80:	d9015017 	ldw	r4,1344(sp)
   88e84:	b00b883a 	mov	r5,r22
   88e88:	d9800d04 	addi	r6,sp,52
   88e8c:	d9c15215 	stw	r7,1352(sp)
   88e90:	00889dc0 	call	889dc <__sprint_r>
   88e94:	d9c15217 	ldw	r7,1352(sp)
   88e98:	10009e1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   88e9c:	843ffc04 	addi	r16,r16,-16
   88ea0:	dc800f17 	ldw	r18,60(sp)
   88ea4:	dc400e17 	ldw	r17,56(sp)
   88ea8:	dd401a04 	addi	r21,sp,104
   88eac:	9c3fed16 	blt	r19,r16,88e64 <___vfprintf_internal_r+0x430>
   88eb0:	9425883a 	add	r18,r18,r16
   88eb4:	8c400044 	addi	r17,r17,1
   88eb8:	008001c4 	movi	r2,7
   88ebc:	af000015 	stw	fp,0(r21)
   88ec0:	ac000115 	stw	r16,4(r21)
   88ec4:	dc800f15 	stw	r18,60(sp)
   88ec8:	dc400e15 	stw	r17,56(sp)
   88ecc:	1441f516 	blt	r2,r17,896a4 <___vfprintf_internal_r+0xc70>
   88ed0:	ad400204 	addi	r21,r21,8
   88ed4:	00000206 	br	88ee0 <___vfprintf_internal_r+0x4ac>
   88ed8:	dc800f17 	ldw	r18,60(sp)
   88edc:	dc400e17 	ldw	r17,56(sp)
   88ee0:	d8800407 	ldb	r2,16(sp)
   88ee4:	10000b26 	beq	r2,zero,88f14 <___vfprintf_internal_r+0x4e0>
   88ee8:	00800044 	movi	r2,1
   88eec:	94800044 	addi	r18,r18,1
   88ef0:	8c400044 	addi	r17,r17,1
   88ef4:	a8800115 	stw	r2,4(r21)
   88ef8:	d8c00404 	addi	r3,sp,16
   88efc:	008001c4 	movi	r2,7
   88f00:	a8c00015 	stw	r3,0(r21)
   88f04:	dc800f15 	stw	r18,60(sp)
   88f08:	dc400e15 	stw	r17,56(sp)
   88f0c:	1441da16 	blt	r2,r17,89678 <___vfprintf_internal_r+0xc44>
   88f10:	ad400204 	addi	r21,r21,8
   88f14:	d9015117 	ldw	r4,1348(sp)
   88f18:	20000b1e 	bne	r4,zero,88f48 <___vfprintf_internal_r+0x514>
   88f1c:	d8800504 	addi	r2,sp,20
   88f20:	94800084 	addi	r18,r18,2
   88f24:	8c400044 	addi	r17,r17,1
   88f28:	a8800015 	stw	r2,0(r21)
   88f2c:	00c00084 	movi	r3,2
   88f30:	008001c4 	movi	r2,7
   88f34:	a8c00115 	stw	r3,4(r21)
   88f38:	dc800f15 	stw	r18,60(sp)
   88f3c:	dc400e15 	stw	r17,56(sp)
   88f40:	1441c216 	blt	r2,r17,8964c <___vfprintf_internal_r+0xc18>
   88f44:	ad400204 	addi	r21,r21,8
   88f48:	d9414f17 	ldw	r5,1340(sp)
   88f4c:	00802004 	movi	r2,128
   88f50:	2880b126 	beq	r5,r2,89218 <___vfprintf_internal_r+0x7e4>
   88f54:	d8c14717 	ldw	r3,1308(sp)
   88f58:	19e1c83a 	sub	r16,r3,r7
   88f5c:	0400260e 	bge	zero,r16,88ff8 <___vfprintf_internal_r+0x5c4>
   88f60:	00800404 	movi	r2,16
   88f64:	1403c90e 	bge	r2,r16,89e8c <___vfprintf_internal_r+0x1458>
   88f68:	1027883a 	mov	r19,r2
   88f6c:	07000274 	movhi	fp,9
   88f70:	e70ee004 	addi	fp,fp,15232
   88f74:	050001c4 	movi	r20,7
   88f78:	00000306 	br	88f88 <___vfprintf_internal_r+0x554>
   88f7c:	843ffc04 	addi	r16,r16,-16
   88f80:	ad400204 	addi	r21,r21,8
   88f84:	9c00130e 	bge	r19,r16,88fd4 <___vfprintf_internal_r+0x5a0>
   88f88:	94800404 	addi	r18,r18,16
   88f8c:	8c400044 	addi	r17,r17,1
   88f90:	af000015 	stw	fp,0(r21)
   88f94:	acc00115 	stw	r19,4(r21)
   88f98:	dc800f15 	stw	r18,60(sp)
   88f9c:	dc400e15 	stw	r17,56(sp)
   88fa0:	a47ff60e 	bge	r20,r17,88f7c <___vfprintf_internal_r+0x548>
   88fa4:	d9015017 	ldw	r4,1344(sp)
   88fa8:	b00b883a 	mov	r5,r22
   88fac:	d9800d04 	addi	r6,sp,52
   88fb0:	d9c15215 	stw	r7,1352(sp)
   88fb4:	00889dc0 	call	889dc <__sprint_r>
   88fb8:	d9c15217 	ldw	r7,1352(sp)
   88fbc:	1000551e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   88fc0:	843ffc04 	addi	r16,r16,-16
   88fc4:	dc800f17 	ldw	r18,60(sp)
   88fc8:	dc400e17 	ldw	r17,56(sp)
   88fcc:	dd401a04 	addi	r21,sp,104
   88fd0:	9c3fed16 	blt	r19,r16,88f88 <___vfprintf_internal_r+0x554>
   88fd4:	9425883a 	add	r18,r18,r16
   88fd8:	8c400044 	addi	r17,r17,1
   88fdc:	008001c4 	movi	r2,7
   88fe0:	af000015 	stw	fp,0(r21)
   88fe4:	ac000115 	stw	r16,4(r21)
   88fe8:	dc800f15 	stw	r18,60(sp)
   88fec:	dc400e15 	stw	r17,56(sp)
   88ff0:	14418216 	blt	r2,r17,895fc <___vfprintf_internal_r+0xbc8>
   88ff4:	ad400204 	addi	r21,r21,8
   88ff8:	d9014d17 	ldw	r4,1332(sp)
   88ffc:	2080400c 	andi	r2,r4,256
   89000:	10004a1e 	bne	r2,zero,8912c <___vfprintf_internal_r+0x6f8>
   89004:	d9414217 	ldw	r5,1288(sp)
   89008:	91e5883a 	add	r18,r18,r7
   8900c:	8c400044 	addi	r17,r17,1
   89010:	008001c4 	movi	r2,7
   89014:	a9400015 	stw	r5,0(r21)
   89018:	a9c00115 	stw	r7,4(r21)
   8901c:	dc800f15 	stw	r18,60(sp)
   89020:	dc400e15 	stw	r17,56(sp)
   89024:	14416716 	blt	r2,r17,895c4 <___vfprintf_internal_r+0xb90>
   89028:	a8c00204 	addi	r3,r21,8
   8902c:	d9814d17 	ldw	r6,1332(sp)
   89030:	3080010c 	andi	r2,r6,4
   89034:	10002826 	beq	r2,zero,890d8 <___vfprintf_internal_r+0x6a4>
   89038:	d8814b17 	ldw	r2,1324(sp)
   8903c:	d9014617 	ldw	r4,1304(sp)
   89040:	1121c83a 	sub	r16,r2,r4
   89044:	0400240e 	bge	zero,r16,890d8 <___vfprintf_internal_r+0x6a4>
   89048:	00800404 	movi	r2,16
   8904c:	14044f0e 	bge	r2,r16,8a18c <___vfprintf_internal_r+0x1758>
   89050:	dc400e17 	ldw	r17,56(sp)
   89054:	1027883a 	mov	r19,r2
   89058:	07000274 	movhi	fp,9
   8905c:	e70ee404 	addi	fp,fp,15248
   89060:	050001c4 	movi	r20,7
   89064:	00000306 	br	89074 <___vfprintf_internal_r+0x640>
   89068:	843ffc04 	addi	r16,r16,-16
   8906c:	18c00204 	addi	r3,r3,8
   89070:	9c00110e 	bge	r19,r16,890b8 <___vfprintf_internal_r+0x684>
   89074:	94800404 	addi	r18,r18,16
   89078:	8c400044 	addi	r17,r17,1
   8907c:	1f000015 	stw	fp,0(r3)
   89080:	1cc00115 	stw	r19,4(r3)
   89084:	dc800f15 	stw	r18,60(sp)
   89088:	dc400e15 	stw	r17,56(sp)
   8908c:	a47ff60e 	bge	r20,r17,89068 <___vfprintf_internal_r+0x634>
   89090:	d9015017 	ldw	r4,1344(sp)
   89094:	b00b883a 	mov	r5,r22
   89098:	d9800d04 	addi	r6,sp,52
   8909c:	00889dc0 	call	889dc <__sprint_r>
   890a0:	10001c1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   890a4:	843ffc04 	addi	r16,r16,-16
   890a8:	dc800f17 	ldw	r18,60(sp)
   890ac:	dc400e17 	ldw	r17,56(sp)
   890b0:	d8c01a04 	addi	r3,sp,104
   890b4:	9c3fef16 	blt	r19,r16,89074 <___vfprintf_internal_r+0x640>
   890b8:	9425883a 	add	r18,r18,r16
   890bc:	8c400044 	addi	r17,r17,1
   890c0:	008001c4 	movi	r2,7
   890c4:	1f000015 	stw	fp,0(r3)
   890c8:	1c000115 	stw	r16,4(r3)
   890cc:	dc800f15 	stw	r18,60(sp)
   890d0:	dc400e15 	stw	r17,56(sp)
   890d4:	1440cb16 	blt	r2,r17,89404 <___vfprintf_internal_r+0x9d0>
   890d8:	d8814b17 	ldw	r2,1324(sp)
   890dc:	d9414617 	ldw	r5,1304(sp)
   890e0:	1140010e 	bge	r2,r5,890e8 <___vfprintf_internal_r+0x6b4>
   890e4:	2805883a 	mov	r2,r5
   890e8:	d9814c17 	ldw	r6,1328(sp)
   890ec:	308d883a 	add	r6,r6,r2
   890f0:	d9814c15 	stw	r6,1328(sp)
   890f4:	90013b1e 	bne	r18,zero,895e4 <___vfprintf_internal_r+0xbb0>
   890f8:	d9c14117 	ldw	r7,1284(sp)
   890fc:	dd401a04 	addi	r21,sp,104
   89100:	d8000e15 	stw	zero,56(sp)
   89104:	003ea706 	br	88ba4 <___vfprintf_internal_r+0x170>
   89108:	d8800f17 	ldw	r2,60(sp)
   8910c:	10053f1e 	bne	r2,zero,8a60c <___vfprintf_internal_r+0x1bd8>
   89110:	d8000e15 	stw	zero,56(sp)
   89114:	b080030b 	ldhu	r2,12(r22)
   89118:	1080100c 	andi	r2,r2,64
   8911c:	103e8726 	beq	r2,zero,88b3c <___vfprintf_internal_r+0x108>
   89120:	00bfffc4 	movi	r2,-1
   89124:	d8814c15 	stw	r2,1328(sp)
   89128:	003e8406 	br	88b3c <___vfprintf_internal_r+0x108>
   8912c:	d9814e17 	ldw	r6,1336(sp)
   89130:	00801944 	movi	r2,101
   89134:	11806e16 	blt	r2,r6,892f0 <___vfprintf_internal_r+0x8bc>
   89138:	d9414817 	ldw	r5,1312(sp)
   8913c:	00c00044 	movi	r3,1
   89140:	1943430e 	bge	r3,r5,89e50 <___vfprintf_internal_r+0x141c>
   89144:	d8814217 	ldw	r2,1288(sp)
   89148:	94800044 	addi	r18,r18,1
   8914c:	8c400044 	addi	r17,r17,1
   89150:	a8800015 	stw	r2,0(r21)
   89154:	008001c4 	movi	r2,7
   89158:	a8c00115 	stw	r3,4(r21)
   8915c:	dc800f15 	stw	r18,60(sp)
   89160:	dc400e15 	stw	r17,56(sp)
   89164:	1441ca16 	blt	r2,r17,89890 <___vfprintf_internal_r+0xe5c>
   89168:	a8c00204 	addi	r3,r21,8
   8916c:	d9014a17 	ldw	r4,1320(sp)
   89170:	00800044 	movi	r2,1
   89174:	94800044 	addi	r18,r18,1
   89178:	8c400044 	addi	r17,r17,1
   8917c:	18800115 	stw	r2,4(r3)
   89180:	008001c4 	movi	r2,7
   89184:	19000015 	stw	r4,0(r3)
   89188:	dc800f15 	stw	r18,60(sp)
   8918c:	dc400e15 	stw	r17,56(sp)
   89190:	1441b616 	blt	r2,r17,8986c <___vfprintf_internal_r+0xe38>
   89194:	1cc00204 	addi	r19,r3,8
   89198:	d9014317 	ldw	r4,1292(sp)
   8919c:	d9414417 	ldw	r5,1296(sp)
   891a0:	000d883a 	mov	r6,zero
   891a4:	000f883a 	mov	r7,zero
   891a8:	00878280 	call	87828 <__nedf2>
   891ac:	10017426 	beq	r2,zero,89780 <___vfprintf_internal_r+0xd4c>
   891b0:	d9414817 	ldw	r5,1312(sp)
   891b4:	d9814217 	ldw	r6,1288(sp)
   891b8:	8c400044 	addi	r17,r17,1
   891bc:	2c85883a 	add	r2,r5,r18
   891c0:	14bfffc4 	addi	r18,r2,-1
   891c4:	28bfffc4 	addi	r2,r5,-1
   891c8:	30c00044 	addi	r3,r6,1
   891cc:	98800115 	stw	r2,4(r19)
   891d0:	008001c4 	movi	r2,7
   891d4:	98c00015 	stw	r3,0(r19)
   891d8:	dc800f15 	stw	r18,60(sp)
   891dc:	dc400e15 	stw	r17,56(sp)
   891e0:	14418e16 	blt	r2,r17,8981c <___vfprintf_internal_r+0xde8>
   891e4:	9cc00204 	addi	r19,r19,8
   891e8:	d9414917 	ldw	r5,1316(sp)
   891ec:	d8800904 	addi	r2,sp,36
   891f0:	8c400044 	addi	r17,r17,1
   891f4:	9165883a 	add	r18,r18,r5
   891f8:	98800015 	stw	r2,0(r19)
   891fc:	008001c4 	movi	r2,7
   89200:	99400115 	stw	r5,4(r19)
   89204:	dc800f15 	stw	r18,60(sp)
   89208:	dc400e15 	stw	r17,56(sp)
   8920c:	1440ed16 	blt	r2,r17,895c4 <___vfprintf_internal_r+0xb90>
   89210:	98c00204 	addi	r3,r19,8
   89214:	003f8506 	br	8902c <___vfprintf_internal_r+0x5f8>
   89218:	d9814b17 	ldw	r6,1324(sp)
   8921c:	d8814617 	ldw	r2,1304(sp)
   89220:	30a1c83a 	sub	r16,r6,r2
   89224:	043f4b0e 	bge	zero,r16,88f54 <___vfprintf_internal_r+0x520>
   89228:	00800404 	movi	r2,16
   8922c:	1404340e 	bge	r2,r16,8a300 <___vfprintf_internal_r+0x18cc>
   89230:	1027883a 	mov	r19,r2
   89234:	07000274 	movhi	fp,9
   89238:	e70ee004 	addi	fp,fp,15232
   8923c:	050001c4 	movi	r20,7
   89240:	00000306 	br	89250 <___vfprintf_internal_r+0x81c>
   89244:	843ffc04 	addi	r16,r16,-16
   89248:	ad400204 	addi	r21,r21,8
   8924c:	9c00130e 	bge	r19,r16,8929c <___vfprintf_internal_r+0x868>
   89250:	94800404 	addi	r18,r18,16
   89254:	8c400044 	addi	r17,r17,1
   89258:	af000015 	stw	fp,0(r21)
   8925c:	acc00115 	stw	r19,4(r21)
   89260:	dc800f15 	stw	r18,60(sp)
   89264:	dc400e15 	stw	r17,56(sp)
   89268:	a47ff60e 	bge	r20,r17,89244 <___vfprintf_internal_r+0x810>
   8926c:	d9015017 	ldw	r4,1344(sp)
   89270:	b00b883a 	mov	r5,r22
   89274:	d9800d04 	addi	r6,sp,52
   89278:	d9c15215 	stw	r7,1352(sp)
   8927c:	00889dc0 	call	889dc <__sprint_r>
   89280:	d9c15217 	ldw	r7,1352(sp)
   89284:	103fa31e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89288:	843ffc04 	addi	r16,r16,-16
   8928c:	dc800f17 	ldw	r18,60(sp)
   89290:	dc400e17 	ldw	r17,56(sp)
   89294:	dd401a04 	addi	r21,sp,104
   89298:	9c3fed16 	blt	r19,r16,89250 <___vfprintf_internal_r+0x81c>
   8929c:	9425883a 	add	r18,r18,r16
   892a0:	8c400044 	addi	r17,r17,1
   892a4:	008001c4 	movi	r2,7
   892a8:	af000015 	stw	fp,0(r21)
   892ac:	ac000115 	stw	r16,4(r21)
   892b0:	dc800f15 	stw	r18,60(sp)
   892b4:	dc400e15 	stw	r17,56(sp)
   892b8:	14416116 	blt	r2,r17,89840 <___vfprintf_internal_r+0xe0c>
   892bc:	ad400204 	addi	r21,r21,8
   892c0:	003f2406 	br	88f54 <___vfprintf_internal_r+0x520>
   892c4:	d9015017 	ldw	r4,1344(sp)
   892c8:	008c4a40 	call	8c4a4 <__sinit>
   892cc:	d9c15217 	ldw	r7,1352(sp)
   892d0:	003def06 	br	88a90 <___vfprintf_internal_r+0x5c>
   892d4:	d9015017 	ldw	r4,1344(sp)
   892d8:	b00b883a 	mov	r5,r22
   892dc:	d9c15215 	stw	r7,1352(sp)
   892e0:	008a9040 	call	8a904 <__swsetup_r>
   892e4:	d9c15217 	ldw	r7,1352(sp)
   892e8:	103dee26 	beq	r2,zero,88aa4 <___vfprintf_internal_r+0x70>
   892ec:	003f8c06 	br	89120 <___vfprintf_internal_r+0x6ec>
   892f0:	d9014317 	ldw	r4,1292(sp)
   892f4:	d9414417 	ldw	r5,1296(sp)
   892f8:	000d883a 	mov	r6,zero
   892fc:	000f883a 	mov	r7,zero
   89300:	00877a00 	call	877a0 <__eqdf2>
   89304:	1000f21e 	bne	r2,zero,896d0 <___vfprintf_internal_r+0xc9c>
   89308:	00800274 	movhi	r2,9
   8930c:	108edf04 	addi	r2,r2,15228
   89310:	94800044 	addi	r18,r18,1
   89314:	8c400044 	addi	r17,r17,1
   89318:	a8800015 	stw	r2,0(r21)
   8931c:	00c00044 	movi	r3,1
   89320:	008001c4 	movi	r2,7
   89324:	a8c00115 	stw	r3,4(r21)
   89328:	dc800f15 	stw	r18,60(sp)
   8932c:	dc400e15 	stw	r17,56(sp)
   89330:	1442fa16 	blt	r2,r17,89f1c <___vfprintf_internal_r+0x14e8>
   89334:	a8c00204 	addi	r3,r21,8
   89338:	d8800617 	ldw	r2,24(sp)
   8933c:	d9014817 	ldw	r4,1312(sp)
   89340:	11015c0e 	bge	r2,r4,898b4 <___vfprintf_internal_r+0xe80>
   89344:	dc400e17 	ldw	r17,56(sp)
   89348:	d9814a17 	ldw	r6,1320(sp)
   8934c:	00800044 	movi	r2,1
   89350:	94800044 	addi	r18,r18,1
   89354:	8c400044 	addi	r17,r17,1
   89358:	18800115 	stw	r2,4(r3)
   8935c:	008001c4 	movi	r2,7
   89360:	19800015 	stw	r6,0(r3)
   89364:	dc800f15 	stw	r18,60(sp)
   89368:	dc400e15 	stw	r17,56(sp)
   8936c:	14431016 	blt	r2,r17,89fb0 <___vfprintf_internal_r+0x157c>
   89370:	18c00204 	addi	r3,r3,8
   89374:	d8814817 	ldw	r2,1312(sp)
   89378:	143fffc4 	addi	r16,r2,-1
   8937c:	043f2b0e 	bge	zero,r16,8902c <___vfprintf_internal_r+0x5f8>
   89380:	00800404 	movi	r2,16
   89384:	1402a20e 	bge	r2,r16,89e10 <___vfprintf_internal_r+0x13dc>
   89388:	dc400e17 	ldw	r17,56(sp)
   8938c:	1027883a 	mov	r19,r2
   89390:	07000274 	movhi	fp,9
   89394:	e70ee004 	addi	fp,fp,15232
   89398:	050001c4 	movi	r20,7
   8939c:	00000306 	br	893ac <___vfprintf_internal_r+0x978>
   893a0:	18c00204 	addi	r3,r3,8
   893a4:	843ffc04 	addi	r16,r16,-16
   893a8:	9c029c0e 	bge	r19,r16,89e1c <___vfprintf_internal_r+0x13e8>
   893ac:	94800404 	addi	r18,r18,16
   893b0:	8c400044 	addi	r17,r17,1
   893b4:	1f000015 	stw	fp,0(r3)
   893b8:	1cc00115 	stw	r19,4(r3)
   893bc:	dc800f15 	stw	r18,60(sp)
   893c0:	dc400e15 	stw	r17,56(sp)
   893c4:	a47ff60e 	bge	r20,r17,893a0 <___vfprintf_internal_r+0x96c>
   893c8:	d9015017 	ldw	r4,1344(sp)
   893cc:	b00b883a 	mov	r5,r22
   893d0:	d9800d04 	addi	r6,sp,52
   893d4:	00889dc0 	call	889dc <__sprint_r>
   893d8:	103f4e1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   893dc:	dc800f17 	ldw	r18,60(sp)
   893e0:	dc400e17 	ldw	r17,56(sp)
   893e4:	d8c01a04 	addi	r3,sp,104
   893e8:	003fee06 	br	893a4 <___vfprintf_internal_r+0x970>
   893ec:	d8802d0b 	ldhu	r2,180(sp)
   893f0:	00ffffc4 	movi	r3,-1
   893f4:	d8c14c15 	stw	r3,1328(sp)
   893f8:	1080100c 	andi	r2,r2,64
   893fc:	103dcc1e 	bne	r2,zero,88b30 <___vfprintf_internal_r+0xfc>
   89400:	003dce06 	br	88b3c <___vfprintf_internal_r+0x108>
   89404:	d9015017 	ldw	r4,1344(sp)
   89408:	b00b883a 	mov	r5,r22
   8940c:	d9800d04 	addi	r6,sp,52
   89410:	00889dc0 	call	889dc <__sprint_r>
   89414:	103f3f1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89418:	dc800f17 	ldw	r18,60(sp)
   8941c:	003f2e06 	br	890d8 <___vfprintf_internal_r+0x6a4>
   89420:	d9414d17 	ldw	r5,1332(sp)
   89424:	29400414 	ori	r5,r5,16
   89428:	d9414d15 	stw	r5,1332(sp)
   8942c:	d9814d17 	ldw	r6,1332(sp)
   89430:	3080080c 	andi	r2,r6,32
   89434:	10014f1e 	bne	r2,zero,89974 <___vfprintf_internal_r+0xf40>
   89438:	d8c14d17 	ldw	r3,1332(sp)
   8943c:	1880040c 	andi	r2,r3,16
   89440:	1002ea1e 	bne	r2,zero,89fec <___vfprintf_internal_r+0x15b8>
   89444:	d9014d17 	ldw	r4,1332(sp)
   89448:	2080100c 	andi	r2,r4,64
   8944c:	1002e726 	beq	r2,zero,89fec <___vfprintf_internal_r+0x15b8>
   89450:	3880000f 	ldh	r2,0(r7)
   89454:	39c00104 	addi	r7,r7,4
   89458:	d9c14115 	stw	r7,1284(sp)
   8945c:	1023d7fa 	srai	r17,r2,31
   89460:	1021883a 	mov	r16,r2
   89464:	88037216 	blt	r17,zero,8a230 <___vfprintf_internal_r+0x17fc>
   89468:	01000044 	movi	r4,1
   8946c:	98000416 	blt	r19,zero,89480 <___vfprintf_internal_r+0xa4c>
   89470:	d8c14d17 	ldw	r3,1332(sp)
   89474:	00bfdfc4 	movi	r2,-129
   89478:	1886703a 	and	r3,r3,r2
   8947c:	d8c14d15 	stw	r3,1332(sp)
   89480:	8444b03a 	or	r2,r16,r17
   89484:	1002261e 	bne	r2,zero,89d20 <___vfprintf_internal_r+0x12ec>
   89488:	9802251e 	bne	r19,zero,89d20 <___vfprintf_internal_r+0x12ec>
   8948c:	20803fcc 	andi	r2,r4,255
   89490:	10029b26 	beq	r2,zero,89f00 <___vfprintf_internal_r+0x14cc>
   89494:	d8c01a04 	addi	r3,sp,104
   89498:	dd001004 	addi	r20,sp,64
   8949c:	d8c14215 	stw	r3,1288(sp)
   894a0:	d8c14217 	ldw	r3,1288(sp)
   894a4:	dcc14615 	stw	r19,1304(sp)
   894a8:	a0c5c83a 	sub	r2,r20,r3
   894ac:	11c00a04 	addi	r7,r2,40
   894b0:	99c0010e 	bge	r19,r7,894b8 <___vfprintf_internal_r+0xa84>
   894b4:	d9c14615 	stw	r7,1304(sp)
   894b8:	dcc14715 	stw	r19,1308(sp)
   894bc:	d8800407 	ldb	r2,16(sp)
   894c0:	103e4c26 	beq	r2,zero,88df4 <___vfprintf_internal_r+0x3c0>
   894c4:	d8814617 	ldw	r2,1304(sp)
   894c8:	10800044 	addi	r2,r2,1
   894cc:	d8814615 	stw	r2,1304(sp)
   894d0:	003e4806 	br	88df4 <___vfprintf_internal_r+0x3c0>
   894d4:	d9814d17 	ldw	r6,1332(sp)
   894d8:	31800414 	ori	r6,r6,16
   894dc:	d9814d15 	stw	r6,1332(sp)
   894e0:	d8c14d17 	ldw	r3,1332(sp)
   894e4:	1880080c 	andi	r2,r3,32
   894e8:	1001271e 	bne	r2,zero,89988 <___vfprintf_internal_r+0xf54>
   894ec:	d9414d17 	ldw	r5,1332(sp)
   894f0:	2880040c 	andi	r2,r5,16
   894f4:	1002b61e 	bne	r2,zero,89fd0 <___vfprintf_internal_r+0x159c>
   894f8:	d9814d17 	ldw	r6,1332(sp)
   894fc:	3080100c 	andi	r2,r6,64
   89500:	1002b326 	beq	r2,zero,89fd0 <___vfprintf_internal_r+0x159c>
   89504:	3c00000b 	ldhu	r16,0(r7)
   89508:	0009883a 	mov	r4,zero
   8950c:	39c00104 	addi	r7,r7,4
   89510:	0023883a 	mov	r17,zero
   89514:	d9c14115 	stw	r7,1284(sp)
   89518:	d8000405 	stb	zero,16(sp)
   8951c:	003fd306 	br	8946c <___vfprintf_internal_r+0xa38>
   89520:	d9014d17 	ldw	r4,1332(sp)
   89524:	21000414 	ori	r4,r4,16
   89528:	d9014d15 	stw	r4,1332(sp)
   8952c:	d9414d17 	ldw	r5,1332(sp)
   89530:	2880080c 	andi	r2,r5,32
   89534:	1001081e 	bne	r2,zero,89958 <___vfprintf_internal_r+0xf24>
   89538:	d8c14d17 	ldw	r3,1332(sp)
   8953c:	1880040c 	andi	r2,r3,16
   89540:	1002b01e 	bne	r2,zero,8a004 <___vfprintf_internal_r+0x15d0>
   89544:	d9014d17 	ldw	r4,1332(sp)
   89548:	2080100c 	andi	r2,r4,64
   8954c:	1002ad26 	beq	r2,zero,8a004 <___vfprintf_internal_r+0x15d0>
   89550:	3c00000b 	ldhu	r16,0(r7)
   89554:	01000044 	movi	r4,1
   89558:	39c00104 	addi	r7,r7,4
   8955c:	0023883a 	mov	r17,zero
   89560:	d9c14115 	stw	r7,1284(sp)
   89564:	d8000405 	stb	zero,16(sp)
   89568:	003fc006 	br	8946c <___vfprintf_internal_r+0xa38>
   8956c:	d9015017 	ldw	r4,1344(sp)
   89570:	b00b883a 	mov	r5,r22
   89574:	d9800d04 	addi	r6,sp,52
   89578:	00889dc0 	call	889dc <__sprint_r>
   8957c:	103ee51e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89580:	dc800f17 	ldw	r18,60(sp)
   89584:	d8c01a04 	addi	r3,sp,104
   89588:	d9814d17 	ldw	r6,1332(sp)
   8958c:	3080004c 	andi	r2,r6,1
   89590:	1005003a 	cmpeq	r2,r2,zero
   89594:	103ea51e 	bne	r2,zero,8902c <___vfprintf_internal_r+0x5f8>
   89598:	00800044 	movi	r2,1
   8959c:	dc400e17 	ldw	r17,56(sp)
   895a0:	18800115 	stw	r2,4(r3)
   895a4:	d8814a17 	ldw	r2,1320(sp)
   895a8:	94800044 	addi	r18,r18,1
   895ac:	8c400044 	addi	r17,r17,1
   895b0:	18800015 	stw	r2,0(r3)
   895b4:	008001c4 	movi	r2,7
   895b8:	dc800f15 	stw	r18,60(sp)
   895bc:	dc400e15 	stw	r17,56(sp)
   895c0:	14421e0e 	bge	r2,r17,89e3c <___vfprintf_internal_r+0x1408>
   895c4:	d9015017 	ldw	r4,1344(sp)
   895c8:	b00b883a 	mov	r5,r22
   895cc:	d9800d04 	addi	r6,sp,52
   895d0:	00889dc0 	call	889dc <__sprint_r>
   895d4:	103ecf1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   895d8:	dc800f17 	ldw	r18,60(sp)
   895dc:	d8c01a04 	addi	r3,sp,104
   895e0:	003e9206 	br	8902c <___vfprintf_internal_r+0x5f8>
   895e4:	d9015017 	ldw	r4,1344(sp)
   895e8:	b00b883a 	mov	r5,r22
   895ec:	d9800d04 	addi	r6,sp,52
   895f0:	00889dc0 	call	889dc <__sprint_r>
   895f4:	103ec026 	beq	r2,zero,890f8 <___vfprintf_internal_r+0x6c4>
   895f8:	003ec606 	br	89114 <___vfprintf_internal_r+0x6e0>
   895fc:	d9015017 	ldw	r4,1344(sp)
   89600:	b00b883a 	mov	r5,r22
   89604:	d9800d04 	addi	r6,sp,52
   89608:	d9c15215 	stw	r7,1352(sp)
   8960c:	00889dc0 	call	889dc <__sprint_r>
   89610:	d9c15217 	ldw	r7,1352(sp)
   89614:	103ebf1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89618:	dc800f17 	ldw	r18,60(sp)
   8961c:	dc400e17 	ldw	r17,56(sp)
   89620:	dd401a04 	addi	r21,sp,104
   89624:	003e7406 	br	88ff8 <___vfprintf_internal_r+0x5c4>
   89628:	d9015017 	ldw	r4,1344(sp)
   8962c:	b00b883a 	mov	r5,r22
   89630:	d9800d04 	addi	r6,sp,52
   89634:	d9c15215 	stw	r7,1352(sp)
   89638:	00889dc0 	call	889dc <__sprint_r>
   8963c:	d9c15217 	ldw	r7,1352(sp)
   89640:	103eb41e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89644:	dd401a04 	addi	r21,sp,104
   89648:	003d6d06 	br	88c00 <___vfprintf_internal_r+0x1cc>
   8964c:	d9015017 	ldw	r4,1344(sp)
   89650:	b00b883a 	mov	r5,r22
   89654:	d9800d04 	addi	r6,sp,52
   89658:	d9c15215 	stw	r7,1352(sp)
   8965c:	00889dc0 	call	889dc <__sprint_r>
   89660:	d9c15217 	ldw	r7,1352(sp)
   89664:	103eab1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89668:	dc800f17 	ldw	r18,60(sp)
   8966c:	dc400e17 	ldw	r17,56(sp)
   89670:	dd401a04 	addi	r21,sp,104
   89674:	003e3406 	br	88f48 <___vfprintf_internal_r+0x514>
   89678:	d9015017 	ldw	r4,1344(sp)
   8967c:	b00b883a 	mov	r5,r22
   89680:	d9800d04 	addi	r6,sp,52
   89684:	d9c15215 	stw	r7,1352(sp)
   89688:	00889dc0 	call	889dc <__sprint_r>
   8968c:	d9c15217 	ldw	r7,1352(sp)
   89690:	103ea01e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89694:	dc800f17 	ldw	r18,60(sp)
   89698:	dc400e17 	ldw	r17,56(sp)
   8969c:	dd401a04 	addi	r21,sp,104
   896a0:	003e1c06 	br	88f14 <___vfprintf_internal_r+0x4e0>
   896a4:	d9015017 	ldw	r4,1344(sp)
   896a8:	b00b883a 	mov	r5,r22
   896ac:	d9800d04 	addi	r6,sp,52
   896b0:	d9c15215 	stw	r7,1352(sp)
   896b4:	00889dc0 	call	889dc <__sprint_r>
   896b8:	d9c15217 	ldw	r7,1352(sp)
   896bc:	103e951e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   896c0:	dc800f17 	ldw	r18,60(sp)
   896c4:	dc400e17 	ldw	r17,56(sp)
   896c8:	dd401a04 	addi	r21,sp,104
   896cc:	003e0406 	br	88ee0 <___vfprintf_internal_r+0x4ac>
   896d0:	d9000617 	ldw	r4,24(sp)
   896d4:	0102520e 	bge	zero,r4,8a020 <___vfprintf_internal_r+0x15ec>
   896d8:	d9814817 	ldw	r6,1312(sp)
   896dc:	21807a16 	blt	r4,r6,898c8 <___vfprintf_internal_r+0xe94>
   896e0:	d8814217 	ldw	r2,1288(sp)
   896e4:	91a5883a 	add	r18,r18,r6
   896e8:	8c400044 	addi	r17,r17,1
   896ec:	a8800015 	stw	r2,0(r21)
   896f0:	008001c4 	movi	r2,7
   896f4:	a9800115 	stw	r6,4(r21)
   896f8:	dc800f15 	stw	r18,60(sp)
   896fc:	dc400e15 	stw	r17,56(sp)
   89700:	1442f616 	blt	r2,r17,8a2dc <___vfprintf_internal_r+0x18a8>
   89704:	a8c00204 	addi	r3,r21,8
   89708:	d9414817 	ldw	r5,1312(sp)
   8970c:	2161c83a 	sub	r16,r4,r5
   89710:	043f9d0e 	bge	zero,r16,89588 <___vfprintf_internal_r+0xb54>
   89714:	00800404 	movi	r2,16
   89718:	1402130e 	bge	r2,r16,89f68 <___vfprintf_internal_r+0x1534>
   8971c:	dc400e17 	ldw	r17,56(sp)
   89720:	1027883a 	mov	r19,r2
   89724:	07000274 	movhi	fp,9
   89728:	e70ee004 	addi	fp,fp,15232
   8972c:	050001c4 	movi	r20,7
   89730:	00000306 	br	89740 <___vfprintf_internal_r+0xd0c>
   89734:	18c00204 	addi	r3,r3,8
   89738:	843ffc04 	addi	r16,r16,-16
   8973c:	9c020d0e 	bge	r19,r16,89f74 <___vfprintf_internal_r+0x1540>
   89740:	94800404 	addi	r18,r18,16
   89744:	8c400044 	addi	r17,r17,1
   89748:	1f000015 	stw	fp,0(r3)
   8974c:	1cc00115 	stw	r19,4(r3)
   89750:	dc800f15 	stw	r18,60(sp)
   89754:	dc400e15 	stw	r17,56(sp)
   89758:	a47ff60e 	bge	r20,r17,89734 <___vfprintf_internal_r+0xd00>
   8975c:	d9015017 	ldw	r4,1344(sp)
   89760:	b00b883a 	mov	r5,r22
   89764:	d9800d04 	addi	r6,sp,52
   89768:	00889dc0 	call	889dc <__sprint_r>
   8976c:	103e691e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89770:	dc800f17 	ldw	r18,60(sp)
   89774:	dc400e17 	ldw	r17,56(sp)
   89778:	d8c01a04 	addi	r3,sp,104
   8977c:	003fee06 	br	89738 <___vfprintf_internal_r+0xd04>
   89780:	d8814817 	ldw	r2,1312(sp)
   89784:	143fffc4 	addi	r16,r2,-1
   89788:	043e970e 	bge	zero,r16,891e8 <___vfprintf_internal_r+0x7b4>
   8978c:	00800404 	movi	r2,16
   89790:	1400180e 	bge	r2,r16,897f4 <___vfprintf_internal_r+0xdc0>
   89794:	1029883a 	mov	r20,r2
   89798:	07000274 	movhi	fp,9
   8979c:	e70ee004 	addi	fp,fp,15232
   897a0:	054001c4 	movi	r21,7
   897a4:	00000306 	br	897b4 <___vfprintf_internal_r+0xd80>
   897a8:	9cc00204 	addi	r19,r19,8
   897ac:	843ffc04 	addi	r16,r16,-16
   897b0:	a400120e 	bge	r20,r16,897fc <___vfprintf_internal_r+0xdc8>
   897b4:	94800404 	addi	r18,r18,16
   897b8:	8c400044 	addi	r17,r17,1
   897bc:	9f000015 	stw	fp,0(r19)
   897c0:	9d000115 	stw	r20,4(r19)
   897c4:	dc800f15 	stw	r18,60(sp)
   897c8:	dc400e15 	stw	r17,56(sp)
   897cc:	ac7ff60e 	bge	r21,r17,897a8 <___vfprintf_internal_r+0xd74>
   897d0:	d9015017 	ldw	r4,1344(sp)
   897d4:	b00b883a 	mov	r5,r22
   897d8:	d9800d04 	addi	r6,sp,52
   897dc:	00889dc0 	call	889dc <__sprint_r>
   897e0:	103e4c1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   897e4:	dc800f17 	ldw	r18,60(sp)
   897e8:	dc400e17 	ldw	r17,56(sp)
   897ec:	dcc01a04 	addi	r19,sp,104
   897f0:	003fee06 	br	897ac <___vfprintf_internal_r+0xd78>
   897f4:	07000274 	movhi	fp,9
   897f8:	e70ee004 	addi	fp,fp,15232
   897fc:	9425883a 	add	r18,r18,r16
   89800:	8c400044 	addi	r17,r17,1
   89804:	008001c4 	movi	r2,7
   89808:	9f000015 	stw	fp,0(r19)
   8980c:	9c000115 	stw	r16,4(r19)
   89810:	dc800f15 	stw	r18,60(sp)
   89814:	dc400e15 	stw	r17,56(sp)
   89818:	147e720e 	bge	r2,r17,891e4 <___vfprintf_internal_r+0x7b0>
   8981c:	d9015017 	ldw	r4,1344(sp)
   89820:	b00b883a 	mov	r5,r22
   89824:	d9800d04 	addi	r6,sp,52
   89828:	00889dc0 	call	889dc <__sprint_r>
   8982c:	103e391e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89830:	dc800f17 	ldw	r18,60(sp)
   89834:	dc400e17 	ldw	r17,56(sp)
   89838:	dcc01a04 	addi	r19,sp,104
   8983c:	003e6a06 	br	891e8 <___vfprintf_internal_r+0x7b4>
   89840:	d9015017 	ldw	r4,1344(sp)
   89844:	b00b883a 	mov	r5,r22
   89848:	d9800d04 	addi	r6,sp,52
   8984c:	d9c15215 	stw	r7,1352(sp)
   89850:	00889dc0 	call	889dc <__sprint_r>
   89854:	d9c15217 	ldw	r7,1352(sp)
   89858:	103e2e1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8985c:	dc800f17 	ldw	r18,60(sp)
   89860:	dc400e17 	ldw	r17,56(sp)
   89864:	dd401a04 	addi	r21,sp,104
   89868:	003dba06 	br	88f54 <___vfprintf_internal_r+0x520>
   8986c:	d9015017 	ldw	r4,1344(sp)
   89870:	b00b883a 	mov	r5,r22
   89874:	d9800d04 	addi	r6,sp,52
   89878:	00889dc0 	call	889dc <__sprint_r>
   8987c:	103e251e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89880:	dc800f17 	ldw	r18,60(sp)
   89884:	dc400e17 	ldw	r17,56(sp)
   89888:	dcc01a04 	addi	r19,sp,104
   8988c:	003e4206 	br	89198 <___vfprintf_internal_r+0x764>
   89890:	d9015017 	ldw	r4,1344(sp)
   89894:	b00b883a 	mov	r5,r22
   89898:	d9800d04 	addi	r6,sp,52
   8989c:	00889dc0 	call	889dc <__sprint_r>
   898a0:	103e1c1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   898a4:	dc800f17 	ldw	r18,60(sp)
   898a8:	dc400e17 	ldw	r17,56(sp)
   898ac:	d8c01a04 	addi	r3,sp,104
   898b0:	003e2e06 	br	8916c <___vfprintf_internal_r+0x738>
   898b4:	d9414d17 	ldw	r5,1332(sp)
   898b8:	2880004c 	andi	r2,r5,1
   898bc:	1005003a 	cmpeq	r2,r2,zero
   898c0:	103dda1e 	bne	r2,zero,8902c <___vfprintf_internal_r+0x5f8>
   898c4:	003e9f06 	br	89344 <___vfprintf_internal_r+0x910>
   898c8:	d8c14217 	ldw	r3,1288(sp)
   898cc:	9125883a 	add	r18,r18,r4
   898d0:	8c400044 	addi	r17,r17,1
   898d4:	008001c4 	movi	r2,7
   898d8:	a8c00015 	stw	r3,0(r21)
   898dc:	a9000115 	stw	r4,4(r21)
   898e0:	dc800f15 	stw	r18,60(sp)
   898e4:	dc400e15 	stw	r17,56(sp)
   898e8:	14426616 	blt	r2,r17,8a284 <___vfprintf_internal_r+0x1850>
   898ec:	a8c00204 	addi	r3,r21,8
   898f0:	d9414a17 	ldw	r5,1320(sp)
   898f4:	00800044 	movi	r2,1
   898f8:	94800044 	addi	r18,r18,1
   898fc:	8c400044 	addi	r17,r17,1
   89900:	18800115 	stw	r2,4(r3)
   89904:	008001c4 	movi	r2,7
   89908:	19400015 	stw	r5,0(r3)
   8990c:	dc800f15 	stw	r18,60(sp)
   89910:	dc400e15 	stw	r17,56(sp)
   89914:	2021883a 	mov	r16,r4
   89918:	14425016 	blt	r2,r17,8a25c <___vfprintf_internal_r+0x1828>
   8991c:	19400204 	addi	r5,r3,8
   89920:	d9814817 	ldw	r6,1312(sp)
   89924:	8c400044 	addi	r17,r17,1
   89928:	dc400e15 	stw	r17,56(sp)
   8992c:	3107c83a 	sub	r3,r6,r4
   89930:	d9014217 	ldw	r4,1288(sp)
   89934:	90e5883a 	add	r18,r18,r3
   89938:	28c00115 	stw	r3,4(r5)
   8993c:	8105883a 	add	r2,r16,r4
   89940:	28800015 	stw	r2,0(r5)
   89944:	008001c4 	movi	r2,7
   89948:	dc800f15 	stw	r18,60(sp)
   8994c:	147f1d16 	blt	r2,r17,895c4 <___vfprintf_internal_r+0xb90>
   89950:	28c00204 	addi	r3,r5,8
   89954:	003db506 	br	8902c <___vfprintf_internal_r+0x5f8>
   89958:	3c000017 	ldw	r16,0(r7)
   8995c:	3c400117 	ldw	r17,4(r7)
   89960:	39800204 	addi	r6,r7,8
   89964:	01000044 	movi	r4,1
   89968:	d9814115 	stw	r6,1284(sp)
   8996c:	d8000405 	stb	zero,16(sp)
   89970:	003ebe06 	br	8946c <___vfprintf_internal_r+0xa38>
   89974:	3c000017 	ldw	r16,0(r7)
   89978:	3c400117 	ldw	r17,4(r7)
   8997c:	38800204 	addi	r2,r7,8
   89980:	d8814115 	stw	r2,1284(sp)
   89984:	003eb706 	br	89464 <___vfprintf_internal_r+0xa30>
   89988:	3c000017 	ldw	r16,0(r7)
   8998c:	3c400117 	ldw	r17,4(r7)
   89990:	39000204 	addi	r4,r7,8
   89994:	d9014115 	stw	r4,1284(sp)
   89998:	0009883a 	mov	r4,zero
   8999c:	d8000405 	stb	zero,16(sp)
   899a0:	003eb206 	br	8946c <___vfprintf_internal_r+0xa38>
   899a4:	38c00017 	ldw	r3,0(r7)
   899a8:	39c00104 	addi	r7,r7,4
   899ac:	d8c14b15 	stw	r3,1324(sp)
   899b0:	1800d10e 	bge	r3,zero,89cf8 <___vfprintf_internal_r+0x12c4>
   899b4:	00c7c83a 	sub	r3,zero,r3
   899b8:	d8c14b15 	stw	r3,1324(sp)
   899bc:	d9014d17 	ldw	r4,1332(sp)
   899c0:	b8c00007 	ldb	r3,0(r23)
   899c4:	21000114 	ori	r4,r4,4
   899c8:	d9014d15 	stw	r4,1332(sp)
   899cc:	003c9806 	br	88c30 <___vfprintf_internal_r+0x1fc>
   899d0:	d9814d17 	ldw	r6,1332(sp)
   899d4:	3080080c 	andi	r2,r6,32
   899d8:	1001f026 	beq	r2,zero,8a19c <___vfprintf_internal_r+0x1768>
   899dc:	d9014c17 	ldw	r4,1328(sp)
   899e0:	38800017 	ldw	r2,0(r7)
   899e4:	39c00104 	addi	r7,r7,4
   899e8:	d9c14115 	stw	r7,1284(sp)
   899ec:	2007d7fa 	srai	r3,r4,31
   899f0:	d9c14117 	ldw	r7,1284(sp)
   899f4:	11000015 	stw	r4,0(r2)
   899f8:	10c00115 	stw	r3,4(r2)
   899fc:	003c6906 	br	88ba4 <___vfprintf_internal_r+0x170>
   89a00:	b8c00007 	ldb	r3,0(r23)
   89a04:	00801b04 	movi	r2,108
   89a08:	18824f26 	beq	r3,r2,8a348 <___vfprintf_internal_r+0x1914>
   89a0c:	d9414d17 	ldw	r5,1332(sp)
   89a10:	29400414 	ori	r5,r5,16
   89a14:	d9414d15 	stw	r5,1332(sp)
   89a18:	003c8506 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89a1c:	d9814d17 	ldw	r6,1332(sp)
   89a20:	b8c00007 	ldb	r3,0(r23)
   89a24:	31800814 	ori	r6,r6,32
   89a28:	d9814d15 	stw	r6,1332(sp)
   89a2c:	003c8006 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89a30:	d8814d17 	ldw	r2,1332(sp)
   89a34:	3c000017 	ldw	r16,0(r7)
   89a38:	00c01e04 	movi	r3,120
   89a3c:	10800094 	ori	r2,r2,2
   89a40:	d8814d15 	stw	r2,1332(sp)
   89a44:	39c00104 	addi	r7,r7,4
   89a48:	01400274 	movhi	r5,9
   89a4c:	294ec804 	addi	r5,r5,15136
   89a50:	00800c04 	movi	r2,48
   89a54:	0023883a 	mov	r17,zero
   89a58:	01000084 	movi	r4,2
   89a5c:	d9c14115 	stw	r7,1284(sp)
   89a60:	d8c14e15 	stw	r3,1336(sp)
   89a64:	d9414515 	stw	r5,1300(sp)
   89a68:	d8800505 	stb	r2,20(sp)
   89a6c:	d8c00545 	stb	r3,21(sp)
   89a70:	d8000405 	stb	zero,16(sp)
   89a74:	003e7d06 	br	8946c <___vfprintf_internal_r+0xa38>
   89a78:	d8814d17 	ldw	r2,1332(sp)
   89a7c:	b8c00007 	ldb	r3,0(r23)
   89a80:	10801014 	ori	r2,r2,64
   89a84:	d8814d15 	stw	r2,1332(sp)
   89a88:	003c6906 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89a8c:	d9414d17 	ldw	r5,1332(sp)
   89a90:	2880020c 	andi	r2,r5,8
   89a94:	1001df26 	beq	r2,zero,8a214 <___vfprintf_internal_r+0x17e0>
   89a98:	39800017 	ldw	r6,0(r7)
   89a9c:	38800204 	addi	r2,r7,8
   89aa0:	d8814115 	stw	r2,1284(sp)
   89aa4:	d9814315 	stw	r6,1292(sp)
   89aa8:	39c00117 	ldw	r7,4(r7)
   89aac:	d9c14415 	stw	r7,1296(sp)
   89ab0:	d9014317 	ldw	r4,1292(sp)
   89ab4:	d9414417 	ldw	r5,1296(sp)
   89ab8:	008f5c00 	call	8f5c0 <__isinfd>
   89abc:	10021726 	beq	r2,zero,8a31c <___vfprintf_internal_r+0x18e8>
   89ac0:	d9014317 	ldw	r4,1292(sp)
   89ac4:	d9414417 	ldw	r5,1296(sp)
   89ac8:	000d883a 	mov	r6,zero
   89acc:	000f883a 	mov	r7,zero
   89ad0:	00879c00 	call	879c0 <__ltdf2>
   89ad4:	1002ca16 	blt	r2,zero,8a600 <___vfprintf_internal_r+0x1bcc>
   89ad8:	d9414e17 	ldw	r5,1336(sp)
   89adc:	008011c4 	movi	r2,71
   89ae0:	11420a16 	blt	r2,r5,8a30c <___vfprintf_internal_r+0x18d8>
   89ae4:	01800274 	movhi	r6,9
   89ae8:	318ecd04 	addi	r6,r6,15156
   89aec:	d9814215 	stw	r6,1288(sp)
   89af0:	d9014d17 	ldw	r4,1332(sp)
   89af4:	00c000c4 	movi	r3,3
   89af8:	00bfdfc4 	movi	r2,-129
   89afc:	2088703a 	and	r4,r4,r2
   89b00:	180f883a 	mov	r7,r3
   89b04:	d8c14615 	stw	r3,1304(sp)
   89b08:	d9014d15 	stw	r4,1332(sp)
   89b0c:	d8014715 	stw	zero,1308(sp)
   89b10:	003e6a06 	br	894bc <___vfprintf_internal_r+0xa88>
   89b14:	38800017 	ldw	r2,0(r7)
   89b18:	00c00044 	movi	r3,1
   89b1c:	39c00104 	addi	r7,r7,4
   89b20:	d9c14115 	stw	r7,1284(sp)
   89b24:	d9001004 	addi	r4,sp,64
   89b28:	180f883a 	mov	r7,r3
   89b2c:	d8c14615 	stw	r3,1304(sp)
   89b30:	d9014215 	stw	r4,1288(sp)
   89b34:	d8801005 	stb	r2,64(sp)
   89b38:	d8000405 	stb	zero,16(sp)
   89b3c:	003cac06 	br	88df0 <___vfprintf_internal_r+0x3bc>
   89b40:	01400274 	movhi	r5,9
   89b44:	294ed304 	addi	r5,r5,15180
   89b48:	d9414515 	stw	r5,1300(sp)
   89b4c:	d9814d17 	ldw	r6,1332(sp)
   89b50:	3080080c 	andi	r2,r6,32
   89b54:	1000f926 	beq	r2,zero,89f3c <___vfprintf_internal_r+0x1508>
   89b58:	3c000017 	ldw	r16,0(r7)
   89b5c:	3c400117 	ldw	r17,4(r7)
   89b60:	38800204 	addi	r2,r7,8
   89b64:	d8814115 	stw	r2,1284(sp)
   89b68:	d9414d17 	ldw	r5,1332(sp)
   89b6c:	2880004c 	andi	r2,r5,1
   89b70:	1005003a 	cmpeq	r2,r2,zero
   89b74:	1000b31e 	bne	r2,zero,89e44 <___vfprintf_internal_r+0x1410>
   89b78:	8444b03a 	or	r2,r16,r17
   89b7c:	1000b126 	beq	r2,zero,89e44 <___vfprintf_internal_r+0x1410>
   89b80:	d9814e17 	ldw	r6,1336(sp)
   89b84:	29400094 	ori	r5,r5,2
   89b88:	00800c04 	movi	r2,48
   89b8c:	01000084 	movi	r4,2
   89b90:	d9414d15 	stw	r5,1332(sp)
   89b94:	d8800505 	stb	r2,20(sp)
   89b98:	d9800545 	stb	r6,21(sp)
   89b9c:	d8000405 	stb	zero,16(sp)
   89ba0:	003e3206 	br	8946c <___vfprintf_internal_r+0xa38>
   89ba4:	01800274 	movhi	r6,9
   89ba8:	318ec804 	addi	r6,r6,15136
   89bac:	d9814515 	stw	r6,1300(sp)
   89bb0:	003fe606 	br	89b4c <___vfprintf_internal_r+0x1118>
   89bb4:	00800ac4 	movi	r2,43
   89bb8:	d8800405 	stb	r2,16(sp)
   89bbc:	b8c00007 	ldb	r3,0(r23)
   89bc0:	003c1b06 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89bc4:	d8814d17 	ldw	r2,1332(sp)
   89bc8:	b8c00007 	ldb	r3,0(r23)
   89bcc:	10800054 	ori	r2,r2,1
   89bd0:	d8814d15 	stw	r2,1332(sp)
   89bd4:	003c1606 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89bd8:	d8800407 	ldb	r2,16(sp)
   89bdc:	1000461e 	bne	r2,zero,89cf8 <___vfprintf_internal_r+0x12c4>
   89be0:	00800804 	movi	r2,32
   89be4:	d8800405 	stb	r2,16(sp)
   89be8:	b8c00007 	ldb	r3,0(r23)
   89bec:	003c1006 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89bf0:	d9814d17 	ldw	r6,1332(sp)
   89bf4:	b8c00007 	ldb	r3,0(r23)
   89bf8:	31800214 	ori	r6,r6,8
   89bfc:	d9814d15 	stw	r6,1332(sp)
   89c00:	003c0b06 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89c04:	0007883a 	mov	r3,zero
   89c08:	01000244 	movi	r4,9
   89c0c:	188002a4 	muli	r2,r3,10
   89c10:	b8c00007 	ldb	r3,0(r23)
   89c14:	d9814e17 	ldw	r6,1336(sp)
   89c18:	bdc00044 	addi	r23,r23,1
   89c1c:	d8c14e15 	stw	r3,1336(sp)
   89c20:	d9414e17 	ldw	r5,1336(sp)
   89c24:	3085883a 	add	r2,r6,r2
   89c28:	10fff404 	addi	r3,r2,-48
   89c2c:	28bff404 	addi	r2,r5,-48
   89c30:	20bff62e 	bgeu	r4,r2,89c0c <___vfprintf_internal_r+0x11d8>
   89c34:	d8c14b15 	stw	r3,1324(sp)
   89c38:	003bff06 	br	88c38 <___vfprintf_internal_r+0x204>
   89c3c:	d9414d17 	ldw	r5,1332(sp)
   89c40:	b8c00007 	ldb	r3,0(r23)
   89c44:	29402014 	ori	r5,r5,128
   89c48:	d9414d15 	stw	r5,1332(sp)
   89c4c:	003bf806 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89c50:	b8c00007 	ldb	r3,0(r23)
   89c54:	00800a84 	movi	r2,42
   89c58:	bdc00044 	addi	r23,r23,1
   89c5c:	18831526 	beq	r3,r2,8a8b4 <___vfprintf_internal_r+0x1e80>
   89c60:	d8c14e15 	stw	r3,1336(sp)
   89c64:	18bff404 	addi	r2,r3,-48
   89c68:	00c00244 	movi	r3,9
   89c6c:	18827836 	bltu	r3,r2,8a650 <___vfprintf_internal_r+0x1c1c>
   89c70:	000d883a 	mov	r6,zero
   89c74:	308002a4 	muli	r2,r6,10
   89c78:	b9800007 	ldb	r6,0(r23)
   89c7c:	d9414e17 	ldw	r5,1336(sp)
   89c80:	bdc00044 	addi	r23,r23,1
   89c84:	d9814e15 	stw	r6,1336(sp)
   89c88:	d9014e17 	ldw	r4,1336(sp)
   89c8c:	1145883a 	add	r2,r2,r5
   89c90:	11bff404 	addi	r6,r2,-48
   89c94:	20bff404 	addi	r2,r4,-48
   89c98:	18bff62e 	bgeu	r3,r2,89c74 <___vfprintf_internal_r+0x1240>
   89c9c:	3027883a 	mov	r19,r6
   89ca0:	303be50e 	bge	r6,zero,88c38 <___vfprintf_internal_r+0x204>
   89ca4:	04ffffc4 	movi	r19,-1
   89ca8:	003be306 	br	88c38 <___vfprintf_internal_r+0x204>
   89cac:	d8000405 	stb	zero,16(sp)
   89cb0:	39800017 	ldw	r6,0(r7)
   89cb4:	39c00104 	addi	r7,r7,4
   89cb8:	d9c14115 	stw	r7,1284(sp)
   89cbc:	d9814215 	stw	r6,1288(sp)
   89cc0:	3001c926 	beq	r6,zero,8a3e8 <___vfprintf_internal_r+0x19b4>
   89cc4:	98000e16 	blt	r19,zero,89d00 <___vfprintf_internal_r+0x12cc>
   89cc8:	d9014217 	ldw	r4,1288(sp)
   89ccc:	000b883a 	mov	r5,zero
   89cd0:	980d883a 	mov	r6,r19
   89cd4:	008daf00 	call	8daf0 <memchr>
   89cd8:	10025926 	beq	r2,zero,8a640 <___vfprintf_internal_r+0x1c0c>
   89cdc:	d8c14217 	ldw	r3,1288(sp)
   89ce0:	10cfc83a 	sub	r7,r2,r3
   89ce4:	99c19e16 	blt	r19,r7,8a360 <___vfprintf_internal_r+0x192c>
   89ce8:	d9c14615 	stw	r7,1304(sp)
   89cec:	38000916 	blt	r7,zero,89d14 <___vfprintf_internal_r+0x12e0>
   89cf0:	d8014715 	stw	zero,1308(sp)
   89cf4:	003df106 	br	894bc <___vfprintf_internal_r+0xa88>
   89cf8:	b8c00007 	ldb	r3,0(r23)
   89cfc:	003bcc06 	br	88c30 <___vfprintf_internal_r+0x1fc>
   89d00:	d9014217 	ldw	r4,1288(sp)
   89d04:	00889680 	call	88968 <strlen>
   89d08:	d8814615 	stw	r2,1304(sp)
   89d0c:	100f883a 	mov	r7,r2
   89d10:	103ff70e 	bge	r2,zero,89cf0 <___vfprintf_internal_r+0x12bc>
   89d14:	d8014615 	stw	zero,1304(sp)
   89d18:	d8014715 	stw	zero,1308(sp)
   89d1c:	003de706 	br	894bc <___vfprintf_internal_r+0xa88>
   89d20:	20c03fcc 	andi	r3,r4,255
   89d24:	00800044 	movi	r2,1
   89d28:	18802d26 	beq	r3,r2,89de0 <___vfprintf_internal_r+0x13ac>
   89d2c:	18800e36 	bltu	r3,r2,89d68 <___vfprintf_internal_r+0x1334>
   89d30:	00800084 	movi	r2,2
   89d34:	1880fa26 	beq	r3,r2,8a120 <___vfprintf_internal_r+0x16ec>
   89d38:	01000274 	movhi	r4,9
   89d3c:	210ed804 	addi	r4,r4,15200
   89d40:	00889680 	call	88968 <strlen>
   89d44:	100f883a 	mov	r7,r2
   89d48:	dcc14615 	stw	r19,1304(sp)
   89d4c:	9880010e 	bge	r19,r2,89d54 <___vfprintf_internal_r+0x1320>
   89d50:	d8814615 	stw	r2,1304(sp)
   89d54:	00800274 	movhi	r2,9
   89d58:	108ed804 	addi	r2,r2,15200
   89d5c:	dcc14715 	stw	r19,1308(sp)
   89d60:	d8814215 	stw	r2,1288(sp)
   89d64:	003dd506 	br	894bc <___vfprintf_internal_r+0xa88>
   89d68:	d9401a04 	addi	r5,sp,104
   89d6c:	dd001004 	addi	r20,sp,64
   89d70:	d9414215 	stw	r5,1288(sp)
   89d74:	880a977a 	slli	r5,r17,29
   89d78:	d9814217 	ldw	r6,1288(sp)
   89d7c:	8004d0fa 	srli	r2,r16,3
   89d80:	8806d0fa 	srli	r3,r17,3
   89d84:	810001cc 	andi	r4,r16,7
   89d88:	2884b03a 	or	r2,r5,r2
   89d8c:	31bfffc4 	addi	r6,r6,-1
   89d90:	21000c04 	addi	r4,r4,48
   89d94:	d9814215 	stw	r6,1288(sp)
   89d98:	10cab03a 	or	r5,r2,r3
   89d9c:	31000005 	stb	r4,0(r6)
   89da0:	1021883a 	mov	r16,r2
   89da4:	1823883a 	mov	r17,r3
   89da8:	283ff21e 	bne	r5,zero,89d74 <___vfprintf_internal_r+0x1340>
   89dac:	d8c14d17 	ldw	r3,1332(sp)
   89db0:	1880004c 	andi	r2,r3,1
   89db4:	1005003a 	cmpeq	r2,r2,zero
   89db8:	103db91e 	bne	r2,zero,894a0 <___vfprintf_internal_r+0xa6c>
   89dbc:	20803fcc 	andi	r2,r4,255
   89dc0:	1080201c 	xori	r2,r2,128
   89dc4:	10bfe004 	addi	r2,r2,-128
   89dc8:	00c00c04 	movi	r3,48
   89dcc:	10fdb426 	beq	r2,r3,894a0 <___vfprintf_internal_r+0xa6c>
   89dd0:	31bfffc4 	addi	r6,r6,-1
   89dd4:	d9814215 	stw	r6,1288(sp)
   89dd8:	30c00005 	stb	r3,0(r6)
   89ddc:	003db006 	br	894a0 <___vfprintf_internal_r+0xa6c>
   89de0:	88800068 	cmpgeui	r2,r17,1
   89de4:	10002c1e 	bne	r2,zero,89e98 <___vfprintf_internal_r+0x1464>
   89de8:	8800021e 	bne	r17,zero,89df4 <___vfprintf_internal_r+0x13c0>
   89dec:	00800244 	movi	r2,9
   89df0:	14002936 	bltu	r2,r16,89e98 <___vfprintf_internal_r+0x1464>
   89df4:	d90019c4 	addi	r4,sp,103
   89df8:	dd001004 	addi	r20,sp,64
   89dfc:	d9014215 	stw	r4,1288(sp)
   89e00:	d9014217 	ldw	r4,1288(sp)
   89e04:	80800c04 	addi	r2,r16,48
   89e08:	20800005 	stb	r2,0(r4)
   89e0c:	003da406 	br	894a0 <___vfprintf_internal_r+0xa6c>
   89e10:	dc400e17 	ldw	r17,56(sp)
   89e14:	07000274 	movhi	fp,9
   89e18:	e70ee004 	addi	fp,fp,15232
   89e1c:	9425883a 	add	r18,r18,r16
   89e20:	8c400044 	addi	r17,r17,1
   89e24:	008001c4 	movi	r2,7
   89e28:	1f000015 	stw	fp,0(r3)
   89e2c:	1c000115 	stw	r16,4(r3)
   89e30:	dc800f15 	stw	r18,60(sp)
   89e34:	dc400e15 	stw	r17,56(sp)
   89e38:	147de216 	blt	r2,r17,895c4 <___vfprintf_internal_r+0xb90>
   89e3c:	18c00204 	addi	r3,r3,8
   89e40:	003c7a06 	br	8902c <___vfprintf_internal_r+0x5f8>
   89e44:	01000084 	movi	r4,2
   89e48:	d8000405 	stb	zero,16(sp)
   89e4c:	003d8706 	br	8946c <___vfprintf_internal_r+0xa38>
   89e50:	d9814d17 	ldw	r6,1332(sp)
   89e54:	30c4703a 	and	r2,r6,r3
   89e58:	1005003a 	cmpeq	r2,r2,zero
   89e5c:	103cb926 	beq	r2,zero,89144 <___vfprintf_internal_r+0x710>
   89e60:	d9014217 	ldw	r4,1288(sp)
   89e64:	94800044 	addi	r18,r18,1
   89e68:	8c400044 	addi	r17,r17,1
   89e6c:	008001c4 	movi	r2,7
   89e70:	a9000015 	stw	r4,0(r21)
   89e74:	a8c00115 	stw	r3,4(r21)
   89e78:	dc800f15 	stw	r18,60(sp)
   89e7c:	dc400e15 	stw	r17,56(sp)
   89e80:	147e6616 	blt	r2,r17,8981c <___vfprintf_internal_r+0xde8>
   89e84:	acc00204 	addi	r19,r21,8
   89e88:	003cd706 	br	891e8 <___vfprintf_internal_r+0x7b4>
   89e8c:	07000274 	movhi	fp,9
   89e90:	e70ee004 	addi	fp,fp,15232
   89e94:	003c4f06 	br	88fd4 <___vfprintf_internal_r+0x5a0>
   89e98:	dd001004 	addi	r20,sp,64
   89e9c:	dc801a04 	addi	r18,sp,104
   89ea0:	8009883a 	mov	r4,r16
   89ea4:	880b883a 	mov	r5,r17
   89ea8:	01800284 	movi	r6,10
   89eac:	000f883a 	mov	r7,zero
   89eb0:	00904340 	call	90434 <__umoddi3>
   89eb4:	12000c04 	addi	r8,r2,48
   89eb8:	94bfffc4 	addi	r18,r18,-1
   89ebc:	8009883a 	mov	r4,r16
   89ec0:	880b883a 	mov	r5,r17
   89ec4:	01800284 	movi	r6,10
   89ec8:	000f883a 	mov	r7,zero
   89ecc:	92000005 	stb	r8,0(r18)
   89ed0:	008fe580 	call	8fe58 <__udivdi3>
   89ed4:	1009883a 	mov	r4,r2
   89ed8:	1021883a 	mov	r16,r2
   89edc:	18800068 	cmpgeui	r2,r3,1
   89ee0:	1823883a 	mov	r17,r3
   89ee4:	103fee1e 	bne	r2,zero,89ea0 <___vfprintf_internal_r+0x146c>
   89ee8:	1800021e 	bne	r3,zero,89ef4 <___vfprintf_internal_r+0x14c0>
   89eec:	00800244 	movi	r2,9
   89ef0:	113feb36 	bltu	r2,r4,89ea0 <___vfprintf_internal_r+0x146c>
   89ef4:	94bfffc4 	addi	r18,r18,-1
   89ef8:	dc814215 	stw	r18,1288(sp)
   89efc:	003fc006 	br	89e00 <___vfprintf_internal_r+0x13cc>
   89f00:	d9014d17 	ldw	r4,1332(sp)
   89f04:	2080004c 	andi	r2,r4,1
   89f08:	10009a1e 	bne	r2,zero,8a174 <___vfprintf_internal_r+0x1740>
   89f0c:	d9401a04 	addi	r5,sp,104
   89f10:	dd001004 	addi	r20,sp,64
   89f14:	d9414215 	stw	r5,1288(sp)
   89f18:	003d6106 	br	894a0 <___vfprintf_internal_r+0xa6c>
   89f1c:	d9015017 	ldw	r4,1344(sp)
   89f20:	b00b883a 	mov	r5,r22
   89f24:	d9800d04 	addi	r6,sp,52
   89f28:	00889dc0 	call	889dc <__sprint_r>
   89f2c:	103c791e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89f30:	dc800f17 	ldw	r18,60(sp)
   89f34:	d8c01a04 	addi	r3,sp,104
   89f38:	003cff06 	br	89338 <___vfprintf_internal_r+0x904>
   89f3c:	d8c14d17 	ldw	r3,1332(sp)
   89f40:	1880040c 	andi	r2,r3,16
   89f44:	1000711e 	bne	r2,zero,8a10c <___vfprintf_internal_r+0x16d8>
   89f48:	d9014d17 	ldw	r4,1332(sp)
   89f4c:	2080100c 	andi	r2,r4,64
   89f50:	10006e26 	beq	r2,zero,8a10c <___vfprintf_internal_r+0x16d8>
   89f54:	3c00000b 	ldhu	r16,0(r7)
   89f58:	0023883a 	mov	r17,zero
   89f5c:	39c00104 	addi	r7,r7,4
   89f60:	d9c14115 	stw	r7,1284(sp)
   89f64:	003f0006 	br	89b68 <___vfprintf_internal_r+0x1134>
   89f68:	dc400e17 	ldw	r17,56(sp)
   89f6c:	07000274 	movhi	fp,9
   89f70:	e70ee004 	addi	fp,fp,15232
   89f74:	9425883a 	add	r18,r18,r16
   89f78:	8c400044 	addi	r17,r17,1
   89f7c:	008001c4 	movi	r2,7
   89f80:	1f000015 	stw	fp,0(r3)
   89f84:	1c000115 	stw	r16,4(r3)
   89f88:	dc800f15 	stw	r18,60(sp)
   89f8c:	dc400e15 	stw	r17,56(sp)
   89f90:	147d7616 	blt	r2,r17,8956c <___vfprintf_internal_r+0xb38>
   89f94:	18c00204 	addi	r3,r3,8
   89f98:	003d7b06 	br	89588 <___vfprintf_internal_r+0xb54>
   89f9c:	dc800f17 	ldw	r18,60(sp)
   89fa0:	dc400e17 	ldw	r17,56(sp)
   89fa4:	07000274 	movhi	fp,9
   89fa8:	e70ee404 	addi	fp,fp,15248
   89fac:	003bc006 	br	88eb0 <___vfprintf_internal_r+0x47c>
   89fb0:	d9015017 	ldw	r4,1344(sp)
   89fb4:	b00b883a 	mov	r5,r22
   89fb8:	d9800d04 	addi	r6,sp,52
   89fbc:	00889dc0 	call	889dc <__sprint_r>
   89fc0:	103c541e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   89fc4:	dc800f17 	ldw	r18,60(sp)
   89fc8:	d8c01a04 	addi	r3,sp,104
   89fcc:	003ce906 	br	89374 <___vfprintf_internal_r+0x940>
   89fd0:	3c000017 	ldw	r16,0(r7)
   89fd4:	0009883a 	mov	r4,zero
   89fd8:	39c00104 	addi	r7,r7,4
   89fdc:	0023883a 	mov	r17,zero
   89fe0:	d9c14115 	stw	r7,1284(sp)
   89fe4:	d8000405 	stb	zero,16(sp)
   89fe8:	003d2006 	br	8946c <___vfprintf_internal_r+0xa38>
   89fec:	38800017 	ldw	r2,0(r7)
   89ff0:	39c00104 	addi	r7,r7,4
   89ff4:	d9c14115 	stw	r7,1284(sp)
   89ff8:	1023d7fa 	srai	r17,r2,31
   89ffc:	1021883a 	mov	r16,r2
   8a000:	003d1806 	br	89464 <___vfprintf_internal_r+0xa30>
   8a004:	3c000017 	ldw	r16,0(r7)
   8a008:	01000044 	movi	r4,1
   8a00c:	39c00104 	addi	r7,r7,4
   8a010:	0023883a 	mov	r17,zero
   8a014:	d9c14115 	stw	r7,1284(sp)
   8a018:	d8000405 	stb	zero,16(sp)
   8a01c:	003d1306 	br	8946c <___vfprintf_internal_r+0xa38>
   8a020:	00800274 	movhi	r2,9
   8a024:	108edf04 	addi	r2,r2,15228
   8a028:	94800044 	addi	r18,r18,1
   8a02c:	8c400044 	addi	r17,r17,1
   8a030:	a8800015 	stw	r2,0(r21)
   8a034:	00c00044 	movi	r3,1
   8a038:	008001c4 	movi	r2,7
   8a03c:	a8c00115 	stw	r3,4(r21)
   8a040:	dc800f15 	stw	r18,60(sp)
   8a044:	dc400e15 	stw	r17,56(sp)
   8a048:	1440ca16 	blt	r2,r17,8a374 <___vfprintf_internal_r+0x1940>
   8a04c:	a8c00204 	addi	r3,r21,8
   8a050:	2000061e 	bne	r4,zero,8a06c <___vfprintf_internal_r+0x1638>
   8a054:	d9414817 	ldw	r5,1312(sp)
   8a058:	2800041e 	bne	r5,zero,8a06c <___vfprintf_internal_r+0x1638>
   8a05c:	d9814d17 	ldw	r6,1332(sp)
   8a060:	3080004c 	andi	r2,r6,1
   8a064:	1005003a 	cmpeq	r2,r2,zero
   8a068:	103bf01e 	bne	r2,zero,8902c <___vfprintf_internal_r+0x5f8>
   8a06c:	00800044 	movi	r2,1
   8a070:	dc400e17 	ldw	r17,56(sp)
   8a074:	18800115 	stw	r2,4(r3)
   8a078:	d8814a17 	ldw	r2,1320(sp)
   8a07c:	94800044 	addi	r18,r18,1
   8a080:	8c400044 	addi	r17,r17,1
   8a084:	18800015 	stw	r2,0(r3)
   8a088:	008001c4 	movi	r2,7
   8a08c:	dc800f15 	stw	r18,60(sp)
   8a090:	dc400e15 	stw	r17,56(sp)
   8a094:	1440ca16 	blt	r2,r17,8a3c0 <___vfprintf_internal_r+0x198c>
   8a098:	18c00204 	addi	r3,r3,8
   8a09c:	0121c83a 	sub	r16,zero,r4
   8a0a0:	0400500e 	bge	zero,r16,8a1e4 <___vfprintf_internal_r+0x17b0>
   8a0a4:	00800404 	movi	r2,16
   8a0a8:	1400800e 	bge	r2,r16,8a2ac <___vfprintf_internal_r+0x1878>
   8a0ac:	1027883a 	mov	r19,r2
   8a0b0:	07000274 	movhi	fp,9
   8a0b4:	e70ee004 	addi	fp,fp,15232
   8a0b8:	050001c4 	movi	r20,7
   8a0bc:	00000306 	br	8a0cc <___vfprintf_internal_r+0x1698>
   8a0c0:	18c00204 	addi	r3,r3,8
   8a0c4:	843ffc04 	addi	r16,r16,-16
   8a0c8:	9c007a0e 	bge	r19,r16,8a2b4 <___vfprintf_internal_r+0x1880>
   8a0cc:	94800404 	addi	r18,r18,16
   8a0d0:	8c400044 	addi	r17,r17,1
   8a0d4:	1f000015 	stw	fp,0(r3)
   8a0d8:	1cc00115 	stw	r19,4(r3)
   8a0dc:	dc800f15 	stw	r18,60(sp)
   8a0e0:	dc400e15 	stw	r17,56(sp)
   8a0e4:	a47ff60e 	bge	r20,r17,8a0c0 <___vfprintf_internal_r+0x168c>
   8a0e8:	d9015017 	ldw	r4,1344(sp)
   8a0ec:	b00b883a 	mov	r5,r22
   8a0f0:	d9800d04 	addi	r6,sp,52
   8a0f4:	00889dc0 	call	889dc <__sprint_r>
   8a0f8:	103c061e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8a0fc:	dc800f17 	ldw	r18,60(sp)
   8a100:	dc400e17 	ldw	r17,56(sp)
   8a104:	d8c01a04 	addi	r3,sp,104
   8a108:	003fee06 	br	8a0c4 <___vfprintf_internal_r+0x1690>
   8a10c:	3c000017 	ldw	r16,0(r7)
   8a110:	0023883a 	mov	r17,zero
   8a114:	39c00104 	addi	r7,r7,4
   8a118:	d9c14115 	stw	r7,1284(sp)
   8a11c:	003e9206 	br	89b68 <___vfprintf_internal_r+0x1134>
   8a120:	d9401a04 	addi	r5,sp,104
   8a124:	dd001004 	addi	r20,sp,64
   8a128:	d9414215 	stw	r5,1288(sp)
   8a12c:	d9814517 	ldw	r6,1300(sp)
   8a130:	880a973a 	slli	r5,r17,28
   8a134:	8004d13a 	srli	r2,r16,4
   8a138:	810003cc 	andi	r4,r16,15
   8a13c:	3109883a 	add	r4,r6,r4
   8a140:	2884b03a 	or	r2,r5,r2
   8a144:	21400003 	ldbu	r5,0(r4)
   8a148:	d9014217 	ldw	r4,1288(sp)
   8a14c:	8806d13a 	srli	r3,r17,4
   8a150:	1021883a 	mov	r16,r2
   8a154:	213fffc4 	addi	r4,r4,-1
   8a158:	d9014215 	stw	r4,1288(sp)
   8a15c:	d9814217 	ldw	r6,1288(sp)
   8a160:	10c8b03a 	or	r4,r2,r3
   8a164:	1823883a 	mov	r17,r3
   8a168:	31400005 	stb	r5,0(r6)
   8a16c:	203fef1e 	bne	r4,zero,8a12c <___vfprintf_internal_r+0x16f8>
   8a170:	003ccb06 	br	894a0 <___vfprintf_internal_r+0xa6c>
   8a174:	00800c04 	movi	r2,48
   8a178:	d98019c4 	addi	r6,sp,103
   8a17c:	dd001004 	addi	r20,sp,64
   8a180:	d88019c5 	stb	r2,103(sp)
   8a184:	d9814215 	stw	r6,1288(sp)
   8a188:	003cc506 	br	894a0 <___vfprintf_internal_r+0xa6c>
   8a18c:	dc400e17 	ldw	r17,56(sp)
   8a190:	07000274 	movhi	fp,9
   8a194:	e70ee404 	addi	fp,fp,15248
   8a198:	003bc706 	br	890b8 <___vfprintf_internal_r+0x684>
   8a19c:	d9414d17 	ldw	r5,1332(sp)
   8a1a0:	2880040c 	andi	r2,r5,16
   8a1a4:	10007c26 	beq	r2,zero,8a398 <___vfprintf_internal_r+0x1964>
   8a1a8:	38800017 	ldw	r2,0(r7)
   8a1ac:	39c00104 	addi	r7,r7,4
   8a1b0:	d9c14115 	stw	r7,1284(sp)
   8a1b4:	d9814c17 	ldw	r6,1328(sp)
   8a1b8:	d9c14117 	ldw	r7,1284(sp)
   8a1bc:	11800015 	stw	r6,0(r2)
   8a1c0:	003a7806 	br	88ba4 <___vfprintf_internal_r+0x170>
   8a1c4:	d9015017 	ldw	r4,1344(sp)
   8a1c8:	b00b883a 	mov	r5,r22
   8a1cc:	d9800d04 	addi	r6,sp,52
   8a1d0:	00889dc0 	call	889dc <__sprint_r>
   8a1d4:	103bcf1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8a1d8:	dc800f17 	ldw	r18,60(sp)
   8a1dc:	dc400e17 	ldw	r17,56(sp)
   8a1e0:	d8c01a04 	addi	r3,sp,104
   8a1e4:	d9014817 	ldw	r4,1312(sp)
   8a1e8:	d9414217 	ldw	r5,1288(sp)
   8a1ec:	8c400044 	addi	r17,r17,1
   8a1f0:	9125883a 	add	r18,r18,r4
   8a1f4:	008001c4 	movi	r2,7
   8a1f8:	19400015 	stw	r5,0(r3)
   8a1fc:	19000115 	stw	r4,4(r3)
   8a200:	dc800f15 	stw	r18,60(sp)
   8a204:	dc400e15 	stw	r17,56(sp)
   8a208:	147cee16 	blt	r2,r17,895c4 <___vfprintf_internal_r+0xb90>
   8a20c:	18c00204 	addi	r3,r3,8
   8a210:	003b8606 	br	8902c <___vfprintf_internal_r+0x5f8>
   8a214:	38c00017 	ldw	r3,0(r7)
   8a218:	39000204 	addi	r4,r7,8
   8a21c:	d9014115 	stw	r4,1284(sp)
   8a220:	d8c14315 	stw	r3,1292(sp)
   8a224:	39c00117 	ldw	r7,4(r7)
   8a228:	d9c14415 	stw	r7,1296(sp)
   8a22c:	003e2006 	br	89ab0 <___vfprintf_internal_r+0x107c>
   8a230:	0005883a 	mov	r2,zero
   8a234:	1409c83a 	sub	r4,r2,r16
   8a238:	1105803a 	cmpltu	r2,r2,r4
   8a23c:	044bc83a 	sub	r5,zero,r17
   8a240:	2885c83a 	sub	r2,r5,r2
   8a244:	2021883a 	mov	r16,r4
   8a248:	1023883a 	mov	r17,r2
   8a24c:	01000044 	movi	r4,1
   8a250:	00800b44 	movi	r2,45
   8a254:	d8800405 	stb	r2,16(sp)
   8a258:	003c8406 	br	8946c <___vfprintf_internal_r+0xa38>
   8a25c:	d9015017 	ldw	r4,1344(sp)
   8a260:	b00b883a 	mov	r5,r22
   8a264:	d9800d04 	addi	r6,sp,52
   8a268:	00889dc0 	call	889dc <__sprint_r>
   8a26c:	103ba91e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8a270:	dc800f17 	ldw	r18,60(sp)
   8a274:	dc400e17 	ldw	r17,56(sp)
   8a278:	d9000617 	ldw	r4,24(sp)
   8a27c:	d9401a04 	addi	r5,sp,104
   8a280:	003da706 	br	89920 <___vfprintf_internal_r+0xeec>
   8a284:	d9015017 	ldw	r4,1344(sp)
   8a288:	b00b883a 	mov	r5,r22
   8a28c:	d9800d04 	addi	r6,sp,52
   8a290:	00889dc0 	call	889dc <__sprint_r>
   8a294:	103b9f1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8a298:	dc800f17 	ldw	r18,60(sp)
   8a29c:	dc400e17 	ldw	r17,56(sp)
   8a2a0:	d9000617 	ldw	r4,24(sp)
   8a2a4:	d8c01a04 	addi	r3,sp,104
   8a2a8:	003d9106 	br	898f0 <___vfprintf_internal_r+0xebc>
   8a2ac:	07000274 	movhi	fp,9
   8a2b0:	e70ee004 	addi	fp,fp,15232
   8a2b4:	9425883a 	add	r18,r18,r16
   8a2b8:	8c400044 	addi	r17,r17,1
   8a2bc:	008001c4 	movi	r2,7
   8a2c0:	1f000015 	stw	fp,0(r3)
   8a2c4:	1c000115 	stw	r16,4(r3)
   8a2c8:	dc800f15 	stw	r18,60(sp)
   8a2cc:	dc400e15 	stw	r17,56(sp)
   8a2d0:	147fbc16 	blt	r2,r17,8a1c4 <___vfprintf_internal_r+0x1790>
   8a2d4:	18c00204 	addi	r3,r3,8
   8a2d8:	003fc206 	br	8a1e4 <___vfprintf_internal_r+0x17b0>
   8a2dc:	d9015017 	ldw	r4,1344(sp)
   8a2e0:	b00b883a 	mov	r5,r22
   8a2e4:	d9800d04 	addi	r6,sp,52
   8a2e8:	00889dc0 	call	889dc <__sprint_r>
   8a2ec:	103b891e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8a2f0:	dc800f17 	ldw	r18,60(sp)
   8a2f4:	d9000617 	ldw	r4,24(sp)
   8a2f8:	d8c01a04 	addi	r3,sp,104
   8a2fc:	003d0206 	br	89708 <___vfprintf_internal_r+0xcd4>
   8a300:	07000274 	movhi	fp,9
   8a304:	e70ee004 	addi	fp,fp,15232
   8a308:	003be406 	br	8929c <___vfprintf_internal_r+0x868>
   8a30c:	00800274 	movhi	r2,9
   8a310:	108ece04 	addi	r2,r2,15160
   8a314:	d8814215 	stw	r2,1288(sp)
   8a318:	003df506 	br	89af0 <___vfprintf_internal_r+0x10bc>
   8a31c:	d9014317 	ldw	r4,1292(sp)
   8a320:	d9414417 	ldw	r5,1296(sp)
   8a324:	0085f040 	call	85f04 <__isnand>
   8a328:	10003926 	beq	r2,zero,8a410 <___vfprintf_internal_r+0x19dc>
   8a32c:	d9414e17 	ldw	r5,1336(sp)
   8a330:	008011c4 	movi	r2,71
   8a334:	1140ce16 	blt	r2,r5,8a670 <___vfprintf_internal_r+0x1c3c>
   8a338:	01800274 	movhi	r6,9
   8a33c:	318ecf04 	addi	r6,r6,15164
   8a340:	d9814215 	stw	r6,1288(sp)
   8a344:	003dea06 	br	89af0 <___vfprintf_internal_r+0x10bc>
   8a348:	d9014d17 	ldw	r4,1332(sp)
   8a34c:	bdc00044 	addi	r23,r23,1
   8a350:	b8c00007 	ldb	r3,0(r23)
   8a354:	21000814 	ori	r4,r4,32
   8a358:	d9014d15 	stw	r4,1332(sp)
   8a35c:	003a3406 	br	88c30 <___vfprintf_internal_r+0x1fc>
   8a360:	dcc14615 	stw	r19,1304(sp)
   8a364:	98011016 	blt	r19,zero,8a7a8 <___vfprintf_internal_r+0x1d74>
   8a368:	980f883a 	mov	r7,r19
   8a36c:	d8014715 	stw	zero,1308(sp)
   8a370:	003c5206 	br	894bc <___vfprintf_internal_r+0xa88>
   8a374:	d9015017 	ldw	r4,1344(sp)
   8a378:	b00b883a 	mov	r5,r22
   8a37c:	d9800d04 	addi	r6,sp,52
   8a380:	00889dc0 	call	889dc <__sprint_r>
   8a384:	103b631e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8a388:	dc800f17 	ldw	r18,60(sp)
   8a38c:	d9000617 	ldw	r4,24(sp)
   8a390:	d8c01a04 	addi	r3,sp,104
   8a394:	003f2e06 	br	8a050 <___vfprintf_internal_r+0x161c>
   8a398:	d8c14d17 	ldw	r3,1332(sp)
   8a39c:	1880100c 	andi	r2,r3,64
   8a3a0:	1000a026 	beq	r2,zero,8a624 <___vfprintf_internal_r+0x1bf0>
   8a3a4:	38800017 	ldw	r2,0(r7)
   8a3a8:	39c00104 	addi	r7,r7,4
   8a3ac:	d9c14115 	stw	r7,1284(sp)
   8a3b0:	d9014c17 	ldw	r4,1328(sp)
   8a3b4:	d9c14117 	ldw	r7,1284(sp)
   8a3b8:	1100000d 	sth	r4,0(r2)
   8a3bc:	0039f906 	br	88ba4 <___vfprintf_internal_r+0x170>
   8a3c0:	d9015017 	ldw	r4,1344(sp)
   8a3c4:	b00b883a 	mov	r5,r22
   8a3c8:	d9800d04 	addi	r6,sp,52
   8a3cc:	00889dc0 	call	889dc <__sprint_r>
   8a3d0:	103b501e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8a3d4:	dc800f17 	ldw	r18,60(sp)
   8a3d8:	dc400e17 	ldw	r17,56(sp)
   8a3dc:	d9000617 	ldw	r4,24(sp)
   8a3e0:	d8c01a04 	addi	r3,sp,104
   8a3e4:	003f2d06 	br	8a09c <___vfprintf_internal_r+0x1668>
   8a3e8:	00800184 	movi	r2,6
   8a3ec:	14c09a36 	bltu	r2,r19,8a658 <___vfprintf_internal_r+0x1c24>
   8a3f0:	dcc14615 	stw	r19,1304(sp)
   8a3f4:	9800010e 	bge	r19,zero,8a3fc <___vfprintf_internal_r+0x19c8>
   8a3f8:	d8014615 	stw	zero,1304(sp)
   8a3fc:	00800274 	movhi	r2,9
   8a400:	108ed104 	addi	r2,r2,15172
   8a404:	980f883a 	mov	r7,r19
   8a408:	d8814215 	stw	r2,1288(sp)
   8a40c:	003a7806 	br	88df0 <___vfprintf_internal_r+0x3bc>
   8a410:	00bfffc4 	movi	r2,-1
   8a414:	9880e226 	beq	r19,r2,8a7a0 <___vfprintf_internal_r+0x1d6c>
   8a418:	d9414e17 	ldw	r5,1336(sp)
   8a41c:	008019c4 	movi	r2,103
   8a420:	2880dc26 	beq	r5,r2,8a794 <___vfprintf_internal_r+0x1d60>
   8a424:	008011c4 	movi	r2,71
   8a428:	2880da26 	beq	r5,r2,8a794 <___vfprintf_internal_r+0x1d60>
   8a42c:	d9414d17 	ldw	r5,1332(sp)
   8a430:	d9014417 	ldw	r4,1296(sp)
   8a434:	d9814317 	ldw	r6,1292(sp)
   8a438:	29404014 	ori	r5,r5,256
   8a43c:	d9414d15 	stw	r5,1332(sp)
   8a440:	2000cc16 	blt	r4,zero,8a774 <___vfprintf_internal_r+0x1d40>
   8a444:	3021883a 	mov	r16,r6
   8a448:	2023883a 	mov	r17,r4
   8a44c:	0039883a 	mov	fp,zero
   8a450:	d9414e17 	ldw	r5,1336(sp)
   8a454:	00801984 	movi	r2,102
   8a458:	2880b726 	beq	r5,r2,8a738 <___vfprintf_internal_r+0x1d04>
   8a45c:	00801184 	movi	r2,70
   8a460:	2880b526 	beq	r5,r2,8a738 <___vfprintf_internal_r+0x1d04>
   8a464:	00801944 	movi	r2,101
   8a468:	2880c826 	beq	r5,r2,8a78c <___vfprintf_internal_r+0x1d58>
   8a46c:	00801144 	movi	r2,69
   8a470:	2880c626 	beq	r5,r2,8a78c <___vfprintf_internal_r+0x1d58>
   8a474:	9829883a 	mov	r20,r19
   8a478:	d9015017 	ldw	r4,1344(sp)
   8a47c:	d8800604 	addi	r2,sp,24
   8a480:	880d883a 	mov	r6,r17
   8a484:	d8800115 	stw	r2,4(sp)
   8a488:	d8c00704 	addi	r3,sp,28
   8a48c:	d8800804 	addi	r2,sp,32
   8a490:	800b883a 	mov	r5,r16
   8a494:	01c00084 	movi	r7,2
   8a498:	d8c00215 	stw	r3,8(sp)
   8a49c:	d8800315 	stw	r2,12(sp)
   8a4a0:	dd000015 	stw	r20,0(sp)
   8a4a4:	008ac580 	call	8ac58 <_dtoa_r>
   8a4a8:	d9814e17 	ldw	r6,1336(sp)
   8a4ac:	d8814215 	stw	r2,1288(sp)
   8a4b0:	008019c4 	movi	r2,103
   8a4b4:	30809526 	beq	r6,r2,8a70c <___vfprintf_internal_r+0x1cd8>
   8a4b8:	d8c14e17 	ldw	r3,1336(sp)
   8a4bc:	008011c4 	movi	r2,71
   8a4c0:	18809226 	beq	r3,r2,8a70c <___vfprintf_internal_r+0x1cd8>
   8a4c4:	d9414217 	ldw	r5,1288(sp)
   8a4c8:	d9814e17 	ldw	r6,1336(sp)
   8a4cc:	00801984 	movi	r2,102
   8a4d0:	2d25883a 	add	r18,r5,r20
   8a4d4:	30808626 	beq	r6,r2,8a6f0 <___vfprintf_internal_r+0x1cbc>
   8a4d8:	00801184 	movi	r2,70
   8a4dc:	30808426 	beq	r6,r2,8a6f0 <___vfprintf_internal_r+0x1cbc>
   8a4e0:	000d883a 	mov	r6,zero
   8a4e4:	000f883a 	mov	r7,zero
   8a4e8:	880b883a 	mov	r5,r17
   8a4ec:	8009883a 	mov	r4,r16
   8a4f0:	00877a00 	call	877a0 <__eqdf2>
   8a4f4:	1000751e 	bne	r2,zero,8a6cc <___vfprintf_internal_r+0x1c98>
   8a4f8:	9005883a 	mov	r2,r18
   8a4fc:	dc800815 	stw	r18,32(sp)
   8a500:	d9014217 	ldw	r4,1288(sp)
   8a504:	d9414e17 	ldw	r5,1336(sp)
   8a508:	00c019c4 	movi	r3,103
   8a50c:	1125c83a 	sub	r18,r2,r4
   8a510:	28c06826 	beq	r5,r3,8a6b4 <___vfprintf_internal_r+0x1c80>
   8a514:	008011c4 	movi	r2,71
   8a518:	28806626 	beq	r5,r2,8a6b4 <___vfprintf_internal_r+0x1c80>
   8a51c:	d9000617 	ldw	r4,24(sp)
   8a520:	d8c14e17 	ldw	r3,1336(sp)
   8a524:	00801944 	movi	r2,101
   8a528:	10c05516 	blt	r2,r3,8a680 <___vfprintf_internal_r+0x1c4c>
   8a52c:	213fffc4 	addi	r4,r4,-1
   8a530:	d9000615 	stw	r4,24(sp)
   8a534:	d8c00905 	stb	r3,36(sp)
   8a538:	2021883a 	mov	r16,r4
   8a53c:	2000c116 	blt	r4,zero,8a844 <___vfprintf_internal_r+0x1e10>
   8a540:	00800ac4 	movi	r2,43
   8a544:	d8800945 	stb	r2,37(sp)
   8a548:	00800244 	movi	r2,9
   8a54c:	1400af0e 	bge	r2,r16,8a80c <___vfprintf_internal_r+0x1dd8>
   8a550:	1027883a 	mov	r19,r2
   8a554:	dc400cc4 	addi	r17,sp,51
   8a558:	8009883a 	mov	r4,r16
   8a55c:	01400284 	movi	r5,10
   8a560:	0090ac00 	call	90ac0 <__modsi3>
   8a564:	10800c04 	addi	r2,r2,48
   8a568:	8c7fffc4 	addi	r17,r17,-1
   8a56c:	8009883a 	mov	r4,r16
   8a570:	01400284 	movi	r5,10
   8a574:	88800005 	stb	r2,0(r17)
   8a578:	0090a600 	call	90a60 <__divsi3>
   8a57c:	1021883a 	mov	r16,r2
   8a580:	98bff516 	blt	r19,r2,8a558 <___vfprintf_internal_r+0x1b24>
   8a584:	10c00c04 	addi	r3,r2,48
   8a588:	d8800b04 	addi	r2,sp,44
   8a58c:	108001c4 	addi	r2,r2,7
   8a590:	897fffc4 	addi	r5,r17,-1
   8a594:	88ffffc5 	stb	r3,-1(r17)
   8a598:	2880a72e 	bgeu	r5,r2,8a838 <___vfprintf_internal_r+0x1e04>
   8a59c:	1009883a 	mov	r4,r2
   8a5a0:	d9800904 	addi	r6,sp,36
   8a5a4:	d8c00984 	addi	r3,sp,38
   8a5a8:	28800003 	ldbu	r2,0(r5)
   8a5ac:	29400044 	addi	r5,r5,1
   8a5b0:	18800005 	stb	r2,0(r3)
   8a5b4:	18c00044 	addi	r3,r3,1
   8a5b8:	293ffb36 	bltu	r5,r4,8a5a8 <___vfprintf_internal_r+0x1b74>
   8a5bc:	1987c83a 	sub	r3,r3,r6
   8a5c0:	00800044 	movi	r2,1
   8a5c4:	d8c14915 	stw	r3,1316(sp)
   8a5c8:	90cf883a 	add	r7,r18,r3
   8a5cc:	1480960e 	bge	r2,r18,8a828 <___vfprintf_internal_r+0x1df4>
   8a5d0:	39c00044 	addi	r7,r7,1
   8a5d4:	d9c14615 	stw	r7,1304(sp)
   8a5d8:	38003416 	blt	r7,zero,8a6ac <___vfprintf_internal_r+0x1c78>
   8a5dc:	e0803fcc 	andi	r2,fp,255
   8a5e0:	1080201c 	xori	r2,r2,128
   8a5e4:	10bfe004 	addi	r2,r2,-128
   8a5e8:	10004e26 	beq	r2,zero,8a724 <___vfprintf_internal_r+0x1cf0>
   8a5ec:	00800b44 	movi	r2,45
   8a5f0:	dc814815 	stw	r18,1312(sp)
   8a5f4:	d8014715 	stw	zero,1308(sp)
   8a5f8:	d8800405 	stb	r2,16(sp)
   8a5fc:	003bb106 	br	894c4 <___vfprintf_internal_r+0xa90>
   8a600:	00800b44 	movi	r2,45
   8a604:	d8800405 	stb	r2,16(sp)
   8a608:	003d3306 	br	89ad8 <___vfprintf_internal_r+0x10a4>
   8a60c:	d9015017 	ldw	r4,1344(sp)
   8a610:	b00b883a 	mov	r5,r22
   8a614:	d9800d04 	addi	r6,sp,52
   8a618:	00889dc0 	call	889dc <__sprint_r>
   8a61c:	103abd1e 	bne	r2,zero,89114 <___vfprintf_internal_r+0x6e0>
   8a620:	003abb06 	br	89110 <___vfprintf_internal_r+0x6dc>
   8a624:	38800017 	ldw	r2,0(r7)
   8a628:	39c00104 	addi	r7,r7,4
   8a62c:	d9c14115 	stw	r7,1284(sp)
   8a630:	d9414c17 	ldw	r5,1328(sp)
   8a634:	d9c14117 	ldw	r7,1284(sp)
   8a638:	11400015 	stw	r5,0(r2)
   8a63c:	00395906 	br	88ba4 <___vfprintf_internal_r+0x170>
   8a640:	980f883a 	mov	r7,r19
   8a644:	dcc14615 	stw	r19,1304(sp)
   8a648:	d8014715 	stw	zero,1308(sp)
   8a64c:	003b9b06 	br	894bc <___vfprintf_internal_r+0xa88>
   8a650:	0027883a 	mov	r19,zero
   8a654:	00397806 	br	88c38 <___vfprintf_internal_r+0x204>
   8a658:	00c00274 	movhi	r3,9
   8a65c:	18ced104 	addi	r3,r3,15172
   8a660:	100f883a 	mov	r7,r2
   8a664:	d8814615 	stw	r2,1304(sp)
   8a668:	d8c14215 	stw	r3,1288(sp)
   8a66c:	0039e006 	br	88df0 <___vfprintf_internal_r+0x3bc>
   8a670:	00800274 	movhi	r2,9
   8a674:	108ed004 	addi	r2,r2,15168
   8a678:	d8814215 	stw	r2,1288(sp)
   8a67c:	003d1c06 	br	89af0 <___vfprintf_internal_r+0x10bc>
   8a680:	d9414e17 	ldw	r5,1336(sp)
   8a684:	00801984 	movi	r2,102
   8a688:	28804926 	beq	r5,r2,8a7b0 <___vfprintf_internal_r+0x1d7c>
   8a68c:	200f883a 	mov	r7,r4
   8a690:	24805716 	blt	r4,r18,8a7f0 <___vfprintf_internal_r+0x1dbc>
   8a694:	d9414d17 	ldw	r5,1332(sp)
   8a698:	2880004c 	andi	r2,r5,1
   8a69c:	10000126 	beq	r2,zero,8a6a4 <___vfprintf_internal_r+0x1c70>
   8a6a0:	21c00044 	addi	r7,r4,1
   8a6a4:	d9c14615 	stw	r7,1304(sp)
   8a6a8:	383fcc0e 	bge	r7,zero,8a5dc <___vfprintf_internal_r+0x1ba8>
   8a6ac:	d8014615 	stw	zero,1304(sp)
   8a6b0:	003fca06 	br	8a5dc <___vfprintf_internal_r+0x1ba8>
   8a6b4:	d9000617 	ldw	r4,24(sp)
   8a6b8:	00bfff04 	movi	r2,-4
   8a6bc:	1100480e 	bge	r2,r4,8a7e0 <___vfprintf_internal_r+0x1dac>
   8a6c0:	99004716 	blt	r19,r4,8a7e0 <___vfprintf_internal_r+0x1dac>
   8a6c4:	d8c14e15 	stw	r3,1336(sp)
   8a6c8:	003ff006 	br	8a68c <___vfprintf_internal_r+0x1c58>
   8a6cc:	d8800817 	ldw	r2,32(sp)
   8a6d0:	14bf8b2e 	bgeu	r2,r18,8a500 <___vfprintf_internal_r+0x1acc>
   8a6d4:	9007883a 	mov	r3,r18
   8a6d8:	01000c04 	movi	r4,48
   8a6dc:	11000005 	stb	r4,0(r2)
   8a6e0:	10800044 	addi	r2,r2,1
   8a6e4:	d8800815 	stw	r2,32(sp)
   8a6e8:	18bffc1e 	bne	r3,r2,8a6dc <___vfprintf_internal_r+0x1ca8>
   8a6ec:	003f8406 	br	8a500 <___vfprintf_internal_r+0x1acc>
   8a6f0:	d8814217 	ldw	r2,1288(sp)
   8a6f4:	10c00007 	ldb	r3,0(r2)
   8a6f8:	00800c04 	movi	r2,48
   8a6fc:	18805b26 	beq	r3,r2,8a86c <___vfprintf_internal_r+0x1e38>
   8a700:	d9000617 	ldw	r4,24(sp)
   8a704:	9125883a 	add	r18,r18,r4
   8a708:	003f7506 	br	8a4e0 <___vfprintf_internal_r+0x1aac>
   8a70c:	d9014d17 	ldw	r4,1332(sp)
   8a710:	2080004c 	andi	r2,r4,1
   8a714:	1005003a 	cmpeq	r2,r2,zero
   8a718:	103f6a26 	beq	r2,zero,8a4c4 <___vfprintf_internal_r+0x1a90>
   8a71c:	d8800817 	ldw	r2,32(sp)
   8a720:	003f7706 	br	8a500 <___vfprintf_internal_r+0x1acc>
   8a724:	d9c14615 	stw	r7,1304(sp)
   8a728:	38004d16 	blt	r7,zero,8a860 <___vfprintf_internal_r+0x1e2c>
   8a72c:	dc814815 	stw	r18,1312(sp)
   8a730:	d8014715 	stw	zero,1308(sp)
   8a734:	003b6106 	br	894bc <___vfprintf_internal_r+0xa88>
   8a738:	d9015017 	ldw	r4,1344(sp)
   8a73c:	d8800604 	addi	r2,sp,24
   8a740:	d8800115 	stw	r2,4(sp)
   8a744:	d8c00704 	addi	r3,sp,28
   8a748:	d8800804 	addi	r2,sp,32
   8a74c:	800b883a 	mov	r5,r16
   8a750:	880d883a 	mov	r6,r17
   8a754:	01c000c4 	movi	r7,3
   8a758:	d8c00215 	stw	r3,8(sp)
   8a75c:	d8800315 	stw	r2,12(sp)
   8a760:	dcc00015 	stw	r19,0(sp)
   8a764:	9829883a 	mov	r20,r19
   8a768:	008ac580 	call	8ac58 <_dtoa_r>
   8a76c:	d8814215 	stw	r2,1288(sp)
   8a770:	003f5106 	br	8a4b8 <___vfprintf_internal_r+0x1a84>
   8a774:	d8c14317 	ldw	r3,1292(sp)
   8a778:	d9014417 	ldw	r4,1296(sp)
   8a77c:	07000b44 	movi	fp,45
   8a780:	1821883a 	mov	r16,r3
   8a784:	2460003c 	xorhi	r17,r4,32768
   8a788:	003f3106 	br	8a450 <___vfprintf_internal_r+0x1a1c>
   8a78c:	9d000044 	addi	r20,r19,1
   8a790:	003f3906 	br	8a478 <___vfprintf_internal_r+0x1a44>
   8a794:	983f251e 	bne	r19,zero,8a42c <___vfprintf_internal_r+0x19f8>
   8a798:	04c00044 	movi	r19,1
   8a79c:	003f2306 	br	8a42c <___vfprintf_internal_r+0x19f8>
   8a7a0:	04c00184 	movi	r19,6
   8a7a4:	003f2106 	br	8a42c <___vfprintf_internal_r+0x19f8>
   8a7a8:	d8014615 	stw	zero,1304(sp)
   8a7ac:	003eee06 	br	8a368 <___vfprintf_internal_r+0x1934>
   8a7b0:	200f883a 	mov	r7,r4
   8a7b4:	0100370e 	bge	zero,r4,8a894 <___vfprintf_internal_r+0x1e60>
   8a7b8:	9800031e 	bne	r19,zero,8a7c8 <___vfprintf_internal_r+0x1d94>
   8a7bc:	d9814d17 	ldw	r6,1332(sp)
   8a7c0:	3080004c 	andi	r2,r6,1
   8a7c4:	103fb726 	beq	r2,zero,8a6a4 <___vfprintf_internal_r+0x1c70>
   8a7c8:	20800044 	addi	r2,r4,1
   8a7cc:	98a7883a 	add	r19,r19,r2
   8a7d0:	dcc14615 	stw	r19,1304(sp)
   8a7d4:	980f883a 	mov	r7,r19
   8a7d8:	983f800e 	bge	r19,zero,8a5dc <___vfprintf_internal_r+0x1ba8>
   8a7dc:	003fb306 	br	8a6ac <___vfprintf_internal_r+0x1c78>
   8a7e0:	d9814e17 	ldw	r6,1336(sp)
   8a7e4:	31bfff84 	addi	r6,r6,-2
   8a7e8:	d9814e15 	stw	r6,1336(sp)
   8a7ec:	003f4c06 	br	8a520 <___vfprintf_internal_r+0x1aec>
   8a7f0:	0100180e 	bge	zero,r4,8a854 <___vfprintf_internal_r+0x1e20>
   8a7f4:	00800044 	movi	r2,1
   8a7f8:	1485883a 	add	r2,r2,r18
   8a7fc:	d8814615 	stw	r2,1304(sp)
   8a800:	100f883a 	mov	r7,r2
   8a804:	103f750e 	bge	r2,zero,8a5dc <___vfprintf_internal_r+0x1ba8>
   8a808:	003fa806 	br	8a6ac <___vfprintf_internal_r+0x1c78>
   8a80c:	80c00c04 	addi	r3,r16,48
   8a810:	00800c04 	movi	r2,48
   8a814:	d8c009c5 	stb	r3,39(sp)
   8a818:	d9800904 	addi	r6,sp,36
   8a81c:	d8c00a04 	addi	r3,sp,40
   8a820:	d8800985 	stb	r2,38(sp)
   8a824:	003f6506 	br	8a5bc <___vfprintf_internal_r+0x1b88>
   8a828:	d9014d17 	ldw	r4,1332(sp)
   8a82c:	2084703a 	and	r2,r4,r2
   8a830:	103f9c26 	beq	r2,zero,8a6a4 <___vfprintf_internal_r+0x1c70>
   8a834:	003f6606 	br	8a5d0 <___vfprintf_internal_r+0x1b9c>
   8a838:	d9800904 	addi	r6,sp,36
   8a83c:	d8c00984 	addi	r3,sp,38
   8a840:	003f5e06 	br	8a5bc <___vfprintf_internal_r+0x1b88>
   8a844:	00800b44 	movi	r2,45
   8a848:	0121c83a 	sub	r16,zero,r4
   8a84c:	d8800945 	stb	r2,37(sp)
   8a850:	003f3d06 	br	8a548 <___vfprintf_internal_r+0x1b14>
   8a854:	00800084 	movi	r2,2
   8a858:	1105c83a 	sub	r2,r2,r4
   8a85c:	003fe606 	br	8a7f8 <___vfprintf_internal_r+0x1dc4>
   8a860:	d8014615 	stw	zero,1304(sp)
   8a864:	dc814815 	stw	r18,1312(sp)
   8a868:	003fb106 	br	8a730 <___vfprintf_internal_r+0x1cfc>
   8a86c:	000d883a 	mov	r6,zero
   8a870:	000f883a 	mov	r7,zero
   8a874:	8009883a 	mov	r4,r16
   8a878:	880b883a 	mov	r5,r17
   8a87c:	00878280 	call	87828 <__nedf2>
   8a880:	103f9f26 	beq	r2,zero,8a700 <___vfprintf_internal_r+0x1ccc>
   8a884:	00800044 	movi	r2,1
   8a888:	1509c83a 	sub	r4,r2,r20
   8a88c:	d9000615 	stw	r4,24(sp)
   8a890:	003f9b06 	br	8a700 <___vfprintf_internal_r+0x1ccc>
   8a894:	98000d1e 	bne	r19,zero,8a8cc <___vfprintf_internal_r+0x1e98>
   8a898:	d8c14d17 	ldw	r3,1332(sp)
   8a89c:	1880004c 	andi	r2,r3,1
   8a8a0:	10000a1e 	bne	r2,zero,8a8cc <___vfprintf_internal_r+0x1e98>
   8a8a4:	01000044 	movi	r4,1
   8a8a8:	200f883a 	mov	r7,r4
   8a8ac:	d9014615 	stw	r4,1304(sp)
   8a8b0:	003f4a06 	br	8a5dc <___vfprintf_internal_r+0x1ba8>
   8a8b4:	3cc00017 	ldw	r19,0(r7)
   8a8b8:	39c00104 	addi	r7,r7,4
   8a8bc:	983d0e0e 	bge	r19,zero,89cf8 <___vfprintf_internal_r+0x12c4>
   8a8c0:	b8c00007 	ldb	r3,0(r23)
   8a8c4:	04ffffc4 	movi	r19,-1
   8a8c8:	0038d906 	br	88c30 <___vfprintf_internal_r+0x1fc>
   8a8cc:	9cc00084 	addi	r19,r19,2
   8a8d0:	dcc14615 	stw	r19,1304(sp)
   8a8d4:	980f883a 	mov	r7,r19
   8a8d8:	983f400e 	bge	r19,zero,8a5dc <___vfprintf_internal_r+0x1ba8>
   8a8dc:	003f7306 	br	8a6ac <___vfprintf_internal_r+0x1c78>

0008a8e0 <__vfprintf_internal>:
   8a8e0:	008002f4 	movhi	r2,11
   8a8e4:	10899704 	addi	r2,r2,9820
   8a8e8:	2013883a 	mov	r9,r4
   8a8ec:	11000017 	ldw	r4,0(r2)
   8a8f0:	2805883a 	mov	r2,r5
   8a8f4:	300f883a 	mov	r7,r6
   8a8f8:	480b883a 	mov	r5,r9
   8a8fc:	100d883a 	mov	r6,r2
   8a900:	0088a341 	jmpi	88a34 <___vfprintf_internal_r>

0008a904 <__swsetup_r>:
   8a904:	008002f4 	movhi	r2,11
   8a908:	10899704 	addi	r2,r2,9820
   8a90c:	10c00017 	ldw	r3,0(r2)
   8a910:	defffd04 	addi	sp,sp,-12
   8a914:	dc400115 	stw	r17,4(sp)
   8a918:	dc000015 	stw	r16,0(sp)
   8a91c:	dfc00215 	stw	ra,8(sp)
   8a920:	2023883a 	mov	r17,r4
   8a924:	2821883a 	mov	r16,r5
   8a928:	18000226 	beq	r3,zero,8a934 <__swsetup_r+0x30>
   8a92c:	18800e17 	ldw	r2,56(r3)
   8a930:	10001f26 	beq	r2,zero,8a9b0 <__swsetup_r+0xac>
   8a934:	8100030b 	ldhu	r4,12(r16)
   8a938:	2080020c 	andi	r2,r4,8
   8a93c:	10002826 	beq	r2,zero,8a9e0 <__swsetup_r+0xdc>
   8a940:	81400417 	ldw	r5,16(r16)
   8a944:	28001d26 	beq	r5,zero,8a9bc <__swsetup_r+0xb8>
   8a948:	2080004c 	andi	r2,r4,1
   8a94c:	1005003a 	cmpeq	r2,r2,zero
   8a950:	10000b26 	beq	r2,zero,8a980 <__swsetup_r+0x7c>
   8a954:	2080008c 	andi	r2,r4,2
   8a958:	10001226 	beq	r2,zero,8a9a4 <__swsetup_r+0xa0>
   8a95c:	0005883a 	mov	r2,zero
   8a960:	80800215 	stw	r2,8(r16)
   8a964:	28000b26 	beq	r5,zero,8a994 <__swsetup_r+0x90>
   8a968:	0005883a 	mov	r2,zero
   8a96c:	dfc00217 	ldw	ra,8(sp)
   8a970:	dc400117 	ldw	r17,4(sp)
   8a974:	dc000017 	ldw	r16,0(sp)
   8a978:	dec00304 	addi	sp,sp,12
   8a97c:	f800283a 	ret
   8a980:	80800517 	ldw	r2,20(r16)
   8a984:	80000215 	stw	zero,8(r16)
   8a988:	0085c83a 	sub	r2,zero,r2
   8a98c:	80800615 	stw	r2,24(r16)
   8a990:	283ff51e 	bne	r5,zero,8a968 <__swsetup_r+0x64>
   8a994:	2080200c 	andi	r2,r4,128
   8a998:	103ff326 	beq	r2,zero,8a968 <__swsetup_r+0x64>
   8a99c:	00bfffc4 	movi	r2,-1
   8a9a0:	003ff206 	br	8a96c <__swsetup_r+0x68>
   8a9a4:	80800517 	ldw	r2,20(r16)
   8a9a8:	80800215 	stw	r2,8(r16)
   8a9ac:	003fed06 	br	8a964 <__swsetup_r+0x60>
   8a9b0:	1809883a 	mov	r4,r3
   8a9b4:	008c4a40 	call	8c4a4 <__sinit>
   8a9b8:	003fde06 	br	8a934 <__swsetup_r+0x30>
   8a9bc:	20c0a00c 	andi	r3,r4,640
   8a9c0:	00808004 	movi	r2,512
   8a9c4:	18bfe026 	beq	r3,r2,8a948 <__swsetup_r+0x44>
   8a9c8:	8809883a 	mov	r4,r17
   8a9cc:	800b883a 	mov	r5,r16
   8a9d0:	008d21c0 	call	8d21c <__smakebuf_r>
   8a9d4:	8100030b 	ldhu	r4,12(r16)
   8a9d8:	81400417 	ldw	r5,16(r16)
   8a9dc:	003fda06 	br	8a948 <__swsetup_r+0x44>
   8a9e0:	2080040c 	andi	r2,r4,16
   8a9e4:	103fed26 	beq	r2,zero,8a99c <__swsetup_r+0x98>
   8a9e8:	2080010c 	andi	r2,r4,4
   8a9ec:	10001226 	beq	r2,zero,8aa38 <__swsetup_r+0x134>
   8a9f0:	81400c17 	ldw	r5,48(r16)
   8a9f4:	28000526 	beq	r5,zero,8aa0c <__swsetup_r+0x108>
   8a9f8:	80801004 	addi	r2,r16,64
   8a9fc:	28800226 	beq	r5,r2,8aa08 <__swsetup_r+0x104>
   8aa00:	8809883a 	mov	r4,r17
   8aa04:	008c8280 	call	8c828 <_free_r>
   8aa08:	80000c15 	stw	zero,48(r16)
   8aa0c:	8080030b 	ldhu	r2,12(r16)
   8aa10:	81400417 	ldw	r5,16(r16)
   8aa14:	80000115 	stw	zero,4(r16)
   8aa18:	10bff6cc 	andi	r2,r2,65499
   8aa1c:	8080030d 	sth	r2,12(r16)
   8aa20:	81400015 	stw	r5,0(r16)
   8aa24:	8080030b 	ldhu	r2,12(r16)
   8aa28:	10800214 	ori	r2,r2,8
   8aa2c:	113fffcc 	andi	r4,r2,65535
   8aa30:	8080030d 	sth	r2,12(r16)
   8aa34:	003fc306 	br	8a944 <__swsetup_r+0x40>
   8aa38:	81400417 	ldw	r5,16(r16)
   8aa3c:	003ff906 	br	8aa24 <__swsetup_r+0x120>

0008aa40 <quorem>:
   8aa40:	28c00417 	ldw	r3,16(r5)
   8aa44:	20800417 	ldw	r2,16(r4)
   8aa48:	defff604 	addi	sp,sp,-40
   8aa4c:	ddc00715 	stw	r23,28(sp)
   8aa50:	dd400515 	stw	r21,20(sp)
   8aa54:	dfc00915 	stw	ra,36(sp)
   8aa58:	df000815 	stw	fp,32(sp)
   8aa5c:	dd800615 	stw	r22,24(sp)
   8aa60:	dd000415 	stw	r20,16(sp)
   8aa64:	dcc00315 	stw	r19,12(sp)
   8aa68:	dc800215 	stw	r18,8(sp)
   8aa6c:	dc400115 	stw	r17,4(sp)
   8aa70:	dc000015 	stw	r16,0(sp)
   8aa74:	202f883a 	mov	r23,r4
   8aa78:	282b883a 	mov	r21,r5
   8aa7c:	10c07416 	blt	r2,r3,8ac50 <quorem+0x210>
   8aa80:	1c7fffc4 	addi	r17,r3,-1
   8aa84:	8c45883a 	add	r2,r17,r17
   8aa88:	1085883a 	add	r2,r2,r2
   8aa8c:	2c000504 	addi	r16,r5,20
   8aa90:	24c00504 	addi	r19,r4,20
   8aa94:	14ed883a 	add	r22,r2,r19
   8aa98:	80a5883a 	add	r18,r16,r2
   8aa9c:	b7000017 	ldw	fp,0(r22)
   8aaa0:	91400017 	ldw	r5,0(r18)
   8aaa4:	e009883a 	mov	r4,fp
   8aaa8:	29400044 	addi	r5,r5,1
   8aaac:	0090b200 	call	90b20 <__udivsi3>
   8aab0:	1029883a 	mov	r20,r2
   8aab4:	10003c1e 	bne	r2,zero,8aba8 <quorem+0x168>
   8aab8:	a80b883a 	mov	r5,r21
   8aabc:	b809883a 	mov	r4,r23
   8aac0:	008df480 	call	8df48 <__mcmp>
   8aac4:	10002b16 	blt	r2,zero,8ab74 <quorem+0x134>
   8aac8:	a5000044 	addi	r20,r20,1
   8aacc:	980f883a 	mov	r7,r19
   8aad0:	0011883a 	mov	r8,zero
   8aad4:	0009883a 	mov	r4,zero
   8aad8:	81400017 	ldw	r5,0(r16)
   8aadc:	38c00017 	ldw	r3,0(r7)
   8aae0:	84000104 	addi	r16,r16,4
   8aae4:	28bfffcc 	andi	r2,r5,65535
   8aae8:	2085883a 	add	r2,r4,r2
   8aaec:	11bfffcc 	andi	r6,r2,65535
   8aaf0:	193fffcc 	andi	r4,r3,65535
   8aaf4:	1004d43a 	srli	r2,r2,16
   8aaf8:	280ad43a 	srli	r5,r5,16
   8aafc:	2189c83a 	sub	r4,r4,r6
   8ab00:	2209883a 	add	r4,r4,r8
   8ab04:	1806d43a 	srli	r3,r3,16
   8ab08:	288b883a 	add	r5,r5,r2
   8ab0c:	200dd43a 	srai	r6,r4,16
   8ab10:	28bfffcc 	andi	r2,r5,65535
   8ab14:	1887c83a 	sub	r3,r3,r2
   8ab18:	1987883a 	add	r3,r3,r6
   8ab1c:	3900000d 	sth	r4,0(r7)
   8ab20:	38c0008d 	sth	r3,2(r7)
   8ab24:	2808d43a 	srli	r4,r5,16
   8ab28:	39c00104 	addi	r7,r7,4
   8ab2c:	1811d43a 	srai	r8,r3,16
   8ab30:	943fe92e 	bgeu	r18,r16,8aad8 <quorem+0x98>
   8ab34:	8c45883a 	add	r2,r17,r17
   8ab38:	1085883a 	add	r2,r2,r2
   8ab3c:	9885883a 	add	r2,r19,r2
   8ab40:	10c00017 	ldw	r3,0(r2)
   8ab44:	18000b1e 	bne	r3,zero,8ab74 <quorem+0x134>
   8ab48:	113fff04 	addi	r4,r2,-4
   8ab4c:	9900082e 	bgeu	r19,r4,8ab70 <quorem+0x130>
   8ab50:	10bfff17 	ldw	r2,-4(r2)
   8ab54:	10000326 	beq	r2,zero,8ab64 <quorem+0x124>
   8ab58:	00000506 	br	8ab70 <quorem+0x130>
   8ab5c:	20800017 	ldw	r2,0(r4)
   8ab60:	1000031e 	bne	r2,zero,8ab70 <quorem+0x130>
   8ab64:	213fff04 	addi	r4,r4,-4
   8ab68:	8c7fffc4 	addi	r17,r17,-1
   8ab6c:	993ffb36 	bltu	r19,r4,8ab5c <quorem+0x11c>
   8ab70:	bc400415 	stw	r17,16(r23)
   8ab74:	a005883a 	mov	r2,r20
   8ab78:	dfc00917 	ldw	ra,36(sp)
   8ab7c:	df000817 	ldw	fp,32(sp)
   8ab80:	ddc00717 	ldw	r23,28(sp)
   8ab84:	dd800617 	ldw	r22,24(sp)
   8ab88:	dd400517 	ldw	r21,20(sp)
   8ab8c:	dd000417 	ldw	r20,16(sp)
   8ab90:	dcc00317 	ldw	r19,12(sp)
   8ab94:	dc800217 	ldw	r18,8(sp)
   8ab98:	dc400117 	ldw	r17,4(sp)
   8ab9c:	dc000017 	ldw	r16,0(sp)
   8aba0:	dec00a04 	addi	sp,sp,40
   8aba4:	f800283a 	ret
   8aba8:	980f883a 	mov	r7,r19
   8abac:	8011883a 	mov	r8,r16
   8abb0:	0013883a 	mov	r9,zero
   8abb4:	000d883a 	mov	r6,zero
   8abb8:	40c00017 	ldw	r3,0(r8)
   8abbc:	39000017 	ldw	r4,0(r7)
   8abc0:	42000104 	addi	r8,r8,4
   8abc4:	18bfffcc 	andi	r2,r3,65535
   8abc8:	a085383a 	mul	r2,r20,r2
   8abcc:	1806d43a 	srli	r3,r3,16
   8abd0:	217fffcc 	andi	r5,r4,65535
   8abd4:	3085883a 	add	r2,r6,r2
   8abd8:	11bfffcc 	andi	r6,r2,65535
   8abdc:	a0c7383a 	mul	r3,r20,r3
   8abe0:	1004d43a 	srli	r2,r2,16
   8abe4:	298bc83a 	sub	r5,r5,r6
   8abe8:	2a4b883a 	add	r5,r5,r9
   8abec:	2008d43a 	srli	r4,r4,16
   8abf0:	1887883a 	add	r3,r3,r2
   8abf4:	280dd43a 	srai	r6,r5,16
   8abf8:	18bfffcc 	andi	r2,r3,65535
   8abfc:	2089c83a 	sub	r4,r4,r2
   8ac00:	2189883a 	add	r4,r4,r6
   8ac04:	3900008d 	sth	r4,2(r7)
   8ac08:	3940000d 	sth	r5,0(r7)
   8ac0c:	180cd43a 	srli	r6,r3,16
   8ac10:	39c00104 	addi	r7,r7,4
   8ac14:	2013d43a 	srai	r9,r4,16
   8ac18:	923fe72e 	bgeu	r18,r8,8abb8 <quorem+0x178>
   8ac1c:	e03fa61e 	bne	fp,zero,8aab8 <quorem+0x78>
   8ac20:	b0ffff04 	addi	r3,r22,-4
   8ac24:	98c0082e 	bgeu	r19,r3,8ac48 <quorem+0x208>
   8ac28:	b0bfff17 	ldw	r2,-4(r22)
   8ac2c:	10000326 	beq	r2,zero,8ac3c <quorem+0x1fc>
   8ac30:	00000506 	br	8ac48 <quorem+0x208>
   8ac34:	18800017 	ldw	r2,0(r3)
   8ac38:	1000031e 	bne	r2,zero,8ac48 <quorem+0x208>
   8ac3c:	18ffff04 	addi	r3,r3,-4
   8ac40:	8c7fffc4 	addi	r17,r17,-1
   8ac44:	98fffb36 	bltu	r19,r3,8ac34 <quorem+0x1f4>
   8ac48:	bc400415 	stw	r17,16(r23)
   8ac4c:	003f9a06 	br	8aab8 <quorem+0x78>
   8ac50:	0005883a 	mov	r2,zero
   8ac54:	003fc806 	br	8ab78 <quorem+0x138>

0008ac58 <_dtoa_r>:
   8ac58:	22001017 	ldw	r8,64(r4)
   8ac5c:	deffda04 	addi	sp,sp,-152
   8ac60:	dd402115 	stw	r21,132(sp)
   8ac64:	dd002015 	stw	r20,128(sp)
   8ac68:	dc801e15 	stw	r18,120(sp)
   8ac6c:	dc401d15 	stw	r17,116(sp)
   8ac70:	dfc02515 	stw	ra,148(sp)
   8ac74:	df002415 	stw	fp,144(sp)
   8ac78:	ddc02315 	stw	r23,140(sp)
   8ac7c:	dd802215 	stw	r22,136(sp)
   8ac80:	dcc01f15 	stw	r19,124(sp)
   8ac84:	dc001c15 	stw	r16,112(sp)
   8ac88:	d9001615 	stw	r4,88(sp)
   8ac8c:	3023883a 	mov	r17,r6
   8ac90:	2829883a 	mov	r20,r5
   8ac94:	d9c01715 	stw	r7,92(sp)
   8ac98:	dc802817 	ldw	r18,160(sp)
   8ac9c:	302b883a 	mov	r21,r6
   8aca0:	40000a26 	beq	r8,zero,8accc <_dtoa_r+0x74>
   8aca4:	20801117 	ldw	r2,68(r4)
   8aca8:	400b883a 	mov	r5,r8
   8acac:	40800115 	stw	r2,4(r8)
   8acb0:	20c01117 	ldw	r3,68(r4)
   8acb4:	00800044 	movi	r2,1
   8acb8:	10c4983a 	sll	r2,r2,r3
   8acbc:	40800215 	stw	r2,8(r8)
   8acc0:	008ddec0 	call	8ddec <_Bfree>
   8acc4:	d8c01617 	ldw	r3,88(sp)
   8acc8:	18001015 	stw	zero,64(r3)
   8accc:	8800a316 	blt	r17,zero,8af5c <_dtoa_r+0x304>
   8acd0:	90000015 	stw	zero,0(r18)
   8acd4:	a8dffc2c 	andhi	r3,r21,32752
   8acd8:	009ffc34 	movhi	r2,32752
   8acdc:	18809126 	beq	r3,r2,8af24 <_dtoa_r+0x2cc>
   8ace0:	000d883a 	mov	r6,zero
   8ace4:	000f883a 	mov	r7,zero
   8ace8:	a009883a 	mov	r4,r20
   8acec:	a80b883a 	mov	r5,r21
   8acf0:	dd001215 	stw	r20,72(sp)
   8acf4:	dd401315 	stw	r21,76(sp)
   8acf8:	00878280 	call	87828 <__nedf2>
   8acfc:	1000171e 	bne	r2,zero,8ad5c <_dtoa_r+0x104>
   8ad00:	d9802717 	ldw	r6,156(sp)
   8ad04:	00800044 	movi	r2,1
   8ad08:	30800015 	stw	r2,0(r6)
   8ad0c:	d8802917 	ldw	r2,164(sp)
   8ad10:	10029b26 	beq	r2,zero,8b780 <_dtoa_r+0xb28>
   8ad14:	d9002917 	ldw	r4,164(sp)
   8ad18:	00800274 	movhi	r2,9
   8ad1c:	108edf44 	addi	r2,r2,15229
   8ad20:	10ffffc4 	addi	r3,r2,-1
   8ad24:	20800015 	stw	r2,0(r4)
   8ad28:	1805883a 	mov	r2,r3
   8ad2c:	dfc02517 	ldw	ra,148(sp)
   8ad30:	df002417 	ldw	fp,144(sp)
   8ad34:	ddc02317 	ldw	r23,140(sp)
   8ad38:	dd802217 	ldw	r22,136(sp)
   8ad3c:	dd402117 	ldw	r21,132(sp)
   8ad40:	dd002017 	ldw	r20,128(sp)
   8ad44:	dcc01f17 	ldw	r19,124(sp)
   8ad48:	dc801e17 	ldw	r18,120(sp)
   8ad4c:	dc401d17 	ldw	r17,116(sp)
   8ad50:	dc001c17 	ldw	r16,112(sp)
   8ad54:	dec02604 	addi	sp,sp,152
   8ad58:	f800283a 	ret
   8ad5c:	d9001617 	ldw	r4,88(sp)
   8ad60:	d9401217 	ldw	r5,72(sp)
   8ad64:	d8800104 	addi	r2,sp,4
   8ad68:	a80d883a 	mov	r6,r21
   8ad6c:	d9c00204 	addi	r7,sp,8
   8ad70:	d8800015 	stw	r2,0(sp)
   8ad74:	008e4280 	call	8e428 <__d2b>
   8ad78:	d8800715 	stw	r2,28(sp)
   8ad7c:	a804d53a 	srli	r2,r21,20
   8ad80:	1101ffcc 	andi	r4,r2,2047
   8ad84:	20008626 	beq	r4,zero,8afa0 <_dtoa_r+0x348>
   8ad88:	d8c01217 	ldw	r3,72(sp)
   8ad8c:	00800434 	movhi	r2,16
   8ad90:	10bfffc4 	addi	r2,r2,-1
   8ad94:	ddc00117 	ldw	r23,4(sp)
   8ad98:	a884703a 	and	r2,r21,r2
   8ad9c:	1811883a 	mov	r8,r3
   8ada0:	124ffc34 	orhi	r9,r2,16368
   8ada4:	25bf0044 	addi	r22,r4,-1023
   8ada8:	d8000815 	stw	zero,32(sp)
   8adac:	0005883a 	mov	r2,zero
   8adb0:	00cffe34 	movhi	r3,16376
   8adb4:	480b883a 	mov	r5,r9
   8adb8:	4009883a 	mov	r4,r8
   8adbc:	180f883a 	mov	r7,r3
   8adc0:	100d883a 	mov	r6,r2
   8adc4:	00870900 	call	87090 <__subdf3>
   8adc8:	0218dbf4 	movhi	r8,25455
   8adcc:	4210d844 	addi	r8,r8,17249
   8add0:	024ff4f4 	movhi	r9,16339
   8add4:	4a61e9c4 	addi	r9,r9,-30809
   8add8:	480f883a 	mov	r7,r9
   8addc:	400d883a 	mov	r6,r8
   8ade0:	180b883a 	mov	r5,r3
   8ade4:	1009883a 	mov	r4,r2
   8ade8:	00871840 	call	87184 <__muldf3>
   8adec:	0222d874 	movhi	r8,35681
   8adf0:	42322cc4 	addi	r8,r8,-14157
   8adf4:	024ff1f4 	movhi	r9,16327
   8adf8:	4a628a04 	addi	r9,r9,-30168
   8adfc:	480f883a 	mov	r7,r9
   8ae00:	400d883a 	mov	r6,r8
   8ae04:	180b883a 	mov	r5,r3
   8ae08:	1009883a 	mov	r4,r2
   8ae0c:	00871100 	call	87110 <__adddf3>
   8ae10:	b009883a 	mov	r4,r22
   8ae14:	1021883a 	mov	r16,r2
   8ae18:	1823883a 	mov	r17,r3
   8ae1c:	0087ad00 	call	87ad0 <__floatsidf>
   8ae20:	021427f4 	movhi	r8,20639
   8ae24:	421e7ec4 	addi	r8,r8,31227
   8ae28:	024ff4f4 	movhi	r9,16339
   8ae2c:	4a5104c4 	addi	r9,r9,17427
   8ae30:	480f883a 	mov	r7,r9
   8ae34:	400d883a 	mov	r6,r8
   8ae38:	180b883a 	mov	r5,r3
   8ae3c:	1009883a 	mov	r4,r2
   8ae40:	00871840 	call	87184 <__muldf3>
   8ae44:	180f883a 	mov	r7,r3
   8ae48:	880b883a 	mov	r5,r17
   8ae4c:	100d883a 	mov	r6,r2
   8ae50:	8009883a 	mov	r4,r16
   8ae54:	00871100 	call	87110 <__adddf3>
   8ae58:	1009883a 	mov	r4,r2
   8ae5c:	180b883a 	mov	r5,r3
   8ae60:	1021883a 	mov	r16,r2
   8ae64:	1823883a 	mov	r17,r3
   8ae68:	0087bc80 	call	87bc8 <__fixdfsi>
   8ae6c:	000d883a 	mov	r6,zero
   8ae70:	000f883a 	mov	r7,zero
   8ae74:	8009883a 	mov	r4,r16
   8ae78:	880b883a 	mov	r5,r17
   8ae7c:	d8800d15 	stw	r2,52(sp)
   8ae80:	00879c00 	call	879c0 <__ltdf2>
   8ae84:	10031716 	blt	r2,zero,8bae4 <_dtoa_r+0xe8c>
   8ae88:	d8c00d17 	ldw	r3,52(sp)
   8ae8c:	00800584 	movi	r2,22
   8ae90:	10c1482e 	bgeu	r2,r3,8b3b4 <_dtoa_r+0x75c>
   8ae94:	01000044 	movi	r4,1
   8ae98:	d9000c15 	stw	r4,48(sp)
   8ae9c:	bd85c83a 	sub	r2,r23,r22
   8aea0:	11bfffc4 	addi	r6,r2,-1
   8aea4:	30030b16 	blt	r6,zero,8bad4 <_dtoa_r+0xe7c>
   8aea8:	d9800a15 	stw	r6,40(sp)
   8aeac:	d8001115 	stw	zero,68(sp)
   8aeb0:	d8c00d17 	ldw	r3,52(sp)
   8aeb4:	1802ff16 	blt	r3,zero,8bab4 <_dtoa_r+0xe5c>
   8aeb8:	d9000a17 	ldw	r4,40(sp)
   8aebc:	d8c00915 	stw	r3,36(sp)
   8aec0:	d8001015 	stw	zero,64(sp)
   8aec4:	20c9883a 	add	r4,r4,r3
   8aec8:	d9000a15 	stw	r4,40(sp)
   8aecc:	d9001717 	ldw	r4,92(sp)
   8aed0:	00800244 	movi	r2,9
   8aed4:	11004636 	bltu	r2,r4,8aff0 <_dtoa_r+0x398>
   8aed8:	00800144 	movi	r2,5
   8aedc:	11020416 	blt	r2,r4,8b6f0 <_dtoa_r+0xa98>
   8aee0:	04400044 	movi	r17,1
   8aee4:	d8c01717 	ldw	r3,92(sp)
   8aee8:	00800144 	movi	r2,5
   8aeec:	10c1ed36 	bltu	r2,r3,8b6a4 <_dtoa_r+0xa4c>
   8aef0:	18c5883a 	add	r2,r3,r3
   8aef4:	1085883a 	add	r2,r2,r2
   8aef8:	00c00274 	movhi	r3,9
   8aefc:	18ebc304 	addi	r3,r3,-20724
   8af00:	10c5883a 	add	r2,r2,r3
   8af04:	11000017 	ldw	r4,0(r2)
   8af08:	2000683a 	jmp	r4
   8af0c:	0008aff8 	rdprs	zero,zero,8895
   8af10:	0008aff8 	rdprs	zero,zero,8895
   8af14:	0008b9f8 	rdprs	zero,zero,8935
   8af18:	0008b9d0 	cmplti	zero,zero,8935
   8af1c:	0008ba14 	movui	zero,8936
   8af20:	0008ba20 	cmpeqi	zero,zero,8936
   8af24:	d9002717 	ldw	r4,156(sp)
   8af28:	0089c3c4 	movi	r2,9999
   8af2c:	20800015 	stw	r2,0(r4)
   8af30:	a0001026 	beq	r20,zero,8af74 <_dtoa_r+0x31c>
   8af34:	00c00274 	movhi	r3,9
   8af38:	18ceeb04 	addi	r3,r3,15276
   8af3c:	d9802917 	ldw	r6,164(sp)
   8af40:	303f7926 	beq	r6,zero,8ad28 <_dtoa_r+0xd0>
   8af44:	188000c7 	ldb	r2,3(r3)
   8af48:	190000c4 	addi	r4,r3,3
   8af4c:	1000101e 	bne	r2,zero,8af90 <_dtoa_r+0x338>
   8af50:	d8802917 	ldw	r2,164(sp)
   8af54:	11000015 	stw	r4,0(r2)
   8af58:	003f7306 	br	8ad28 <_dtoa_r+0xd0>
   8af5c:	00a00034 	movhi	r2,32768
   8af60:	10bfffc4 	addi	r2,r2,-1
   8af64:	00c00044 	movi	r3,1
   8af68:	88aa703a 	and	r21,r17,r2
   8af6c:	90c00015 	stw	r3,0(r18)
   8af70:	003f5806 	br	8acd4 <_dtoa_r+0x7c>
   8af74:	00800434 	movhi	r2,16
   8af78:	10bfffc4 	addi	r2,r2,-1
   8af7c:	a884703a 	and	r2,r21,r2
   8af80:	103fec1e 	bne	r2,zero,8af34 <_dtoa_r+0x2dc>
   8af84:	00c00274 	movhi	r3,9
   8af88:	18cee804 	addi	r3,r3,15264
   8af8c:	003feb06 	br	8af3c <_dtoa_r+0x2e4>
   8af90:	d8802917 	ldw	r2,164(sp)
   8af94:	19000204 	addi	r4,r3,8
   8af98:	11000015 	stw	r4,0(r2)
   8af9c:	003f6206 	br	8ad28 <_dtoa_r+0xd0>
   8afa0:	ddc00117 	ldw	r23,4(sp)
   8afa4:	d8800217 	ldw	r2,8(sp)
   8afa8:	01000804 	movi	r4,32
   8afac:	b8c10c84 	addi	r3,r23,1074
   8afb0:	18a3883a 	add	r17,r3,r2
   8afb4:	2441b80e 	bge	r4,r17,8b698 <_dtoa_r+0xa40>
   8afb8:	00c01004 	movi	r3,64
   8afbc:	1c47c83a 	sub	r3,r3,r17
   8afc0:	88bff804 	addi	r2,r17,-32
   8afc4:	a8c6983a 	sll	r3,r21,r3
   8afc8:	a084d83a 	srl	r2,r20,r2
   8afcc:	1888b03a 	or	r4,r3,r2
   8afd0:	0087d4c0 	call	87d4c <__floatunsidf>
   8afd4:	1011883a 	mov	r8,r2
   8afd8:	00bf8434 	movhi	r2,65040
   8afdc:	01000044 	movi	r4,1
   8afe0:	10d3883a 	add	r9,r2,r3
   8afe4:	8dbef344 	addi	r22,r17,-1075
   8afe8:	d9000815 	stw	r4,32(sp)
   8afec:	003f6f06 	br	8adac <_dtoa_r+0x154>
   8aff0:	d8001715 	stw	zero,92(sp)
   8aff4:	04400044 	movi	r17,1
   8aff8:	00bfffc4 	movi	r2,-1
   8affc:	00c00044 	movi	r3,1
   8b000:	d8800e15 	stw	r2,56(sp)
   8b004:	d8002615 	stw	zero,152(sp)
   8b008:	d8800f15 	stw	r2,60(sp)
   8b00c:	d8c00b15 	stw	r3,44(sp)
   8b010:	1021883a 	mov	r16,r2
   8b014:	d8801617 	ldw	r2,88(sp)
   8b018:	10001115 	stw	zero,68(r2)
   8b01c:	d8801617 	ldw	r2,88(sp)
   8b020:	11401117 	ldw	r5,68(r2)
   8b024:	1009883a 	mov	r4,r2
   8b028:	008e36c0 	call	8e36c <_Balloc>
   8b02c:	d8c01617 	ldw	r3,88(sp)
   8b030:	d8800515 	stw	r2,20(sp)
   8b034:	18801015 	stw	r2,64(r3)
   8b038:	00800384 	movi	r2,14
   8b03c:	14006836 	bltu	r2,r16,8b1e0 <_dtoa_r+0x588>
   8b040:	8805003a 	cmpeq	r2,r17,zero
   8b044:	1000661e 	bne	r2,zero,8b1e0 <_dtoa_r+0x588>
   8b048:	d9000d17 	ldw	r4,52(sp)
   8b04c:	0102300e 	bge	zero,r4,8b910 <_dtoa_r+0xcb8>
   8b050:	208003cc 	andi	r2,r4,15
   8b054:	100490fa 	slli	r2,r2,3
   8b058:	2025d13a 	srai	r18,r4,4
   8b05c:	00c00274 	movhi	r3,9
   8b060:	18cefc04 	addi	r3,r3,15344
   8b064:	10c5883a 	add	r2,r2,r3
   8b068:	90c0040c 	andi	r3,r18,16
   8b06c:	14000017 	ldw	r16,0(r2)
   8b070:	14400117 	ldw	r17,4(r2)
   8b074:	18036a1e 	bne	r3,zero,8be20 <_dtoa_r+0x11c8>
   8b078:	05800084 	movi	r22,2
   8b07c:	90001026 	beq	r18,zero,8b0c0 <_dtoa_r+0x468>
   8b080:	04c00274 	movhi	r19,9
   8b084:	9ccf2e04 	addi	r19,r19,15544
   8b088:	9080004c 	andi	r2,r18,1
   8b08c:	1005003a 	cmpeq	r2,r2,zero
   8b090:	1000081e 	bne	r2,zero,8b0b4 <_dtoa_r+0x45c>
   8b094:	99800017 	ldw	r6,0(r19)
   8b098:	99c00117 	ldw	r7,4(r19)
   8b09c:	880b883a 	mov	r5,r17
   8b0a0:	8009883a 	mov	r4,r16
   8b0a4:	00871840 	call	87184 <__muldf3>
   8b0a8:	1021883a 	mov	r16,r2
   8b0ac:	b5800044 	addi	r22,r22,1
   8b0b0:	1823883a 	mov	r17,r3
   8b0b4:	9025d07a 	srai	r18,r18,1
   8b0b8:	9cc00204 	addi	r19,r19,8
   8b0bc:	903ff21e 	bne	r18,zero,8b088 <_dtoa_r+0x430>
   8b0c0:	a80b883a 	mov	r5,r21
   8b0c4:	a009883a 	mov	r4,r20
   8b0c8:	880f883a 	mov	r7,r17
   8b0cc:	800d883a 	mov	r6,r16
   8b0d0:	00875480 	call	87548 <__divdf3>
   8b0d4:	1029883a 	mov	r20,r2
   8b0d8:	182b883a 	mov	r21,r3
   8b0dc:	d8c00c17 	ldw	r3,48(sp)
   8b0e0:	1805003a 	cmpeq	r2,r3,zero
   8b0e4:	1000081e 	bne	r2,zero,8b108 <_dtoa_r+0x4b0>
   8b0e8:	0005883a 	mov	r2,zero
   8b0ec:	00cffc34 	movhi	r3,16368
   8b0f0:	180f883a 	mov	r7,r3
   8b0f4:	a009883a 	mov	r4,r20
   8b0f8:	a80b883a 	mov	r5,r21
   8b0fc:	100d883a 	mov	r6,r2
   8b100:	00879c00 	call	879c0 <__ltdf2>
   8b104:	1003fe16 	blt	r2,zero,8c100 <_dtoa_r+0x14a8>
   8b108:	b009883a 	mov	r4,r22
   8b10c:	0087ad00 	call	87ad0 <__floatsidf>
   8b110:	180b883a 	mov	r5,r3
   8b114:	1009883a 	mov	r4,r2
   8b118:	a00d883a 	mov	r6,r20
   8b11c:	a80f883a 	mov	r7,r21
   8b120:	00871840 	call	87184 <__muldf3>
   8b124:	0011883a 	mov	r8,zero
   8b128:	02500734 	movhi	r9,16412
   8b12c:	1009883a 	mov	r4,r2
   8b130:	180b883a 	mov	r5,r3
   8b134:	480f883a 	mov	r7,r9
   8b138:	400d883a 	mov	r6,r8
   8b13c:	00871100 	call	87110 <__adddf3>
   8b140:	d9000f17 	ldw	r4,60(sp)
   8b144:	102d883a 	mov	r22,r2
   8b148:	00bf3034 	movhi	r2,64704
   8b14c:	18b9883a 	add	fp,r3,r2
   8b150:	e02f883a 	mov	r23,fp
   8b154:	20028f1e 	bne	r4,zero,8bb94 <_dtoa_r+0xf3c>
   8b158:	0005883a 	mov	r2,zero
   8b15c:	00d00534 	movhi	r3,16404
   8b160:	a009883a 	mov	r4,r20
   8b164:	a80b883a 	mov	r5,r21
   8b168:	180f883a 	mov	r7,r3
   8b16c:	100d883a 	mov	r6,r2
   8b170:	00870900 	call	87090 <__subdf3>
   8b174:	1009883a 	mov	r4,r2
   8b178:	e00f883a 	mov	r7,fp
   8b17c:	180b883a 	mov	r5,r3
   8b180:	b00d883a 	mov	r6,r22
   8b184:	1025883a 	mov	r18,r2
   8b188:	1827883a 	mov	r19,r3
   8b18c:	00878b00 	call	878b0 <__gtdf2>
   8b190:	00834f16 	blt	zero,r2,8bed0 <_dtoa_r+0x1278>
   8b194:	e0e0003c 	xorhi	r3,fp,32768
   8b198:	9009883a 	mov	r4,r18
   8b19c:	980b883a 	mov	r5,r19
   8b1a0:	180f883a 	mov	r7,r3
   8b1a4:	b00d883a 	mov	r6,r22
   8b1a8:	00879c00 	call	879c0 <__ltdf2>
   8b1ac:	1000080e 	bge	r2,zero,8b1d0 <_dtoa_r+0x578>
   8b1b0:	0027883a 	mov	r19,zero
   8b1b4:	0025883a 	mov	r18,zero
   8b1b8:	d8802617 	ldw	r2,152(sp)
   8b1bc:	df000517 	ldw	fp,20(sp)
   8b1c0:	d8000615 	stw	zero,24(sp)
   8b1c4:	0084303a 	nor	r2,zero,r2
   8b1c8:	d8800d15 	stw	r2,52(sp)
   8b1cc:	00019b06 	br	8b83c <_dtoa_r+0xbe4>
   8b1d0:	d9801217 	ldw	r6,72(sp)
   8b1d4:	d8801317 	ldw	r2,76(sp)
   8b1d8:	3029883a 	mov	r20,r6
   8b1dc:	102b883a 	mov	r21,r2
   8b1e0:	d8c00217 	ldw	r3,8(sp)
   8b1e4:	18008516 	blt	r3,zero,8b3fc <_dtoa_r+0x7a4>
   8b1e8:	d9000d17 	ldw	r4,52(sp)
   8b1ec:	00800384 	movi	r2,14
   8b1f0:	11008216 	blt	r2,r4,8b3fc <_dtoa_r+0x7a4>
   8b1f4:	200490fa 	slli	r2,r4,3
   8b1f8:	d9802617 	ldw	r6,152(sp)
   8b1fc:	00c00274 	movhi	r3,9
   8b200:	18cefc04 	addi	r3,r3,15344
   8b204:	10c5883a 	add	r2,r2,r3
   8b208:	14800017 	ldw	r18,0(r2)
   8b20c:	14c00117 	ldw	r19,4(r2)
   8b210:	30031e16 	blt	r6,zero,8be8c <_dtoa_r+0x1234>
   8b214:	d9000517 	ldw	r4,20(sp)
   8b218:	d8c00f17 	ldw	r3,60(sp)
   8b21c:	a823883a 	mov	r17,r21
   8b220:	a021883a 	mov	r16,r20
   8b224:	192b883a 	add	r21,r3,r4
   8b228:	2039883a 	mov	fp,r4
   8b22c:	00000f06 	br	8b26c <_dtoa_r+0x614>
   8b230:	0005883a 	mov	r2,zero
   8b234:	00d00934 	movhi	r3,16420
   8b238:	5009883a 	mov	r4,r10
   8b23c:	580b883a 	mov	r5,r11
   8b240:	180f883a 	mov	r7,r3
   8b244:	100d883a 	mov	r6,r2
   8b248:	00871840 	call	87184 <__muldf3>
   8b24c:	180b883a 	mov	r5,r3
   8b250:	000d883a 	mov	r6,zero
   8b254:	000f883a 	mov	r7,zero
   8b258:	1009883a 	mov	r4,r2
   8b25c:	1021883a 	mov	r16,r2
   8b260:	1823883a 	mov	r17,r3
   8b264:	00878280 	call	87828 <__nedf2>
   8b268:	10004526 	beq	r2,zero,8b380 <_dtoa_r+0x728>
   8b26c:	900d883a 	mov	r6,r18
   8b270:	980f883a 	mov	r7,r19
   8b274:	8009883a 	mov	r4,r16
   8b278:	880b883a 	mov	r5,r17
   8b27c:	00875480 	call	87548 <__divdf3>
   8b280:	180b883a 	mov	r5,r3
   8b284:	1009883a 	mov	r4,r2
   8b288:	0087bc80 	call	87bc8 <__fixdfsi>
   8b28c:	1009883a 	mov	r4,r2
   8b290:	1029883a 	mov	r20,r2
   8b294:	0087ad00 	call	87ad0 <__floatsidf>
   8b298:	180f883a 	mov	r7,r3
   8b29c:	9009883a 	mov	r4,r18
   8b2a0:	980b883a 	mov	r5,r19
   8b2a4:	100d883a 	mov	r6,r2
   8b2a8:	00871840 	call	87184 <__muldf3>
   8b2ac:	180f883a 	mov	r7,r3
   8b2b0:	880b883a 	mov	r5,r17
   8b2b4:	8009883a 	mov	r4,r16
   8b2b8:	100d883a 	mov	r6,r2
   8b2bc:	00870900 	call	87090 <__subdf3>
   8b2c0:	1015883a 	mov	r10,r2
   8b2c4:	a0800c04 	addi	r2,r20,48
   8b2c8:	e0800005 	stb	r2,0(fp)
   8b2cc:	e7000044 	addi	fp,fp,1
   8b2d0:	1817883a 	mov	r11,r3
   8b2d4:	e57fd61e 	bne	fp,r21,8b230 <_dtoa_r+0x5d8>
   8b2d8:	500d883a 	mov	r6,r10
   8b2dc:	180f883a 	mov	r7,r3
   8b2e0:	5009883a 	mov	r4,r10
   8b2e4:	180b883a 	mov	r5,r3
   8b2e8:	00871100 	call	87110 <__adddf3>
   8b2ec:	100d883a 	mov	r6,r2
   8b2f0:	9009883a 	mov	r4,r18
   8b2f4:	980b883a 	mov	r5,r19
   8b2f8:	180f883a 	mov	r7,r3
   8b2fc:	1021883a 	mov	r16,r2
   8b300:	1823883a 	mov	r17,r3
   8b304:	00879c00 	call	879c0 <__ltdf2>
   8b308:	10000816 	blt	r2,zero,8b32c <_dtoa_r+0x6d4>
   8b30c:	980b883a 	mov	r5,r19
   8b310:	800d883a 	mov	r6,r16
   8b314:	880f883a 	mov	r7,r17
   8b318:	9009883a 	mov	r4,r18
   8b31c:	00877a00 	call	877a0 <__eqdf2>
   8b320:	1000171e 	bne	r2,zero,8b380 <_dtoa_r+0x728>
   8b324:	a080004c 	andi	r2,r20,1
   8b328:	10001526 	beq	r2,zero,8b380 <_dtoa_r+0x728>
   8b32c:	d8800d17 	ldw	r2,52(sp)
   8b330:	d8800415 	stw	r2,16(sp)
   8b334:	e009883a 	mov	r4,fp
   8b338:	213fffc4 	addi	r4,r4,-1
   8b33c:	20c00007 	ldb	r3,0(r4)
   8b340:	00800e44 	movi	r2,57
   8b344:	1880081e 	bne	r3,r2,8b368 <_dtoa_r+0x710>
   8b348:	d8800517 	ldw	r2,20(sp)
   8b34c:	113ffa1e 	bne	r2,r4,8b338 <_dtoa_r+0x6e0>
   8b350:	d8c00417 	ldw	r3,16(sp)
   8b354:	d9800517 	ldw	r6,20(sp)
   8b358:	00800c04 	movi	r2,48
   8b35c:	18c00044 	addi	r3,r3,1
   8b360:	d8c00415 	stw	r3,16(sp)
   8b364:	30800005 	stb	r2,0(r6)
   8b368:	20800003 	ldbu	r2,0(r4)
   8b36c:	d8c00417 	ldw	r3,16(sp)
   8b370:	27000044 	addi	fp,r4,1
   8b374:	10800044 	addi	r2,r2,1
   8b378:	d8c00d15 	stw	r3,52(sp)
   8b37c:	20800005 	stb	r2,0(r4)
   8b380:	d9001617 	ldw	r4,88(sp)
   8b384:	d9400717 	ldw	r5,28(sp)
   8b388:	008ddec0 	call	8ddec <_Bfree>
   8b38c:	e0000005 	stb	zero,0(fp)
   8b390:	d9800d17 	ldw	r6,52(sp)
   8b394:	d8c02717 	ldw	r3,156(sp)
   8b398:	d9002917 	ldw	r4,164(sp)
   8b39c:	30800044 	addi	r2,r6,1
   8b3a0:	18800015 	stw	r2,0(r3)
   8b3a4:	20029c26 	beq	r4,zero,8be18 <_dtoa_r+0x11c0>
   8b3a8:	d8c00517 	ldw	r3,20(sp)
   8b3ac:	27000015 	stw	fp,0(r4)
   8b3b0:	003e5d06 	br	8ad28 <_dtoa_r+0xd0>
   8b3b4:	d9800d17 	ldw	r6,52(sp)
   8b3b8:	00c00274 	movhi	r3,9
   8b3bc:	18cefc04 	addi	r3,r3,15344
   8b3c0:	d9001217 	ldw	r4,72(sp)
   8b3c4:	300490fa 	slli	r2,r6,3
   8b3c8:	d9401317 	ldw	r5,76(sp)
   8b3cc:	10c5883a 	add	r2,r2,r3
   8b3d0:	12000017 	ldw	r8,0(r2)
   8b3d4:	12400117 	ldw	r9,4(r2)
   8b3d8:	400d883a 	mov	r6,r8
   8b3dc:	480f883a 	mov	r7,r9
   8b3e0:	00879c00 	call	879c0 <__ltdf2>
   8b3e4:	1000030e 	bge	r2,zero,8b3f4 <_dtoa_r+0x79c>
   8b3e8:	d8800d17 	ldw	r2,52(sp)
   8b3ec:	10bfffc4 	addi	r2,r2,-1
   8b3f0:	d8800d15 	stw	r2,52(sp)
   8b3f4:	d8000c15 	stw	zero,48(sp)
   8b3f8:	003ea806 	br	8ae9c <_dtoa_r+0x244>
   8b3fc:	d9000b17 	ldw	r4,44(sp)
   8b400:	202cc03a 	cmpne	r22,r4,zero
   8b404:	b000c71e 	bne	r22,zero,8b724 <_dtoa_r+0xacc>
   8b408:	dc001117 	ldw	r16,68(sp)
   8b40c:	dc801017 	ldw	r18,64(sp)
   8b410:	0027883a 	mov	r19,zero
   8b414:	04000b0e 	bge	zero,r16,8b444 <_dtoa_r+0x7ec>
   8b418:	d8c00a17 	ldw	r3,40(sp)
   8b41c:	00c0090e 	bge	zero,r3,8b444 <_dtoa_r+0x7ec>
   8b420:	8005883a 	mov	r2,r16
   8b424:	1c011316 	blt	r3,r16,8b874 <_dtoa_r+0xc1c>
   8b428:	d9000a17 	ldw	r4,40(sp)
   8b42c:	d9801117 	ldw	r6,68(sp)
   8b430:	80a1c83a 	sub	r16,r16,r2
   8b434:	2089c83a 	sub	r4,r4,r2
   8b438:	308dc83a 	sub	r6,r6,r2
   8b43c:	d9000a15 	stw	r4,40(sp)
   8b440:	d9801115 	stw	r6,68(sp)
   8b444:	d8801017 	ldw	r2,64(sp)
   8b448:	0080150e 	bge	zero,r2,8b4a0 <_dtoa_r+0x848>
   8b44c:	d8c00b17 	ldw	r3,44(sp)
   8b450:	1805003a 	cmpeq	r2,r3,zero
   8b454:	1001c91e 	bne	r2,zero,8bb7c <_dtoa_r+0xf24>
   8b458:	04800e0e 	bge	zero,r18,8b494 <_dtoa_r+0x83c>
   8b45c:	d9001617 	ldw	r4,88(sp)
   8b460:	980b883a 	mov	r5,r19
   8b464:	900d883a 	mov	r6,r18
   8b468:	008eba00 	call	8eba0 <__pow5mult>
   8b46c:	d9001617 	ldw	r4,88(sp)
   8b470:	d9800717 	ldw	r6,28(sp)
   8b474:	100b883a 	mov	r5,r2
   8b478:	1027883a 	mov	r19,r2
   8b47c:	008e87c0 	call	8e87c <__multiply>
   8b480:	d9001617 	ldw	r4,88(sp)
   8b484:	d9400717 	ldw	r5,28(sp)
   8b488:	1023883a 	mov	r17,r2
   8b48c:	008ddec0 	call	8ddec <_Bfree>
   8b490:	dc400715 	stw	r17,28(sp)
   8b494:	d9001017 	ldw	r4,64(sp)
   8b498:	248dc83a 	sub	r6,r4,r18
   8b49c:	30010e1e 	bne	r6,zero,8b8d8 <_dtoa_r+0xc80>
   8b4a0:	d9001617 	ldw	r4,88(sp)
   8b4a4:	04400044 	movi	r17,1
   8b4a8:	880b883a 	mov	r5,r17
   8b4ac:	008ea640 	call	8ea64 <__i2b>
   8b4b0:	d9800917 	ldw	r6,36(sp)
   8b4b4:	1025883a 	mov	r18,r2
   8b4b8:	0180040e 	bge	zero,r6,8b4cc <_dtoa_r+0x874>
   8b4bc:	d9001617 	ldw	r4,88(sp)
   8b4c0:	100b883a 	mov	r5,r2
   8b4c4:	008eba00 	call	8eba0 <__pow5mult>
   8b4c8:	1025883a 	mov	r18,r2
   8b4cc:	d8801717 	ldw	r2,92(sp)
   8b4d0:	8880f30e 	bge	r17,r2,8b8a0 <_dtoa_r+0xc48>
   8b4d4:	0023883a 	mov	r17,zero
   8b4d8:	d9800917 	ldw	r6,36(sp)
   8b4dc:	30019e1e 	bne	r6,zero,8bb58 <_dtoa_r+0xf00>
   8b4e0:	00c00044 	movi	r3,1
   8b4e4:	d9000a17 	ldw	r4,40(sp)
   8b4e8:	20c5883a 	add	r2,r4,r3
   8b4ec:	10c007cc 	andi	r3,r2,31
   8b4f0:	1800841e 	bne	r3,zero,8b704 <_dtoa_r+0xaac>
   8b4f4:	00800704 	movi	r2,28
   8b4f8:	d9000a17 	ldw	r4,40(sp)
   8b4fc:	d9801117 	ldw	r6,68(sp)
   8b500:	80a1883a 	add	r16,r16,r2
   8b504:	2089883a 	add	r4,r4,r2
   8b508:	308d883a 	add	r6,r6,r2
   8b50c:	d9000a15 	stw	r4,40(sp)
   8b510:	d9801115 	stw	r6,68(sp)
   8b514:	d8801117 	ldw	r2,68(sp)
   8b518:	0080050e 	bge	zero,r2,8b530 <_dtoa_r+0x8d8>
   8b51c:	d9400717 	ldw	r5,28(sp)
   8b520:	d9001617 	ldw	r4,88(sp)
   8b524:	100d883a 	mov	r6,r2
   8b528:	008e7300 	call	8e730 <__lshift>
   8b52c:	d8800715 	stw	r2,28(sp)
   8b530:	d8c00a17 	ldw	r3,40(sp)
   8b534:	00c0050e 	bge	zero,r3,8b54c <_dtoa_r+0x8f4>
   8b538:	d9001617 	ldw	r4,88(sp)
   8b53c:	900b883a 	mov	r5,r18
   8b540:	180d883a 	mov	r6,r3
   8b544:	008e7300 	call	8e730 <__lshift>
   8b548:	1025883a 	mov	r18,r2
   8b54c:	d9000c17 	ldw	r4,48(sp)
   8b550:	2005003a 	cmpeq	r2,r4,zero
   8b554:	10016f26 	beq	r2,zero,8bb14 <_dtoa_r+0xebc>
   8b558:	d9000f17 	ldw	r4,60(sp)
   8b55c:	0102170e 	bge	zero,r4,8bdbc <_dtoa_r+0x1164>
   8b560:	d9800b17 	ldw	r6,44(sp)
   8b564:	3005003a 	cmpeq	r2,r6,zero
   8b568:	1000881e 	bne	r2,zero,8b78c <_dtoa_r+0xb34>
   8b56c:	0400050e 	bge	zero,r16,8b584 <_dtoa_r+0x92c>
   8b570:	d9001617 	ldw	r4,88(sp)
   8b574:	980b883a 	mov	r5,r19
   8b578:	800d883a 	mov	r6,r16
   8b57c:	008e7300 	call	8e730 <__lshift>
   8b580:	1027883a 	mov	r19,r2
   8b584:	8804c03a 	cmpne	r2,r17,zero
   8b588:	1002541e 	bne	r2,zero,8bedc <_dtoa_r+0x1284>
   8b58c:	980b883a 	mov	r5,r19
   8b590:	dd800517 	ldw	r22,20(sp)
   8b594:	dcc00615 	stw	r19,24(sp)
   8b598:	a700004c 	andi	fp,r20,1
   8b59c:	2827883a 	mov	r19,r5
   8b5a0:	d9000717 	ldw	r4,28(sp)
   8b5a4:	900b883a 	mov	r5,r18
   8b5a8:	008aa400 	call	8aa40 <quorem>
   8b5ac:	d9000717 	ldw	r4,28(sp)
   8b5b0:	d9400617 	ldw	r5,24(sp)
   8b5b4:	1023883a 	mov	r17,r2
   8b5b8:	8dc00c04 	addi	r23,r17,48
   8b5bc:	008df480 	call	8df48 <__mcmp>
   8b5c0:	d9001617 	ldw	r4,88(sp)
   8b5c4:	900b883a 	mov	r5,r18
   8b5c8:	980d883a 	mov	r6,r19
   8b5cc:	1029883a 	mov	r20,r2
   8b5d0:	008e5a40 	call	8e5a4 <__mdiff>
   8b5d4:	102b883a 	mov	r21,r2
   8b5d8:	10800317 	ldw	r2,12(r2)
   8b5dc:	1001281e 	bne	r2,zero,8ba80 <_dtoa_r+0xe28>
   8b5e0:	d9000717 	ldw	r4,28(sp)
   8b5e4:	a80b883a 	mov	r5,r21
   8b5e8:	008df480 	call	8df48 <__mcmp>
   8b5ec:	d9001617 	ldw	r4,88(sp)
   8b5f0:	1021883a 	mov	r16,r2
   8b5f4:	a80b883a 	mov	r5,r21
   8b5f8:	008ddec0 	call	8ddec <_Bfree>
   8b5fc:	8000041e 	bne	r16,zero,8b610 <_dtoa_r+0x9b8>
   8b600:	d8801717 	ldw	r2,92(sp)
   8b604:	1000021e 	bne	r2,zero,8b610 <_dtoa_r+0x9b8>
   8b608:	e004c03a 	cmpne	r2,fp,zero
   8b60c:	10011726 	beq	r2,zero,8ba6c <_dtoa_r+0xe14>
   8b610:	a0010616 	blt	r20,zero,8ba2c <_dtoa_r+0xdd4>
   8b614:	a000041e 	bne	r20,zero,8b628 <_dtoa_r+0x9d0>
   8b618:	d8c01717 	ldw	r3,92(sp)
   8b61c:	1800021e 	bne	r3,zero,8b628 <_dtoa_r+0x9d0>
   8b620:	e004c03a 	cmpne	r2,fp,zero
   8b624:	10010126 	beq	r2,zero,8ba2c <_dtoa_r+0xdd4>
   8b628:	04023d16 	blt	zero,r16,8bf20 <_dtoa_r+0x12c8>
   8b62c:	b5c00005 	stb	r23,0(r22)
   8b630:	d9800517 	ldw	r6,20(sp)
   8b634:	d9000f17 	ldw	r4,60(sp)
   8b638:	b5800044 	addi	r22,r22,1
   8b63c:	3105883a 	add	r2,r6,r4
   8b640:	b0806526 	beq	r22,r2,8b7d8 <_dtoa_r+0xb80>
   8b644:	d9400717 	ldw	r5,28(sp)
   8b648:	d9001617 	ldw	r4,88(sp)
   8b64c:	01800284 	movi	r6,10
   8b650:	000f883a 	mov	r7,zero
   8b654:	008eaa00 	call	8eaa0 <__multadd>
   8b658:	d8800715 	stw	r2,28(sp)
   8b65c:	d8800617 	ldw	r2,24(sp)
   8b660:	14c10c26 	beq	r2,r19,8ba94 <_dtoa_r+0xe3c>
   8b664:	d9400617 	ldw	r5,24(sp)
   8b668:	d9001617 	ldw	r4,88(sp)
   8b66c:	01800284 	movi	r6,10
   8b670:	000f883a 	mov	r7,zero
   8b674:	008eaa00 	call	8eaa0 <__multadd>
   8b678:	d9001617 	ldw	r4,88(sp)
   8b67c:	980b883a 	mov	r5,r19
   8b680:	01800284 	movi	r6,10
   8b684:	000f883a 	mov	r7,zero
   8b688:	d8800615 	stw	r2,24(sp)
   8b68c:	008eaa00 	call	8eaa0 <__multadd>
   8b690:	1027883a 	mov	r19,r2
   8b694:	003fc206 	br	8b5a0 <_dtoa_r+0x948>
   8b698:	2445c83a 	sub	r2,r4,r17
   8b69c:	a088983a 	sll	r4,r20,r2
   8b6a0:	003e4b06 	br	8afd0 <_dtoa_r+0x378>
   8b6a4:	01bfffc4 	movi	r6,-1
   8b6a8:	00800044 	movi	r2,1
   8b6ac:	d9800e15 	stw	r6,56(sp)
   8b6b0:	d9800f15 	stw	r6,60(sp)
   8b6b4:	d8800b15 	stw	r2,44(sp)
   8b6b8:	d8c01617 	ldw	r3,88(sp)
   8b6bc:	008005c4 	movi	r2,23
   8b6c0:	18001115 	stw	zero,68(r3)
   8b6c4:	1580082e 	bgeu	r2,r22,8b6e8 <_dtoa_r+0xa90>
   8b6c8:	00c00104 	movi	r3,4
   8b6cc:	0009883a 	mov	r4,zero
   8b6d0:	18c7883a 	add	r3,r3,r3
   8b6d4:	18800504 	addi	r2,r3,20
   8b6d8:	21000044 	addi	r4,r4,1
   8b6dc:	b0bffc2e 	bgeu	r22,r2,8b6d0 <_dtoa_r+0xa78>
   8b6e0:	d9801617 	ldw	r6,88(sp)
   8b6e4:	31001115 	stw	r4,68(r6)
   8b6e8:	dc000f17 	ldw	r16,60(sp)
   8b6ec:	003e4b06 	br	8b01c <_dtoa_r+0x3c4>
   8b6f0:	d9801717 	ldw	r6,92(sp)
   8b6f4:	0023883a 	mov	r17,zero
   8b6f8:	31bfff04 	addi	r6,r6,-4
   8b6fc:	d9801715 	stw	r6,92(sp)
   8b700:	003df806 	br	8aee4 <_dtoa_r+0x28c>
   8b704:	00800804 	movi	r2,32
   8b708:	10c9c83a 	sub	r4,r2,r3
   8b70c:	00c00104 	movi	r3,4
   8b710:	19005a16 	blt	r3,r4,8b87c <_dtoa_r+0xc24>
   8b714:	008000c4 	movi	r2,3
   8b718:	113f7e16 	blt	r2,r4,8b514 <_dtoa_r+0x8bc>
   8b71c:	20800704 	addi	r2,r4,28
   8b720:	003f7506 	br	8b4f8 <_dtoa_r+0x8a0>
   8b724:	d9801717 	ldw	r6,92(sp)
   8b728:	00800044 	movi	r2,1
   8b72c:	1180a10e 	bge	r2,r6,8b9b4 <_dtoa_r+0xd5c>
   8b730:	d9800f17 	ldw	r6,60(sp)
   8b734:	d8c01017 	ldw	r3,64(sp)
   8b738:	30bfffc4 	addi	r2,r6,-1
   8b73c:	1881c616 	blt	r3,r2,8be58 <_dtoa_r+0x1200>
   8b740:	18a5c83a 	sub	r18,r3,r2
   8b744:	d8800f17 	ldw	r2,60(sp)
   8b748:	10026216 	blt	r2,zero,8c0d4 <_dtoa_r+0x147c>
   8b74c:	dc001117 	ldw	r16,68(sp)
   8b750:	1007883a 	mov	r3,r2
   8b754:	d9800a17 	ldw	r6,40(sp)
   8b758:	d8801117 	ldw	r2,68(sp)
   8b75c:	d9001617 	ldw	r4,88(sp)
   8b760:	30cd883a 	add	r6,r6,r3
   8b764:	10c5883a 	add	r2,r2,r3
   8b768:	01400044 	movi	r5,1
   8b76c:	d9800a15 	stw	r6,40(sp)
   8b770:	d8801115 	stw	r2,68(sp)
   8b774:	008ea640 	call	8ea64 <__i2b>
   8b778:	1027883a 	mov	r19,r2
   8b77c:	003f2506 	br	8b414 <_dtoa_r+0x7bc>
   8b780:	00c00274 	movhi	r3,9
   8b784:	18cedf04 	addi	r3,r3,15228
   8b788:	003d6706 	br	8ad28 <_dtoa_r+0xd0>
   8b78c:	dd800517 	ldw	r22,20(sp)
   8b790:	04000044 	movi	r16,1
   8b794:	00000706 	br	8b7b4 <_dtoa_r+0xb5c>
   8b798:	d9400717 	ldw	r5,28(sp)
   8b79c:	d9001617 	ldw	r4,88(sp)
   8b7a0:	01800284 	movi	r6,10
   8b7a4:	000f883a 	mov	r7,zero
   8b7a8:	008eaa00 	call	8eaa0 <__multadd>
   8b7ac:	d8800715 	stw	r2,28(sp)
   8b7b0:	84000044 	addi	r16,r16,1
   8b7b4:	d9000717 	ldw	r4,28(sp)
   8b7b8:	900b883a 	mov	r5,r18
   8b7bc:	008aa400 	call	8aa40 <quorem>
   8b7c0:	15c00c04 	addi	r23,r2,48
   8b7c4:	b5c00005 	stb	r23,0(r22)
   8b7c8:	d8c00f17 	ldw	r3,60(sp)
   8b7cc:	b5800044 	addi	r22,r22,1
   8b7d0:	80fff116 	blt	r16,r3,8b798 <_dtoa_r+0xb40>
   8b7d4:	d8000615 	stw	zero,24(sp)
   8b7d8:	d9400717 	ldw	r5,28(sp)
   8b7dc:	d9001617 	ldw	r4,88(sp)
   8b7e0:	01800044 	movi	r6,1
   8b7e4:	008e7300 	call	8e730 <__lshift>
   8b7e8:	1009883a 	mov	r4,r2
   8b7ec:	900b883a 	mov	r5,r18
   8b7f0:	d8800715 	stw	r2,28(sp)
   8b7f4:	008df480 	call	8df48 <__mcmp>
   8b7f8:	00803c0e 	bge	zero,r2,8b8ec <_dtoa_r+0xc94>
   8b7fc:	b009883a 	mov	r4,r22
   8b800:	213fffc4 	addi	r4,r4,-1
   8b804:	21400003 	ldbu	r5,0(r4)
   8b808:	00800e44 	movi	r2,57
   8b80c:	28c03fcc 	andi	r3,r5,255
   8b810:	18c0201c 	xori	r3,r3,128
   8b814:	18ffe004 	addi	r3,r3,-128
   8b818:	1881981e 	bne	r3,r2,8be7c <_dtoa_r+0x1224>
   8b81c:	d9800517 	ldw	r6,20(sp)
   8b820:	21bff71e 	bne	r4,r6,8b800 <_dtoa_r+0xba8>
   8b824:	d8800d17 	ldw	r2,52(sp)
   8b828:	37000044 	addi	fp,r6,1
   8b82c:	10800044 	addi	r2,r2,1
   8b830:	d8800d15 	stw	r2,52(sp)
   8b834:	00800c44 	movi	r2,49
   8b838:	30800005 	stb	r2,0(r6)
   8b83c:	d9001617 	ldw	r4,88(sp)
   8b840:	900b883a 	mov	r5,r18
   8b844:	008ddec0 	call	8ddec <_Bfree>
   8b848:	983ecd26 	beq	r19,zero,8b380 <_dtoa_r+0x728>
   8b84c:	d8c00617 	ldw	r3,24(sp)
   8b850:	18000426 	beq	r3,zero,8b864 <_dtoa_r+0xc0c>
   8b854:	1cc00326 	beq	r3,r19,8b864 <_dtoa_r+0xc0c>
   8b858:	d9001617 	ldw	r4,88(sp)
   8b85c:	180b883a 	mov	r5,r3
   8b860:	008ddec0 	call	8ddec <_Bfree>
   8b864:	d9001617 	ldw	r4,88(sp)
   8b868:	980b883a 	mov	r5,r19
   8b86c:	008ddec0 	call	8ddec <_Bfree>
   8b870:	003ec306 	br	8b380 <_dtoa_r+0x728>
   8b874:	1805883a 	mov	r2,r3
   8b878:	003eeb06 	br	8b428 <_dtoa_r+0x7d0>
   8b87c:	d9800a17 	ldw	r6,40(sp)
   8b880:	d8c01117 	ldw	r3,68(sp)
   8b884:	20bfff04 	addi	r2,r4,-4
   8b888:	308d883a 	add	r6,r6,r2
   8b88c:	1887883a 	add	r3,r3,r2
   8b890:	80a1883a 	add	r16,r16,r2
   8b894:	d9800a15 	stw	r6,40(sp)
   8b898:	d8c01115 	stw	r3,68(sp)
   8b89c:	003f1d06 	br	8b514 <_dtoa_r+0x8bc>
   8b8a0:	a03f0c1e 	bne	r20,zero,8b4d4 <_dtoa_r+0x87c>
   8b8a4:	00800434 	movhi	r2,16
   8b8a8:	10bfffc4 	addi	r2,r2,-1
   8b8ac:	a884703a 	and	r2,r21,r2
   8b8b0:	103f081e 	bne	r2,zero,8b4d4 <_dtoa_r+0x87c>
   8b8b4:	a89ffc2c 	andhi	r2,r21,32752
   8b8b8:	103f0626 	beq	r2,zero,8b4d4 <_dtoa_r+0x87c>
   8b8bc:	d8c01117 	ldw	r3,68(sp)
   8b8c0:	d9000a17 	ldw	r4,40(sp)
   8b8c4:	18c00044 	addi	r3,r3,1
   8b8c8:	21000044 	addi	r4,r4,1
   8b8cc:	d8c01115 	stw	r3,68(sp)
   8b8d0:	d9000a15 	stw	r4,40(sp)
   8b8d4:	003f0006 	br	8b4d8 <_dtoa_r+0x880>
   8b8d8:	d9400717 	ldw	r5,28(sp)
   8b8dc:	d9001617 	ldw	r4,88(sp)
   8b8e0:	008eba00 	call	8eba0 <__pow5mult>
   8b8e4:	d8800715 	stw	r2,28(sp)
   8b8e8:	003eed06 	br	8b4a0 <_dtoa_r+0x848>
   8b8ec:	1000021e 	bne	r2,zero,8b8f8 <_dtoa_r+0xca0>
   8b8f0:	b880004c 	andi	r2,r23,1
   8b8f4:	103fc11e 	bne	r2,zero,8b7fc <_dtoa_r+0xba4>
   8b8f8:	b5bfffc4 	addi	r22,r22,-1
   8b8fc:	b0c00007 	ldb	r3,0(r22)
   8b900:	00800c04 	movi	r2,48
   8b904:	18bffc26 	beq	r3,r2,8b8f8 <_dtoa_r+0xca0>
   8b908:	b7000044 	addi	fp,r22,1
   8b90c:	003fcb06 	br	8b83c <_dtoa_r+0xbe4>
   8b910:	d9800d17 	ldw	r6,52(sp)
   8b914:	018fc83a 	sub	r7,zero,r6
   8b918:	3801f726 	beq	r7,zero,8c0f8 <_dtoa_r+0x14a0>
   8b91c:	398003cc 	andi	r6,r7,15
   8b920:	300c90fa 	slli	r6,r6,3
   8b924:	01400274 	movhi	r5,9
   8b928:	294efc04 	addi	r5,r5,15344
   8b92c:	d9001217 	ldw	r4,72(sp)
   8b930:	314d883a 	add	r6,r6,r5
   8b934:	30c00117 	ldw	r3,4(r6)
   8b938:	30800017 	ldw	r2,0(r6)
   8b93c:	d9401317 	ldw	r5,76(sp)
   8b940:	3821d13a 	srai	r16,r7,4
   8b944:	100d883a 	mov	r6,r2
   8b948:	180f883a 	mov	r7,r3
   8b94c:	00871840 	call	87184 <__muldf3>
   8b950:	1011883a 	mov	r8,r2
   8b954:	1813883a 	mov	r9,r3
   8b958:	1029883a 	mov	r20,r2
   8b95c:	182b883a 	mov	r21,r3
   8b960:	8001e526 	beq	r16,zero,8c0f8 <_dtoa_r+0x14a0>
   8b964:	05800084 	movi	r22,2
   8b968:	04400274 	movhi	r17,9
   8b96c:	8c4f2e04 	addi	r17,r17,15544
   8b970:	8080004c 	andi	r2,r16,1
   8b974:	1005003a 	cmpeq	r2,r2,zero
   8b978:	1000081e 	bne	r2,zero,8b99c <_dtoa_r+0xd44>
   8b97c:	89800017 	ldw	r6,0(r17)
   8b980:	89c00117 	ldw	r7,4(r17)
   8b984:	480b883a 	mov	r5,r9
   8b988:	4009883a 	mov	r4,r8
   8b98c:	00871840 	call	87184 <__muldf3>
   8b990:	1011883a 	mov	r8,r2
   8b994:	b5800044 	addi	r22,r22,1
   8b998:	1813883a 	mov	r9,r3
   8b99c:	8021d07a 	srai	r16,r16,1
   8b9a0:	8c400204 	addi	r17,r17,8
   8b9a4:	803ff21e 	bne	r16,zero,8b970 <_dtoa_r+0xd18>
   8b9a8:	4029883a 	mov	r20,r8
   8b9ac:	482b883a 	mov	r21,r9
   8b9b0:	003dca06 	br	8b0dc <_dtoa_r+0x484>
   8b9b4:	d9000817 	ldw	r4,32(sp)
   8b9b8:	2005003a 	cmpeq	r2,r4,zero
   8b9bc:	1001f61e 	bne	r2,zero,8c198 <_dtoa_r+0x1540>
   8b9c0:	dc001117 	ldw	r16,68(sp)
   8b9c4:	dc801017 	ldw	r18,64(sp)
   8b9c8:	18c10cc4 	addi	r3,r3,1075
   8b9cc:	003f6106 	br	8b754 <_dtoa_r+0xafc>
   8b9d0:	d8000b15 	stw	zero,44(sp)
   8b9d4:	d9802617 	ldw	r6,152(sp)
   8b9d8:	d8c00d17 	ldw	r3,52(sp)
   8b9dc:	30800044 	addi	r2,r6,1
   8b9e0:	18ad883a 	add	r22,r3,r2
   8b9e4:	b13fffc4 	addi	r4,r22,-1
   8b9e8:	d9000e15 	stw	r4,56(sp)
   8b9ec:	0581f60e 	bge	zero,r22,8c1c8 <_dtoa_r+0x1570>
   8b9f0:	dd800f15 	stw	r22,60(sp)
   8b9f4:	003f3006 	br	8b6b8 <_dtoa_r+0xa60>
   8b9f8:	d8000b15 	stw	zero,44(sp)
   8b9fc:	d9002617 	ldw	r4,152(sp)
   8ba00:	0101eb0e 	bge	zero,r4,8c1b0 <_dtoa_r+0x1558>
   8ba04:	202d883a 	mov	r22,r4
   8ba08:	d9000e15 	stw	r4,56(sp)
   8ba0c:	d9000f15 	stw	r4,60(sp)
   8ba10:	003f2906 	br	8b6b8 <_dtoa_r+0xa60>
   8ba14:	01800044 	movi	r6,1
   8ba18:	d9800b15 	stw	r6,44(sp)
   8ba1c:	003ff706 	br	8b9fc <_dtoa_r+0xda4>
   8ba20:	01000044 	movi	r4,1
   8ba24:	d9000b15 	stw	r4,44(sp)
   8ba28:	003fea06 	br	8b9d4 <_dtoa_r+0xd7c>
   8ba2c:	04000c0e 	bge	zero,r16,8ba60 <_dtoa_r+0xe08>
   8ba30:	d9400717 	ldw	r5,28(sp)
   8ba34:	d9001617 	ldw	r4,88(sp)
   8ba38:	01800044 	movi	r6,1
   8ba3c:	008e7300 	call	8e730 <__lshift>
   8ba40:	1009883a 	mov	r4,r2
   8ba44:	900b883a 	mov	r5,r18
   8ba48:	d8800715 	stw	r2,28(sp)
   8ba4c:	008df480 	call	8df48 <__mcmp>
   8ba50:	0081e00e 	bge	zero,r2,8c1d4 <_dtoa_r+0x157c>
   8ba54:	bdc00044 	addi	r23,r23,1
   8ba58:	00800e84 	movi	r2,58
   8ba5c:	b881a226 	beq	r23,r2,8c0e8 <_dtoa_r+0x1490>
   8ba60:	b7000044 	addi	fp,r22,1
   8ba64:	b5c00005 	stb	r23,0(r22)
   8ba68:	003f7406 	br	8b83c <_dtoa_r+0xbe4>
   8ba6c:	00800e44 	movi	r2,57
   8ba70:	b8819d26 	beq	r23,r2,8c0e8 <_dtoa_r+0x1490>
   8ba74:	053ffa0e 	bge	zero,r20,8ba60 <_dtoa_r+0xe08>
   8ba78:	8dc00c44 	addi	r23,r17,49
   8ba7c:	003ff806 	br	8ba60 <_dtoa_r+0xe08>
   8ba80:	d9001617 	ldw	r4,88(sp)
   8ba84:	a80b883a 	mov	r5,r21
   8ba88:	04000044 	movi	r16,1
   8ba8c:	008ddec0 	call	8ddec <_Bfree>
   8ba90:	003edf06 	br	8b610 <_dtoa_r+0x9b8>
   8ba94:	d9001617 	ldw	r4,88(sp)
   8ba98:	980b883a 	mov	r5,r19
   8ba9c:	01800284 	movi	r6,10
   8baa0:	000f883a 	mov	r7,zero
   8baa4:	008eaa00 	call	8eaa0 <__multadd>
   8baa8:	1027883a 	mov	r19,r2
   8baac:	d8800615 	stw	r2,24(sp)
   8bab0:	003ebb06 	br	8b5a0 <_dtoa_r+0x948>
   8bab4:	d9801117 	ldw	r6,68(sp)
   8bab8:	d8800d17 	ldw	r2,52(sp)
   8babc:	d8000915 	stw	zero,36(sp)
   8bac0:	308dc83a 	sub	r6,r6,r2
   8bac4:	0087c83a 	sub	r3,zero,r2
   8bac8:	d9801115 	stw	r6,68(sp)
   8bacc:	d8c01015 	stw	r3,64(sp)
   8bad0:	003cfe06 	br	8aecc <_dtoa_r+0x274>
   8bad4:	018dc83a 	sub	r6,zero,r6
   8bad8:	d9801115 	stw	r6,68(sp)
   8badc:	d8000a15 	stw	zero,40(sp)
   8bae0:	003cf306 	br	8aeb0 <_dtoa_r+0x258>
   8bae4:	d9000d17 	ldw	r4,52(sp)
   8bae8:	0087ad00 	call	87ad0 <__floatsidf>
   8baec:	880b883a 	mov	r5,r17
   8baf0:	8009883a 	mov	r4,r16
   8baf4:	180f883a 	mov	r7,r3
   8baf8:	100d883a 	mov	r6,r2
   8bafc:	00878280 	call	87828 <__nedf2>
   8bb00:	103ce126 	beq	r2,zero,8ae88 <_dtoa_r+0x230>
   8bb04:	d9800d17 	ldw	r6,52(sp)
   8bb08:	31bfffc4 	addi	r6,r6,-1
   8bb0c:	d9800d15 	stw	r6,52(sp)
   8bb10:	003cdd06 	br	8ae88 <_dtoa_r+0x230>
   8bb14:	d9000717 	ldw	r4,28(sp)
   8bb18:	900b883a 	mov	r5,r18
   8bb1c:	008df480 	call	8df48 <__mcmp>
   8bb20:	103e8d0e 	bge	r2,zero,8b558 <_dtoa_r+0x900>
   8bb24:	d9400717 	ldw	r5,28(sp)
   8bb28:	d9001617 	ldw	r4,88(sp)
   8bb2c:	01800284 	movi	r6,10
   8bb30:	000f883a 	mov	r7,zero
   8bb34:	008eaa00 	call	8eaa0 <__multadd>
   8bb38:	d9800d17 	ldw	r6,52(sp)
   8bb3c:	d8800715 	stw	r2,28(sp)
   8bb40:	31bfffc4 	addi	r6,r6,-1
   8bb44:	d9800d15 	stw	r6,52(sp)
   8bb48:	b001a71e 	bne	r22,zero,8c1e8 <_dtoa_r+0x1590>
   8bb4c:	d8800e17 	ldw	r2,56(sp)
   8bb50:	d8800f15 	stw	r2,60(sp)
   8bb54:	003e8006 	br	8b558 <_dtoa_r+0x900>
   8bb58:	90800417 	ldw	r2,16(r18)
   8bb5c:	1085883a 	add	r2,r2,r2
   8bb60:	1085883a 	add	r2,r2,r2
   8bb64:	1485883a 	add	r2,r2,r18
   8bb68:	11000417 	ldw	r4,16(r2)
   8bb6c:	008de140 	call	8de14 <__hi0bits>
   8bb70:	00c00804 	movi	r3,32
   8bb74:	1887c83a 	sub	r3,r3,r2
   8bb78:	003e5a06 	br	8b4e4 <_dtoa_r+0x88c>
   8bb7c:	d9400717 	ldw	r5,28(sp)
   8bb80:	d9801017 	ldw	r6,64(sp)
   8bb84:	d9001617 	ldw	r4,88(sp)
   8bb88:	008eba00 	call	8eba0 <__pow5mult>
   8bb8c:	d8800715 	stw	r2,28(sp)
   8bb90:	003e4306 	br	8b4a0 <_dtoa_r+0x848>
   8bb94:	d9800f17 	ldw	r6,60(sp)
   8bb98:	d8800d17 	ldw	r2,52(sp)
   8bb9c:	d9800315 	stw	r6,12(sp)
   8bba0:	d8800415 	stw	r2,16(sp)
   8bba4:	d8c00b17 	ldw	r3,44(sp)
   8bba8:	1805003a 	cmpeq	r2,r3,zero
   8bbac:	1000e21e 	bne	r2,zero,8bf38 <_dtoa_r+0x12e0>
   8bbb0:	d9000317 	ldw	r4,12(sp)
   8bbb4:	0005883a 	mov	r2,zero
   8bbb8:	00cff834 	movhi	r3,16352
   8bbbc:	200c90fa 	slli	r6,r4,3
   8bbc0:	01000274 	movhi	r4,9
   8bbc4:	210efc04 	addi	r4,r4,15344
   8bbc8:	180b883a 	mov	r5,r3
   8bbcc:	310d883a 	add	r6,r6,r4
   8bbd0:	327fff17 	ldw	r9,-4(r6)
   8bbd4:	323ffe17 	ldw	r8,-8(r6)
   8bbd8:	1009883a 	mov	r4,r2
   8bbdc:	480f883a 	mov	r7,r9
   8bbe0:	400d883a 	mov	r6,r8
   8bbe4:	00875480 	call	87548 <__divdf3>
   8bbe8:	180b883a 	mov	r5,r3
   8bbec:	b00d883a 	mov	r6,r22
   8bbf0:	b80f883a 	mov	r7,r23
   8bbf4:	1009883a 	mov	r4,r2
   8bbf8:	00870900 	call	87090 <__subdf3>
   8bbfc:	a80b883a 	mov	r5,r21
   8bc00:	a009883a 	mov	r4,r20
   8bc04:	d8c01915 	stw	r3,100(sp)
   8bc08:	d8801815 	stw	r2,96(sp)
   8bc0c:	0087bc80 	call	87bc8 <__fixdfsi>
   8bc10:	1009883a 	mov	r4,r2
   8bc14:	1027883a 	mov	r19,r2
   8bc18:	0087ad00 	call	87ad0 <__floatsidf>
   8bc1c:	a80b883a 	mov	r5,r21
   8bc20:	a009883a 	mov	r4,r20
   8bc24:	180f883a 	mov	r7,r3
   8bc28:	100d883a 	mov	r6,r2
   8bc2c:	00870900 	call	87090 <__subdf3>
   8bc30:	d9801817 	ldw	r6,96(sp)
   8bc34:	1823883a 	mov	r17,r3
   8bc38:	d8801415 	stw	r2,80(sp)
   8bc3c:	302d883a 	mov	r22,r6
   8bc40:	d9800517 	ldw	r6,20(sp)
   8bc44:	9cc00c04 	addi	r19,r19,48
   8bc48:	dc401515 	stw	r17,84(sp)
   8bc4c:	d8c01917 	ldw	r3,100(sp)
   8bc50:	34c00005 	stb	r19,0(r6)
   8bc54:	d8800517 	ldw	r2,20(sp)
   8bc58:	d9401917 	ldw	r5,100(sp)
   8bc5c:	d9801417 	ldw	r6,80(sp)
   8bc60:	b009883a 	mov	r4,r22
   8bc64:	880f883a 	mov	r7,r17
   8bc68:	182f883a 	mov	r23,r3
   8bc6c:	17000044 	addi	fp,r2,1
   8bc70:	00878b00 	call	878b0 <__gtdf2>
   8bc74:	00804e16 	blt	zero,r2,8bdb0 <_dtoa_r+0x1158>
   8bc78:	d9801417 	ldw	r6,80(sp)
   8bc7c:	0005883a 	mov	r2,zero
   8bc80:	00cffc34 	movhi	r3,16368
   8bc84:	180b883a 	mov	r5,r3
   8bc88:	880f883a 	mov	r7,r17
   8bc8c:	1009883a 	mov	r4,r2
   8bc90:	00870900 	call	87090 <__subdf3>
   8bc94:	d9401917 	ldw	r5,100(sp)
   8bc98:	180f883a 	mov	r7,r3
   8bc9c:	b009883a 	mov	r4,r22
   8bca0:	100d883a 	mov	r6,r2
   8bca4:	00878b00 	call	878b0 <__gtdf2>
   8bca8:	00bda216 	blt	zero,r2,8b334 <_dtoa_r+0x6dc>
   8bcac:	d8c00317 	ldw	r3,12(sp)
   8bcb0:	00800044 	movi	r2,1
   8bcb4:	10c01216 	blt	r2,r3,8bd00 <_dtoa_r+0x10a8>
   8bcb8:	003d4506 	br	8b1d0 <_dtoa_r+0x578>
   8bcbc:	d9801417 	ldw	r6,80(sp)
   8bcc0:	0005883a 	mov	r2,zero
   8bcc4:	00cffc34 	movhi	r3,16368
   8bcc8:	180b883a 	mov	r5,r3
   8bccc:	880f883a 	mov	r7,r17
   8bcd0:	1009883a 	mov	r4,r2
   8bcd4:	00870900 	call	87090 <__subdf3>
   8bcd8:	d9c01b17 	ldw	r7,108(sp)
   8bcdc:	180b883a 	mov	r5,r3
   8bce0:	1009883a 	mov	r4,r2
   8bce4:	b00d883a 	mov	r6,r22
   8bce8:	00879c00 	call	879c0 <__ltdf2>
   8bcec:	103d9116 	blt	r2,zero,8b334 <_dtoa_r+0x6dc>
   8bcf0:	d9800517 	ldw	r6,20(sp)
   8bcf4:	d9000317 	ldw	r4,12(sp)
   8bcf8:	3105883a 	add	r2,r6,r4
   8bcfc:	e0bd3426 	beq	fp,r2,8b1d0 <_dtoa_r+0x578>
   8bd00:	04500934 	movhi	r17,16420
   8bd04:	0021883a 	mov	r16,zero
   8bd08:	b80b883a 	mov	r5,r23
   8bd0c:	b009883a 	mov	r4,r22
   8bd10:	800d883a 	mov	r6,r16
   8bd14:	880f883a 	mov	r7,r17
   8bd18:	00871840 	call	87184 <__muldf3>
   8bd1c:	d9401517 	ldw	r5,84(sp)
   8bd20:	d9001417 	ldw	r4,80(sp)
   8bd24:	880f883a 	mov	r7,r17
   8bd28:	000d883a 	mov	r6,zero
   8bd2c:	d8801a15 	stw	r2,104(sp)
   8bd30:	d8c01b15 	stw	r3,108(sp)
   8bd34:	00871840 	call	87184 <__muldf3>
   8bd38:	180b883a 	mov	r5,r3
   8bd3c:	1009883a 	mov	r4,r2
   8bd40:	1823883a 	mov	r17,r3
   8bd44:	1021883a 	mov	r16,r2
   8bd48:	0087bc80 	call	87bc8 <__fixdfsi>
   8bd4c:	1009883a 	mov	r4,r2
   8bd50:	102b883a 	mov	r21,r2
   8bd54:	0087ad00 	call	87ad0 <__floatsidf>
   8bd58:	880b883a 	mov	r5,r17
   8bd5c:	8009883a 	mov	r4,r16
   8bd60:	180f883a 	mov	r7,r3
   8bd64:	100d883a 	mov	r6,r2
   8bd68:	00870900 	call	87090 <__subdf3>
   8bd6c:	1021883a 	mov	r16,r2
   8bd70:	d9001b17 	ldw	r4,108(sp)
   8bd74:	1823883a 	mov	r17,r3
   8bd78:	dc001415 	stw	r16,80(sp)
   8bd7c:	ad400c04 	addi	r21,r21,48
   8bd80:	dc401515 	stw	r17,84(sp)
   8bd84:	d8801a17 	ldw	r2,104(sp)
   8bd88:	e5400005 	stb	r21,0(fp)
   8bd8c:	202f883a 	mov	r23,r4
   8bd90:	d9c01b17 	ldw	r7,108(sp)
   8bd94:	d9001417 	ldw	r4,80(sp)
   8bd98:	880b883a 	mov	r5,r17
   8bd9c:	100d883a 	mov	r6,r2
   8bda0:	102d883a 	mov	r22,r2
   8bda4:	e7000044 	addi	fp,fp,1
   8bda8:	00879c00 	call	879c0 <__ltdf2>
   8bdac:	103fc30e 	bge	r2,zero,8bcbc <_dtoa_r+0x1064>
   8bdb0:	d9000417 	ldw	r4,16(sp)
   8bdb4:	d9000d15 	stw	r4,52(sp)
   8bdb8:	003d7106 	br	8b380 <_dtoa_r+0x728>
   8bdbc:	d9801717 	ldw	r6,92(sp)
   8bdc0:	00800084 	movi	r2,2
   8bdc4:	11bde60e 	bge	r2,r6,8b560 <_dtoa_r+0x908>
   8bdc8:	203cfb1e 	bne	r4,zero,8b1b8 <_dtoa_r+0x560>
   8bdcc:	d9001617 	ldw	r4,88(sp)
   8bdd0:	900b883a 	mov	r5,r18
   8bdd4:	01800144 	movi	r6,5
   8bdd8:	000f883a 	mov	r7,zero
   8bddc:	008eaa00 	call	8eaa0 <__multadd>
   8bde0:	d9000717 	ldw	r4,28(sp)
   8bde4:	100b883a 	mov	r5,r2
   8bde8:	1025883a 	mov	r18,r2
   8bdec:	008df480 	call	8df48 <__mcmp>
   8bdf0:	00bcf10e 	bge	zero,r2,8b1b8 <_dtoa_r+0x560>
   8bdf4:	d8c00d17 	ldw	r3,52(sp)
   8bdf8:	d9000517 	ldw	r4,20(sp)
   8bdfc:	d8000615 	stw	zero,24(sp)
   8be00:	18c00044 	addi	r3,r3,1
   8be04:	d8c00d15 	stw	r3,52(sp)
   8be08:	00800c44 	movi	r2,49
   8be0c:	27000044 	addi	fp,r4,1
   8be10:	20800005 	stb	r2,0(r4)
   8be14:	003e8906 	br	8b83c <_dtoa_r+0xbe4>
   8be18:	d8c00517 	ldw	r3,20(sp)
   8be1c:	003bc206 	br	8ad28 <_dtoa_r+0xd0>
   8be20:	01800274 	movhi	r6,9
   8be24:	318f2e04 	addi	r6,r6,15544
   8be28:	30c00917 	ldw	r3,36(r6)
   8be2c:	30800817 	ldw	r2,32(r6)
   8be30:	d9001217 	ldw	r4,72(sp)
   8be34:	d9401317 	ldw	r5,76(sp)
   8be38:	180f883a 	mov	r7,r3
   8be3c:	100d883a 	mov	r6,r2
   8be40:	00875480 	call	87548 <__divdf3>
   8be44:	948003cc 	andi	r18,r18,15
   8be48:	058000c4 	movi	r22,3
   8be4c:	1029883a 	mov	r20,r2
   8be50:	182b883a 	mov	r21,r3
   8be54:	003c8906 	br	8b07c <_dtoa_r+0x424>
   8be58:	d9001017 	ldw	r4,64(sp)
   8be5c:	d9800917 	ldw	r6,36(sp)
   8be60:	0025883a 	mov	r18,zero
   8be64:	1105c83a 	sub	r2,r2,r4
   8be68:	2089883a 	add	r4,r4,r2
   8be6c:	308d883a 	add	r6,r6,r2
   8be70:	d9001015 	stw	r4,64(sp)
   8be74:	d9800915 	stw	r6,36(sp)
   8be78:	003e3206 	br	8b744 <_dtoa_r+0xaec>
   8be7c:	28800044 	addi	r2,r5,1
   8be80:	27000044 	addi	fp,r4,1
   8be84:	20800005 	stb	r2,0(r4)
   8be88:	003e6c06 	br	8b83c <_dtoa_r+0xbe4>
   8be8c:	d8800f17 	ldw	r2,60(sp)
   8be90:	00bce016 	blt	zero,r2,8b214 <_dtoa_r+0x5bc>
   8be94:	d9800f17 	ldw	r6,60(sp)
   8be98:	303cc51e 	bne	r6,zero,8b1b0 <_dtoa_r+0x558>
   8be9c:	0005883a 	mov	r2,zero
   8bea0:	00d00534 	movhi	r3,16404
   8bea4:	980b883a 	mov	r5,r19
   8bea8:	180f883a 	mov	r7,r3
   8beac:	9009883a 	mov	r4,r18
   8beb0:	100d883a 	mov	r6,r2
   8beb4:	00871840 	call	87184 <__muldf3>
   8beb8:	180b883a 	mov	r5,r3
   8bebc:	a80f883a 	mov	r7,r21
   8bec0:	1009883a 	mov	r4,r2
   8bec4:	a00d883a 	mov	r6,r20
   8bec8:	00879380 	call	87938 <__gedf2>
   8becc:	103cb80e 	bge	r2,zero,8b1b0 <_dtoa_r+0x558>
   8bed0:	0027883a 	mov	r19,zero
   8bed4:	0025883a 	mov	r18,zero
   8bed8:	003fc606 	br	8bdf4 <_dtoa_r+0x119c>
   8bedc:	99400117 	ldw	r5,4(r19)
   8bee0:	d9001617 	ldw	r4,88(sp)
   8bee4:	008e36c0 	call	8e36c <_Balloc>
   8bee8:	99800417 	ldw	r6,16(r19)
   8beec:	11000304 	addi	r4,r2,12
   8bef0:	99400304 	addi	r5,r19,12
   8bef4:	318d883a 	add	r6,r6,r6
   8bef8:	318d883a 	add	r6,r6,r6
   8befc:	31800204 	addi	r6,r6,8
   8bf00:	1023883a 	mov	r17,r2
   8bf04:	008dbd40 	call	8dbd4 <memcpy>
   8bf08:	d9001617 	ldw	r4,88(sp)
   8bf0c:	880b883a 	mov	r5,r17
   8bf10:	01800044 	movi	r6,1
   8bf14:	008e7300 	call	8e730 <__lshift>
   8bf18:	100b883a 	mov	r5,r2
   8bf1c:	003d9c06 	br	8b590 <_dtoa_r+0x938>
   8bf20:	00800e44 	movi	r2,57
   8bf24:	b8807026 	beq	r23,r2,8c0e8 <_dtoa_r+0x1490>
   8bf28:	b8800044 	addi	r2,r23,1
   8bf2c:	b7000044 	addi	fp,r22,1
   8bf30:	b0800005 	stb	r2,0(r22)
   8bf34:	003e4106 	br	8b83c <_dtoa_r+0xbe4>
   8bf38:	d8800317 	ldw	r2,12(sp)
   8bf3c:	01800274 	movhi	r6,9
   8bf40:	318efc04 	addi	r6,r6,15344
   8bf44:	b009883a 	mov	r4,r22
   8bf48:	100e90fa 	slli	r7,r2,3
   8bf4c:	b80b883a 	mov	r5,r23
   8bf50:	398f883a 	add	r7,r7,r6
   8bf54:	38bffe17 	ldw	r2,-8(r7)
   8bf58:	d9800517 	ldw	r6,20(sp)
   8bf5c:	38ffff17 	ldw	r3,-4(r7)
   8bf60:	37000044 	addi	fp,r6,1
   8bf64:	180f883a 	mov	r7,r3
   8bf68:	100d883a 	mov	r6,r2
   8bf6c:	00871840 	call	87184 <__muldf3>
   8bf70:	a80b883a 	mov	r5,r21
   8bf74:	a009883a 	mov	r4,r20
   8bf78:	182f883a 	mov	r23,r3
   8bf7c:	102d883a 	mov	r22,r2
   8bf80:	0087bc80 	call	87bc8 <__fixdfsi>
   8bf84:	1009883a 	mov	r4,r2
   8bf88:	1027883a 	mov	r19,r2
   8bf8c:	0087ad00 	call	87ad0 <__floatsidf>
   8bf90:	a80b883a 	mov	r5,r21
   8bf94:	a009883a 	mov	r4,r20
   8bf98:	180f883a 	mov	r7,r3
   8bf9c:	100d883a 	mov	r6,r2
   8bfa0:	00870900 	call	87090 <__subdf3>
   8bfa4:	180b883a 	mov	r5,r3
   8bfa8:	d8c00517 	ldw	r3,20(sp)
   8bfac:	9cc00c04 	addi	r19,r19,48
   8bfb0:	1009883a 	mov	r4,r2
   8bfb4:	1cc00005 	stb	r19,0(r3)
   8bfb8:	2021883a 	mov	r16,r4
   8bfbc:	d9000317 	ldw	r4,12(sp)
   8bfc0:	00800044 	movi	r2,1
   8bfc4:	2823883a 	mov	r17,r5
   8bfc8:	20802226 	beq	r4,r2,8c054 <_dtoa_r+0x13fc>
   8bfcc:	1029883a 	mov	r20,r2
   8bfd0:	0005883a 	mov	r2,zero
   8bfd4:	00d00934 	movhi	r3,16420
   8bfd8:	180f883a 	mov	r7,r3
   8bfdc:	100d883a 	mov	r6,r2
   8bfe0:	880b883a 	mov	r5,r17
   8bfe4:	8009883a 	mov	r4,r16
   8bfe8:	00871840 	call	87184 <__muldf3>
   8bfec:	180b883a 	mov	r5,r3
   8bff0:	1009883a 	mov	r4,r2
   8bff4:	1823883a 	mov	r17,r3
   8bff8:	1021883a 	mov	r16,r2
   8bffc:	0087bc80 	call	87bc8 <__fixdfsi>
   8c000:	1009883a 	mov	r4,r2
   8c004:	102b883a 	mov	r21,r2
   8c008:	0087ad00 	call	87ad0 <__floatsidf>
   8c00c:	880b883a 	mov	r5,r17
   8c010:	8009883a 	mov	r4,r16
   8c014:	180f883a 	mov	r7,r3
   8c018:	100d883a 	mov	r6,r2
   8c01c:	00870900 	call	87090 <__subdf3>
   8c020:	180b883a 	mov	r5,r3
   8c024:	d8c00517 	ldw	r3,20(sp)
   8c028:	1009883a 	mov	r4,r2
   8c02c:	ad400c04 	addi	r21,r21,48
   8c030:	1d05883a 	add	r2,r3,r20
   8c034:	15400005 	stb	r21,0(r2)
   8c038:	2021883a 	mov	r16,r4
   8c03c:	d9000317 	ldw	r4,12(sp)
   8c040:	a5000044 	addi	r20,r20,1
   8c044:	2823883a 	mov	r17,r5
   8c048:	a13fe11e 	bne	r20,r4,8bfd0 <_dtoa_r+0x1378>
   8c04c:	e505883a 	add	r2,fp,r20
   8c050:	173fffc4 	addi	fp,r2,-1
   8c054:	0025883a 	mov	r18,zero
   8c058:	04cff834 	movhi	r19,16352
   8c05c:	b009883a 	mov	r4,r22
   8c060:	b80b883a 	mov	r5,r23
   8c064:	900d883a 	mov	r6,r18
   8c068:	980f883a 	mov	r7,r19
   8c06c:	00871100 	call	87110 <__adddf3>
   8c070:	180b883a 	mov	r5,r3
   8c074:	1009883a 	mov	r4,r2
   8c078:	800d883a 	mov	r6,r16
   8c07c:	880f883a 	mov	r7,r17
   8c080:	00879c00 	call	879c0 <__ltdf2>
   8c084:	103cab16 	blt	r2,zero,8b334 <_dtoa_r+0x6dc>
   8c088:	0009883a 	mov	r4,zero
   8c08c:	980b883a 	mov	r5,r19
   8c090:	b80f883a 	mov	r7,r23
   8c094:	b00d883a 	mov	r6,r22
   8c098:	00870900 	call	87090 <__subdf3>
   8c09c:	180b883a 	mov	r5,r3
   8c0a0:	880f883a 	mov	r7,r17
   8c0a4:	1009883a 	mov	r4,r2
   8c0a8:	800d883a 	mov	r6,r16
   8c0ac:	00878b00 	call	878b0 <__gtdf2>
   8c0b0:	00bc470e 	bge	zero,r2,8b1d0 <_dtoa_r+0x578>
   8c0b4:	00c00c04 	movi	r3,48
   8c0b8:	e73fffc4 	addi	fp,fp,-1
   8c0bc:	e0800007 	ldb	r2,0(fp)
   8c0c0:	10fffd26 	beq	r2,r3,8c0b8 <_dtoa_r+0x1460>
   8c0c4:	d9800417 	ldw	r6,16(sp)
   8c0c8:	e7000044 	addi	fp,fp,1
   8c0cc:	d9800d15 	stw	r6,52(sp)
   8c0d0:	003cab06 	br	8b380 <_dtoa_r+0x728>
   8c0d4:	d8c00f17 	ldw	r3,60(sp)
   8c0d8:	d9001117 	ldw	r4,68(sp)
   8c0dc:	20e1c83a 	sub	r16,r4,r3
   8c0e0:	0007883a 	mov	r3,zero
   8c0e4:	003d9b06 	br	8b754 <_dtoa_r+0xafc>
   8c0e8:	00800e44 	movi	r2,57
   8c0ec:	b0800005 	stb	r2,0(r22)
   8c0f0:	b5800044 	addi	r22,r22,1
   8c0f4:	003dc106 	br	8b7fc <_dtoa_r+0xba4>
   8c0f8:	05800084 	movi	r22,2
   8c0fc:	003bf706 	br	8b0dc <_dtoa_r+0x484>
   8c100:	d9000f17 	ldw	r4,60(sp)
   8c104:	013c000e 	bge	zero,r4,8b108 <_dtoa_r+0x4b0>
   8c108:	d9800e17 	ldw	r6,56(sp)
   8c10c:	01bc300e 	bge	zero,r6,8b1d0 <_dtoa_r+0x578>
   8c110:	0005883a 	mov	r2,zero
   8c114:	00d00934 	movhi	r3,16420
   8c118:	a80b883a 	mov	r5,r21
   8c11c:	180f883a 	mov	r7,r3
   8c120:	a009883a 	mov	r4,r20
   8c124:	100d883a 	mov	r6,r2
   8c128:	00871840 	call	87184 <__muldf3>
   8c12c:	b1000044 	addi	r4,r22,1
   8c130:	1021883a 	mov	r16,r2
   8c134:	1823883a 	mov	r17,r3
   8c138:	0087ad00 	call	87ad0 <__floatsidf>
   8c13c:	880b883a 	mov	r5,r17
   8c140:	8009883a 	mov	r4,r16
   8c144:	180f883a 	mov	r7,r3
   8c148:	100d883a 	mov	r6,r2
   8c14c:	00871840 	call	87184 <__muldf3>
   8c150:	0011883a 	mov	r8,zero
   8c154:	02500734 	movhi	r9,16412
   8c158:	180b883a 	mov	r5,r3
   8c15c:	480f883a 	mov	r7,r9
   8c160:	1009883a 	mov	r4,r2
   8c164:	400d883a 	mov	r6,r8
   8c168:	00871100 	call	87110 <__adddf3>
   8c16c:	102d883a 	mov	r22,r2
   8c170:	00bf3034 	movhi	r2,64704
   8c174:	10ef883a 	add	r23,r2,r3
   8c178:	d8800d17 	ldw	r2,52(sp)
   8c17c:	d8c00e17 	ldw	r3,56(sp)
   8c180:	8029883a 	mov	r20,r16
   8c184:	10bfffc4 	addi	r2,r2,-1
   8c188:	882b883a 	mov	r21,r17
   8c18c:	d8800415 	stw	r2,16(sp)
   8c190:	d8c00315 	stw	r3,12(sp)
   8c194:	003e8306 	br	8bba4 <_dtoa_r+0xf4c>
   8c198:	d8800117 	ldw	r2,4(sp)
   8c19c:	dc001117 	ldw	r16,68(sp)
   8c1a0:	dc801017 	ldw	r18,64(sp)
   8c1a4:	00c00d84 	movi	r3,54
   8c1a8:	1887c83a 	sub	r3,r3,r2
   8c1ac:	003d6906 	br	8b754 <_dtoa_r+0xafc>
   8c1b0:	01800044 	movi	r6,1
   8c1b4:	3021883a 	mov	r16,r6
   8c1b8:	d9800f15 	stw	r6,60(sp)
   8c1bc:	d9802615 	stw	r6,152(sp)
   8c1c0:	d9800e15 	stw	r6,56(sp)
   8c1c4:	003b9306 	br	8b014 <_dtoa_r+0x3bc>
   8c1c8:	b021883a 	mov	r16,r22
   8c1cc:	dd800f15 	stw	r22,60(sp)
   8c1d0:	003b9006 	br	8b014 <_dtoa_r+0x3bc>
   8c1d4:	103e221e 	bne	r2,zero,8ba60 <_dtoa_r+0xe08>
   8c1d8:	b880004c 	andi	r2,r23,1
   8c1dc:	1005003a 	cmpeq	r2,r2,zero
   8c1e0:	103e1f1e 	bne	r2,zero,8ba60 <_dtoa_r+0xe08>
   8c1e4:	003e1b06 	br	8ba54 <_dtoa_r+0xdfc>
   8c1e8:	d9001617 	ldw	r4,88(sp)
   8c1ec:	980b883a 	mov	r5,r19
   8c1f0:	01800284 	movi	r6,10
   8c1f4:	000f883a 	mov	r7,zero
   8c1f8:	008eaa00 	call	8eaa0 <__multadd>
   8c1fc:	d8c00e17 	ldw	r3,56(sp)
   8c200:	1027883a 	mov	r19,r2
   8c204:	d8c00f15 	stw	r3,60(sp)
   8c208:	003cd306 	br	8b558 <_dtoa_r+0x900>

0008c20c <_fflush_r>:
   8c20c:	defffb04 	addi	sp,sp,-20
   8c210:	dcc00315 	stw	r19,12(sp)
   8c214:	dc800215 	stw	r18,8(sp)
   8c218:	dfc00415 	stw	ra,16(sp)
   8c21c:	dc400115 	stw	r17,4(sp)
   8c220:	dc000015 	stw	r16,0(sp)
   8c224:	2027883a 	mov	r19,r4
   8c228:	2825883a 	mov	r18,r5
   8c22c:	20000226 	beq	r4,zero,8c238 <_fflush_r+0x2c>
   8c230:	20800e17 	ldw	r2,56(r4)
   8c234:	10005626 	beq	r2,zero,8c390 <_fflush_r+0x184>
   8c238:	9100030b 	ldhu	r4,12(r18)
   8c23c:	20ffffcc 	andi	r3,r4,65535
   8c240:	18e0001c 	xori	r3,r3,32768
   8c244:	18e00004 	addi	r3,r3,-32768
   8c248:	1880020c 	andi	r2,r3,8
   8c24c:	1000261e 	bne	r2,zero,8c2e8 <_fflush_r+0xdc>
   8c250:	90c00117 	ldw	r3,4(r18)
   8c254:	20820014 	ori	r2,r4,2048
   8c258:	9080030d 	sth	r2,12(r18)
   8c25c:	1009883a 	mov	r4,r2
   8c260:	00c0400e 	bge	zero,r3,8c364 <_fflush_r+0x158>
   8c264:	92000a17 	ldw	r8,40(r18)
   8c268:	40004026 	beq	r8,zero,8c36c <_fflush_r+0x160>
   8c26c:	2084000c 	andi	r2,r4,4096
   8c270:	10005326 	beq	r2,zero,8c3c0 <_fflush_r+0x1b4>
   8c274:	94001417 	ldw	r16,80(r18)
   8c278:	9080030b 	ldhu	r2,12(r18)
   8c27c:	1080010c 	andi	r2,r2,4
   8c280:	1000481e 	bne	r2,zero,8c3a4 <_fflush_r+0x198>
   8c284:	91400717 	ldw	r5,28(r18)
   8c288:	9809883a 	mov	r4,r19
   8c28c:	800d883a 	mov	r6,r16
   8c290:	000f883a 	mov	r7,zero
   8c294:	403ee83a 	callr	r8
   8c298:	8080261e 	bne	r16,r2,8c334 <_fflush_r+0x128>
   8c29c:	9080030b 	ldhu	r2,12(r18)
   8c2a0:	91000417 	ldw	r4,16(r18)
   8c2a4:	90000115 	stw	zero,4(r18)
   8c2a8:	10bdffcc 	andi	r2,r2,63487
   8c2ac:	10ffffcc 	andi	r3,r2,65535
   8c2b0:	18c4000c 	andi	r3,r3,4096
   8c2b4:	9080030d 	sth	r2,12(r18)
   8c2b8:	91000015 	stw	r4,0(r18)
   8c2bc:	18002b26 	beq	r3,zero,8c36c <_fflush_r+0x160>
   8c2c0:	0007883a 	mov	r3,zero
   8c2c4:	1805883a 	mov	r2,r3
   8c2c8:	94001415 	stw	r16,80(r18)
   8c2cc:	dfc00417 	ldw	ra,16(sp)
   8c2d0:	dcc00317 	ldw	r19,12(sp)
   8c2d4:	dc800217 	ldw	r18,8(sp)
   8c2d8:	dc400117 	ldw	r17,4(sp)
   8c2dc:	dc000017 	ldw	r16,0(sp)
   8c2e0:	dec00504 	addi	sp,sp,20
   8c2e4:	f800283a 	ret
   8c2e8:	94400417 	ldw	r17,16(r18)
   8c2ec:	88001f26 	beq	r17,zero,8c36c <_fflush_r+0x160>
   8c2f0:	90800017 	ldw	r2,0(r18)
   8c2f4:	18c000cc 	andi	r3,r3,3
   8c2f8:	94400015 	stw	r17,0(r18)
   8c2fc:	1461c83a 	sub	r16,r2,r17
   8c300:	18002526 	beq	r3,zero,8c398 <_fflush_r+0x18c>
   8c304:	0005883a 	mov	r2,zero
   8c308:	90800215 	stw	r2,8(r18)
   8c30c:	0400170e 	bge	zero,r16,8c36c <_fflush_r+0x160>
   8c310:	90c00917 	ldw	r3,36(r18)
   8c314:	91400717 	ldw	r5,28(r18)
   8c318:	880d883a 	mov	r6,r17
   8c31c:	800f883a 	mov	r7,r16
   8c320:	9809883a 	mov	r4,r19
   8c324:	183ee83a 	callr	r3
   8c328:	88a3883a 	add	r17,r17,r2
   8c32c:	80a1c83a 	sub	r16,r16,r2
   8c330:	00bff616 	blt	zero,r2,8c30c <_fflush_r+0x100>
   8c334:	9080030b 	ldhu	r2,12(r18)
   8c338:	00ffffc4 	movi	r3,-1
   8c33c:	10801014 	ori	r2,r2,64
   8c340:	9080030d 	sth	r2,12(r18)
   8c344:	1805883a 	mov	r2,r3
   8c348:	dfc00417 	ldw	ra,16(sp)
   8c34c:	dcc00317 	ldw	r19,12(sp)
   8c350:	dc800217 	ldw	r18,8(sp)
   8c354:	dc400117 	ldw	r17,4(sp)
   8c358:	dc000017 	ldw	r16,0(sp)
   8c35c:	dec00504 	addi	sp,sp,20
   8c360:	f800283a 	ret
   8c364:	90800f17 	ldw	r2,60(r18)
   8c368:	00bfbe16 	blt	zero,r2,8c264 <_fflush_r+0x58>
   8c36c:	0007883a 	mov	r3,zero
   8c370:	1805883a 	mov	r2,r3
   8c374:	dfc00417 	ldw	ra,16(sp)
   8c378:	dcc00317 	ldw	r19,12(sp)
   8c37c:	dc800217 	ldw	r18,8(sp)
   8c380:	dc400117 	ldw	r17,4(sp)
   8c384:	dc000017 	ldw	r16,0(sp)
   8c388:	dec00504 	addi	sp,sp,20
   8c38c:	f800283a 	ret
   8c390:	008c4a40 	call	8c4a4 <__sinit>
   8c394:	003fa806 	br	8c238 <_fflush_r+0x2c>
   8c398:	90800517 	ldw	r2,20(r18)
   8c39c:	90800215 	stw	r2,8(r18)
   8c3a0:	003fda06 	br	8c30c <_fflush_r+0x100>
   8c3a4:	90800117 	ldw	r2,4(r18)
   8c3a8:	90c00c17 	ldw	r3,48(r18)
   8c3ac:	80a1c83a 	sub	r16,r16,r2
   8c3b0:	183fb426 	beq	r3,zero,8c284 <_fflush_r+0x78>
   8c3b4:	90800f17 	ldw	r2,60(r18)
   8c3b8:	80a1c83a 	sub	r16,r16,r2
   8c3bc:	003fb106 	br	8c284 <_fflush_r+0x78>
   8c3c0:	91400717 	ldw	r5,28(r18)
   8c3c4:	9809883a 	mov	r4,r19
   8c3c8:	000d883a 	mov	r6,zero
   8c3cc:	01c00044 	movi	r7,1
   8c3d0:	403ee83a 	callr	r8
   8c3d4:	1021883a 	mov	r16,r2
   8c3d8:	00bfffc4 	movi	r2,-1
   8c3dc:	80800226 	beq	r16,r2,8c3e8 <_fflush_r+0x1dc>
   8c3e0:	92000a17 	ldw	r8,40(r18)
   8c3e4:	003fa406 	br	8c278 <_fflush_r+0x6c>
   8c3e8:	98c00017 	ldw	r3,0(r19)
   8c3ec:	00800744 	movi	r2,29
   8c3f0:	18bfde26 	beq	r3,r2,8c36c <_fflush_r+0x160>
   8c3f4:	9080030b 	ldhu	r2,12(r18)
   8c3f8:	8007883a 	mov	r3,r16
   8c3fc:	10801014 	ori	r2,r2,64
   8c400:	9080030d 	sth	r2,12(r18)
   8c404:	003fcf06 	br	8c344 <_fflush_r+0x138>

0008c408 <fflush>:
   8c408:	01400274 	movhi	r5,9
   8c40c:	29708304 	addi	r5,r5,-15860
   8c410:	2007883a 	mov	r3,r4
   8c414:	20000526 	beq	r4,zero,8c42c <fflush+0x24>
   8c418:	008002f4 	movhi	r2,11
   8c41c:	10899704 	addi	r2,r2,9820
   8c420:	11000017 	ldw	r4,0(r2)
   8c424:	180b883a 	mov	r5,r3
   8c428:	008c20c1 	jmpi	8c20c <_fflush_r>
   8c42c:	008002f4 	movhi	r2,11
   8c430:	10899804 	addi	r2,r2,9824
   8c434:	11000017 	ldw	r4,0(r2)
   8c438:	008cfd81 	jmpi	8cfd8 <_fwalk_reent>

0008c43c <std>:
   8c43c:	00800274 	movhi	r2,9
   8c440:	10bd9c04 	addi	r2,r2,-2448
   8c444:	20800b15 	stw	r2,44(r4)
   8c448:	00800274 	movhi	r2,9
   8c44c:	10bdd704 	addi	r2,r2,-2212
   8c450:	20800815 	stw	r2,32(r4)
   8c454:	00c00274 	movhi	r3,9
   8c458:	18fdb804 	addi	r3,r3,-2336
   8c45c:	00800274 	movhi	r2,9
   8c460:	10bd9e04 	addi	r2,r2,-2440
   8c464:	2140030d 	sth	r5,12(r4)
   8c468:	2180038d 	sth	r6,14(r4)
   8c46c:	20c00915 	stw	r3,36(r4)
   8c470:	20800a15 	stw	r2,40(r4)
   8c474:	20000015 	stw	zero,0(r4)
   8c478:	20000115 	stw	zero,4(r4)
   8c47c:	20000215 	stw	zero,8(r4)
   8c480:	20000415 	stw	zero,16(r4)
   8c484:	20000515 	stw	zero,20(r4)
   8c488:	20000615 	stw	zero,24(r4)
   8c48c:	21000715 	stw	r4,28(r4)
   8c490:	f800283a 	ret

0008c494 <__sfp_lock_acquire>:
   8c494:	f800283a 	ret

0008c498 <__sfp_lock_release>:
   8c498:	f800283a 	ret

0008c49c <__sinit_lock_acquire>:
   8c49c:	f800283a 	ret

0008c4a0 <__sinit_lock_release>:
   8c4a0:	f800283a 	ret

0008c4a4 <__sinit>:
   8c4a4:	20800e17 	ldw	r2,56(r4)
   8c4a8:	defffd04 	addi	sp,sp,-12
   8c4ac:	dc400115 	stw	r17,4(sp)
   8c4b0:	dc000015 	stw	r16,0(sp)
   8c4b4:	dfc00215 	stw	ra,8(sp)
   8c4b8:	04400044 	movi	r17,1
   8c4bc:	01400104 	movi	r5,4
   8c4c0:	000d883a 	mov	r6,zero
   8c4c4:	2021883a 	mov	r16,r4
   8c4c8:	2200bb04 	addi	r8,r4,748
   8c4cc:	200f883a 	mov	r7,r4
   8c4d0:	10000526 	beq	r2,zero,8c4e8 <__sinit+0x44>
   8c4d4:	dfc00217 	ldw	ra,8(sp)
   8c4d8:	dc400117 	ldw	r17,4(sp)
   8c4dc:	dc000017 	ldw	r16,0(sp)
   8c4e0:	dec00304 	addi	sp,sp,12
   8c4e4:	f800283a 	ret
   8c4e8:	21000117 	ldw	r4,4(r4)
   8c4ec:	00800274 	movhi	r2,9
   8c4f0:	10b16204 	addi	r2,r2,-14968
   8c4f4:	00c000c4 	movi	r3,3
   8c4f8:	80800f15 	stw	r2,60(r16)
   8c4fc:	80c0b915 	stw	r3,740(r16)
   8c500:	8200ba15 	stw	r8,744(r16)
   8c504:	84400e15 	stw	r17,56(r16)
   8c508:	8000b815 	stw	zero,736(r16)
   8c50c:	008c43c0 	call	8c43c <std>
   8c510:	81000217 	ldw	r4,8(r16)
   8c514:	880d883a 	mov	r6,r17
   8c518:	800f883a 	mov	r7,r16
   8c51c:	01400284 	movi	r5,10
   8c520:	008c43c0 	call	8c43c <std>
   8c524:	81000317 	ldw	r4,12(r16)
   8c528:	800f883a 	mov	r7,r16
   8c52c:	01400484 	movi	r5,18
   8c530:	01800084 	movi	r6,2
   8c534:	dfc00217 	ldw	ra,8(sp)
   8c538:	dc400117 	ldw	r17,4(sp)
   8c53c:	dc000017 	ldw	r16,0(sp)
   8c540:	dec00304 	addi	sp,sp,12
   8c544:	008c43c1 	jmpi	8c43c <std>

0008c548 <__fp_lock>:
   8c548:	0005883a 	mov	r2,zero
   8c54c:	f800283a 	ret

0008c550 <__fp_unlock>:
   8c550:	0005883a 	mov	r2,zero
   8c554:	f800283a 	ret

0008c558 <__fp_unlock_all>:
   8c558:	008002f4 	movhi	r2,11
   8c55c:	10899704 	addi	r2,r2,9820
   8c560:	11000017 	ldw	r4,0(r2)
   8c564:	01400274 	movhi	r5,9
   8c568:	29715404 	addi	r5,r5,-15024
   8c56c:	008d0a01 	jmpi	8d0a0 <_fwalk>

0008c570 <__fp_lock_all>:
   8c570:	008002f4 	movhi	r2,11
   8c574:	10899704 	addi	r2,r2,9820
   8c578:	11000017 	ldw	r4,0(r2)
   8c57c:	01400274 	movhi	r5,9
   8c580:	29715204 	addi	r5,r5,-15032
   8c584:	008d0a01 	jmpi	8d0a0 <_fwalk>

0008c588 <_cleanup_r>:
   8c588:	01400274 	movhi	r5,9
   8c58c:	297f1c04 	addi	r5,r5,-912
   8c590:	008d0a01 	jmpi	8d0a0 <_fwalk>

0008c594 <_cleanup>:
   8c594:	008002f4 	movhi	r2,11
   8c598:	10899804 	addi	r2,r2,9824
   8c59c:	11000017 	ldw	r4,0(r2)
   8c5a0:	008c5881 	jmpi	8c588 <_cleanup_r>

0008c5a4 <__sfmoreglue>:
   8c5a4:	defffc04 	addi	sp,sp,-16
   8c5a8:	dc400115 	stw	r17,4(sp)
   8c5ac:	2c401724 	muli	r17,r5,92
   8c5b0:	dc800215 	stw	r18,8(sp)
   8c5b4:	2825883a 	mov	r18,r5
   8c5b8:	89400304 	addi	r5,r17,12
   8c5bc:	dc000015 	stw	r16,0(sp)
   8c5c0:	dfc00315 	stw	ra,12(sp)
   8c5c4:	008d3b00 	call	8d3b0 <_malloc_r>
   8c5c8:	0021883a 	mov	r16,zero
   8c5cc:	880d883a 	mov	r6,r17
   8c5d0:	000b883a 	mov	r5,zero
   8c5d4:	10000626 	beq	r2,zero,8c5f0 <__sfmoreglue+0x4c>
   8c5d8:	11000304 	addi	r4,r2,12
   8c5dc:	14800115 	stw	r18,4(r2)
   8c5e0:	10000015 	stw	zero,0(r2)
   8c5e4:	11000215 	stw	r4,8(r2)
   8c5e8:	1021883a 	mov	r16,r2
   8c5ec:	008dd540 	call	8dd54 <memset>
   8c5f0:	8005883a 	mov	r2,r16
   8c5f4:	dfc00317 	ldw	ra,12(sp)
   8c5f8:	dc800217 	ldw	r18,8(sp)
   8c5fc:	dc400117 	ldw	r17,4(sp)
   8c600:	dc000017 	ldw	r16,0(sp)
   8c604:	dec00404 	addi	sp,sp,16
   8c608:	f800283a 	ret

0008c60c <__sfp>:
   8c60c:	defffd04 	addi	sp,sp,-12
   8c610:	008002f4 	movhi	r2,11
   8c614:	10899804 	addi	r2,r2,9824
   8c618:	dc000015 	stw	r16,0(sp)
   8c61c:	14000017 	ldw	r16,0(r2)
   8c620:	dc400115 	stw	r17,4(sp)
   8c624:	dfc00215 	stw	ra,8(sp)
   8c628:	80800e17 	ldw	r2,56(r16)
   8c62c:	2023883a 	mov	r17,r4
   8c630:	10002626 	beq	r2,zero,8c6cc <__sfp+0xc0>
   8c634:	8400b804 	addi	r16,r16,736
   8c638:	80800117 	ldw	r2,4(r16)
   8c63c:	81000217 	ldw	r4,8(r16)
   8c640:	10ffffc4 	addi	r3,r2,-1
   8c644:	18000916 	blt	r3,zero,8c66c <__sfp+0x60>
   8c648:	2080030f 	ldh	r2,12(r4)
   8c64c:	10000b26 	beq	r2,zero,8c67c <__sfp+0x70>
   8c650:	017fffc4 	movi	r5,-1
   8c654:	00000206 	br	8c660 <__sfp+0x54>
   8c658:	2080030f 	ldh	r2,12(r4)
   8c65c:	10000726 	beq	r2,zero,8c67c <__sfp+0x70>
   8c660:	18ffffc4 	addi	r3,r3,-1
   8c664:	21001704 	addi	r4,r4,92
   8c668:	197ffb1e 	bne	r3,r5,8c658 <__sfp+0x4c>
   8c66c:	80800017 	ldw	r2,0(r16)
   8c670:	10001926 	beq	r2,zero,8c6d8 <__sfp+0xcc>
   8c674:	1021883a 	mov	r16,r2
   8c678:	003fef06 	br	8c638 <__sfp+0x2c>
   8c67c:	00bfffc4 	movi	r2,-1
   8c680:	00c00044 	movi	r3,1
   8c684:	2080038d 	sth	r2,14(r4)
   8c688:	20c0030d 	sth	r3,12(r4)
   8c68c:	20000015 	stw	zero,0(r4)
   8c690:	20000215 	stw	zero,8(r4)
   8c694:	20000115 	stw	zero,4(r4)
   8c698:	20000415 	stw	zero,16(r4)
   8c69c:	20000515 	stw	zero,20(r4)
   8c6a0:	20000615 	stw	zero,24(r4)
   8c6a4:	20000c15 	stw	zero,48(r4)
   8c6a8:	20000d15 	stw	zero,52(r4)
   8c6ac:	20001115 	stw	zero,68(r4)
   8c6b0:	20001215 	stw	zero,72(r4)
   8c6b4:	2005883a 	mov	r2,r4
   8c6b8:	dfc00217 	ldw	ra,8(sp)
   8c6bc:	dc400117 	ldw	r17,4(sp)
   8c6c0:	dc000017 	ldw	r16,0(sp)
   8c6c4:	dec00304 	addi	sp,sp,12
   8c6c8:	f800283a 	ret
   8c6cc:	8009883a 	mov	r4,r16
   8c6d0:	008c4a40 	call	8c4a4 <__sinit>
   8c6d4:	003fd706 	br	8c634 <__sfp+0x28>
   8c6d8:	8809883a 	mov	r4,r17
   8c6dc:	01400104 	movi	r5,4
   8c6e0:	008c5a40 	call	8c5a4 <__sfmoreglue>
   8c6e4:	80800015 	stw	r2,0(r16)
   8c6e8:	103fe21e 	bne	r2,zero,8c674 <__sfp+0x68>
   8c6ec:	00800304 	movi	r2,12
   8c6f0:	0009883a 	mov	r4,zero
   8c6f4:	88800015 	stw	r2,0(r17)
   8c6f8:	003fee06 	br	8c6b4 <__sfp+0xa8>

0008c6fc <_malloc_trim_r>:
   8c6fc:	defffb04 	addi	sp,sp,-20
   8c700:	dcc00315 	stw	r19,12(sp)
   8c704:	04c002f4 	movhi	r19,11
   8c708:	9cc41104 	addi	r19,r19,4164
   8c70c:	dc800215 	stw	r18,8(sp)
   8c710:	dc400115 	stw	r17,4(sp)
   8c714:	dc000015 	stw	r16,0(sp)
   8c718:	2823883a 	mov	r17,r5
   8c71c:	2025883a 	mov	r18,r4
   8c720:	dfc00415 	stw	ra,16(sp)
   8c724:	00913740 	call	91374 <__malloc_lock>
   8c728:	98800217 	ldw	r2,8(r19)
   8c72c:	9009883a 	mov	r4,r18
   8c730:	000b883a 	mov	r5,zero
   8c734:	10c00117 	ldw	r3,4(r2)
   8c738:	00bfff04 	movi	r2,-4
   8c73c:	18a0703a 	and	r16,r3,r2
   8c740:	8463c83a 	sub	r17,r16,r17
   8c744:	8c43fbc4 	addi	r17,r17,4079
   8c748:	8822d33a 	srli	r17,r17,12
   8c74c:	0083ffc4 	movi	r2,4095
   8c750:	8c7fffc4 	addi	r17,r17,-1
   8c754:	8822933a 	slli	r17,r17,12
   8c758:	1440060e 	bge	r2,r17,8c774 <_malloc_trim_r+0x78>
   8c75c:	008f6000 	call	8f600 <_sbrk_r>
   8c760:	98c00217 	ldw	r3,8(r19)
   8c764:	9009883a 	mov	r4,r18
   8c768:	044bc83a 	sub	r5,zero,r17
   8c76c:	80c7883a 	add	r3,r16,r3
   8c770:	10c00926 	beq	r2,r3,8c798 <_malloc_trim_r+0x9c>
   8c774:	00913940 	call	91394 <__malloc_unlock>
   8c778:	0005883a 	mov	r2,zero
   8c77c:	dfc00417 	ldw	ra,16(sp)
   8c780:	dcc00317 	ldw	r19,12(sp)
   8c784:	dc800217 	ldw	r18,8(sp)
   8c788:	dc400117 	ldw	r17,4(sp)
   8c78c:	dc000017 	ldw	r16,0(sp)
   8c790:	dec00504 	addi	sp,sp,20
   8c794:	f800283a 	ret
   8c798:	9009883a 	mov	r4,r18
   8c79c:	008f6000 	call	8f600 <_sbrk_r>
   8c7a0:	844dc83a 	sub	r6,r16,r17
   8c7a4:	00ffffc4 	movi	r3,-1
   8c7a8:	9009883a 	mov	r4,r18
   8c7ac:	000b883a 	mov	r5,zero
   8c7b0:	01c002f4 	movhi	r7,11
   8c7b4:	39ca4204 	addi	r7,r7,10504
   8c7b8:	31800054 	ori	r6,r6,1
   8c7bc:	10c00926 	beq	r2,r3,8c7e4 <_malloc_trim_r+0xe8>
   8c7c0:	38800017 	ldw	r2,0(r7)
   8c7c4:	98c00217 	ldw	r3,8(r19)
   8c7c8:	9009883a 	mov	r4,r18
   8c7cc:	1445c83a 	sub	r2,r2,r17
   8c7d0:	38800015 	stw	r2,0(r7)
   8c7d4:	19800115 	stw	r6,4(r3)
   8c7d8:	00913940 	call	91394 <__malloc_unlock>
   8c7dc:	00800044 	movi	r2,1
   8c7e0:	003fe606 	br	8c77c <_malloc_trim_r+0x80>
   8c7e4:	008f6000 	call	8f600 <_sbrk_r>
   8c7e8:	99800217 	ldw	r6,8(r19)
   8c7ec:	100f883a 	mov	r7,r2
   8c7f0:	9009883a 	mov	r4,r18
   8c7f4:	1187c83a 	sub	r3,r2,r6
   8c7f8:	008003c4 	movi	r2,15
   8c7fc:	19400054 	ori	r5,r3,1
   8c800:	10ffdc0e 	bge	r2,r3,8c774 <_malloc_trim_r+0x78>
   8c804:	008002f4 	movhi	r2,11
   8c808:	10899c04 	addi	r2,r2,9840
   8c80c:	10c00017 	ldw	r3,0(r2)
   8c810:	008002f4 	movhi	r2,11
   8c814:	108a4204 	addi	r2,r2,10504
   8c818:	31400115 	stw	r5,4(r6)
   8c81c:	38c7c83a 	sub	r3,r7,r3
   8c820:	10c00015 	stw	r3,0(r2)
   8c824:	003fd306 	br	8c774 <_malloc_trim_r+0x78>

0008c828 <_free_r>:
   8c828:	defffd04 	addi	sp,sp,-12
   8c82c:	dc400115 	stw	r17,4(sp)
   8c830:	dc000015 	stw	r16,0(sp)
   8c834:	dfc00215 	stw	ra,8(sp)
   8c838:	2821883a 	mov	r16,r5
   8c83c:	2023883a 	mov	r17,r4
   8c840:	28005a26 	beq	r5,zero,8c9ac <_free_r+0x184>
   8c844:	00913740 	call	91374 <__malloc_lock>
   8c848:	823ffe04 	addi	r8,r16,-8
   8c84c:	41400117 	ldw	r5,4(r8)
   8c850:	00bfff84 	movi	r2,-2
   8c854:	028002f4 	movhi	r10,11
   8c858:	52841104 	addi	r10,r10,4164
   8c85c:	288e703a 	and	r7,r5,r2
   8c860:	41cd883a 	add	r6,r8,r7
   8c864:	30c00117 	ldw	r3,4(r6)
   8c868:	51000217 	ldw	r4,8(r10)
   8c86c:	00bfff04 	movi	r2,-4
   8c870:	1892703a 	and	r9,r3,r2
   8c874:	5017883a 	mov	r11,r10
   8c878:	31006726 	beq	r6,r4,8ca18 <_free_r+0x1f0>
   8c87c:	2880004c 	andi	r2,r5,1
   8c880:	1005003a 	cmpeq	r2,r2,zero
   8c884:	32400115 	stw	r9,4(r6)
   8c888:	10001a1e 	bne	r2,zero,8c8f4 <_free_r+0xcc>
   8c88c:	000b883a 	mov	r5,zero
   8c890:	3247883a 	add	r3,r6,r9
   8c894:	18800117 	ldw	r2,4(r3)
   8c898:	1080004c 	andi	r2,r2,1
   8c89c:	1000231e 	bne	r2,zero,8c92c <_free_r+0x104>
   8c8a0:	280ac03a 	cmpne	r5,r5,zero
   8c8a4:	3a4f883a 	add	r7,r7,r9
   8c8a8:	2800451e 	bne	r5,zero,8c9c0 <_free_r+0x198>
   8c8ac:	31000217 	ldw	r4,8(r6)
   8c8b0:	008002f4 	movhi	r2,11
   8c8b4:	10841304 	addi	r2,r2,4172
   8c8b8:	20807b26 	beq	r4,r2,8caa8 <_free_r+0x280>
   8c8bc:	30800317 	ldw	r2,12(r6)
   8c8c0:	3a07883a 	add	r3,r7,r8
   8c8c4:	19c00015 	stw	r7,0(r3)
   8c8c8:	11000215 	stw	r4,8(r2)
   8c8cc:	20800315 	stw	r2,12(r4)
   8c8d0:	38800054 	ori	r2,r7,1
   8c8d4:	40800115 	stw	r2,4(r8)
   8c8d8:	28001a26 	beq	r5,zero,8c944 <_free_r+0x11c>
   8c8dc:	8809883a 	mov	r4,r17
   8c8e0:	dfc00217 	ldw	ra,8(sp)
   8c8e4:	dc400117 	ldw	r17,4(sp)
   8c8e8:	dc000017 	ldw	r16,0(sp)
   8c8ec:	dec00304 	addi	sp,sp,12
   8c8f0:	00913941 	jmpi	91394 <__malloc_unlock>
   8c8f4:	80bffe17 	ldw	r2,-8(r16)
   8c8f8:	50c00204 	addi	r3,r10,8
   8c8fc:	4091c83a 	sub	r8,r8,r2
   8c900:	41000217 	ldw	r4,8(r8)
   8c904:	388f883a 	add	r7,r7,r2
   8c908:	20c06126 	beq	r4,r3,8ca90 <_free_r+0x268>
   8c90c:	40800317 	ldw	r2,12(r8)
   8c910:	3247883a 	add	r3,r6,r9
   8c914:	000b883a 	mov	r5,zero
   8c918:	11000215 	stw	r4,8(r2)
   8c91c:	20800315 	stw	r2,12(r4)
   8c920:	18800117 	ldw	r2,4(r3)
   8c924:	1080004c 	andi	r2,r2,1
   8c928:	103fdd26 	beq	r2,zero,8c8a0 <_free_r+0x78>
   8c92c:	38800054 	ori	r2,r7,1
   8c930:	3a07883a 	add	r3,r7,r8
   8c934:	280ac03a 	cmpne	r5,r5,zero
   8c938:	40800115 	stw	r2,4(r8)
   8c93c:	19c00015 	stw	r7,0(r3)
   8c940:	283fe61e 	bne	r5,zero,8c8dc <_free_r+0xb4>
   8c944:	00807fc4 	movi	r2,511
   8c948:	11c01f2e 	bgeu	r2,r7,8c9c8 <_free_r+0x1a0>
   8c94c:	3806d27a 	srli	r3,r7,9
   8c950:	1800481e 	bne	r3,zero,8ca74 <_free_r+0x24c>
   8c954:	3804d0fa 	srli	r2,r7,3
   8c958:	100690fa 	slli	r3,r2,3
   8c95c:	1acd883a 	add	r6,r3,r11
   8c960:	31400217 	ldw	r5,8(r6)
   8c964:	31405926 	beq	r6,r5,8cacc <_free_r+0x2a4>
   8c968:	28800117 	ldw	r2,4(r5)
   8c96c:	00ffff04 	movi	r3,-4
   8c970:	10c4703a 	and	r2,r2,r3
   8c974:	3880022e 	bgeu	r7,r2,8c980 <_free_r+0x158>
   8c978:	29400217 	ldw	r5,8(r5)
   8c97c:	317ffa1e 	bne	r6,r5,8c968 <_free_r+0x140>
   8c980:	29800317 	ldw	r6,12(r5)
   8c984:	41800315 	stw	r6,12(r8)
   8c988:	41400215 	stw	r5,8(r8)
   8c98c:	8809883a 	mov	r4,r17
   8c990:	2a000315 	stw	r8,12(r5)
   8c994:	32000215 	stw	r8,8(r6)
   8c998:	dfc00217 	ldw	ra,8(sp)
   8c99c:	dc400117 	ldw	r17,4(sp)
   8c9a0:	dc000017 	ldw	r16,0(sp)
   8c9a4:	dec00304 	addi	sp,sp,12
   8c9a8:	00913941 	jmpi	91394 <__malloc_unlock>
   8c9ac:	dfc00217 	ldw	ra,8(sp)
   8c9b0:	dc400117 	ldw	r17,4(sp)
   8c9b4:	dc000017 	ldw	r16,0(sp)
   8c9b8:	dec00304 	addi	sp,sp,12
   8c9bc:	f800283a 	ret
   8c9c0:	31000217 	ldw	r4,8(r6)
   8c9c4:	003fbd06 	br	8c8bc <_free_r+0x94>
   8c9c8:	3806d0fa 	srli	r3,r7,3
   8c9cc:	00800044 	movi	r2,1
   8c9d0:	51400117 	ldw	r5,4(r10)
   8c9d4:	180890fa 	slli	r4,r3,3
   8c9d8:	1807d0ba 	srai	r3,r3,2
   8c9dc:	22c9883a 	add	r4,r4,r11
   8c9e0:	21800217 	ldw	r6,8(r4)
   8c9e4:	10c4983a 	sll	r2,r2,r3
   8c9e8:	41000315 	stw	r4,12(r8)
   8c9ec:	41800215 	stw	r6,8(r8)
   8c9f0:	288ab03a 	or	r5,r5,r2
   8c9f4:	22000215 	stw	r8,8(r4)
   8c9f8:	8809883a 	mov	r4,r17
   8c9fc:	51400115 	stw	r5,4(r10)
   8ca00:	32000315 	stw	r8,12(r6)
   8ca04:	dfc00217 	ldw	ra,8(sp)
   8ca08:	dc400117 	ldw	r17,4(sp)
   8ca0c:	dc000017 	ldw	r16,0(sp)
   8ca10:	dec00304 	addi	sp,sp,12
   8ca14:	00913941 	jmpi	91394 <__malloc_unlock>
   8ca18:	2880004c 	andi	r2,r5,1
   8ca1c:	3a4d883a 	add	r6,r7,r9
   8ca20:	1000071e 	bne	r2,zero,8ca40 <_free_r+0x218>
   8ca24:	80bffe17 	ldw	r2,-8(r16)
   8ca28:	4091c83a 	sub	r8,r8,r2
   8ca2c:	41000317 	ldw	r4,12(r8)
   8ca30:	40c00217 	ldw	r3,8(r8)
   8ca34:	308d883a 	add	r6,r6,r2
   8ca38:	20c00215 	stw	r3,8(r4)
   8ca3c:	19000315 	stw	r4,12(r3)
   8ca40:	008002f4 	movhi	r2,11
   8ca44:	10899b04 	addi	r2,r2,9836
   8ca48:	11000017 	ldw	r4,0(r2)
   8ca4c:	30c00054 	ori	r3,r6,1
   8ca50:	52000215 	stw	r8,8(r10)
   8ca54:	40c00115 	stw	r3,4(r8)
   8ca58:	313fa036 	bltu	r6,r4,8c8dc <_free_r+0xb4>
   8ca5c:	008002f4 	movhi	r2,11
   8ca60:	1089b804 	addi	r2,r2,9952
   8ca64:	11400017 	ldw	r5,0(r2)
   8ca68:	8809883a 	mov	r4,r17
   8ca6c:	008c6fc0 	call	8c6fc <_malloc_trim_r>
   8ca70:	003f9a06 	br	8c8dc <_free_r+0xb4>
   8ca74:	00800104 	movi	r2,4
   8ca78:	10c0072e 	bgeu	r2,r3,8ca98 <_free_r+0x270>
   8ca7c:	00800504 	movi	r2,20
   8ca80:	10c01936 	bltu	r2,r3,8cae8 <_free_r+0x2c0>
   8ca84:	188016c4 	addi	r2,r3,91
   8ca88:	100690fa 	slli	r3,r2,3
   8ca8c:	003fb306 	br	8c95c <_free_r+0x134>
   8ca90:	01400044 	movi	r5,1
   8ca94:	003f7e06 	br	8c890 <_free_r+0x68>
   8ca98:	3804d1ba 	srli	r2,r7,6
   8ca9c:	10800e04 	addi	r2,r2,56
   8caa0:	100690fa 	slli	r3,r2,3
   8caa4:	003fad06 	br	8c95c <_free_r+0x134>
   8caa8:	22000315 	stw	r8,12(r4)
   8caac:	22000215 	stw	r8,8(r4)
   8cab0:	3a05883a 	add	r2,r7,r8
   8cab4:	38c00054 	ori	r3,r7,1
   8cab8:	11c00015 	stw	r7,0(r2)
   8cabc:	41000215 	stw	r4,8(r8)
   8cac0:	40c00115 	stw	r3,4(r8)
   8cac4:	41000315 	stw	r4,12(r8)
   8cac8:	003f8406 	br	8c8dc <_free_r+0xb4>
   8cacc:	1005d0ba 	srai	r2,r2,2
   8cad0:	00c00044 	movi	r3,1
   8cad4:	51000117 	ldw	r4,4(r10)
   8cad8:	1886983a 	sll	r3,r3,r2
   8cadc:	20c8b03a 	or	r4,r4,r3
   8cae0:	51000115 	stw	r4,4(r10)
   8cae4:	003fa706 	br	8c984 <_free_r+0x15c>
   8cae8:	00801504 	movi	r2,84
   8caec:	10c00436 	bltu	r2,r3,8cb00 <_free_r+0x2d8>
   8caf0:	3804d33a 	srli	r2,r7,12
   8caf4:	10801b84 	addi	r2,r2,110
   8caf8:	100690fa 	slli	r3,r2,3
   8cafc:	003f9706 	br	8c95c <_free_r+0x134>
   8cb00:	00805504 	movi	r2,340
   8cb04:	10c00436 	bltu	r2,r3,8cb18 <_free_r+0x2f0>
   8cb08:	3804d3fa 	srli	r2,r7,15
   8cb0c:	10801dc4 	addi	r2,r2,119
   8cb10:	100690fa 	slli	r3,r2,3
   8cb14:	003f9106 	br	8c95c <_free_r+0x134>
   8cb18:	00815504 	movi	r2,1364
   8cb1c:	10c0032e 	bgeu	r2,r3,8cb2c <_free_r+0x304>
   8cb20:	00801f84 	movi	r2,126
   8cb24:	00c0fc04 	movi	r3,1008
   8cb28:	003f8c06 	br	8c95c <_free_r+0x134>
   8cb2c:	3804d4ba 	srli	r2,r7,18
   8cb30:	10801f04 	addi	r2,r2,124
   8cb34:	100690fa 	slli	r3,r2,3
   8cb38:	003f8806 	br	8c95c <_free_r+0x134>

0008cb3c <__sfvwrite_r>:
   8cb3c:	30800217 	ldw	r2,8(r6)
   8cb40:	defff504 	addi	sp,sp,-44
   8cb44:	df000915 	stw	fp,36(sp)
   8cb48:	dd800715 	stw	r22,28(sp)
   8cb4c:	dc800315 	stw	r18,12(sp)
   8cb50:	dfc00a15 	stw	ra,40(sp)
   8cb54:	ddc00815 	stw	r23,32(sp)
   8cb58:	dd400615 	stw	r21,24(sp)
   8cb5c:	dd000515 	stw	r20,20(sp)
   8cb60:	dcc00415 	stw	r19,16(sp)
   8cb64:	dc400215 	stw	r17,8(sp)
   8cb68:	dc000115 	stw	r16,4(sp)
   8cb6c:	302d883a 	mov	r22,r6
   8cb70:	2039883a 	mov	fp,r4
   8cb74:	2825883a 	mov	r18,r5
   8cb78:	10001c26 	beq	r2,zero,8cbec <__sfvwrite_r+0xb0>
   8cb7c:	29c0030b 	ldhu	r7,12(r5)
   8cb80:	3880020c 	andi	r2,r7,8
   8cb84:	10002726 	beq	r2,zero,8cc24 <__sfvwrite_r+0xe8>
   8cb88:	28800417 	ldw	r2,16(r5)
   8cb8c:	10002526 	beq	r2,zero,8cc24 <__sfvwrite_r+0xe8>
   8cb90:	3880008c 	andi	r2,r7,2
   8cb94:	b5400017 	ldw	r21,0(r22)
   8cb98:	10002826 	beq	r2,zero,8cc3c <__sfvwrite_r+0x100>
   8cb9c:	0021883a 	mov	r16,zero
   8cba0:	0023883a 	mov	r17,zero
   8cba4:	880d883a 	mov	r6,r17
   8cba8:	e009883a 	mov	r4,fp
   8cbac:	00810004 	movi	r2,1024
   8cbb0:	80006e26 	beq	r16,zero,8cd6c <__sfvwrite_r+0x230>
   8cbb4:	800f883a 	mov	r7,r16
   8cbb8:	91400717 	ldw	r5,28(r18)
   8cbbc:	1400012e 	bgeu	r2,r16,8cbc4 <__sfvwrite_r+0x88>
   8cbc0:	100f883a 	mov	r7,r2
   8cbc4:	90c00917 	ldw	r3,36(r18)
   8cbc8:	183ee83a 	callr	r3
   8cbcc:	1007883a 	mov	r3,r2
   8cbd0:	80a1c83a 	sub	r16,r16,r2
   8cbd4:	88a3883a 	add	r17,r17,r2
   8cbd8:	00806d0e 	bge	zero,r2,8cd90 <__sfvwrite_r+0x254>
   8cbdc:	b0800217 	ldw	r2,8(r22)
   8cbe0:	10c5c83a 	sub	r2,r2,r3
   8cbe4:	b0800215 	stw	r2,8(r22)
   8cbe8:	103fee1e 	bne	r2,zero,8cba4 <__sfvwrite_r+0x68>
   8cbec:	0009883a 	mov	r4,zero
   8cbf0:	2005883a 	mov	r2,r4
   8cbf4:	dfc00a17 	ldw	ra,40(sp)
   8cbf8:	df000917 	ldw	fp,36(sp)
   8cbfc:	ddc00817 	ldw	r23,32(sp)
   8cc00:	dd800717 	ldw	r22,28(sp)
   8cc04:	dd400617 	ldw	r21,24(sp)
   8cc08:	dd000517 	ldw	r20,20(sp)
   8cc0c:	dcc00417 	ldw	r19,16(sp)
   8cc10:	dc800317 	ldw	r18,12(sp)
   8cc14:	dc400217 	ldw	r17,8(sp)
   8cc18:	dc000117 	ldw	r16,4(sp)
   8cc1c:	dec00b04 	addi	sp,sp,44
   8cc20:	f800283a 	ret
   8cc24:	008a9040 	call	8a904 <__swsetup_r>
   8cc28:	1000e41e 	bne	r2,zero,8cfbc <__sfvwrite_r+0x480>
   8cc2c:	91c0030b 	ldhu	r7,12(r18)
   8cc30:	b5400017 	ldw	r21,0(r22)
   8cc34:	3880008c 	andi	r2,r7,2
   8cc38:	103fd81e 	bne	r2,zero,8cb9c <__sfvwrite_r+0x60>
   8cc3c:	3880004c 	andi	r2,r7,1
   8cc40:	1005003a 	cmpeq	r2,r2,zero
   8cc44:	10005726 	beq	r2,zero,8cda4 <__sfvwrite_r+0x268>
   8cc48:	0029883a 	mov	r20,zero
   8cc4c:	002f883a 	mov	r23,zero
   8cc50:	a0004226 	beq	r20,zero,8cd5c <__sfvwrite_r+0x220>
   8cc54:	3880800c 	andi	r2,r7,512
   8cc58:	94000217 	ldw	r16,8(r18)
   8cc5c:	10008b26 	beq	r2,zero,8ce8c <__sfvwrite_r+0x350>
   8cc60:	800d883a 	mov	r6,r16
   8cc64:	a400a536 	bltu	r20,r16,8cefc <__sfvwrite_r+0x3c0>
   8cc68:	3881200c 	andi	r2,r7,1152
   8cc6c:	10002726 	beq	r2,zero,8cd0c <__sfvwrite_r+0x1d0>
   8cc70:	90800517 	ldw	r2,20(r18)
   8cc74:	92000417 	ldw	r8,16(r18)
   8cc78:	91400017 	ldw	r5,0(r18)
   8cc7c:	1087883a 	add	r3,r2,r2
   8cc80:	1887883a 	add	r3,r3,r2
   8cc84:	1808d7fa 	srli	r4,r3,31
   8cc88:	2a21c83a 	sub	r16,r5,r8
   8cc8c:	80800044 	addi	r2,r16,1
   8cc90:	20c9883a 	add	r4,r4,r3
   8cc94:	2027d07a 	srai	r19,r4,1
   8cc98:	a085883a 	add	r2,r20,r2
   8cc9c:	980d883a 	mov	r6,r19
   8cca0:	9880022e 	bgeu	r19,r2,8ccac <__sfvwrite_r+0x170>
   8cca4:	1027883a 	mov	r19,r2
   8cca8:	100d883a 	mov	r6,r2
   8ccac:	3881000c 	andi	r2,r7,1024
   8ccb0:	1000b826 	beq	r2,zero,8cf94 <__sfvwrite_r+0x458>
   8ccb4:	300b883a 	mov	r5,r6
   8ccb8:	e009883a 	mov	r4,fp
   8ccbc:	008d3b00 	call	8d3b0 <_malloc_r>
   8ccc0:	10003126 	beq	r2,zero,8cd88 <__sfvwrite_r+0x24c>
   8ccc4:	91400417 	ldw	r5,16(r18)
   8ccc8:	1009883a 	mov	r4,r2
   8cccc:	800d883a 	mov	r6,r16
   8ccd0:	1023883a 	mov	r17,r2
   8ccd4:	008dbd40 	call	8dbd4 <memcpy>
   8ccd8:	90c0030b 	ldhu	r3,12(r18)
   8ccdc:	00beffc4 	movi	r2,-1025
   8cce0:	1886703a 	and	r3,r3,r2
   8cce4:	18c02014 	ori	r3,r3,128
   8cce8:	90c0030d 	sth	r3,12(r18)
   8ccec:	9c07c83a 	sub	r3,r19,r16
   8ccf0:	8c05883a 	add	r2,r17,r16
   8ccf4:	a00d883a 	mov	r6,r20
   8ccf8:	a021883a 	mov	r16,r20
   8ccfc:	90800015 	stw	r2,0(r18)
   8cd00:	90c00215 	stw	r3,8(r18)
   8cd04:	94400415 	stw	r17,16(r18)
   8cd08:	94c00515 	stw	r19,20(r18)
   8cd0c:	91000017 	ldw	r4,0(r18)
   8cd10:	b80b883a 	mov	r5,r23
   8cd14:	a023883a 	mov	r17,r20
   8cd18:	008dc740 	call	8dc74 <memmove>
   8cd1c:	90c00217 	ldw	r3,8(r18)
   8cd20:	90800017 	ldw	r2,0(r18)
   8cd24:	a027883a 	mov	r19,r20
   8cd28:	1c07c83a 	sub	r3,r3,r16
   8cd2c:	1405883a 	add	r2,r2,r16
   8cd30:	90c00215 	stw	r3,8(r18)
   8cd34:	a021883a 	mov	r16,r20
   8cd38:	90800015 	stw	r2,0(r18)
   8cd3c:	b0800217 	ldw	r2,8(r22)
   8cd40:	1405c83a 	sub	r2,r2,r16
   8cd44:	b0800215 	stw	r2,8(r22)
   8cd48:	103fa826 	beq	r2,zero,8cbec <__sfvwrite_r+0xb0>
   8cd4c:	a469c83a 	sub	r20,r20,r17
   8cd50:	91c0030b 	ldhu	r7,12(r18)
   8cd54:	bcef883a 	add	r23,r23,r19
   8cd58:	a03fbe1e 	bne	r20,zero,8cc54 <__sfvwrite_r+0x118>
   8cd5c:	adc00017 	ldw	r23,0(r21)
   8cd60:	ad000117 	ldw	r20,4(r21)
   8cd64:	ad400204 	addi	r21,r21,8
   8cd68:	003fb906 	br	8cc50 <__sfvwrite_r+0x114>
   8cd6c:	ac400017 	ldw	r17,0(r21)
   8cd70:	ac000117 	ldw	r16,4(r21)
   8cd74:	ad400204 	addi	r21,r21,8
   8cd78:	003f8a06 	br	8cba4 <__sfvwrite_r+0x68>
   8cd7c:	91400417 	ldw	r5,16(r18)
   8cd80:	e009883a 	mov	r4,fp
   8cd84:	008c8280 	call	8c828 <_free_r>
   8cd88:	00800304 	movi	r2,12
   8cd8c:	e0800015 	stw	r2,0(fp)
   8cd90:	9080030b 	ldhu	r2,12(r18)
   8cd94:	013fffc4 	movi	r4,-1
   8cd98:	10801014 	ori	r2,r2,64
   8cd9c:	9080030d 	sth	r2,12(r18)
   8cda0:	003f9306 	br	8cbf0 <__sfvwrite_r+0xb4>
   8cda4:	0027883a 	mov	r19,zero
   8cda8:	002f883a 	mov	r23,zero
   8cdac:	d8000015 	stw	zero,0(sp)
   8cdb0:	0029883a 	mov	r20,zero
   8cdb4:	98001e26 	beq	r19,zero,8ce30 <__sfvwrite_r+0x2f4>
   8cdb8:	d8c00017 	ldw	r3,0(sp)
   8cdbc:	1804c03a 	cmpne	r2,r3,zero
   8cdc0:	10005e26 	beq	r2,zero,8cf3c <__sfvwrite_r+0x400>
   8cdc4:	9821883a 	mov	r16,r19
   8cdc8:	a4c0012e 	bgeu	r20,r19,8cdd0 <__sfvwrite_r+0x294>
   8cdcc:	a021883a 	mov	r16,r20
   8cdd0:	91000017 	ldw	r4,0(r18)
   8cdd4:	90800417 	ldw	r2,16(r18)
   8cdd8:	91800217 	ldw	r6,8(r18)
   8cddc:	91c00517 	ldw	r7,20(r18)
   8cde0:	1100022e 	bgeu	r2,r4,8cdec <__sfvwrite_r+0x2b0>
   8cde4:	31e3883a 	add	r17,r6,r7
   8cde8:	8c001616 	blt	r17,r16,8ce44 <__sfvwrite_r+0x308>
   8cdec:	81c03816 	blt	r16,r7,8ced0 <__sfvwrite_r+0x394>
   8cdf0:	90c00917 	ldw	r3,36(r18)
   8cdf4:	91400717 	ldw	r5,28(r18)
   8cdf8:	e009883a 	mov	r4,fp
   8cdfc:	b80d883a 	mov	r6,r23
   8ce00:	183ee83a 	callr	r3
   8ce04:	1023883a 	mov	r17,r2
   8ce08:	00bfe10e 	bge	zero,r2,8cd90 <__sfvwrite_r+0x254>
   8ce0c:	a469c83a 	sub	r20,r20,r17
   8ce10:	a0001826 	beq	r20,zero,8ce74 <__sfvwrite_r+0x338>
   8ce14:	b0800217 	ldw	r2,8(r22)
   8ce18:	1445c83a 	sub	r2,r2,r17
   8ce1c:	b0800215 	stw	r2,8(r22)
   8ce20:	103f7226 	beq	r2,zero,8cbec <__sfvwrite_r+0xb0>
   8ce24:	9c67c83a 	sub	r19,r19,r17
   8ce28:	bc6f883a 	add	r23,r23,r17
   8ce2c:	983fe21e 	bne	r19,zero,8cdb8 <__sfvwrite_r+0x27c>
   8ce30:	adc00017 	ldw	r23,0(r21)
   8ce34:	acc00117 	ldw	r19,4(r21)
   8ce38:	ad400204 	addi	r21,r21,8
   8ce3c:	d8000015 	stw	zero,0(sp)
   8ce40:	003fdc06 	br	8cdb4 <__sfvwrite_r+0x278>
   8ce44:	b80b883a 	mov	r5,r23
   8ce48:	880d883a 	mov	r6,r17
   8ce4c:	008dc740 	call	8dc74 <memmove>
   8ce50:	90c00017 	ldw	r3,0(r18)
   8ce54:	e009883a 	mov	r4,fp
   8ce58:	900b883a 	mov	r5,r18
   8ce5c:	1c47883a 	add	r3,r3,r17
   8ce60:	90c00015 	stw	r3,0(r18)
   8ce64:	008c20c0 	call	8c20c <_fflush_r>
   8ce68:	103fc91e 	bne	r2,zero,8cd90 <__sfvwrite_r+0x254>
   8ce6c:	a469c83a 	sub	r20,r20,r17
   8ce70:	a03fe81e 	bne	r20,zero,8ce14 <__sfvwrite_r+0x2d8>
   8ce74:	e009883a 	mov	r4,fp
   8ce78:	900b883a 	mov	r5,r18
   8ce7c:	008c20c0 	call	8c20c <_fflush_r>
   8ce80:	103fc31e 	bne	r2,zero,8cd90 <__sfvwrite_r+0x254>
   8ce84:	d8000015 	stw	zero,0(sp)
   8ce88:	003fe206 	br	8ce14 <__sfvwrite_r+0x2d8>
   8ce8c:	91000017 	ldw	r4,0(r18)
   8ce90:	90800417 	ldw	r2,16(r18)
   8ce94:	1100022e 	bgeu	r2,r4,8cea0 <__sfvwrite_r+0x364>
   8ce98:	8023883a 	mov	r17,r16
   8ce9c:	85003136 	bltu	r16,r20,8cf64 <__sfvwrite_r+0x428>
   8cea0:	91c00517 	ldw	r7,20(r18)
   8cea4:	a1c01836 	bltu	r20,r7,8cf08 <__sfvwrite_r+0x3cc>
   8cea8:	90c00917 	ldw	r3,36(r18)
   8ceac:	91400717 	ldw	r5,28(r18)
   8ceb0:	e009883a 	mov	r4,fp
   8ceb4:	b80d883a 	mov	r6,r23
   8ceb8:	183ee83a 	callr	r3
   8cebc:	1021883a 	mov	r16,r2
   8cec0:	00bfb30e 	bge	zero,r2,8cd90 <__sfvwrite_r+0x254>
   8cec4:	1023883a 	mov	r17,r2
   8cec8:	1027883a 	mov	r19,r2
   8cecc:	003f9b06 	br	8cd3c <__sfvwrite_r+0x200>
   8ced0:	b80b883a 	mov	r5,r23
   8ced4:	800d883a 	mov	r6,r16
   8ced8:	008dc740 	call	8dc74 <memmove>
   8cedc:	90c00217 	ldw	r3,8(r18)
   8cee0:	90800017 	ldw	r2,0(r18)
   8cee4:	8023883a 	mov	r17,r16
   8cee8:	1c07c83a 	sub	r3,r3,r16
   8ceec:	1405883a 	add	r2,r2,r16
   8cef0:	90c00215 	stw	r3,8(r18)
   8cef4:	90800015 	stw	r2,0(r18)
   8cef8:	003fc406 	br	8ce0c <__sfvwrite_r+0x2d0>
   8cefc:	a00d883a 	mov	r6,r20
   8cf00:	a021883a 	mov	r16,r20
   8cf04:	003f8106 	br	8cd0c <__sfvwrite_r+0x1d0>
   8cf08:	b80b883a 	mov	r5,r23
   8cf0c:	a00d883a 	mov	r6,r20
   8cf10:	008dc740 	call	8dc74 <memmove>
   8cf14:	90c00217 	ldw	r3,8(r18)
   8cf18:	90800017 	ldw	r2,0(r18)
   8cf1c:	a021883a 	mov	r16,r20
   8cf20:	1d07c83a 	sub	r3,r3,r20
   8cf24:	1505883a 	add	r2,r2,r20
   8cf28:	a023883a 	mov	r17,r20
   8cf2c:	a027883a 	mov	r19,r20
   8cf30:	90c00215 	stw	r3,8(r18)
   8cf34:	90800015 	stw	r2,0(r18)
   8cf38:	003f8006 	br	8cd3c <__sfvwrite_r+0x200>
   8cf3c:	b809883a 	mov	r4,r23
   8cf40:	01400284 	movi	r5,10
   8cf44:	980d883a 	mov	r6,r19
   8cf48:	008daf00 	call	8daf0 <memchr>
   8cf4c:	10001726 	beq	r2,zero,8cfac <__sfvwrite_r+0x470>
   8cf50:	15c5c83a 	sub	r2,r2,r23
   8cf54:	15000044 	addi	r20,r2,1
   8cf58:	00800044 	movi	r2,1
   8cf5c:	d8800015 	stw	r2,0(sp)
   8cf60:	003f9806 	br	8cdc4 <__sfvwrite_r+0x288>
   8cf64:	b80b883a 	mov	r5,r23
   8cf68:	800d883a 	mov	r6,r16
   8cf6c:	008dc740 	call	8dc74 <memmove>
   8cf70:	90c00017 	ldw	r3,0(r18)
   8cf74:	e009883a 	mov	r4,fp
   8cf78:	900b883a 	mov	r5,r18
   8cf7c:	1c07883a 	add	r3,r3,r16
   8cf80:	90c00015 	stw	r3,0(r18)
   8cf84:	8027883a 	mov	r19,r16
   8cf88:	008c20c0 	call	8c20c <_fflush_r>
   8cf8c:	103f6b26 	beq	r2,zero,8cd3c <__sfvwrite_r+0x200>
   8cf90:	003f7f06 	br	8cd90 <__sfvwrite_r+0x254>
   8cf94:	400b883a 	mov	r5,r8
   8cf98:	e009883a 	mov	r4,fp
   8cf9c:	008efcc0 	call	8efcc <_realloc_r>
   8cfa0:	103f7626 	beq	r2,zero,8cd7c <__sfvwrite_r+0x240>
   8cfa4:	1023883a 	mov	r17,r2
   8cfa8:	003f5006 	br	8ccec <__sfvwrite_r+0x1b0>
   8cfac:	00c00044 	movi	r3,1
   8cfb0:	9d000044 	addi	r20,r19,1
   8cfb4:	d8c00015 	stw	r3,0(sp)
   8cfb8:	003f8206 	br	8cdc4 <__sfvwrite_r+0x288>
   8cfbc:	9080030b 	ldhu	r2,12(r18)
   8cfc0:	00c00244 	movi	r3,9
   8cfc4:	013fffc4 	movi	r4,-1
   8cfc8:	10801014 	ori	r2,r2,64
   8cfcc:	9080030d 	sth	r2,12(r18)
   8cfd0:	e0c00015 	stw	r3,0(fp)
   8cfd4:	003f0606 	br	8cbf0 <__sfvwrite_r+0xb4>

0008cfd8 <_fwalk_reent>:
   8cfd8:	defff704 	addi	sp,sp,-36
   8cfdc:	dcc00315 	stw	r19,12(sp)
   8cfe0:	24c0b804 	addi	r19,r4,736
   8cfe4:	dd800615 	stw	r22,24(sp)
   8cfe8:	dd400515 	stw	r21,20(sp)
   8cfec:	dfc00815 	stw	ra,32(sp)
   8cff0:	ddc00715 	stw	r23,28(sp)
   8cff4:	dd000415 	stw	r20,16(sp)
   8cff8:	dc800215 	stw	r18,8(sp)
   8cffc:	dc400115 	stw	r17,4(sp)
   8d000:	dc000015 	stw	r16,0(sp)
   8d004:	202b883a 	mov	r21,r4
   8d008:	282d883a 	mov	r22,r5
   8d00c:	008c4940 	call	8c494 <__sfp_lock_acquire>
   8d010:	98002126 	beq	r19,zero,8d098 <_fwalk_reent+0xc0>
   8d014:	002f883a 	mov	r23,zero
   8d018:	9c800117 	ldw	r18,4(r19)
   8d01c:	9c000217 	ldw	r16,8(r19)
   8d020:	90bfffc4 	addi	r2,r18,-1
   8d024:	10000d16 	blt	r2,zero,8d05c <_fwalk_reent+0x84>
   8d028:	0023883a 	mov	r17,zero
   8d02c:	053fffc4 	movi	r20,-1
   8d030:	8080030f 	ldh	r2,12(r16)
   8d034:	8c400044 	addi	r17,r17,1
   8d038:	10000626 	beq	r2,zero,8d054 <_fwalk_reent+0x7c>
   8d03c:	8080038f 	ldh	r2,14(r16)
   8d040:	800b883a 	mov	r5,r16
   8d044:	a809883a 	mov	r4,r21
   8d048:	15000226 	beq	r2,r20,8d054 <_fwalk_reent+0x7c>
   8d04c:	b03ee83a 	callr	r22
   8d050:	b8aeb03a 	or	r23,r23,r2
   8d054:	84001704 	addi	r16,r16,92
   8d058:	947ff51e 	bne	r18,r17,8d030 <_fwalk_reent+0x58>
   8d05c:	9cc00017 	ldw	r19,0(r19)
   8d060:	983fed1e 	bne	r19,zero,8d018 <_fwalk_reent+0x40>
   8d064:	008c4980 	call	8c498 <__sfp_lock_release>
   8d068:	b805883a 	mov	r2,r23
   8d06c:	dfc00817 	ldw	ra,32(sp)
   8d070:	ddc00717 	ldw	r23,28(sp)
   8d074:	dd800617 	ldw	r22,24(sp)
   8d078:	dd400517 	ldw	r21,20(sp)
   8d07c:	dd000417 	ldw	r20,16(sp)
   8d080:	dcc00317 	ldw	r19,12(sp)
   8d084:	dc800217 	ldw	r18,8(sp)
   8d088:	dc400117 	ldw	r17,4(sp)
   8d08c:	dc000017 	ldw	r16,0(sp)
   8d090:	dec00904 	addi	sp,sp,36
   8d094:	f800283a 	ret
   8d098:	002f883a 	mov	r23,zero
   8d09c:	003ff106 	br	8d064 <_fwalk_reent+0x8c>

0008d0a0 <_fwalk>:
   8d0a0:	defff804 	addi	sp,sp,-32
   8d0a4:	dcc00315 	stw	r19,12(sp)
   8d0a8:	24c0b804 	addi	r19,r4,736
   8d0ac:	dd400515 	stw	r21,20(sp)
   8d0b0:	dfc00715 	stw	ra,28(sp)
   8d0b4:	dd800615 	stw	r22,24(sp)
   8d0b8:	dd000415 	stw	r20,16(sp)
   8d0bc:	dc800215 	stw	r18,8(sp)
   8d0c0:	dc400115 	stw	r17,4(sp)
   8d0c4:	dc000015 	stw	r16,0(sp)
   8d0c8:	282b883a 	mov	r21,r5
   8d0cc:	008c4940 	call	8c494 <__sfp_lock_acquire>
   8d0d0:	98001f26 	beq	r19,zero,8d150 <_fwalk+0xb0>
   8d0d4:	002d883a 	mov	r22,zero
   8d0d8:	9c800117 	ldw	r18,4(r19)
   8d0dc:	9c000217 	ldw	r16,8(r19)
   8d0e0:	90bfffc4 	addi	r2,r18,-1
   8d0e4:	10000c16 	blt	r2,zero,8d118 <_fwalk+0x78>
   8d0e8:	0023883a 	mov	r17,zero
   8d0ec:	053fffc4 	movi	r20,-1
   8d0f0:	8080030f 	ldh	r2,12(r16)
   8d0f4:	8c400044 	addi	r17,r17,1
   8d0f8:	10000526 	beq	r2,zero,8d110 <_fwalk+0x70>
   8d0fc:	8080038f 	ldh	r2,14(r16)
   8d100:	8009883a 	mov	r4,r16
   8d104:	15000226 	beq	r2,r20,8d110 <_fwalk+0x70>
   8d108:	a83ee83a 	callr	r21
   8d10c:	b0acb03a 	or	r22,r22,r2
   8d110:	84001704 	addi	r16,r16,92
   8d114:	947ff61e 	bne	r18,r17,8d0f0 <_fwalk+0x50>
   8d118:	9cc00017 	ldw	r19,0(r19)
   8d11c:	983fee1e 	bne	r19,zero,8d0d8 <_fwalk+0x38>
   8d120:	008c4980 	call	8c498 <__sfp_lock_release>
   8d124:	b005883a 	mov	r2,r22
   8d128:	dfc00717 	ldw	ra,28(sp)
   8d12c:	dd800617 	ldw	r22,24(sp)
   8d130:	dd400517 	ldw	r21,20(sp)
   8d134:	dd000417 	ldw	r20,16(sp)
   8d138:	dcc00317 	ldw	r19,12(sp)
   8d13c:	dc800217 	ldw	r18,8(sp)
   8d140:	dc400117 	ldw	r17,4(sp)
   8d144:	dc000017 	ldw	r16,0(sp)
   8d148:	dec00804 	addi	sp,sp,32
   8d14c:	f800283a 	ret
   8d150:	002d883a 	mov	r22,zero
   8d154:	003ff206 	br	8d120 <_fwalk+0x80>

0008d158 <__locale_charset>:
   8d158:	d0a00517 	ldw	r2,-32748(gp)
   8d15c:	f800283a 	ret

0008d160 <_localeconv_r>:
   8d160:	00800274 	movhi	r2,9
   8d164:	108ef004 	addi	r2,r2,15296
   8d168:	f800283a 	ret

0008d16c <localeconv>:
   8d16c:	008002f4 	movhi	r2,11
   8d170:	10899704 	addi	r2,r2,9820
   8d174:	11000017 	ldw	r4,0(r2)
   8d178:	008d1601 	jmpi	8d160 <_localeconv_r>

0008d17c <_setlocale_r>:
   8d17c:	defffc04 	addi	sp,sp,-16
   8d180:	00c00274 	movhi	r3,9
   8d184:	18cec604 	addi	r3,r3,15128
   8d188:	dc800215 	stw	r18,8(sp)
   8d18c:	dc400115 	stw	r17,4(sp)
   8d190:	dc000015 	stw	r16,0(sp)
   8d194:	2023883a 	mov	r17,r4
   8d198:	2825883a 	mov	r18,r5
   8d19c:	dfc00315 	stw	ra,12(sp)
   8d1a0:	3021883a 	mov	r16,r6
   8d1a4:	3009883a 	mov	r4,r6
   8d1a8:	180b883a 	mov	r5,r3
   8d1ac:	30000926 	beq	r6,zero,8d1d4 <_setlocale_r+0x58>
   8d1b0:	008f7bc0 	call	8f7bc <strcmp>
   8d1b4:	8009883a 	mov	r4,r16
   8d1b8:	01400274 	movhi	r5,9
   8d1bc:	294ed704 	addi	r5,r5,15196
   8d1c0:	10000b1e 	bne	r2,zero,8d1f0 <_setlocale_r+0x74>
   8d1c4:	8c000d15 	stw	r16,52(r17)
   8d1c8:	8c800c15 	stw	r18,48(r17)
   8d1cc:	00c00274 	movhi	r3,9
   8d1d0:	18cec604 	addi	r3,r3,15128
   8d1d4:	1805883a 	mov	r2,r3
   8d1d8:	dfc00317 	ldw	ra,12(sp)
   8d1dc:	dc800217 	ldw	r18,8(sp)
   8d1e0:	dc400117 	ldw	r17,4(sp)
   8d1e4:	dc000017 	ldw	r16,0(sp)
   8d1e8:	dec00404 	addi	sp,sp,16
   8d1ec:	f800283a 	ret
   8d1f0:	008f7bc0 	call	8f7bc <strcmp>
   8d1f4:	0007883a 	mov	r3,zero
   8d1f8:	103ff226 	beq	r2,zero,8d1c4 <_setlocale_r+0x48>
   8d1fc:	003ff506 	br	8d1d4 <_setlocale_r+0x58>

0008d200 <setlocale>:
   8d200:	018002f4 	movhi	r6,11
   8d204:	31899704 	addi	r6,r6,9820
   8d208:	2007883a 	mov	r3,r4
   8d20c:	31000017 	ldw	r4,0(r6)
   8d210:	280d883a 	mov	r6,r5
   8d214:	180b883a 	mov	r5,r3
   8d218:	008d17c1 	jmpi	8d17c <_setlocale_r>

0008d21c <__smakebuf_r>:
   8d21c:	2880030b 	ldhu	r2,12(r5)
   8d220:	deffed04 	addi	sp,sp,-76
   8d224:	dc401015 	stw	r17,64(sp)
   8d228:	1080008c 	andi	r2,r2,2
   8d22c:	dc000f15 	stw	r16,60(sp)
   8d230:	dfc01215 	stw	ra,72(sp)
   8d234:	dc801115 	stw	r18,68(sp)
   8d238:	2821883a 	mov	r16,r5
   8d23c:	2023883a 	mov	r17,r4
   8d240:	10000b26 	beq	r2,zero,8d270 <__smakebuf_r+0x54>
   8d244:	28c010c4 	addi	r3,r5,67
   8d248:	00800044 	movi	r2,1
   8d24c:	28800515 	stw	r2,20(r5)
   8d250:	28c00415 	stw	r3,16(r5)
   8d254:	28c00015 	stw	r3,0(r5)
   8d258:	dfc01217 	ldw	ra,72(sp)
   8d25c:	dc801117 	ldw	r18,68(sp)
   8d260:	dc401017 	ldw	r17,64(sp)
   8d264:	dc000f17 	ldw	r16,60(sp)
   8d268:	dec01304 	addi	sp,sp,76
   8d26c:	f800283a 	ret
   8d270:	2940038f 	ldh	r5,14(r5)
   8d274:	28002116 	blt	r5,zero,8d2fc <__smakebuf_r+0xe0>
   8d278:	d80d883a 	mov	r6,sp
   8d27c:	008fc840 	call	8fc84 <_fstat_r>
   8d280:	10001e16 	blt	r2,zero,8d2fc <__smakebuf_r+0xe0>
   8d284:	d8800117 	ldw	r2,4(sp)
   8d288:	00e00014 	movui	r3,32768
   8d28c:	113c000c 	andi	r4,r2,61440
   8d290:	20c03126 	beq	r4,r3,8d358 <__smakebuf_r+0x13c>
   8d294:	8080030b 	ldhu	r2,12(r16)
   8d298:	00c80004 	movi	r3,8192
   8d29c:	10820014 	ori	r2,r2,2048
   8d2a0:	8080030d 	sth	r2,12(r16)
   8d2a4:	20c01e26 	beq	r4,r3,8d320 <__smakebuf_r+0x104>
   8d2a8:	04810004 	movi	r18,1024
   8d2ac:	8809883a 	mov	r4,r17
   8d2b0:	900b883a 	mov	r5,r18
   8d2b4:	008d3b00 	call	8d3b0 <_malloc_r>
   8d2b8:	1009883a 	mov	r4,r2
   8d2bc:	10003126 	beq	r2,zero,8d384 <__smakebuf_r+0x168>
   8d2c0:	80c0030b 	ldhu	r3,12(r16)
   8d2c4:	00800274 	movhi	r2,9
   8d2c8:	10b16204 	addi	r2,r2,-14968
   8d2cc:	88800f15 	stw	r2,60(r17)
   8d2d0:	18c02014 	ori	r3,r3,128
   8d2d4:	84800515 	stw	r18,20(r16)
   8d2d8:	80c0030d 	sth	r3,12(r16)
   8d2dc:	81000415 	stw	r4,16(r16)
   8d2e0:	81000015 	stw	r4,0(r16)
   8d2e4:	dfc01217 	ldw	ra,72(sp)
   8d2e8:	dc801117 	ldw	r18,68(sp)
   8d2ec:	dc401017 	ldw	r17,64(sp)
   8d2f0:	dc000f17 	ldw	r16,60(sp)
   8d2f4:	dec01304 	addi	sp,sp,76
   8d2f8:	f800283a 	ret
   8d2fc:	80c0030b 	ldhu	r3,12(r16)
   8d300:	1880200c 	andi	r2,r3,128
   8d304:	10000426 	beq	r2,zero,8d318 <__smakebuf_r+0xfc>
   8d308:	04801004 	movi	r18,64
   8d30c:	18820014 	ori	r2,r3,2048
   8d310:	8080030d 	sth	r2,12(r16)
   8d314:	003fe506 	br	8d2ac <__smakebuf_r+0x90>
   8d318:	04810004 	movi	r18,1024
   8d31c:	003ffb06 	br	8d30c <__smakebuf_r+0xf0>
   8d320:	8140038f 	ldh	r5,14(r16)
   8d324:	8809883a 	mov	r4,r17
   8d328:	008fcf80 	call	8fcf8 <_isatty_r>
   8d32c:	103fde26 	beq	r2,zero,8d2a8 <__smakebuf_r+0x8c>
   8d330:	8080030b 	ldhu	r2,12(r16)
   8d334:	80c010c4 	addi	r3,r16,67
   8d338:	04810004 	movi	r18,1024
   8d33c:	10800054 	ori	r2,r2,1
   8d340:	8080030d 	sth	r2,12(r16)
   8d344:	00800044 	movi	r2,1
   8d348:	80c00415 	stw	r3,16(r16)
   8d34c:	80800515 	stw	r2,20(r16)
   8d350:	80c00015 	stw	r3,0(r16)
   8d354:	003fd506 	br	8d2ac <__smakebuf_r+0x90>
   8d358:	80c00a17 	ldw	r3,40(r16)
   8d35c:	00800274 	movhi	r2,9
   8d360:	10bd9e04 	addi	r2,r2,-2440
   8d364:	18bfcb1e 	bne	r3,r2,8d294 <__smakebuf_r+0x78>
   8d368:	8080030b 	ldhu	r2,12(r16)
   8d36c:	00c10004 	movi	r3,1024
   8d370:	1825883a 	mov	r18,r3
   8d374:	10c4b03a 	or	r2,r2,r3
   8d378:	8080030d 	sth	r2,12(r16)
   8d37c:	80c01315 	stw	r3,76(r16)
   8d380:	003fca06 	br	8d2ac <__smakebuf_r+0x90>
   8d384:	8100030b 	ldhu	r4,12(r16)
   8d388:	2080800c 	andi	r2,r4,512
   8d38c:	103fb21e 	bne	r2,zero,8d258 <__smakebuf_r+0x3c>
   8d390:	80c010c4 	addi	r3,r16,67
   8d394:	21000094 	ori	r4,r4,2
   8d398:	00800044 	movi	r2,1
   8d39c:	80800515 	stw	r2,20(r16)
   8d3a0:	8100030d 	sth	r4,12(r16)
   8d3a4:	80c00415 	stw	r3,16(r16)
   8d3a8:	80c00015 	stw	r3,0(r16)
   8d3ac:	003faa06 	br	8d258 <__smakebuf_r+0x3c>

0008d3b0 <_malloc_r>:
   8d3b0:	defff604 	addi	sp,sp,-40
   8d3b4:	28c002c4 	addi	r3,r5,11
   8d3b8:	00800584 	movi	r2,22
   8d3bc:	dc800215 	stw	r18,8(sp)
   8d3c0:	dfc00915 	stw	ra,36(sp)
   8d3c4:	df000815 	stw	fp,32(sp)
   8d3c8:	ddc00715 	stw	r23,28(sp)
   8d3cc:	dd800615 	stw	r22,24(sp)
   8d3d0:	dd400515 	stw	r21,20(sp)
   8d3d4:	dd000415 	stw	r20,16(sp)
   8d3d8:	dcc00315 	stw	r19,12(sp)
   8d3dc:	dc400115 	stw	r17,4(sp)
   8d3e0:	dc000015 	stw	r16,0(sp)
   8d3e4:	2025883a 	mov	r18,r4
   8d3e8:	10c01236 	bltu	r2,r3,8d434 <_malloc_r+0x84>
   8d3ec:	04400404 	movi	r17,16
   8d3f0:	8940142e 	bgeu	r17,r5,8d444 <_malloc_r+0x94>
   8d3f4:	00800304 	movi	r2,12
   8d3f8:	0007883a 	mov	r3,zero
   8d3fc:	90800015 	stw	r2,0(r18)
   8d400:	1805883a 	mov	r2,r3
   8d404:	dfc00917 	ldw	ra,36(sp)
   8d408:	df000817 	ldw	fp,32(sp)
   8d40c:	ddc00717 	ldw	r23,28(sp)
   8d410:	dd800617 	ldw	r22,24(sp)
   8d414:	dd400517 	ldw	r21,20(sp)
   8d418:	dd000417 	ldw	r20,16(sp)
   8d41c:	dcc00317 	ldw	r19,12(sp)
   8d420:	dc800217 	ldw	r18,8(sp)
   8d424:	dc400117 	ldw	r17,4(sp)
   8d428:	dc000017 	ldw	r16,0(sp)
   8d42c:	dec00a04 	addi	sp,sp,40
   8d430:	f800283a 	ret
   8d434:	00bffe04 	movi	r2,-8
   8d438:	18a2703a 	and	r17,r3,r2
   8d43c:	883fed16 	blt	r17,zero,8d3f4 <_malloc_r+0x44>
   8d440:	897fec36 	bltu	r17,r5,8d3f4 <_malloc_r+0x44>
   8d444:	9009883a 	mov	r4,r18
   8d448:	00913740 	call	91374 <__malloc_lock>
   8d44c:	00807dc4 	movi	r2,503
   8d450:	14402b2e 	bgeu	r2,r17,8d500 <_malloc_r+0x150>
   8d454:	8806d27a 	srli	r3,r17,9
   8d458:	18003f1e 	bne	r3,zero,8d558 <_malloc_r+0x1a8>
   8d45c:	880cd0fa 	srli	r6,r17,3
   8d460:	300490fa 	slli	r2,r6,3
   8d464:	02c002f4 	movhi	r11,11
   8d468:	5ac41104 	addi	r11,r11,4164
   8d46c:	12cb883a 	add	r5,r2,r11
   8d470:	2c000317 	ldw	r16,12(r5)
   8d474:	580f883a 	mov	r7,r11
   8d478:	2c00041e 	bne	r5,r16,8d48c <_malloc_r+0xdc>
   8d47c:	00000a06 	br	8d4a8 <_malloc_r+0xf8>
   8d480:	1800860e 	bge	r3,zero,8d69c <_malloc_r+0x2ec>
   8d484:	84000317 	ldw	r16,12(r16)
   8d488:	2c000726 	beq	r5,r16,8d4a8 <_malloc_r+0xf8>
   8d48c:	80800117 	ldw	r2,4(r16)
   8d490:	00ffff04 	movi	r3,-4
   8d494:	10c8703a 	and	r4,r2,r3
   8d498:	2447c83a 	sub	r3,r4,r17
   8d49c:	008003c4 	movi	r2,15
   8d4a0:	10fff70e 	bge	r2,r3,8d480 <_malloc_r+0xd0>
   8d4a4:	31bfffc4 	addi	r6,r6,-1
   8d4a8:	32400044 	addi	r9,r6,1
   8d4ac:	028002f4 	movhi	r10,11
   8d4b0:	52841304 	addi	r10,r10,4172
   8d4b4:	54000217 	ldw	r16,8(r10)
   8d4b8:	8280a026 	beq	r16,r10,8d73c <_malloc_r+0x38c>
   8d4bc:	80800117 	ldw	r2,4(r16)
   8d4c0:	00ffff04 	movi	r3,-4
   8d4c4:	10ca703a 	and	r5,r2,r3
   8d4c8:	2c4dc83a 	sub	r6,r5,r17
   8d4cc:	008003c4 	movi	r2,15
   8d4d0:	11808316 	blt	r2,r6,8d6e0 <_malloc_r+0x330>
   8d4d4:	52800315 	stw	r10,12(r10)
   8d4d8:	52800215 	stw	r10,8(r10)
   8d4dc:	30002916 	blt	r6,zero,8d584 <_malloc_r+0x1d4>
   8d4e0:	8147883a 	add	r3,r16,r5
   8d4e4:	18800117 	ldw	r2,4(r3)
   8d4e8:	9009883a 	mov	r4,r18
   8d4ec:	10800054 	ori	r2,r2,1
   8d4f0:	18800115 	stw	r2,4(r3)
   8d4f4:	00913940 	call	91394 <__malloc_unlock>
   8d4f8:	80c00204 	addi	r3,r16,8
   8d4fc:	003fc006 	br	8d400 <_malloc_r+0x50>
   8d500:	02c002f4 	movhi	r11,11
   8d504:	5ac41104 	addi	r11,r11,4164
   8d508:	8ac5883a 	add	r2,r17,r11
   8d50c:	14000317 	ldw	r16,12(r2)
   8d510:	580f883a 	mov	r7,r11
   8d514:	8806d0fa 	srli	r3,r17,3
   8d518:	14006c26 	beq	r2,r16,8d6cc <_malloc_r+0x31c>
   8d51c:	80c00117 	ldw	r3,4(r16)
   8d520:	00bfff04 	movi	r2,-4
   8d524:	81800317 	ldw	r6,12(r16)
   8d528:	1886703a 	and	r3,r3,r2
   8d52c:	80c7883a 	add	r3,r16,r3
   8d530:	18800117 	ldw	r2,4(r3)
   8d534:	81400217 	ldw	r5,8(r16)
   8d538:	9009883a 	mov	r4,r18
   8d53c:	10800054 	ori	r2,r2,1
   8d540:	18800115 	stw	r2,4(r3)
   8d544:	31400215 	stw	r5,8(r6)
   8d548:	29800315 	stw	r6,12(r5)
   8d54c:	00913940 	call	91394 <__malloc_unlock>
   8d550:	80c00204 	addi	r3,r16,8
   8d554:	003faa06 	br	8d400 <_malloc_r+0x50>
   8d558:	00800104 	movi	r2,4
   8d55c:	10c0052e 	bgeu	r2,r3,8d574 <_malloc_r+0x1c4>
   8d560:	00800504 	movi	r2,20
   8d564:	10c07836 	bltu	r2,r3,8d748 <_malloc_r+0x398>
   8d568:	198016c4 	addi	r6,r3,91
   8d56c:	300490fa 	slli	r2,r6,3
   8d570:	003fbc06 	br	8d464 <_malloc_r+0xb4>
   8d574:	8804d1ba 	srli	r2,r17,6
   8d578:	11800e04 	addi	r6,r2,56
   8d57c:	300490fa 	slli	r2,r6,3
   8d580:	003fb806 	br	8d464 <_malloc_r+0xb4>
   8d584:	00807fc4 	movi	r2,511
   8d588:	1140bb36 	bltu	r2,r5,8d878 <_malloc_r+0x4c8>
   8d58c:	2806d0fa 	srli	r3,r5,3
   8d590:	573ffe04 	addi	fp,r10,-8
   8d594:	00800044 	movi	r2,1
   8d598:	180890fa 	slli	r4,r3,3
   8d59c:	1807d0ba 	srai	r3,r3,2
   8d5a0:	e1c00117 	ldw	r7,4(fp)
   8d5a4:	5909883a 	add	r4,r11,r4
   8d5a8:	21400217 	ldw	r5,8(r4)
   8d5ac:	10c4983a 	sll	r2,r2,r3
   8d5b0:	81000315 	stw	r4,12(r16)
   8d5b4:	81400215 	stw	r5,8(r16)
   8d5b8:	388eb03a 	or	r7,r7,r2
   8d5bc:	2c000315 	stw	r16,12(r5)
   8d5c0:	24000215 	stw	r16,8(r4)
   8d5c4:	e1c00115 	stw	r7,4(fp)
   8d5c8:	4807883a 	mov	r3,r9
   8d5cc:	4800cd16 	blt	r9,zero,8d904 <_malloc_r+0x554>
   8d5d0:	1807d0ba 	srai	r3,r3,2
   8d5d4:	00800044 	movi	r2,1
   8d5d8:	10c8983a 	sll	r4,r2,r3
   8d5dc:	39004436 	bltu	r7,r4,8d6f0 <_malloc_r+0x340>
   8d5e0:	21c4703a 	and	r2,r4,r7
   8d5e4:	10000a1e 	bne	r2,zero,8d610 <_malloc_r+0x260>
   8d5e8:	2109883a 	add	r4,r4,r4
   8d5ec:	00bfff04 	movi	r2,-4
   8d5f0:	4884703a 	and	r2,r9,r2
   8d5f4:	3906703a 	and	r3,r7,r4
   8d5f8:	12400104 	addi	r9,r2,4
   8d5fc:	1800041e 	bne	r3,zero,8d610 <_malloc_r+0x260>
   8d600:	2109883a 	add	r4,r4,r4
   8d604:	3904703a 	and	r2,r7,r4
   8d608:	4a400104 	addi	r9,r9,4
   8d60c:	103ffc26 	beq	r2,zero,8d600 <_malloc_r+0x250>
   8d610:	480490fa 	slli	r2,r9,3
   8d614:	4819883a 	mov	r12,r9
   8d618:	023fff04 	movi	r8,-4
   8d61c:	589b883a 	add	r13,r11,r2
   8d620:	6807883a 	mov	r3,r13
   8d624:	014003c4 	movi	r5,15
   8d628:	1c000317 	ldw	r16,12(r3)
   8d62c:	1c00041e 	bne	r3,r16,8d640 <_malloc_r+0x290>
   8d630:	0000a706 	br	8d8d0 <_malloc_r+0x520>
   8d634:	3000ab0e 	bge	r6,zero,8d8e4 <_malloc_r+0x534>
   8d638:	84000317 	ldw	r16,12(r16)
   8d63c:	1c00a426 	beq	r3,r16,8d8d0 <_malloc_r+0x520>
   8d640:	80800117 	ldw	r2,4(r16)
   8d644:	1204703a 	and	r2,r2,r8
   8d648:	144dc83a 	sub	r6,r2,r17
   8d64c:	29bff90e 	bge	r5,r6,8d634 <_malloc_r+0x284>
   8d650:	81000317 	ldw	r4,12(r16)
   8d654:	80c00217 	ldw	r3,8(r16)
   8d658:	89400054 	ori	r5,r17,1
   8d65c:	8445883a 	add	r2,r16,r17
   8d660:	20c00215 	stw	r3,8(r4)
   8d664:	19000315 	stw	r4,12(r3)
   8d668:	81400115 	stw	r5,4(r16)
   8d66c:	1187883a 	add	r3,r2,r6
   8d670:	31000054 	ori	r4,r6,1
   8d674:	50800315 	stw	r2,12(r10)
   8d678:	50800215 	stw	r2,8(r10)
   8d67c:	19800015 	stw	r6,0(r3)
   8d680:	11000115 	stw	r4,4(r2)
   8d684:	12800215 	stw	r10,8(r2)
   8d688:	12800315 	stw	r10,12(r2)
   8d68c:	9009883a 	mov	r4,r18
   8d690:	00913940 	call	91394 <__malloc_unlock>
   8d694:	80c00204 	addi	r3,r16,8
   8d698:	003f5906 	br	8d400 <_malloc_r+0x50>
   8d69c:	8109883a 	add	r4,r16,r4
   8d6a0:	20800117 	ldw	r2,4(r4)
   8d6a4:	80c00217 	ldw	r3,8(r16)
   8d6a8:	81400317 	ldw	r5,12(r16)
   8d6ac:	10800054 	ori	r2,r2,1
   8d6b0:	20800115 	stw	r2,4(r4)
   8d6b4:	28c00215 	stw	r3,8(r5)
   8d6b8:	19400315 	stw	r5,12(r3)
   8d6bc:	9009883a 	mov	r4,r18
   8d6c0:	00913940 	call	91394 <__malloc_unlock>
   8d6c4:	80c00204 	addi	r3,r16,8
   8d6c8:	003f4d06 	br	8d400 <_malloc_r+0x50>
   8d6cc:	80800204 	addi	r2,r16,8
   8d6d0:	14000317 	ldw	r16,12(r2)
   8d6d4:	143f911e 	bne	r2,r16,8d51c <_malloc_r+0x16c>
   8d6d8:	1a400084 	addi	r9,r3,2
   8d6dc:	003f7306 	br	8d4ac <_malloc_r+0xfc>
   8d6e0:	88c00054 	ori	r3,r17,1
   8d6e4:	8445883a 	add	r2,r16,r17
   8d6e8:	80c00115 	stw	r3,4(r16)
   8d6ec:	003fdf06 	br	8d66c <_malloc_r+0x2bc>
   8d6f0:	e4000217 	ldw	r16,8(fp)
   8d6f4:	00bfff04 	movi	r2,-4
   8d6f8:	80c00117 	ldw	r3,4(r16)
   8d6fc:	802d883a 	mov	r22,r16
   8d700:	18aa703a 	and	r21,r3,r2
   8d704:	ac401636 	bltu	r21,r17,8d760 <_malloc_r+0x3b0>
   8d708:	ac49c83a 	sub	r4,r21,r17
   8d70c:	008003c4 	movi	r2,15
   8d710:	1100130e 	bge	r2,r4,8d760 <_malloc_r+0x3b0>
   8d714:	88800054 	ori	r2,r17,1
   8d718:	8447883a 	add	r3,r16,r17
   8d71c:	80800115 	stw	r2,4(r16)
   8d720:	20800054 	ori	r2,r4,1
   8d724:	18800115 	stw	r2,4(r3)
   8d728:	e0c00215 	stw	r3,8(fp)
   8d72c:	9009883a 	mov	r4,r18
   8d730:	00913940 	call	91394 <__malloc_unlock>
   8d734:	80c00204 	addi	r3,r16,8
   8d738:	003f3106 	br	8d400 <_malloc_r+0x50>
   8d73c:	39c00117 	ldw	r7,4(r7)
   8d740:	573ffe04 	addi	fp,r10,-8
   8d744:	003fa006 	br	8d5c8 <_malloc_r+0x218>
   8d748:	00801504 	movi	r2,84
   8d74c:	10c06736 	bltu	r2,r3,8d8ec <_malloc_r+0x53c>
   8d750:	8804d33a 	srli	r2,r17,12
   8d754:	11801b84 	addi	r6,r2,110
   8d758:	300490fa 	slli	r2,r6,3
   8d75c:	003f4106 	br	8d464 <_malloc_r+0xb4>
   8d760:	d0a02317 	ldw	r2,-32628(gp)
   8d764:	d0e00717 	ldw	r3,-32740(gp)
   8d768:	053fffc4 	movi	r20,-1
   8d76c:	10800404 	addi	r2,r2,16
   8d770:	88a7883a 	add	r19,r17,r2
   8d774:	1d000326 	beq	r3,r20,8d784 <_malloc_r+0x3d4>
   8d778:	98c3ffc4 	addi	r3,r19,4095
   8d77c:	00bc0004 	movi	r2,-4096
   8d780:	18a6703a 	and	r19,r3,r2
   8d784:	9009883a 	mov	r4,r18
   8d788:	980b883a 	mov	r5,r19
   8d78c:	008f6000 	call	8f600 <_sbrk_r>
   8d790:	1009883a 	mov	r4,r2
   8d794:	15000426 	beq	r2,r20,8d7a8 <_malloc_r+0x3f8>
   8d798:	854b883a 	add	r5,r16,r21
   8d79c:	1029883a 	mov	r20,r2
   8d7a0:	11405a2e 	bgeu	r2,r5,8d90c <_malloc_r+0x55c>
   8d7a4:	87000c26 	beq	r16,fp,8d7d8 <_malloc_r+0x428>
   8d7a8:	e4000217 	ldw	r16,8(fp)
   8d7ac:	80c00117 	ldw	r3,4(r16)
   8d7b0:	00bfff04 	movi	r2,-4
   8d7b4:	1884703a 	and	r2,r3,r2
   8d7b8:	14400336 	bltu	r2,r17,8d7c8 <_malloc_r+0x418>
   8d7bc:	1449c83a 	sub	r4,r2,r17
   8d7c0:	008003c4 	movi	r2,15
   8d7c4:	113fd316 	blt	r2,r4,8d714 <_malloc_r+0x364>
   8d7c8:	9009883a 	mov	r4,r18
   8d7cc:	00913940 	call	91394 <__malloc_unlock>
   8d7d0:	0007883a 	mov	r3,zero
   8d7d4:	003f0a06 	br	8d400 <_malloc_r+0x50>
   8d7d8:	05c002f4 	movhi	r23,11
   8d7dc:	bdca4204 	addi	r23,r23,10504
   8d7e0:	b8800017 	ldw	r2,0(r23)
   8d7e4:	988d883a 	add	r6,r19,r2
   8d7e8:	b9800015 	stw	r6,0(r23)
   8d7ec:	d0e00717 	ldw	r3,-32740(gp)
   8d7f0:	00bfffc4 	movi	r2,-1
   8d7f4:	18808e26 	beq	r3,r2,8da30 <_malloc_r+0x680>
   8d7f8:	2145c83a 	sub	r2,r4,r5
   8d7fc:	3085883a 	add	r2,r6,r2
   8d800:	b8800015 	stw	r2,0(r23)
   8d804:	20c001cc 	andi	r3,r4,7
   8d808:	18005f1e 	bne	r3,zero,8d988 <_malloc_r+0x5d8>
   8d80c:	000b883a 	mov	r5,zero
   8d810:	a4c5883a 	add	r2,r20,r19
   8d814:	1083ffcc 	andi	r2,r2,4095
   8d818:	00c40004 	movi	r3,4096
   8d81c:	1887c83a 	sub	r3,r3,r2
   8d820:	28e7883a 	add	r19,r5,r3
   8d824:	9009883a 	mov	r4,r18
   8d828:	980b883a 	mov	r5,r19
   8d82c:	008f6000 	call	8f600 <_sbrk_r>
   8d830:	1007883a 	mov	r3,r2
   8d834:	00bfffc4 	movi	r2,-1
   8d838:	18807a26 	beq	r3,r2,8da24 <_malloc_r+0x674>
   8d83c:	1d05c83a 	sub	r2,r3,r20
   8d840:	9885883a 	add	r2,r19,r2
   8d844:	10c00054 	ori	r3,r2,1
   8d848:	b8800017 	ldw	r2,0(r23)
   8d84c:	a021883a 	mov	r16,r20
   8d850:	a0c00115 	stw	r3,4(r20)
   8d854:	9885883a 	add	r2,r19,r2
   8d858:	b8800015 	stw	r2,0(r23)
   8d85c:	e5000215 	stw	r20,8(fp)
   8d860:	b7003626 	beq	r22,fp,8d93c <_malloc_r+0x58c>
   8d864:	018003c4 	movi	r6,15
   8d868:	35404b36 	bltu	r6,r21,8d998 <_malloc_r+0x5e8>
   8d86c:	00800044 	movi	r2,1
   8d870:	a0800115 	stw	r2,4(r20)
   8d874:	003fcd06 	br	8d7ac <_malloc_r+0x3fc>
   8d878:	2808d27a 	srli	r4,r5,9
   8d87c:	2000371e 	bne	r4,zero,8d95c <_malloc_r+0x5ac>
   8d880:	2808d0fa 	srli	r4,r5,3
   8d884:	200690fa 	slli	r3,r4,3
   8d888:	1ad1883a 	add	r8,r3,r11
   8d88c:	41800217 	ldw	r6,8(r8)
   8d890:	41805b26 	beq	r8,r6,8da00 <_malloc_r+0x650>
   8d894:	30800117 	ldw	r2,4(r6)
   8d898:	00ffff04 	movi	r3,-4
   8d89c:	10c4703a 	and	r2,r2,r3
   8d8a0:	2880022e 	bgeu	r5,r2,8d8ac <_malloc_r+0x4fc>
   8d8a4:	31800217 	ldw	r6,8(r6)
   8d8a8:	41bffa1e 	bne	r8,r6,8d894 <_malloc_r+0x4e4>
   8d8ac:	32000317 	ldw	r8,12(r6)
   8d8b0:	39c00117 	ldw	r7,4(r7)
   8d8b4:	82000315 	stw	r8,12(r16)
   8d8b8:	81800215 	stw	r6,8(r16)
   8d8bc:	070002f4 	movhi	fp,11
   8d8c0:	e7041104 	addi	fp,fp,4164
   8d8c4:	34000315 	stw	r16,12(r6)
   8d8c8:	44000215 	stw	r16,8(r8)
   8d8cc:	003f3e06 	br	8d5c8 <_malloc_r+0x218>
   8d8d0:	63000044 	addi	r12,r12,1
   8d8d4:	608000cc 	andi	r2,r12,3
   8d8d8:	10005d26 	beq	r2,zero,8da50 <_malloc_r+0x6a0>
   8d8dc:	18c00204 	addi	r3,r3,8
   8d8e0:	003f5106 	br	8d628 <_malloc_r+0x278>
   8d8e4:	8089883a 	add	r4,r16,r2
   8d8e8:	003f6d06 	br	8d6a0 <_malloc_r+0x2f0>
   8d8ec:	00805504 	movi	r2,340
   8d8f0:	10c02036 	bltu	r2,r3,8d974 <_malloc_r+0x5c4>
   8d8f4:	8804d3fa 	srli	r2,r17,15
   8d8f8:	11801dc4 	addi	r6,r2,119
   8d8fc:	300490fa 	slli	r2,r6,3
   8d900:	003ed806 	br	8d464 <_malloc_r+0xb4>
   8d904:	48c000c4 	addi	r3,r9,3
   8d908:	003f3106 	br	8d5d0 <_malloc_r+0x220>
   8d90c:	05c002f4 	movhi	r23,11
   8d910:	bdca4204 	addi	r23,r23,10504
   8d914:	b8800017 	ldw	r2,0(r23)
   8d918:	988d883a 	add	r6,r19,r2
   8d91c:	b9800015 	stw	r6,0(r23)
   8d920:	293fb21e 	bne	r5,r4,8d7ec <_malloc_r+0x43c>
   8d924:	2083ffcc 	andi	r2,r4,4095
   8d928:	103fb01e 	bne	r2,zero,8d7ec <_malloc_r+0x43c>
   8d92c:	e4000217 	ldw	r16,8(fp)
   8d930:	9d45883a 	add	r2,r19,r21
   8d934:	10800054 	ori	r2,r2,1
   8d938:	80800115 	stw	r2,4(r16)
   8d93c:	b8c00017 	ldw	r3,0(r23)
   8d940:	d0a02417 	ldw	r2,-32624(gp)
   8d944:	10c0012e 	bgeu	r2,r3,8d94c <_malloc_r+0x59c>
   8d948:	d0e02415 	stw	r3,-32624(gp)
   8d94c:	d0a02517 	ldw	r2,-32620(gp)
   8d950:	10ff962e 	bgeu	r2,r3,8d7ac <_malloc_r+0x3fc>
   8d954:	d0e02515 	stw	r3,-32620(gp)
   8d958:	003f9406 	br	8d7ac <_malloc_r+0x3fc>
   8d95c:	00800104 	movi	r2,4
   8d960:	11001e36 	bltu	r2,r4,8d9dc <_malloc_r+0x62c>
   8d964:	2804d1ba 	srli	r2,r5,6
   8d968:	11000e04 	addi	r4,r2,56
   8d96c:	200690fa 	slli	r3,r4,3
   8d970:	003fc506 	br	8d888 <_malloc_r+0x4d8>
   8d974:	00815504 	movi	r2,1364
   8d978:	10c01d2e 	bgeu	r2,r3,8d9f0 <_malloc_r+0x640>
   8d97c:	01801f84 	movi	r6,126
   8d980:	0080fc04 	movi	r2,1008
   8d984:	003eb706 	br	8d464 <_malloc_r+0xb4>
   8d988:	00800204 	movi	r2,8
   8d98c:	10cbc83a 	sub	r5,r2,r3
   8d990:	2169883a 	add	r20,r4,r5
   8d994:	003f9e06 	br	8d810 <_malloc_r+0x460>
   8d998:	00bffe04 	movi	r2,-8
   8d99c:	a93ffd04 	addi	r4,r21,-12
   8d9a0:	2088703a 	and	r4,r4,r2
   8d9a4:	b10b883a 	add	r5,r22,r4
   8d9a8:	00c00144 	movi	r3,5
   8d9ac:	28c00215 	stw	r3,8(r5)
   8d9b0:	28c00115 	stw	r3,4(r5)
   8d9b4:	b0800117 	ldw	r2,4(r22)
   8d9b8:	1080004c 	andi	r2,r2,1
   8d9bc:	2084b03a 	or	r2,r4,r2
   8d9c0:	b0800115 	stw	r2,4(r22)
   8d9c4:	313fdd2e 	bgeu	r6,r4,8d93c <_malloc_r+0x58c>
   8d9c8:	b1400204 	addi	r5,r22,8
   8d9cc:	9009883a 	mov	r4,r18
   8d9d0:	008c8280 	call	8c828 <_free_r>
   8d9d4:	e4000217 	ldw	r16,8(fp)
   8d9d8:	003fd806 	br	8d93c <_malloc_r+0x58c>
   8d9dc:	00800504 	movi	r2,20
   8d9e0:	11001536 	bltu	r2,r4,8da38 <_malloc_r+0x688>
   8d9e4:	210016c4 	addi	r4,r4,91
   8d9e8:	200690fa 	slli	r3,r4,3
   8d9ec:	003fa606 	br	8d888 <_malloc_r+0x4d8>
   8d9f0:	8804d4ba 	srli	r2,r17,18
   8d9f4:	11801f04 	addi	r6,r2,124
   8d9f8:	300490fa 	slli	r2,r6,3
   8d9fc:	003e9906 	br	8d464 <_malloc_r+0xb4>
   8da00:	2009d0ba 	srai	r4,r4,2
   8da04:	014002f4 	movhi	r5,11
   8da08:	29441104 	addi	r5,r5,4164
   8da0c:	00c00044 	movi	r3,1
   8da10:	28800117 	ldw	r2,4(r5)
   8da14:	1906983a 	sll	r3,r3,r4
   8da18:	10c4b03a 	or	r2,r2,r3
   8da1c:	28800115 	stw	r2,4(r5)
   8da20:	003fa306 	br	8d8b0 <_malloc_r+0x500>
   8da24:	0027883a 	mov	r19,zero
   8da28:	00c00044 	movi	r3,1
   8da2c:	003f8606 	br	8d848 <_malloc_r+0x498>
   8da30:	d1200715 	stw	r4,-32740(gp)
   8da34:	003f7306 	br	8d804 <_malloc_r+0x454>
   8da38:	00801504 	movi	r2,84
   8da3c:	11001936 	bltu	r2,r4,8daa4 <_malloc_r+0x6f4>
   8da40:	2804d33a 	srli	r2,r5,12
   8da44:	11001b84 	addi	r4,r2,110
   8da48:	200690fa 	slli	r3,r4,3
   8da4c:	003f8e06 	br	8d888 <_malloc_r+0x4d8>
   8da50:	480b883a 	mov	r5,r9
   8da54:	6807883a 	mov	r3,r13
   8da58:	288000cc 	andi	r2,r5,3
   8da5c:	18fffe04 	addi	r3,r3,-8
   8da60:	297fffc4 	addi	r5,r5,-1
   8da64:	10001526 	beq	r2,zero,8dabc <_malloc_r+0x70c>
   8da68:	18800217 	ldw	r2,8(r3)
   8da6c:	10fffa26 	beq	r2,r3,8da58 <_malloc_r+0x6a8>
   8da70:	2109883a 	add	r4,r4,r4
   8da74:	393f1e36 	bltu	r7,r4,8d6f0 <_malloc_r+0x340>
   8da78:	203f1d26 	beq	r4,zero,8d6f0 <_malloc_r+0x340>
   8da7c:	21c4703a 	and	r2,r4,r7
   8da80:	10000226 	beq	r2,zero,8da8c <_malloc_r+0x6dc>
   8da84:	6013883a 	mov	r9,r12
   8da88:	003ee106 	br	8d610 <_malloc_r+0x260>
   8da8c:	2109883a 	add	r4,r4,r4
   8da90:	3904703a 	and	r2,r7,r4
   8da94:	63000104 	addi	r12,r12,4
   8da98:	103ffc26 	beq	r2,zero,8da8c <_malloc_r+0x6dc>
   8da9c:	6013883a 	mov	r9,r12
   8daa0:	003edb06 	br	8d610 <_malloc_r+0x260>
   8daa4:	00805504 	movi	r2,340
   8daa8:	11000836 	bltu	r2,r4,8dacc <_malloc_r+0x71c>
   8daac:	2804d3fa 	srli	r2,r5,15
   8dab0:	11001dc4 	addi	r4,r2,119
   8dab4:	200690fa 	slli	r3,r4,3
   8dab8:	003f7306 	br	8d888 <_malloc_r+0x4d8>
   8dabc:	0104303a 	nor	r2,zero,r4
   8dac0:	388e703a 	and	r7,r7,r2
   8dac4:	e1c00115 	stw	r7,4(fp)
   8dac8:	003fe906 	br	8da70 <_malloc_r+0x6c0>
   8dacc:	00815504 	movi	r2,1364
   8dad0:	1100032e 	bgeu	r2,r4,8dae0 <_malloc_r+0x730>
   8dad4:	01001f84 	movi	r4,126
   8dad8:	00c0fc04 	movi	r3,1008
   8dadc:	003f6a06 	br	8d888 <_malloc_r+0x4d8>
   8dae0:	2804d4ba 	srli	r2,r5,18
   8dae4:	11001f04 	addi	r4,r2,124
   8dae8:	200690fa 	slli	r3,r4,3
   8daec:	003f6606 	br	8d888 <_malloc_r+0x4d8>

0008daf0 <memchr>:
   8daf0:	008000c4 	movi	r2,3
   8daf4:	29403fcc 	andi	r5,r5,255
   8daf8:	2007883a 	mov	r3,r4
   8dafc:	1180022e 	bgeu	r2,r6,8db08 <memchr+0x18>
   8db00:	2084703a 	and	r2,r4,r2
   8db04:	10000b26 	beq	r2,zero,8db34 <memchr+0x44>
   8db08:	313fffc4 	addi	r4,r6,-1
   8db0c:	3000051e 	bne	r6,zero,8db24 <memchr+0x34>
   8db10:	00002c06 	br	8dbc4 <memchr+0xd4>
   8db14:	213fffc4 	addi	r4,r4,-1
   8db18:	00bfffc4 	movi	r2,-1
   8db1c:	18c00044 	addi	r3,r3,1
   8db20:	20802826 	beq	r4,r2,8dbc4 <memchr+0xd4>
   8db24:	18800003 	ldbu	r2,0(r3)
   8db28:	28bffa1e 	bne	r5,r2,8db14 <memchr+0x24>
   8db2c:	1805883a 	mov	r2,r3
   8db30:	f800283a 	ret
   8db34:	0011883a 	mov	r8,zero
   8db38:	0007883a 	mov	r3,zero
   8db3c:	01c00104 	movi	r7,4
   8db40:	4004923a 	slli	r2,r8,8
   8db44:	18c00044 	addi	r3,r3,1
   8db48:	1151883a 	add	r8,r2,r5
   8db4c:	19fffc1e 	bne	r3,r7,8db40 <memchr+0x50>
   8db50:	02bfbff4 	movhi	r10,65279
   8db54:	52bfbfc4 	addi	r10,r10,-257
   8db58:	02602074 	movhi	r9,32897
   8db5c:	4a602004 	addi	r9,r9,-32640
   8db60:	02c000c4 	movi	r11,3
   8db64:	20800017 	ldw	r2,0(r4)
   8db68:	31bfff04 	addi	r6,r6,-4
   8db6c:	200f883a 	mov	r7,r4
   8db70:	1204f03a 	xor	r2,r2,r8
   8db74:	1287883a 	add	r3,r2,r10
   8db78:	1a46703a 	and	r3,r3,r9
   8db7c:	0084303a 	nor	r2,zero,r2
   8db80:	10c4703a 	and	r2,r2,r3
   8db84:	10000b26 	beq	r2,zero,8dbb4 <memchr+0xc4>
   8db88:	20800003 	ldbu	r2,0(r4)
   8db8c:	28800f26 	beq	r5,r2,8dbcc <memchr+0xdc>
   8db90:	20800043 	ldbu	r2,1(r4)
   8db94:	21c00044 	addi	r7,r4,1
   8db98:	28800c26 	beq	r5,r2,8dbcc <memchr+0xdc>
   8db9c:	20800083 	ldbu	r2,2(r4)
   8dba0:	21c00084 	addi	r7,r4,2
   8dba4:	28800926 	beq	r5,r2,8dbcc <memchr+0xdc>
   8dba8:	208000c3 	ldbu	r2,3(r4)
   8dbac:	21c000c4 	addi	r7,r4,3
   8dbb0:	28800626 	beq	r5,r2,8dbcc <memchr+0xdc>
   8dbb4:	21000104 	addi	r4,r4,4
   8dbb8:	59bfea36 	bltu	r11,r6,8db64 <memchr+0x74>
   8dbbc:	2007883a 	mov	r3,r4
   8dbc0:	003fd106 	br	8db08 <memchr+0x18>
   8dbc4:	0005883a 	mov	r2,zero
   8dbc8:	f800283a 	ret
   8dbcc:	3805883a 	mov	r2,r7
   8dbd0:	f800283a 	ret

0008dbd4 <memcpy>:
   8dbd4:	01c003c4 	movi	r7,15
   8dbd8:	2007883a 	mov	r3,r4
   8dbdc:	3980032e 	bgeu	r7,r6,8dbec <memcpy+0x18>
   8dbe0:	2904b03a 	or	r2,r5,r4
   8dbe4:	108000cc 	andi	r2,r2,3
   8dbe8:	10000926 	beq	r2,zero,8dc10 <memcpy+0x3c>
   8dbec:	30000626 	beq	r6,zero,8dc08 <memcpy+0x34>
   8dbf0:	30cd883a 	add	r6,r6,r3
   8dbf4:	28800003 	ldbu	r2,0(r5)
   8dbf8:	29400044 	addi	r5,r5,1
   8dbfc:	18800005 	stb	r2,0(r3)
   8dc00:	18c00044 	addi	r3,r3,1
   8dc04:	30fffb1e 	bne	r6,r3,8dbf4 <memcpy+0x20>
   8dc08:	2005883a 	mov	r2,r4
   8dc0c:	f800283a 	ret
   8dc10:	3811883a 	mov	r8,r7
   8dc14:	200f883a 	mov	r7,r4
   8dc18:	28c00017 	ldw	r3,0(r5)
   8dc1c:	31bffc04 	addi	r6,r6,-16
   8dc20:	38c00015 	stw	r3,0(r7)
   8dc24:	28800117 	ldw	r2,4(r5)
   8dc28:	38800115 	stw	r2,4(r7)
   8dc2c:	28c00217 	ldw	r3,8(r5)
   8dc30:	38c00215 	stw	r3,8(r7)
   8dc34:	28800317 	ldw	r2,12(r5)
   8dc38:	29400404 	addi	r5,r5,16
   8dc3c:	38800315 	stw	r2,12(r7)
   8dc40:	39c00404 	addi	r7,r7,16
   8dc44:	41bff436 	bltu	r8,r6,8dc18 <memcpy+0x44>
   8dc48:	008000c4 	movi	r2,3
   8dc4c:	1180072e 	bgeu	r2,r6,8dc6c <memcpy+0x98>
   8dc50:	1007883a 	mov	r3,r2
   8dc54:	28800017 	ldw	r2,0(r5)
   8dc58:	31bfff04 	addi	r6,r6,-4
   8dc5c:	29400104 	addi	r5,r5,4
   8dc60:	38800015 	stw	r2,0(r7)
   8dc64:	39c00104 	addi	r7,r7,4
   8dc68:	19bffa36 	bltu	r3,r6,8dc54 <memcpy+0x80>
   8dc6c:	3807883a 	mov	r3,r7
   8dc70:	003fde06 	br	8dbec <memcpy+0x18>

0008dc74 <memmove>:
   8dc74:	2807883a 	mov	r3,r5
   8dc78:	2011883a 	mov	r8,r4
   8dc7c:	29000c2e 	bgeu	r5,r4,8dcb0 <memmove+0x3c>
   8dc80:	298f883a 	add	r7,r5,r6
   8dc84:	21c00a2e 	bgeu	r4,r7,8dcb0 <memmove+0x3c>
   8dc88:	30000726 	beq	r6,zero,8dca8 <memmove+0x34>
   8dc8c:	2187883a 	add	r3,r4,r6
   8dc90:	198dc83a 	sub	r6,r3,r6
   8dc94:	39ffffc4 	addi	r7,r7,-1
   8dc98:	38800003 	ldbu	r2,0(r7)
   8dc9c:	18ffffc4 	addi	r3,r3,-1
   8dca0:	18800005 	stb	r2,0(r3)
   8dca4:	19bffb1e 	bne	r3,r6,8dc94 <memmove+0x20>
   8dca8:	2005883a 	mov	r2,r4
   8dcac:	f800283a 	ret
   8dcb0:	01c003c4 	movi	r7,15
   8dcb4:	39800a36 	bltu	r7,r6,8dce0 <memmove+0x6c>
   8dcb8:	303ffb26 	beq	r6,zero,8dca8 <memmove+0x34>
   8dcbc:	400f883a 	mov	r7,r8
   8dcc0:	320d883a 	add	r6,r6,r8
   8dcc4:	28800003 	ldbu	r2,0(r5)
   8dcc8:	29400044 	addi	r5,r5,1
   8dccc:	38800005 	stb	r2,0(r7)
   8dcd0:	39c00044 	addi	r7,r7,1
   8dcd4:	39bffb1e 	bne	r7,r6,8dcc4 <memmove+0x50>
   8dcd8:	2005883a 	mov	r2,r4
   8dcdc:	f800283a 	ret
   8dce0:	1904b03a 	or	r2,r3,r4
   8dce4:	108000cc 	andi	r2,r2,3
   8dce8:	103ff31e 	bne	r2,zero,8dcb8 <memmove+0x44>
   8dcec:	3811883a 	mov	r8,r7
   8dcf0:	180b883a 	mov	r5,r3
   8dcf4:	200f883a 	mov	r7,r4
   8dcf8:	28c00017 	ldw	r3,0(r5)
   8dcfc:	31bffc04 	addi	r6,r6,-16
   8dd00:	38c00015 	stw	r3,0(r7)
   8dd04:	28800117 	ldw	r2,4(r5)
   8dd08:	38800115 	stw	r2,4(r7)
   8dd0c:	28c00217 	ldw	r3,8(r5)
   8dd10:	38c00215 	stw	r3,8(r7)
   8dd14:	28800317 	ldw	r2,12(r5)
   8dd18:	29400404 	addi	r5,r5,16
   8dd1c:	38800315 	stw	r2,12(r7)
   8dd20:	39c00404 	addi	r7,r7,16
   8dd24:	41bff436 	bltu	r8,r6,8dcf8 <memmove+0x84>
   8dd28:	008000c4 	movi	r2,3
   8dd2c:	1180072e 	bgeu	r2,r6,8dd4c <memmove+0xd8>
   8dd30:	1007883a 	mov	r3,r2
   8dd34:	28800017 	ldw	r2,0(r5)
   8dd38:	31bfff04 	addi	r6,r6,-4
   8dd3c:	29400104 	addi	r5,r5,4
   8dd40:	38800015 	stw	r2,0(r7)
   8dd44:	39c00104 	addi	r7,r7,4
   8dd48:	19bffa36 	bltu	r3,r6,8dd34 <memmove+0xc0>
   8dd4c:	3811883a 	mov	r8,r7
   8dd50:	003fd906 	br	8dcb8 <memmove+0x44>

0008dd54 <memset>:
   8dd54:	008000c4 	movi	r2,3
   8dd58:	29403fcc 	andi	r5,r5,255
   8dd5c:	2007883a 	mov	r3,r4
   8dd60:	1180022e 	bgeu	r2,r6,8dd6c <memset+0x18>
   8dd64:	2084703a 	and	r2,r4,r2
   8dd68:	10000826 	beq	r2,zero,8dd8c <memset+0x38>
   8dd6c:	30000526 	beq	r6,zero,8dd84 <memset+0x30>
   8dd70:	2805883a 	mov	r2,r5
   8dd74:	30cd883a 	add	r6,r6,r3
   8dd78:	18800005 	stb	r2,0(r3)
   8dd7c:	18c00044 	addi	r3,r3,1
   8dd80:	19bffd1e 	bne	r3,r6,8dd78 <memset+0x24>
   8dd84:	2005883a 	mov	r2,r4
   8dd88:	f800283a 	ret
   8dd8c:	2804923a 	slli	r2,r5,8
   8dd90:	020003c4 	movi	r8,15
   8dd94:	200f883a 	mov	r7,r4
   8dd98:	2884b03a 	or	r2,r5,r2
   8dd9c:	1006943a 	slli	r3,r2,16
   8dda0:	10c6b03a 	or	r3,r2,r3
   8dda4:	41800a2e 	bgeu	r8,r6,8ddd0 <memset+0x7c>
   8dda8:	4005883a 	mov	r2,r8
   8ddac:	31bffc04 	addi	r6,r6,-16
   8ddb0:	38c00015 	stw	r3,0(r7)
   8ddb4:	38c00115 	stw	r3,4(r7)
   8ddb8:	38c00215 	stw	r3,8(r7)
   8ddbc:	38c00315 	stw	r3,12(r7)
   8ddc0:	39c00404 	addi	r7,r7,16
   8ddc4:	11bff936 	bltu	r2,r6,8ddac <memset+0x58>
   8ddc8:	008000c4 	movi	r2,3
   8ddcc:	1180052e 	bgeu	r2,r6,8dde4 <memset+0x90>
   8ddd0:	31bfff04 	addi	r6,r6,-4
   8ddd4:	008000c4 	movi	r2,3
   8ddd8:	38c00015 	stw	r3,0(r7)
   8dddc:	39c00104 	addi	r7,r7,4
   8dde0:	11bffb36 	bltu	r2,r6,8ddd0 <memset+0x7c>
   8dde4:	3807883a 	mov	r3,r7
   8dde8:	003fe006 	br	8dd6c <memset+0x18>

0008ddec <_Bfree>:
   8ddec:	28000826 	beq	r5,zero,8de10 <_Bfree+0x24>
   8ddf0:	28800117 	ldw	r2,4(r5)
   8ddf4:	21001317 	ldw	r4,76(r4)
   8ddf8:	1085883a 	add	r2,r2,r2
   8ddfc:	1085883a 	add	r2,r2,r2
   8de00:	1105883a 	add	r2,r2,r4
   8de04:	10c00017 	ldw	r3,0(r2)
   8de08:	28c00015 	stw	r3,0(r5)
   8de0c:	11400015 	stw	r5,0(r2)
   8de10:	f800283a 	ret

0008de14 <__hi0bits>:
   8de14:	20bfffec 	andhi	r2,r4,65535
   8de18:	10001426 	beq	r2,zero,8de6c <__hi0bits+0x58>
   8de1c:	0007883a 	mov	r3,zero
   8de20:	20bfc02c 	andhi	r2,r4,65280
   8de24:	1000021e 	bne	r2,zero,8de30 <__hi0bits+0x1c>
   8de28:	2008923a 	slli	r4,r4,8
   8de2c:	18c00204 	addi	r3,r3,8
   8de30:	20bc002c 	andhi	r2,r4,61440
   8de34:	1000021e 	bne	r2,zero,8de40 <__hi0bits+0x2c>
   8de38:	2008913a 	slli	r4,r4,4
   8de3c:	18c00104 	addi	r3,r3,4
   8de40:	20b0002c 	andhi	r2,r4,49152
   8de44:	1000031e 	bne	r2,zero,8de54 <__hi0bits+0x40>
   8de48:	2105883a 	add	r2,r4,r4
   8de4c:	18c00084 	addi	r3,r3,2
   8de50:	1089883a 	add	r4,r2,r2
   8de54:	20000316 	blt	r4,zero,8de64 <__hi0bits+0x50>
   8de58:	2090002c 	andhi	r2,r4,16384
   8de5c:	10000626 	beq	r2,zero,8de78 <__hi0bits+0x64>
   8de60:	18c00044 	addi	r3,r3,1
   8de64:	1805883a 	mov	r2,r3
   8de68:	f800283a 	ret
   8de6c:	2008943a 	slli	r4,r4,16
   8de70:	00c00404 	movi	r3,16
   8de74:	003fea06 	br	8de20 <__hi0bits+0xc>
   8de78:	00c00804 	movi	r3,32
   8de7c:	1805883a 	mov	r2,r3
   8de80:	f800283a 	ret

0008de84 <__lo0bits>:
   8de84:	20c00017 	ldw	r3,0(r4)
   8de88:	188001cc 	andi	r2,r3,7
   8de8c:	10000a26 	beq	r2,zero,8deb8 <__lo0bits+0x34>
   8de90:	1880004c 	andi	r2,r3,1
   8de94:	1005003a 	cmpeq	r2,r2,zero
   8de98:	10002126 	beq	r2,zero,8df20 <__lo0bits+0x9c>
   8de9c:	1880008c 	andi	r2,r3,2
   8dea0:	1000251e 	bne	r2,zero,8df38 <__lo0bits+0xb4>
   8dea4:	1804d0ba 	srli	r2,r3,2
   8dea8:	01400084 	movi	r5,2
   8deac:	20800015 	stw	r2,0(r4)
   8deb0:	2805883a 	mov	r2,r5
   8deb4:	f800283a 	ret
   8deb8:	18bfffcc 	andi	r2,r3,65535
   8debc:	10001526 	beq	r2,zero,8df14 <__lo0bits+0x90>
   8dec0:	000b883a 	mov	r5,zero
   8dec4:	18803fcc 	andi	r2,r3,255
   8dec8:	1000021e 	bne	r2,zero,8ded4 <__lo0bits+0x50>
   8decc:	1806d23a 	srli	r3,r3,8
   8ded0:	29400204 	addi	r5,r5,8
   8ded4:	188003cc 	andi	r2,r3,15
   8ded8:	1000021e 	bne	r2,zero,8dee4 <__lo0bits+0x60>
   8dedc:	1806d13a 	srli	r3,r3,4
   8dee0:	29400104 	addi	r5,r5,4
   8dee4:	188000cc 	andi	r2,r3,3
   8dee8:	1000021e 	bne	r2,zero,8def4 <__lo0bits+0x70>
   8deec:	1806d0ba 	srli	r3,r3,2
   8def0:	29400084 	addi	r5,r5,2
   8def4:	1880004c 	andi	r2,r3,1
   8def8:	1000031e 	bne	r2,zero,8df08 <__lo0bits+0x84>
   8defc:	1806d07a 	srli	r3,r3,1
   8df00:	18000a26 	beq	r3,zero,8df2c <__lo0bits+0xa8>
   8df04:	29400044 	addi	r5,r5,1
   8df08:	2805883a 	mov	r2,r5
   8df0c:	20c00015 	stw	r3,0(r4)
   8df10:	f800283a 	ret
   8df14:	1806d43a 	srli	r3,r3,16
   8df18:	01400404 	movi	r5,16
   8df1c:	003fe906 	br	8dec4 <__lo0bits+0x40>
   8df20:	000b883a 	mov	r5,zero
   8df24:	2805883a 	mov	r2,r5
   8df28:	f800283a 	ret
   8df2c:	01400804 	movi	r5,32
   8df30:	2805883a 	mov	r2,r5
   8df34:	f800283a 	ret
   8df38:	1804d07a 	srli	r2,r3,1
   8df3c:	01400044 	movi	r5,1
   8df40:	20800015 	stw	r2,0(r4)
   8df44:	003fda06 	br	8deb0 <__lo0bits+0x2c>

0008df48 <__mcmp>:
   8df48:	20800417 	ldw	r2,16(r4)
   8df4c:	28c00417 	ldw	r3,16(r5)
   8df50:	10cfc83a 	sub	r7,r2,r3
   8df54:	38000c1e 	bne	r7,zero,8df88 <__mcmp+0x40>
   8df58:	18c5883a 	add	r2,r3,r3
   8df5c:	1085883a 	add	r2,r2,r2
   8df60:	10c00504 	addi	r3,r2,20
   8df64:	21000504 	addi	r4,r4,20
   8df68:	28cb883a 	add	r5,r5,r3
   8df6c:	2085883a 	add	r2,r4,r2
   8df70:	10bfff04 	addi	r2,r2,-4
   8df74:	297fff04 	addi	r5,r5,-4
   8df78:	11800017 	ldw	r6,0(r2)
   8df7c:	28c00017 	ldw	r3,0(r5)
   8df80:	30c0031e 	bne	r6,r3,8df90 <__mcmp+0x48>
   8df84:	20bffa36 	bltu	r4,r2,8df70 <__mcmp+0x28>
   8df88:	3805883a 	mov	r2,r7
   8df8c:	f800283a 	ret
   8df90:	30c00336 	bltu	r6,r3,8dfa0 <__mcmp+0x58>
   8df94:	01c00044 	movi	r7,1
   8df98:	3805883a 	mov	r2,r7
   8df9c:	f800283a 	ret
   8dfa0:	01ffffc4 	movi	r7,-1
   8dfa4:	003ff806 	br	8df88 <__mcmp+0x40>

0008dfa8 <__ulp>:
   8dfa8:	295ffc2c 	andhi	r5,r5,32752
   8dfac:	013f3034 	movhi	r4,64704
   8dfb0:	290b883a 	add	r5,r5,r4
   8dfb4:	0145c83a 	sub	r2,zero,r5
   8dfb8:	1007d53a 	srai	r3,r2,20
   8dfbc:	000d883a 	mov	r6,zero
   8dfc0:	0140040e 	bge	zero,r5,8dfd4 <__ulp+0x2c>
   8dfc4:	280f883a 	mov	r7,r5
   8dfc8:	3807883a 	mov	r3,r7
   8dfcc:	3005883a 	mov	r2,r6
   8dfd0:	f800283a 	ret
   8dfd4:	008004c4 	movi	r2,19
   8dfd8:	193ffb04 	addi	r4,r3,-20
   8dfdc:	10c00c0e 	bge	r2,r3,8e010 <__ulp+0x68>
   8dfe0:	008007c4 	movi	r2,31
   8dfe4:	1107c83a 	sub	r3,r2,r4
   8dfe8:	00800784 	movi	r2,30
   8dfec:	01400044 	movi	r5,1
   8dff0:	11000216 	blt	r2,r4,8dffc <__ulp+0x54>
   8dff4:	00800044 	movi	r2,1
   8dff8:	10ca983a 	sll	r5,r2,r3
   8dffc:	000f883a 	mov	r7,zero
   8e000:	280d883a 	mov	r6,r5
   8e004:	3807883a 	mov	r3,r7
   8e008:	3005883a 	mov	r2,r6
   8e00c:	f800283a 	ret
   8e010:	00800234 	movhi	r2,8
   8e014:	10cfd83a 	sra	r7,r2,r3
   8e018:	000d883a 	mov	r6,zero
   8e01c:	3005883a 	mov	r2,r6
   8e020:	3807883a 	mov	r3,r7
   8e024:	f800283a 	ret

0008e028 <__b2d>:
   8e028:	20800417 	ldw	r2,16(r4)
   8e02c:	defff904 	addi	sp,sp,-28
   8e030:	dd000415 	stw	r20,16(sp)
   8e034:	1085883a 	add	r2,r2,r2
   8e038:	25000504 	addi	r20,r4,20
   8e03c:	1085883a 	add	r2,r2,r2
   8e040:	dc000015 	stw	r16,0(sp)
   8e044:	a0a1883a 	add	r16,r20,r2
   8e048:	dd400515 	stw	r21,20(sp)
   8e04c:	857fff17 	ldw	r21,-4(r16)
   8e050:	dc400115 	stw	r17,4(sp)
   8e054:	dfc00615 	stw	ra,24(sp)
   8e058:	a809883a 	mov	r4,r21
   8e05c:	2823883a 	mov	r17,r5
   8e060:	dcc00315 	stw	r19,12(sp)
   8e064:	dc800215 	stw	r18,8(sp)
   8e068:	008de140 	call	8de14 <__hi0bits>
   8e06c:	100b883a 	mov	r5,r2
   8e070:	00800804 	movi	r2,32
   8e074:	1145c83a 	sub	r2,r2,r5
   8e078:	88800015 	stw	r2,0(r17)
   8e07c:	00800284 	movi	r2,10
   8e080:	80ffff04 	addi	r3,r16,-4
   8e084:	11401416 	blt	r2,r5,8e0d8 <__b2d+0xb0>
   8e088:	008002c4 	movi	r2,11
   8e08c:	1149c83a 	sub	r4,r2,r5
   8e090:	a0c02736 	bltu	r20,r3,8e130 <__b2d+0x108>
   8e094:	000d883a 	mov	r6,zero
   8e098:	28800544 	addi	r2,r5,21
   8e09c:	a906d83a 	srl	r3,r21,r4
   8e0a0:	a884983a 	sll	r2,r21,r2
   8e0a4:	1ccffc34 	orhi	r19,r3,16368
   8e0a8:	11a4b03a 	or	r18,r2,r6
   8e0ac:	9005883a 	mov	r2,r18
   8e0b0:	9807883a 	mov	r3,r19
   8e0b4:	dfc00617 	ldw	ra,24(sp)
   8e0b8:	dd400517 	ldw	r21,20(sp)
   8e0bc:	dd000417 	ldw	r20,16(sp)
   8e0c0:	dcc00317 	ldw	r19,12(sp)
   8e0c4:	dc800217 	ldw	r18,8(sp)
   8e0c8:	dc400117 	ldw	r17,4(sp)
   8e0cc:	dc000017 	ldw	r16,0(sp)
   8e0d0:	dec00704 	addi	sp,sp,28
   8e0d4:	f800283a 	ret
   8e0d8:	a0c00e36 	bltu	r20,r3,8e114 <__b2d+0xec>
   8e0dc:	293ffd44 	addi	r4,r5,-11
   8e0e0:	000d883a 	mov	r6,zero
   8e0e4:	20000f26 	beq	r4,zero,8e124 <__b2d+0xfc>
   8e0e8:	00800804 	movi	r2,32
   8e0ec:	110bc83a 	sub	r5,r2,r4
   8e0f0:	a0c01236 	bltu	r20,r3,8e13c <__b2d+0x114>
   8e0f4:	000f883a 	mov	r7,zero
   8e0f8:	a904983a 	sll	r2,r21,r4
   8e0fc:	3146d83a 	srl	r3,r6,r5
   8e100:	3108983a 	sll	r4,r6,r4
   8e104:	108ffc34 	orhi	r2,r2,16368
   8e108:	18a6b03a 	or	r19,r3,r2
   8e10c:	3924b03a 	or	r18,r7,r4
   8e110:	003fe606 	br	8e0ac <__b2d+0x84>
   8e114:	293ffd44 	addi	r4,r5,-11
   8e118:	81bffe17 	ldw	r6,-8(r16)
   8e11c:	80fffe04 	addi	r3,r16,-8
   8e120:	203ff11e 	bne	r4,zero,8e0e8 <__b2d+0xc0>
   8e124:	accffc34 	orhi	r19,r21,16368
   8e128:	3025883a 	mov	r18,r6
   8e12c:	003fdf06 	br	8e0ac <__b2d+0x84>
   8e130:	18bfff17 	ldw	r2,-4(r3)
   8e134:	110cd83a 	srl	r6,r2,r4
   8e138:	003fd706 	br	8e098 <__b2d+0x70>
   8e13c:	18bfff17 	ldw	r2,-4(r3)
   8e140:	114ed83a 	srl	r7,r2,r5
   8e144:	003fec06 	br	8e0f8 <__b2d+0xd0>

0008e148 <__ratio>:
   8e148:	defff904 	addi	sp,sp,-28
   8e14c:	dc400215 	stw	r17,8(sp)
   8e150:	2823883a 	mov	r17,r5
   8e154:	d80b883a 	mov	r5,sp
   8e158:	dfc00615 	stw	ra,24(sp)
   8e15c:	dd000515 	stw	r20,20(sp)
   8e160:	dcc00415 	stw	r19,16(sp)
   8e164:	dc800315 	stw	r18,12(sp)
   8e168:	2025883a 	mov	r18,r4
   8e16c:	008e0280 	call	8e028 <__b2d>
   8e170:	8809883a 	mov	r4,r17
   8e174:	d9400104 	addi	r5,sp,4
   8e178:	1027883a 	mov	r19,r2
   8e17c:	1829883a 	mov	r20,r3
   8e180:	008e0280 	call	8e028 <__b2d>
   8e184:	89000417 	ldw	r4,16(r17)
   8e188:	91c00417 	ldw	r7,16(r18)
   8e18c:	d9800117 	ldw	r6,4(sp)
   8e190:	180b883a 	mov	r5,r3
   8e194:	390fc83a 	sub	r7,r7,r4
   8e198:	1009883a 	mov	r4,r2
   8e19c:	d8800017 	ldw	r2,0(sp)
   8e1a0:	380e917a 	slli	r7,r7,5
   8e1a4:	2011883a 	mov	r8,r4
   8e1a8:	1185c83a 	sub	r2,r2,r6
   8e1ac:	11c5883a 	add	r2,r2,r7
   8e1b0:	1006953a 	slli	r3,r2,20
   8e1b4:	2813883a 	mov	r9,r5
   8e1b8:	00800d0e 	bge	zero,r2,8e1f0 <__ratio+0xa8>
   8e1bc:	1d29883a 	add	r20,r3,r20
   8e1c0:	a00b883a 	mov	r5,r20
   8e1c4:	480f883a 	mov	r7,r9
   8e1c8:	9809883a 	mov	r4,r19
   8e1cc:	400d883a 	mov	r6,r8
   8e1d0:	00875480 	call	87548 <__divdf3>
   8e1d4:	dfc00617 	ldw	ra,24(sp)
   8e1d8:	dd000517 	ldw	r20,20(sp)
   8e1dc:	dcc00417 	ldw	r19,16(sp)
   8e1e0:	dc800317 	ldw	r18,12(sp)
   8e1e4:	dc400217 	ldw	r17,8(sp)
   8e1e8:	dec00704 	addi	sp,sp,28
   8e1ec:	f800283a 	ret
   8e1f0:	28d3c83a 	sub	r9,r5,r3
   8e1f4:	003ff206 	br	8e1c0 <__ratio+0x78>

0008e1f8 <_mprec_log10>:
   8e1f8:	defffe04 	addi	sp,sp,-8
   8e1fc:	008005c4 	movi	r2,23
   8e200:	dc000015 	stw	r16,0(sp)
   8e204:	dfc00115 	stw	ra,4(sp)
   8e208:	2021883a 	mov	r16,r4
   8e20c:	11000c16 	blt	r2,r4,8e240 <_mprec_log10+0x48>
   8e210:	200490fa 	slli	r2,r4,3
   8e214:	00c00274 	movhi	r3,9
   8e218:	18cefc04 	addi	r3,r3,15344
   8e21c:	10c5883a 	add	r2,r2,r3
   8e220:	12400117 	ldw	r9,4(r2)
   8e224:	12000017 	ldw	r8,0(r2)
   8e228:	4807883a 	mov	r3,r9
   8e22c:	4005883a 	mov	r2,r8
   8e230:	dfc00117 	ldw	ra,4(sp)
   8e234:	dc000017 	ldw	r16,0(sp)
   8e238:	dec00204 	addi	sp,sp,8
   8e23c:	f800283a 	ret
   8e240:	0011883a 	mov	r8,zero
   8e244:	024ffc34 	movhi	r9,16368
   8e248:	0005883a 	mov	r2,zero
   8e24c:	00d00934 	movhi	r3,16420
   8e250:	480b883a 	mov	r5,r9
   8e254:	4009883a 	mov	r4,r8
   8e258:	180f883a 	mov	r7,r3
   8e25c:	100d883a 	mov	r6,r2
   8e260:	00871840 	call	87184 <__muldf3>
   8e264:	843fffc4 	addi	r16,r16,-1
   8e268:	1011883a 	mov	r8,r2
   8e26c:	1813883a 	mov	r9,r3
   8e270:	803ff51e 	bne	r16,zero,8e248 <_mprec_log10+0x50>
   8e274:	4005883a 	mov	r2,r8
   8e278:	4807883a 	mov	r3,r9
   8e27c:	dfc00117 	ldw	ra,4(sp)
   8e280:	dc000017 	ldw	r16,0(sp)
   8e284:	dec00204 	addi	sp,sp,8
   8e288:	f800283a 	ret

0008e28c <__copybits>:
   8e28c:	297fffc4 	addi	r5,r5,-1
   8e290:	30800417 	ldw	r2,16(r6)
   8e294:	280bd17a 	srai	r5,r5,5
   8e298:	31800504 	addi	r6,r6,20
   8e29c:	1085883a 	add	r2,r2,r2
   8e2a0:	294b883a 	add	r5,r5,r5
   8e2a4:	294b883a 	add	r5,r5,r5
   8e2a8:	1085883a 	add	r2,r2,r2
   8e2ac:	290b883a 	add	r5,r5,r4
   8e2b0:	3087883a 	add	r3,r6,r2
   8e2b4:	29400104 	addi	r5,r5,4
   8e2b8:	30c0052e 	bgeu	r6,r3,8e2d0 <__copybits+0x44>
   8e2bc:	30800017 	ldw	r2,0(r6)
   8e2c0:	31800104 	addi	r6,r6,4
   8e2c4:	20800015 	stw	r2,0(r4)
   8e2c8:	21000104 	addi	r4,r4,4
   8e2cc:	30fffb36 	bltu	r6,r3,8e2bc <__copybits+0x30>
   8e2d0:	2140032e 	bgeu	r4,r5,8e2e0 <__copybits+0x54>
   8e2d4:	20000015 	stw	zero,0(r4)
   8e2d8:	21000104 	addi	r4,r4,4
   8e2dc:	217ffd36 	bltu	r4,r5,8e2d4 <__copybits+0x48>
   8e2e0:	f800283a 	ret

0008e2e4 <__any_on>:
   8e2e4:	20800417 	ldw	r2,16(r4)
   8e2e8:	2807d17a 	srai	r3,r5,5
   8e2ec:	21000504 	addi	r4,r4,20
   8e2f0:	10c00d0e 	bge	r2,r3,8e328 <__any_on+0x44>
   8e2f4:	1085883a 	add	r2,r2,r2
   8e2f8:	1085883a 	add	r2,r2,r2
   8e2fc:	208d883a 	add	r6,r4,r2
   8e300:	2180182e 	bgeu	r4,r6,8e364 <__any_on+0x80>
   8e304:	30bfff17 	ldw	r2,-4(r6)
   8e308:	30ffff04 	addi	r3,r6,-4
   8e30c:	1000041e 	bne	r2,zero,8e320 <__any_on+0x3c>
   8e310:	20c0142e 	bgeu	r4,r3,8e364 <__any_on+0x80>
   8e314:	18ffff04 	addi	r3,r3,-4
   8e318:	18800017 	ldw	r2,0(r3)
   8e31c:	103ffc26 	beq	r2,zero,8e310 <__any_on+0x2c>
   8e320:	00800044 	movi	r2,1
   8e324:	f800283a 	ret
   8e328:	18800a0e 	bge	r3,r2,8e354 <__any_on+0x70>
   8e32c:	294007cc 	andi	r5,r5,31
   8e330:	28000826 	beq	r5,zero,8e354 <__any_on+0x70>
   8e334:	18c5883a 	add	r2,r3,r3
   8e338:	1085883a 	add	r2,r2,r2
   8e33c:	208d883a 	add	r6,r4,r2
   8e340:	30c00017 	ldw	r3,0(r6)
   8e344:	1944d83a 	srl	r2,r3,r5
   8e348:	1144983a 	sll	r2,r2,r5
   8e34c:	18bff41e 	bne	r3,r2,8e320 <__any_on+0x3c>
   8e350:	003feb06 	br	8e300 <__any_on+0x1c>
   8e354:	18c5883a 	add	r2,r3,r3
   8e358:	1085883a 	add	r2,r2,r2
   8e35c:	208d883a 	add	r6,r4,r2
   8e360:	003fe706 	br	8e300 <__any_on+0x1c>
   8e364:	0005883a 	mov	r2,zero
   8e368:	f800283a 	ret

0008e36c <_Balloc>:
   8e36c:	20c01317 	ldw	r3,76(r4)
   8e370:	defffb04 	addi	sp,sp,-20
   8e374:	dcc00315 	stw	r19,12(sp)
   8e378:	dc800215 	stw	r18,8(sp)
   8e37c:	dfc00415 	stw	ra,16(sp)
   8e380:	2825883a 	mov	r18,r5
   8e384:	dc400115 	stw	r17,4(sp)
   8e388:	dc000015 	stw	r16,0(sp)
   8e38c:	2027883a 	mov	r19,r4
   8e390:	01800404 	movi	r6,16
   8e394:	01400104 	movi	r5,4
   8e398:	18001726 	beq	r3,zero,8e3f8 <_Balloc+0x8c>
   8e39c:	01400044 	movi	r5,1
   8e3a0:	9485883a 	add	r2,r18,r18
   8e3a4:	2ca2983a 	sll	r17,r5,r18
   8e3a8:	1085883a 	add	r2,r2,r2
   8e3ac:	10c7883a 	add	r3,r2,r3
   8e3b0:	1c000017 	ldw	r16,0(r3)
   8e3b4:	8c4d883a 	add	r6,r17,r17
   8e3b8:	318d883a 	add	r6,r6,r6
   8e3bc:	9809883a 	mov	r4,r19
   8e3c0:	31800504 	addi	r6,r6,20
   8e3c4:	80001226 	beq	r16,zero,8e410 <_Balloc+0xa4>
   8e3c8:	80800017 	ldw	r2,0(r16)
   8e3cc:	18800015 	stw	r2,0(r3)
   8e3d0:	80000415 	stw	zero,16(r16)
   8e3d4:	80000315 	stw	zero,12(r16)
   8e3d8:	8005883a 	mov	r2,r16
   8e3dc:	dfc00417 	ldw	ra,16(sp)
   8e3e0:	dcc00317 	ldw	r19,12(sp)
   8e3e4:	dc800217 	ldw	r18,8(sp)
   8e3e8:	dc400117 	ldw	r17,4(sp)
   8e3ec:	dc000017 	ldw	r16,0(sp)
   8e3f0:	dec00504 	addi	sp,sp,20
   8e3f4:	f800283a 	ret
   8e3f8:	008fa3c0 	call	8fa3c <_calloc_r>
   8e3fc:	1007883a 	mov	r3,r2
   8e400:	0021883a 	mov	r16,zero
   8e404:	98801315 	stw	r2,76(r19)
   8e408:	103fe41e 	bne	r2,zero,8e39c <_Balloc+0x30>
   8e40c:	003ff206 	br	8e3d8 <_Balloc+0x6c>
   8e410:	008fa3c0 	call	8fa3c <_calloc_r>
   8e414:	103ff026 	beq	r2,zero,8e3d8 <_Balloc+0x6c>
   8e418:	1021883a 	mov	r16,r2
   8e41c:	14800115 	stw	r18,4(r2)
   8e420:	14400215 	stw	r17,8(r2)
   8e424:	003fea06 	br	8e3d0 <_Balloc+0x64>

0008e428 <__d2b>:
   8e428:	defff504 	addi	sp,sp,-44
   8e42c:	dcc00515 	stw	r19,20(sp)
   8e430:	04c00044 	movi	r19,1
   8e434:	dc000215 	stw	r16,8(sp)
   8e438:	2821883a 	mov	r16,r5
   8e43c:	980b883a 	mov	r5,r19
   8e440:	ddc00915 	stw	r23,36(sp)
   8e444:	dd800815 	stw	r22,32(sp)
   8e448:	dd400715 	stw	r21,28(sp)
   8e44c:	dd000615 	stw	r20,24(sp)
   8e450:	dc800415 	stw	r18,16(sp)
   8e454:	dc400315 	stw	r17,12(sp)
   8e458:	dfc00a15 	stw	ra,40(sp)
   8e45c:	3023883a 	mov	r17,r6
   8e460:	382d883a 	mov	r22,r7
   8e464:	ddc00b17 	ldw	r23,44(sp)
   8e468:	008e36c0 	call	8e36c <_Balloc>
   8e46c:	1025883a 	mov	r18,r2
   8e470:	00a00034 	movhi	r2,32768
   8e474:	10bfffc4 	addi	r2,r2,-1
   8e478:	8888703a 	and	r4,r17,r2
   8e47c:	202ad53a 	srli	r21,r4,20
   8e480:	00800434 	movhi	r2,16
   8e484:	10bfffc4 	addi	r2,r2,-1
   8e488:	8886703a 	and	r3,r17,r2
   8e48c:	a829003a 	cmpeq	r20,r21,zero
   8e490:	800b883a 	mov	r5,r16
   8e494:	d8c00115 	stw	r3,4(sp)
   8e498:	94000504 	addi	r16,r18,20
   8e49c:	a000021e 	bne	r20,zero,8e4a8 <__d2b+0x80>
   8e4a0:	18c00434 	orhi	r3,r3,16
   8e4a4:	d8c00115 	stw	r3,4(sp)
   8e4a8:	28002726 	beq	r5,zero,8e548 <__d2b+0x120>
   8e4ac:	d809883a 	mov	r4,sp
   8e4b0:	d9400015 	stw	r5,0(sp)
   8e4b4:	008de840 	call	8de84 <__lo0bits>
   8e4b8:	100d883a 	mov	r6,r2
   8e4bc:	10003526 	beq	r2,zero,8e594 <__d2b+0x16c>
   8e4c0:	d8c00117 	ldw	r3,4(sp)
   8e4c4:	00800804 	movi	r2,32
   8e4c8:	1185c83a 	sub	r2,r2,r6
   8e4cc:	d9000017 	ldw	r4,0(sp)
   8e4d0:	1886983a 	sll	r3,r3,r2
   8e4d4:	1906b03a 	or	r3,r3,r4
   8e4d8:	90c00515 	stw	r3,20(r18)
   8e4dc:	d8c00117 	ldw	r3,4(sp)
   8e4e0:	1986d83a 	srl	r3,r3,r6
   8e4e4:	d8c00115 	stw	r3,4(sp)
   8e4e8:	180b003a 	cmpeq	r5,r3,zero
   8e4ec:	00800084 	movi	r2,2
   8e4f0:	114bc83a 	sub	r5,r2,r5
   8e4f4:	80c00115 	stw	r3,4(r16)
   8e4f8:	91400415 	stw	r5,16(r18)
   8e4fc:	a0001a1e 	bne	r20,zero,8e568 <__d2b+0x140>
   8e500:	3545883a 	add	r2,r6,r21
   8e504:	10bef344 	addi	r2,r2,-1075
   8e508:	00c00d44 	movi	r3,53
   8e50c:	b0800015 	stw	r2,0(r22)
   8e510:	1987c83a 	sub	r3,r3,r6
   8e514:	b8c00015 	stw	r3,0(r23)
   8e518:	9005883a 	mov	r2,r18
   8e51c:	dfc00a17 	ldw	ra,40(sp)
   8e520:	ddc00917 	ldw	r23,36(sp)
   8e524:	dd800817 	ldw	r22,32(sp)
   8e528:	dd400717 	ldw	r21,28(sp)
   8e52c:	dd000617 	ldw	r20,24(sp)
   8e530:	dcc00517 	ldw	r19,20(sp)
   8e534:	dc800417 	ldw	r18,16(sp)
   8e538:	dc400317 	ldw	r17,12(sp)
   8e53c:	dc000217 	ldw	r16,8(sp)
   8e540:	dec00b04 	addi	sp,sp,44
   8e544:	f800283a 	ret
   8e548:	d9000104 	addi	r4,sp,4
   8e54c:	008de840 	call	8de84 <__lo0bits>
   8e550:	11800804 	addi	r6,r2,32
   8e554:	d8800117 	ldw	r2,4(sp)
   8e558:	94c00415 	stw	r19,16(r18)
   8e55c:	980b883a 	mov	r5,r19
   8e560:	90800515 	stw	r2,20(r18)
   8e564:	a03fe626 	beq	r20,zero,8e500 <__d2b+0xd8>
   8e568:	2945883a 	add	r2,r5,r5
   8e56c:	1085883a 	add	r2,r2,r2
   8e570:	1405883a 	add	r2,r2,r16
   8e574:	113fff17 	ldw	r4,-4(r2)
   8e578:	30fef384 	addi	r3,r6,-1074
   8e57c:	2820917a 	slli	r16,r5,5
   8e580:	b0c00015 	stw	r3,0(r22)
   8e584:	008de140 	call	8de14 <__hi0bits>
   8e588:	80a1c83a 	sub	r16,r16,r2
   8e58c:	bc000015 	stw	r16,0(r23)
   8e590:	003fe106 	br	8e518 <__d2b+0xf0>
   8e594:	d8800017 	ldw	r2,0(sp)
   8e598:	90800515 	stw	r2,20(r18)
   8e59c:	d8c00117 	ldw	r3,4(sp)
   8e5a0:	003fd106 	br	8e4e8 <__d2b+0xc0>

0008e5a4 <__mdiff>:
   8e5a4:	defffb04 	addi	sp,sp,-20
   8e5a8:	dc000015 	stw	r16,0(sp)
   8e5ac:	2821883a 	mov	r16,r5
   8e5b0:	dc800215 	stw	r18,8(sp)
   8e5b4:	300b883a 	mov	r5,r6
   8e5b8:	2025883a 	mov	r18,r4
   8e5bc:	8009883a 	mov	r4,r16
   8e5c0:	dc400115 	stw	r17,4(sp)
   8e5c4:	dfc00415 	stw	ra,16(sp)
   8e5c8:	dcc00315 	stw	r19,12(sp)
   8e5cc:	3023883a 	mov	r17,r6
   8e5d0:	008df480 	call	8df48 <__mcmp>
   8e5d4:	10004226 	beq	r2,zero,8e6e0 <__mdiff+0x13c>
   8e5d8:	10005016 	blt	r2,zero,8e71c <__mdiff+0x178>
   8e5dc:	0027883a 	mov	r19,zero
   8e5e0:	81400117 	ldw	r5,4(r16)
   8e5e4:	9009883a 	mov	r4,r18
   8e5e8:	008e36c0 	call	8e36c <_Balloc>
   8e5ec:	1019883a 	mov	r12,r2
   8e5f0:	82800417 	ldw	r10,16(r16)
   8e5f4:	88800417 	ldw	r2,16(r17)
   8e5f8:	81800504 	addi	r6,r16,20
   8e5fc:	5287883a 	add	r3,r10,r10
   8e600:	1085883a 	add	r2,r2,r2
   8e604:	18c7883a 	add	r3,r3,r3
   8e608:	1085883a 	add	r2,r2,r2
   8e60c:	8a000504 	addi	r8,r17,20
   8e610:	64c00315 	stw	r19,12(r12)
   8e614:	30db883a 	add	r13,r6,r3
   8e618:	4097883a 	add	r11,r8,r2
   8e61c:	61c00504 	addi	r7,r12,20
   8e620:	0013883a 	mov	r9,zero
   8e624:	31000017 	ldw	r4,0(r6)
   8e628:	41400017 	ldw	r5,0(r8)
   8e62c:	42000104 	addi	r8,r8,4
   8e630:	20bfffcc 	andi	r2,r4,65535
   8e634:	28ffffcc 	andi	r3,r5,65535
   8e638:	10c5c83a 	sub	r2,r2,r3
   8e63c:	1245883a 	add	r2,r2,r9
   8e640:	2008d43a 	srli	r4,r4,16
   8e644:	280ad43a 	srli	r5,r5,16
   8e648:	1007d43a 	srai	r3,r2,16
   8e64c:	3880000d 	sth	r2,0(r7)
   8e650:	2149c83a 	sub	r4,r4,r5
   8e654:	20c9883a 	add	r4,r4,r3
   8e658:	3900008d 	sth	r4,2(r7)
   8e65c:	31800104 	addi	r6,r6,4
   8e660:	39c00104 	addi	r7,r7,4
   8e664:	2013d43a 	srai	r9,r4,16
   8e668:	42ffee36 	bltu	r8,r11,8e624 <__mdiff+0x80>
   8e66c:	33400c2e 	bgeu	r6,r13,8e6a0 <__mdiff+0xfc>
   8e670:	30800017 	ldw	r2,0(r6)
   8e674:	31800104 	addi	r6,r6,4
   8e678:	10ffffcc 	andi	r3,r2,65535
   8e67c:	1a47883a 	add	r3,r3,r9
   8e680:	1004d43a 	srli	r2,r2,16
   8e684:	1809d43a 	srai	r4,r3,16
   8e688:	38c0000d 	sth	r3,0(r7)
   8e68c:	1105883a 	add	r2,r2,r4
   8e690:	3880008d 	sth	r2,2(r7)
   8e694:	1013d43a 	srai	r9,r2,16
   8e698:	39c00104 	addi	r7,r7,4
   8e69c:	337ff436 	bltu	r6,r13,8e670 <__mdiff+0xcc>
   8e6a0:	38bfff17 	ldw	r2,-4(r7)
   8e6a4:	38ffff04 	addi	r3,r7,-4
   8e6a8:	1000041e 	bne	r2,zero,8e6bc <__mdiff+0x118>
   8e6ac:	18ffff04 	addi	r3,r3,-4
   8e6b0:	18800017 	ldw	r2,0(r3)
   8e6b4:	52bfffc4 	addi	r10,r10,-1
   8e6b8:	103ffc26 	beq	r2,zero,8e6ac <__mdiff+0x108>
   8e6bc:	6005883a 	mov	r2,r12
   8e6c0:	62800415 	stw	r10,16(r12)
   8e6c4:	dfc00417 	ldw	ra,16(sp)
   8e6c8:	dcc00317 	ldw	r19,12(sp)
   8e6cc:	dc800217 	ldw	r18,8(sp)
   8e6d0:	dc400117 	ldw	r17,4(sp)
   8e6d4:	dc000017 	ldw	r16,0(sp)
   8e6d8:	dec00504 	addi	sp,sp,20
   8e6dc:	f800283a 	ret
   8e6e0:	9009883a 	mov	r4,r18
   8e6e4:	000b883a 	mov	r5,zero
   8e6e8:	008e36c0 	call	8e36c <_Balloc>
   8e6ec:	1019883a 	mov	r12,r2
   8e6f0:	00800044 	movi	r2,1
   8e6f4:	60800415 	stw	r2,16(r12)
   8e6f8:	6005883a 	mov	r2,r12
   8e6fc:	60000515 	stw	zero,20(r12)
   8e700:	dfc00417 	ldw	ra,16(sp)
   8e704:	dcc00317 	ldw	r19,12(sp)
   8e708:	dc800217 	ldw	r18,8(sp)
   8e70c:	dc400117 	ldw	r17,4(sp)
   8e710:	dc000017 	ldw	r16,0(sp)
   8e714:	dec00504 	addi	sp,sp,20
   8e718:	f800283a 	ret
   8e71c:	880d883a 	mov	r6,r17
   8e720:	04c00044 	movi	r19,1
   8e724:	8023883a 	mov	r17,r16
   8e728:	3021883a 	mov	r16,r6
   8e72c:	003fac06 	br	8e5e0 <__mdiff+0x3c>

0008e730 <__lshift>:
   8e730:	defff904 	addi	sp,sp,-28
   8e734:	28800417 	ldw	r2,16(r5)
   8e738:	dc000015 	stw	r16,0(sp)
   8e73c:	3021d17a 	srai	r16,r6,5
   8e740:	28c00217 	ldw	r3,8(r5)
   8e744:	10800044 	addi	r2,r2,1
   8e748:	dc400115 	stw	r17,4(sp)
   8e74c:	80a3883a 	add	r17,r16,r2
   8e750:	dd400515 	stw	r21,20(sp)
   8e754:	dd000415 	stw	r20,16(sp)
   8e758:	dc800215 	stw	r18,8(sp)
   8e75c:	dfc00615 	stw	ra,24(sp)
   8e760:	2825883a 	mov	r18,r5
   8e764:	dcc00315 	stw	r19,12(sp)
   8e768:	3029883a 	mov	r20,r6
   8e76c:	202b883a 	mov	r21,r4
   8e770:	29400117 	ldw	r5,4(r5)
   8e774:	1c40030e 	bge	r3,r17,8e784 <__lshift+0x54>
   8e778:	18c7883a 	add	r3,r3,r3
   8e77c:	29400044 	addi	r5,r5,1
   8e780:	1c7ffd16 	blt	r3,r17,8e778 <__lshift+0x48>
   8e784:	a809883a 	mov	r4,r21
   8e788:	008e36c0 	call	8e36c <_Balloc>
   8e78c:	1027883a 	mov	r19,r2
   8e790:	11400504 	addi	r5,r2,20
   8e794:	0400090e 	bge	zero,r16,8e7bc <__lshift+0x8c>
   8e798:	2805883a 	mov	r2,r5
   8e79c:	0007883a 	mov	r3,zero
   8e7a0:	18c00044 	addi	r3,r3,1
   8e7a4:	10000015 	stw	zero,0(r2)
   8e7a8:	10800104 	addi	r2,r2,4
   8e7ac:	80fffc1e 	bne	r16,r3,8e7a0 <__lshift+0x70>
   8e7b0:	8405883a 	add	r2,r16,r16
   8e7b4:	1085883a 	add	r2,r2,r2
   8e7b8:	288b883a 	add	r5,r5,r2
   8e7bc:	90800417 	ldw	r2,16(r18)
   8e7c0:	91000504 	addi	r4,r18,20
   8e7c4:	a18007cc 	andi	r6,r20,31
   8e7c8:	1085883a 	add	r2,r2,r2
   8e7cc:	1085883a 	add	r2,r2,r2
   8e7d0:	208f883a 	add	r7,r4,r2
   8e7d4:	30001e26 	beq	r6,zero,8e850 <__lshift+0x120>
   8e7d8:	00800804 	movi	r2,32
   8e7dc:	1191c83a 	sub	r8,r2,r6
   8e7e0:	0007883a 	mov	r3,zero
   8e7e4:	20800017 	ldw	r2,0(r4)
   8e7e8:	1184983a 	sll	r2,r2,r6
   8e7ec:	1884b03a 	or	r2,r3,r2
   8e7f0:	28800015 	stw	r2,0(r5)
   8e7f4:	20c00017 	ldw	r3,0(r4)
   8e7f8:	21000104 	addi	r4,r4,4
   8e7fc:	29400104 	addi	r5,r5,4
   8e800:	1a06d83a 	srl	r3,r3,r8
   8e804:	21fff736 	bltu	r4,r7,8e7e4 <__lshift+0xb4>
   8e808:	28c00015 	stw	r3,0(r5)
   8e80c:	18000126 	beq	r3,zero,8e814 <__lshift+0xe4>
   8e810:	8c400044 	addi	r17,r17,1
   8e814:	88bfffc4 	addi	r2,r17,-1
   8e818:	98800415 	stw	r2,16(r19)
   8e81c:	a809883a 	mov	r4,r21
   8e820:	900b883a 	mov	r5,r18
   8e824:	008ddec0 	call	8ddec <_Bfree>
   8e828:	9805883a 	mov	r2,r19
   8e82c:	dfc00617 	ldw	ra,24(sp)
   8e830:	dd400517 	ldw	r21,20(sp)
   8e834:	dd000417 	ldw	r20,16(sp)
   8e838:	dcc00317 	ldw	r19,12(sp)
   8e83c:	dc800217 	ldw	r18,8(sp)
   8e840:	dc400117 	ldw	r17,4(sp)
   8e844:	dc000017 	ldw	r16,0(sp)
   8e848:	dec00704 	addi	sp,sp,28
   8e84c:	f800283a 	ret
   8e850:	20800017 	ldw	r2,0(r4)
   8e854:	21000104 	addi	r4,r4,4
   8e858:	28800015 	stw	r2,0(r5)
   8e85c:	29400104 	addi	r5,r5,4
   8e860:	21ffec2e 	bgeu	r4,r7,8e814 <__lshift+0xe4>
   8e864:	20800017 	ldw	r2,0(r4)
   8e868:	21000104 	addi	r4,r4,4
   8e86c:	28800015 	stw	r2,0(r5)
   8e870:	29400104 	addi	r5,r5,4
   8e874:	21fff636 	bltu	r4,r7,8e850 <__lshift+0x120>
   8e878:	003fe606 	br	8e814 <__lshift+0xe4>

0008e87c <__multiply>:
   8e87c:	defff904 	addi	sp,sp,-28
   8e880:	dcc00315 	stw	r19,12(sp)
   8e884:	dc800215 	stw	r18,8(sp)
   8e888:	2cc00417 	ldw	r19,16(r5)
   8e88c:	34800417 	ldw	r18,16(r6)
   8e890:	dd000415 	stw	r20,16(sp)
   8e894:	dc400115 	stw	r17,4(sp)
   8e898:	dfc00615 	stw	ra,24(sp)
   8e89c:	dd400515 	stw	r21,20(sp)
   8e8a0:	dc000015 	stw	r16,0(sp)
   8e8a4:	2823883a 	mov	r17,r5
   8e8a8:	3029883a 	mov	r20,r6
   8e8ac:	9c80040e 	bge	r19,r18,8e8c0 <__multiply+0x44>
   8e8b0:	9027883a 	mov	r19,r18
   8e8b4:	2c800417 	ldw	r18,16(r5)
   8e8b8:	2829883a 	mov	r20,r5
   8e8bc:	3023883a 	mov	r17,r6
   8e8c0:	88800217 	ldw	r2,8(r17)
   8e8c4:	9ca1883a 	add	r16,r19,r18
   8e8c8:	89400117 	ldw	r5,4(r17)
   8e8cc:	1400010e 	bge	r2,r16,8e8d4 <__multiply+0x58>
   8e8d0:	29400044 	addi	r5,r5,1
   8e8d4:	008e36c0 	call	8e36c <_Balloc>
   8e8d8:	102b883a 	mov	r21,r2
   8e8dc:	8405883a 	add	r2,r16,r16
   8e8e0:	1085883a 	add	r2,r2,r2
   8e8e4:	a9000504 	addi	r4,r21,20
   8e8e8:	209d883a 	add	r14,r4,r2
   8e8ec:	2380042e 	bgeu	r4,r14,8e900 <__multiply+0x84>
   8e8f0:	2005883a 	mov	r2,r4
   8e8f4:	10000015 	stw	zero,0(r2)
   8e8f8:	10800104 	addi	r2,r2,4
   8e8fc:	13bffd36 	bltu	r2,r14,8e8f4 <__multiply+0x78>
   8e900:	9485883a 	add	r2,r18,r18
   8e904:	9cc7883a 	add	r3,r19,r19
   8e908:	a1800504 	addi	r6,r20,20
   8e90c:	1085883a 	add	r2,r2,r2
   8e910:	8b400504 	addi	r13,r17,20
   8e914:	18c7883a 	add	r3,r3,r3
   8e918:	309f883a 	add	r15,r6,r2
   8e91c:	68d7883a 	add	r11,r13,r3
   8e920:	33c03b2e 	bgeu	r6,r15,8ea10 <__multiply+0x194>
   8e924:	2019883a 	mov	r12,r4
   8e928:	30800017 	ldw	r2,0(r6)
   8e92c:	127fffcc 	andi	r9,r2,65535
   8e930:	48001826 	beq	r9,zero,8e994 <__multiply+0x118>
   8e934:	6811883a 	mov	r8,r13
   8e938:	600f883a 	mov	r7,r12
   8e93c:	0015883a 	mov	r10,zero
   8e940:	40c00017 	ldw	r3,0(r8)
   8e944:	39400017 	ldw	r5,0(r7)
   8e948:	42000104 	addi	r8,r8,4
   8e94c:	193fffcc 	andi	r4,r3,65535
   8e950:	4909383a 	mul	r4,r9,r4
   8e954:	1806d43a 	srli	r3,r3,16
   8e958:	28bfffcc 	andi	r2,r5,65535
   8e95c:	5085883a 	add	r2,r10,r2
   8e960:	2089883a 	add	r4,r4,r2
   8e964:	48c7383a 	mul	r3,r9,r3
   8e968:	280ad43a 	srli	r5,r5,16
   8e96c:	2004d43a 	srli	r2,r4,16
   8e970:	3900000d 	sth	r4,0(r7)
   8e974:	1947883a 	add	r3,r3,r5
   8e978:	10c5883a 	add	r2,r2,r3
   8e97c:	3880008d 	sth	r2,2(r7)
   8e980:	1014d43a 	srli	r10,r2,16
   8e984:	39c00104 	addi	r7,r7,4
   8e988:	42ffed36 	bltu	r8,r11,8e940 <__multiply+0xc4>
   8e98c:	3a800015 	stw	r10,0(r7)
   8e990:	30800017 	ldw	r2,0(r6)
   8e994:	1012d43a 	srli	r9,r2,16
   8e998:	48001926 	beq	r9,zero,8ea00 <__multiply+0x184>
   8e99c:	60800017 	ldw	r2,0(r12)
   8e9a0:	6811883a 	mov	r8,r13
   8e9a4:	600f883a 	mov	r7,r12
   8e9a8:	0015883a 	mov	r10,zero
   8e9ac:	100b883a 	mov	r5,r2
   8e9b0:	41000017 	ldw	r4,0(r8)
   8e9b4:	2806d43a 	srli	r3,r5,16
   8e9b8:	3880000d 	sth	r2,0(r7)
   8e9bc:	20bfffcc 	andi	r2,r4,65535
   8e9c0:	4885383a 	mul	r2,r9,r2
   8e9c4:	50c7883a 	add	r3,r10,r3
   8e9c8:	2008d43a 	srli	r4,r4,16
   8e9cc:	10c5883a 	add	r2,r2,r3
   8e9d0:	3880008d 	sth	r2,2(r7)
   8e9d4:	39c00104 	addi	r7,r7,4
   8e9d8:	39400017 	ldw	r5,0(r7)
   8e9dc:	4909383a 	mul	r4,r9,r4
   8e9e0:	1004d43a 	srli	r2,r2,16
   8e9e4:	28ffffcc 	andi	r3,r5,65535
   8e9e8:	20c9883a 	add	r4,r4,r3
   8e9ec:	1105883a 	add	r2,r2,r4
   8e9f0:	42000104 	addi	r8,r8,4
   8e9f4:	1014d43a 	srli	r10,r2,16
   8e9f8:	42ffed36 	bltu	r8,r11,8e9b0 <__multiply+0x134>
   8e9fc:	38800015 	stw	r2,0(r7)
   8ea00:	31800104 	addi	r6,r6,4
   8ea04:	33c0022e 	bgeu	r6,r15,8ea10 <__multiply+0x194>
   8ea08:	63000104 	addi	r12,r12,4
   8ea0c:	003fc606 	br	8e928 <__multiply+0xac>
   8ea10:	0400090e 	bge	zero,r16,8ea38 <__multiply+0x1bc>
   8ea14:	70bfff17 	ldw	r2,-4(r14)
   8ea18:	70ffff04 	addi	r3,r14,-4
   8ea1c:	10000326 	beq	r2,zero,8ea2c <__multiply+0x1b0>
   8ea20:	00000506 	br	8ea38 <__multiply+0x1bc>
   8ea24:	18800017 	ldw	r2,0(r3)
   8ea28:	1000031e 	bne	r2,zero,8ea38 <__multiply+0x1bc>
   8ea2c:	843fffc4 	addi	r16,r16,-1
   8ea30:	18ffff04 	addi	r3,r3,-4
   8ea34:	803ffb1e 	bne	r16,zero,8ea24 <__multiply+0x1a8>
   8ea38:	a805883a 	mov	r2,r21
   8ea3c:	ac000415 	stw	r16,16(r21)
   8ea40:	dfc00617 	ldw	ra,24(sp)
   8ea44:	dd400517 	ldw	r21,20(sp)
   8ea48:	dd000417 	ldw	r20,16(sp)
   8ea4c:	dcc00317 	ldw	r19,12(sp)
   8ea50:	dc800217 	ldw	r18,8(sp)
   8ea54:	dc400117 	ldw	r17,4(sp)
   8ea58:	dc000017 	ldw	r16,0(sp)
   8ea5c:	dec00704 	addi	sp,sp,28
   8ea60:	f800283a 	ret

0008ea64 <__i2b>:
   8ea64:	defffd04 	addi	sp,sp,-12
   8ea68:	dc000015 	stw	r16,0(sp)
   8ea6c:	04000044 	movi	r16,1
   8ea70:	dc800115 	stw	r18,4(sp)
   8ea74:	2825883a 	mov	r18,r5
   8ea78:	800b883a 	mov	r5,r16
   8ea7c:	dfc00215 	stw	ra,8(sp)
   8ea80:	008e36c0 	call	8e36c <_Balloc>
   8ea84:	14000415 	stw	r16,16(r2)
   8ea88:	14800515 	stw	r18,20(r2)
   8ea8c:	dfc00217 	ldw	ra,8(sp)
   8ea90:	dc800117 	ldw	r18,4(sp)
   8ea94:	dc000017 	ldw	r16,0(sp)
   8ea98:	dec00304 	addi	sp,sp,12
   8ea9c:	f800283a 	ret

0008eaa0 <__multadd>:
   8eaa0:	defffa04 	addi	sp,sp,-24
   8eaa4:	dc800215 	stw	r18,8(sp)
   8eaa8:	2c800417 	ldw	r18,16(r5)
   8eaac:	dd000415 	stw	r20,16(sp)
   8eab0:	dcc00315 	stw	r19,12(sp)
   8eab4:	dc000015 	stw	r16,0(sp)
   8eab8:	dfc00515 	stw	ra,20(sp)
   8eabc:	3821883a 	mov	r16,r7
   8eac0:	dc400115 	stw	r17,4(sp)
   8eac4:	2827883a 	mov	r19,r5
   8eac8:	2029883a 	mov	r20,r4
   8eacc:	2a000504 	addi	r8,r5,20
   8ead0:	000f883a 	mov	r7,zero
   8ead4:	40800017 	ldw	r2,0(r8)
   8ead8:	39c00044 	addi	r7,r7,1
   8eadc:	10ffffcc 	andi	r3,r2,65535
   8eae0:	1987383a 	mul	r3,r3,r6
   8eae4:	1004d43a 	srli	r2,r2,16
   8eae8:	1c07883a 	add	r3,r3,r16
   8eaec:	180ad43a 	srli	r5,r3,16
   8eaf0:	1185383a 	mul	r2,r2,r6
   8eaf4:	18ffffcc 	andi	r3,r3,65535
   8eaf8:	1145883a 	add	r2,r2,r5
   8eafc:	1008943a 	slli	r4,r2,16
   8eb00:	1020d43a 	srli	r16,r2,16
   8eb04:	20c9883a 	add	r4,r4,r3
   8eb08:	41000015 	stw	r4,0(r8)
   8eb0c:	42000104 	addi	r8,r8,4
   8eb10:	3cbff016 	blt	r7,r18,8ead4 <__multadd+0x34>
   8eb14:	80000826 	beq	r16,zero,8eb38 <__multadd+0x98>
   8eb18:	98800217 	ldw	r2,8(r19)
   8eb1c:	90800f0e 	bge	r18,r2,8eb5c <__multadd+0xbc>
   8eb20:	9485883a 	add	r2,r18,r18
   8eb24:	1085883a 	add	r2,r2,r2
   8eb28:	14c5883a 	add	r2,r2,r19
   8eb2c:	90c00044 	addi	r3,r18,1
   8eb30:	14000515 	stw	r16,20(r2)
   8eb34:	98c00415 	stw	r3,16(r19)
   8eb38:	9805883a 	mov	r2,r19
   8eb3c:	dfc00517 	ldw	ra,20(sp)
   8eb40:	dd000417 	ldw	r20,16(sp)
   8eb44:	dcc00317 	ldw	r19,12(sp)
   8eb48:	dc800217 	ldw	r18,8(sp)
   8eb4c:	dc400117 	ldw	r17,4(sp)
   8eb50:	dc000017 	ldw	r16,0(sp)
   8eb54:	dec00604 	addi	sp,sp,24
   8eb58:	f800283a 	ret
   8eb5c:	99400117 	ldw	r5,4(r19)
   8eb60:	a009883a 	mov	r4,r20
   8eb64:	29400044 	addi	r5,r5,1
   8eb68:	008e36c0 	call	8e36c <_Balloc>
   8eb6c:	99800417 	ldw	r6,16(r19)
   8eb70:	99400304 	addi	r5,r19,12
   8eb74:	11000304 	addi	r4,r2,12
   8eb78:	318d883a 	add	r6,r6,r6
   8eb7c:	318d883a 	add	r6,r6,r6
   8eb80:	31800204 	addi	r6,r6,8
   8eb84:	1023883a 	mov	r17,r2
   8eb88:	008dbd40 	call	8dbd4 <memcpy>
   8eb8c:	980b883a 	mov	r5,r19
   8eb90:	a009883a 	mov	r4,r20
   8eb94:	008ddec0 	call	8ddec <_Bfree>
   8eb98:	8827883a 	mov	r19,r17
   8eb9c:	003fe006 	br	8eb20 <__multadd+0x80>

0008eba0 <__pow5mult>:
   8eba0:	defffa04 	addi	sp,sp,-24
   8eba4:	308000cc 	andi	r2,r6,3
   8eba8:	dd000415 	stw	r20,16(sp)
   8ebac:	dcc00315 	stw	r19,12(sp)
   8ebb0:	dc000015 	stw	r16,0(sp)
   8ebb4:	dfc00515 	stw	ra,20(sp)
   8ebb8:	dc800215 	stw	r18,8(sp)
   8ebbc:	dc400115 	stw	r17,4(sp)
   8ebc0:	3021883a 	mov	r16,r6
   8ebc4:	2027883a 	mov	r19,r4
   8ebc8:	2829883a 	mov	r20,r5
   8ebcc:	10002b1e 	bne	r2,zero,8ec7c <__pow5mult+0xdc>
   8ebd0:	8025d0ba 	srai	r18,r16,2
   8ebd4:	90001b26 	beq	r18,zero,8ec44 <__pow5mult+0xa4>
   8ebd8:	9c001217 	ldw	r16,72(r19)
   8ebdc:	8000081e 	bne	r16,zero,8ec00 <__pow5mult+0x60>
   8ebe0:	00003006 	br	8eca4 <__pow5mult+0x104>
   8ebe4:	800b883a 	mov	r5,r16
   8ebe8:	800d883a 	mov	r6,r16
   8ebec:	9809883a 	mov	r4,r19
   8ebf0:	90001426 	beq	r18,zero,8ec44 <__pow5mult+0xa4>
   8ebf4:	80800017 	ldw	r2,0(r16)
   8ebf8:	10001b26 	beq	r2,zero,8ec68 <__pow5mult+0xc8>
   8ebfc:	1021883a 	mov	r16,r2
   8ec00:	9080004c 	andi	r2,r18,1
   8ec04:	1005003a 	cmpeq	r2,r2,zero
   8ec08:	9025d07a 	srai	r18,r18,1
   8ec0c:	800d883a 	mov	r6,r16
   8ec10:	9809883a 	mov	r4,r19
   8ec14:	a00b883a 	mov	r5,r20
   8ec18:	103ff21e 	bne	r2,zero,8ebe4 <__pow5mult+0x44>
   8ec1c:	008e87c0 	call	8e87c <__multiply>
   8ec20:	a00b883a 	mov	r5,r20
   8ec24:	9809883a 	mov	r4,r19
   8ec28:	1023883a 	mov	r17,r2
   8ec2c:	008ddec0 	call	8ddec <_Bfree>
   8ec30:	8829883a 	mov	r20,r17
   8ec34:	800b883a 	mov	r5,r16
   8ec38:	800d883a 	mov	r6,r16
   8ec3c:	9809883a 	mov	r4,r19
   8ec40:	903fec1e 	bne	r18,zero,8ebf4 <__pow5mult+0x54>
   8ec44:	a005883a 	mov	r2,r20
   8ec48:	dfc00517 	ldw	ra,20(sp)
   8ec4c:	dd000417 	ldw	r20,16(sp)
   8ec50:	dcc00317 	ldw	r19,12(sp)
   8ec54:	dc800217 	ldw	r18,8(sp)
   8ec58:	dc400117 	ldw	r17,4(sp)
   8ec5c:	dc000017 	ldw	r16,0(sp)
   8ec60:	dec00604 	addi	sp,sp,24
   8ec64:	f800283a 	ret
   8ec68:	008e87c0 	call	8e87c <__multiply>
   8ec6c:	80800015 	stw	r2,0(r16)
   8ec70:	1021883a 	mov	r16,r2
   8ec74:	10000015 	stw	zero,0(r2)
   8ec78:	003fe106 	br	8ec00 <__pow5mult+0x60>
   8ec7c:	1085883a 	add	r2,r2,r2
   8ec80:	00c00274 	movhi	r3,9
   8ec84:	18cf4204 	addi	r3,r3,15624
   8ec88:	1085883a 	add	r2,r2,r2
   8ec8c:	10c5883a 	add	r2,r2,r3
   8ec90:	11bfff17 	ldw	r6,-4(r2)
   8ec94:	000f883a 	mov	r7,zero
   8ec98:	008eaa00 	call	8eaa0 <__multadd>
   8ec9c:	1029883a 	mov	r20,r2
   8eca0:	003fcb06 	br	8ebd0 <__pow5mult+0x30>
   8eca4:	9809883a 	mov	r4,r19
   8eca8:	01409c44 	movi	r5,625
   8ecac:	008ea640 	call	8ea64 <__i2b>
   8ecb0:	98801215 	stw	r2,72(r19)
   8ecb4:	1021883a 	mov	r16,r2
   8ecb8:	10000015 	stw	zero,0(r2)
   8ecbc:	003fd006 	br	8ec00 <__pow5mult+0x60>

0008ecc0 <__s2b>:
   8ecc0:	defff904 	addi	sp,sp,-28
   8ecc4:	dcc00315 	stw	r19,12(sp)
   8ecc8:	dc800215 	stw	r18,8(sp)
   8eccc:	2827883a 	mov	r19,r5
   8ecd0:	2025883a 	mov	r18,r4
   8ecd4:	01400244 	movi	r5,9
   8ecd8:	39000204 	addi	r4,r7,8
   8ecdc:	dd000415 	stw	r20,16(sp)
   8ece0:	dc400115 	stw	r17,4(sp)
   8ece4:	dfc00615 	stw	ra,24(sp)
   8ece8:	dd400515 	stw	r21,20(sp)
   8ecec:	dc000015 	stw	r16,0(sp)
   8ecf0:	3829883a 	mov	r20,r7
   8ecf4:	3023883a 	mov	r17,r6
   8ecf8:	0090a600 	call	90a60 <__divsi3>
   8ecfc:	00c00044 	movi	r3,1
   8ed00:	1880350e 	bge	r3,r2,8edd8 <__s2b+0x118>
   8ed04:	000b883a 	mov	r5,zero
   8ed08:	18c7883a 	add	r3,r3,r3
   8ed0c:	29400044 	addi	r5,r5,1
   8ed10:	18bffd16 	blt	r3,r2,8ed08 <__s2b+0x48>
   8ed14:	9009883a 	mov	r4,r18
   8ed18:	008e36c0 	call	8e36c <_Balloc>
   8ed1c:	1011883a 	mov	r8,r2
   8ed20:	d8800717 	ldw	r2,28(sp)
   8ed24:	00c00044 	movi	r3,1
   8ed28:	01800244 	movi	r6,9
   8ed2c:	40800515 	stw	r2,20(r8)
   8ed30:	40c00415 	stw	r3,16(r8)
   8ed34:	3440260e 	bge	r6,r17,8edd0 <__s2b+0x110>
   8ed38:	3021883a 	mov	r16,r6
   8ed3c:	99ab883a 	add	r21,r19,r6
   8ed40:	9c05883a 	add	r2,r19,r16
   8ed44:	11c00007 	ldb	r7,0(r2)
   8ed48:	400b883a 	mov	r5,r8
   8ed4c:	9009883a 	mov	r4,r18
   8ed50:	39fff404 	addi	r7,r7,-48
   8ed54:	01800284 	movi	r6,10
   8ed58:	008eaa00 	call	8eaa0 <__multadd>
   8ed5c:	84000044 	addi	r16,r16,1
   8ed60:	1011883a 	mov	r8,r2
   8ed64:	8c3ff61e 	bne	r17,r16,8ed40 <__s2b+0x80>
   8ed68:	ac45883a 	add	r2,r21,r17
   8ed6c:	117ffe04 	addi	r5,r2,-8
   8ed70:	880d883a 	mov	r6,r17
   8ed74:	35000c0e 	bge	r6,r20,8eda8 <__s2b+0xe8>
   8ed78:	a185c83a 	sub	r2,r20,r6
   8ed7c:	2821883a 	mov	r16,r5
   8ed80:	28a3883a 	add	r17,r5,r2
   8ed84:	81c00007 	ldb	r7,0(r16)
   8ed88:	400b883a 	mov	r5,r8
   8ed8c:	9009883a 	mov	r4,r18
   8ed90:	39fff404 	addi	r7,r7,-48
   8ed94:	01800284 	movi	r6,10
   8ed98:	008eaa00 	call	8eaa0 <__multadd>
   8ed9c:	84000044 	addi	r16,r16,1
   8eda0:	1011883a 	mov	r8,r2
   8eda4:	847ff71e 	bne	r16,r17,8ed84 <__s2b+0xc4>
   8eda8:	4005883a 	mov	r2,r8
   8edac:	dfc00617 	ldw	ra,24(sp)
   8edb0:	dd400517 	ldw	r21,20(sp)
   8edb4:	dd000417 	ldw	r20,16(sp)
   8edb8:	dcc00317 	ldw	r19,12(sp)
   8edbc:	dc800217 	ldw	r18,8(sp)
   8edc0:	dc400117 	ldw	r17,4(sp)
   8edc4:	dc000017 	ldw	r16,0(sp)
   8edc8:	dec00704 	addi	sp,sp,28
   8edcc:	f800283a 	ret
   8edd0:	99400284 	addi	r5,r19,10
   8edd4:	003fe706 	br	8ed74 <__s2b+0xb4>
   8edd8:	000b883a 	mov	r5,zero
   8eddc:	003fcd06 	br	8ed14 <__s2b+0x54>

0008ede0 <putc>:
   8ede0:	defffc04 	addi	sp,sp,-16
   8ede4:	dc800215 	stw	r18,8(sp)
   8ede8:	048002f4 	movhi	r18,11
   8edec:	94899704 	addi	r18,r18,9820
   8edf0:	90c00017 	ldw	r3,0(r18)
   8edf4:	dc400115 	stw	r17,4(sp)
   8edf8:	dc000015 	stw	r16,0(sp)
   8edfc:	dfc00315 	stw	ra,12(sp)
   8ee00:	2023883a 	mov	r17,r4
   8ee04:	2821883a 	mov	r16,r5
   8ee08:	18000226 	beq	r3,zero,8ee14 <putc+0x34>
   8ee0c:	18800e17 	ldw	r2,56(r3)
   8ee10:	10001126 	beq	r2,zero,8ee58 <putc+0x78>
   8ee14:	80800217 	ldw	r2,8(r16)
   8ee18:	10ffffc4 	addi	r3,r2,-1
   8ee1c:	80c00215 	stw	r3,8(r16)
   8ee20:	18001316 	blt	r3,zero,8ee70 <putc+0x90>
   8ee24:	80800017 	ldw	r2,0(r16)
   8ee28:	14400005 	stb	r17,0(r2)
   8ee2c:	80c00017 	ldw	r3,0(r16)
   8ee30:	18800044 	addi	r2,r3,1
   8ee34:	18c00003 	ldbu	r3,0(r3)
   8ee38:	80800015 	stw	r2,0(r16)
   8ee3c:	1805883a 	mov	r2,r3
   8ee40:	dfc00317 	ldw	ra,12(sp)
   8ee44:	dc800217 	ldw	r18,8(sp)
   8ee48:	dc400117 	ldw	r17,4(sp)
   8ee4c:	dc000017 	ldw	r16,0(sp)
   8ee50:	dec00404 	addi	sp,sp,16
   8ee54:	f800283a 	ret
   8ee58:	1809883a 	mov	r4,r3
   8ee5c:	008c4a40 	call	8c4a4 <__sinit>
   8ee60:	80800217 	ldw	r2,8(r16)
   8ee64:	10ffffc4 	addi	r3,r2,-1
   8ee68:	80c00215 	stw	r3,8(r16)
   8ee6c:	183fed0e 	bge	r3,zero,8ee24 <putc+0x44>
   8ee70:	80800617 	ldw	r2,24(r16)
   8ee74:	18800f16 	blt	r3,r2,8eeb4 <putc+0xd4>
   8ee78:	80800017 	ldw	r2,0(r16)
   8ee7c:	14400005 	stb	r17,0(r2)
   8ee80:	81000017 	ldw	r4,0(r16)
   8ee84:	00800284 	movi	r2,10
   8ee88:	20c00003 	ldbu	r3,0(r4)
   8ee8c:	18801226 	beq	r3,r2,8eed8 <putc+0xf8>
   8ee90:	20800044 	addi	r2,r4,1
   8ee94:	80800015 	stw	r2,0(r16)
   8ee98:	1805883a 	mov	r2,r3
   8ee9c:	dfc00317 	ldw	ra,12(sp)
   8eea0:	dc800217 	ldw	r18,8(sp)
   8eea4:	dc400117 	ldw	r17,4(sp)
   8eea8:	dc000017 	ldw	r16,0(sp)
   8eeac:	dec00404 	addi	sp,sp,16
   8eeb0:	f800283a 	ret
   8eeb4:	91000017 	ldw	r4,0(r18)
   8eeb8:	880b883a 	mov	r5,r17
   8eebc:	800d883a 	mov	r6,r16
   8eec0:	dfc00317 	ldw	ra,12(sp)
   8eec4:	dc800217 	ldw	r18,8(sp)
   8eec8:	dc400117 	ldw	r17,4(sp)
   8eecc:	dc000017 	ldw	r16,0(sp)
   8eed0:	dec00404 	addi	sp,sp,16
   8eed4:	008f8781 	jmpi	8f878 <__swbuf_r>
   8eed8:	91000017 	ldw	r4,0(r18)
   8eedc:	180b883a 	mov	r5,r3
   8eee0:	003ff606 	br	8eebc <putc+0xdc>

0008eee4 <_putc_r>:
   8eee4:	defffc04 	addi	sp,sp,-16
   8eee8:	dc400215 	stw	r17,8(sp)
   8eeec:	dc000115 	stw	r16,4(sp)
   8eef0:	dfc00315 	stw	ra,12(sp)
   8eef4:	2021883a 	mov	r16,r4
   8eef8:	2823883a 	mov	r17,r5
   8eefc:	20000226 	beq	r4,zero,8ef08 <_putc_r+0x24>
   8ef00:	20800e17 	ldw	r2,56(r4)
   8ef04:	10001026 	beq	r2,zero,8ef48 <_putc_r+0x64>
   8ef08:	30800217 	ldw	r2,8(r6)
   8ef0c:	10ffffc4 	addi	r3,r2,-1
   8ef10:	30c00215 	stw	r3,8(r6)
   8ef14:	18001316 	blt	r3,zero,8ef64 <_putc_r+0x80>
   8ef18:	30800017 	ldw	r2,0(r6)
   8ef1c:	14400005 	stb	r17,0(r2)
   8ef20:	30c00017 	ldw	r3,0(r6)
   8ef24:	18800044 	addi	r2,r3,1
   8ef28:	18c00003 	ldbu	r3,0(r3)
   8ef2c:	30800015 	stw	r2,0(r6)
   8ef30:	1805883a 	mov	r2,r3
   8ef34:	dfc00317 	ldw	ra,12(sp)
   8ef38:	dc400217 	ldw	r17,8(sp)
   8ef3c:	dc000117 	ldw	r16,4(sp)
   8ef40:	dec00404 	addi	sp,sp,16
   8ef44:	f800283a 	ret
   8ef48:	d9800015 	stw	r6,0(sp)
   8ef4c:	008c4a40 	call	8c4a4 <__sinit>
   8ef50:	d9800017 	ldw	r6,0(sp)
   8ef54:	30800217 	ldw	r2,8(r6)
   8ef58:	10ffffc4 	addi	r3,r2,-1
   8ef5c:	30c00215 	stw	r3,8(r6)
   8ef60:	183fed0e 	bge	r3,zero,8ef18 <_putc_r+0x34>
   8ef64:	30800617 	ldw	r2,24(r6)
   8ef68:	18800e16 	blt	r3,r2,8efa4 <_putc_r+0xc0>
   8ef6c:	30800017 	ldw	r2,0(r6)
   8ef70:	14400005 	stb	r17,0(r2)
   8ef74:	31000017 	ldw	r4,0(r6)
   8ef78:	00800284 	movi	r2,10
   8ef7c:	20c00003 	ldbu	r3,0(r4)
   8ef80:	18800f26 	beq	r3,r2,8efc0 <_putc_r+0xdc>
   8ef84:	20800044 	addi	r2,r4,1
   8ef88:	30800015 	stw	r2,0(r6)
   8ef8c:	1805883a 	mov	r2,r3
   8ef90:	dfc00317 	ldw	ra,12(sp)
   8ef94:	dc400217 	ldw	r17,8(sp)
   8ef98:	dc000117 	ldw	r16,4(sp)
   8ef9c:	dec00404 	addi	sp,sp,16
   8efa0:	f800283a 	ret
   8efa4:	8009883a 	mov	r4,r16
   8efa8:	880b883a 	mov	r5,r17
   8efac:	dfc00317 	ldw	ra,12(sp)
   8efb0:	dc400217 	ldw	r17,8(sp)
   8efb4:	dc000117 	ldw	r16,4(sp)
   8efb8:	dec00404 	addi	sp,sp,16
   8efbc:	008f8781 	jmpi	8f878 <__swbuf_r>
   8efc0:	8009883a 	mov	r4,r16
   8efc4:	180b883a 	mov	r5,r3
   8efc8:	003ff806 	br	8efac <_putc_r+0xc8>

0008efcc <_realloc_r>:
   8efcc:	defff404 	addi	sp,sp,-48
   8efd0:	dd800815 	stw	r22,32(sp)
   8efd4:	dc800415 	stw	r18,16(sp)
   8efd8:	dc400315 	stw	r17,12(sp)
   8efdc:	dfc00b15 	stw	ra,44(sp)
   8efe0:	df000a15 	stw	fp,40(sp)
   8efe4:	ddc00915 	stw	r23,36(sp)
   8efe8:	dd400715 	stw	r21,28(sp)
   8efec:	dd000615 	stw	r20,24(sp)
   8eff0:	dcc00515 	stw	r19,20(sp)
   8eff4:	dc000215 	stw	r16,8(sp)
   8eff8:	2825883a 	mov	r18,r5
   8effc:	3023883a 	mov	r17,r6
   8f000:	202d883a 	mov	r22,r4
   8f004:	2800c926 	beq	r5,zero,8f32c <_realloc_r+0x360>
   8f008:	00913740 	call	91374 <__malloc_lock>
   8f00c:	943ffe04 	addi	r16,r18,-8
   8f010:	88c002c4 	addi	r3,r17,11
   8f014:	00800584 	movi	r2,22
   8f018:	82000117 	ldw	r8,4(r16)
   8f01c:	10c01b2e 	bgeu	r2,r3,8f08c <_realloc_r+0xc0>
   8f020:	00bffe04 	movi	r2,-8
   8f024:	188e703a 	and	r7,r3,r2
   8f028:	3839883a 	mov	fp,r7
   8f02c:	38001a16 	blt	r7,zero,8f098 <_realloc_r+0xcc>
   8f030:	e4401936 	bltu	fp,r17,8f098 <_realloc_r+0xcc>
   8f034:	013fff04 	movi	r4,-4
   8f038:	4126703a 	and	r19,r8,r4
   8f03c:	99c02616 	blt	r19,r7,8f0d8 <_realloc_r+0x10c>
   8f040:	802b883a 	mov	r21,r16
   8f044:	9829883a 	mov	r20,r19
   8f048:	84000204 	addi	r16,r16,8
   8f04c:	a80f883a 	mov	r7,r21
   8f050:	a70dc83a 	sub	r6,r20,fp
   8f054:	008003c4 	movi	r2,15
   8f058:	1180c136 	bltu	r2,r6,8f360 <_realloc_r+0x394>
   8f05c:	38800117 	ldw	r2,4(r7)
   8f060:	a549883a 	add	r4,r20,r21
   8f064:	1080004c 	andi	r2,r2,1
   8f068:	a084b03a 	or	r2,r20,r2
   8f06c:	38800115 	stw	r2,4(r7)
   8f070:	20c00117 	ldw	r3,4(r4)
   8f074:	18c00054 	ori	r3,r3,1
   8f078:	20c00115 	stw	r3,4(r4)
   8f07c:	b009883a 	mov	r4,r22
   8f080:	00913940 	call	91394 <__malloc_unlock>
   8f084:	8023883a 	mov	r17,r16
   8f088:	00000606 	br	8f0a4 <_realloc_r+0xd8>
   8f08c:	01c00404 	movi	r7,16
   8f090:	3839883a 	mov	fp,r7
   8f094:	e47fe72e 	bgeu	fp,r17,8f034 <_realloc_r+0x68>
   8f098:	00800304 	movi	r2,12
   8f09c:	0023883a 	mov	r17,zero
   8f0a0:	b0800015 	stw	r2,0(r22)
   8f0a4:	8805883a 	mov	r2,r17
   8f0a8:	dfc00b17 	ldw	ra,44(sp)
   8f0ac:	df000a17 	ldw	fp,40(sp)
   8f0b0:	ddc00917 	ldw	r23,36(sp)
   8f0b4:	dd800817 	ldw	r22,32(sp)
   8f0b8:	dd400717 	ldw	r21,28(sp)
   8f0bc:	dd000617 	ldw	r20,24(sp)
   8f0c0:	dcc00517 	ldw	r19,20(sp)
   8f0c4:	dc800417 	ldw	r18,16(sp)
   8f0c8:	dc400317 	ldw	r17,12(sp)
   8f0cc:	dc000217 	ldw	r16,8(sp)
   8f0d0:	dec00c04 	addi	sp,sp,48
   8f0d4:	f800283a 	ret
   8f0d8:	008002f4 	movhi	r2,11
   8f0dc:	10841104 	addi	r2,r2,4164
   8f0e0:	12400217 	ldw	r9,8(r2)
   8f0e4:	84cd883a 	add	r6,r16,r19
   8f0e8:	802b883a 	mov	r21,r16
   8f0ec:	3240b926 	beq	r6,r9,8f3d4 <_realloc_r+0x408>
   8f0f0:	31400117 	ldw	r5,4(r6)
   8f0f4:	00bfff84 	movi	r2,-2
   8f0f8:	2884703a 	and	r2,r5,r2
   8f0fc:	1185883a 	add	r2,r2,r6
   8f100:	10c00117 	ldw	r3,4(r2)
   8f104:	18c0004c 	andi	r3,r3,1
   8f108:	1807003a 	cmpeq	r3,r3,zero
   8f10c:	1800a326 	beq	r3,zero,8f39c <_realloc_r+0x3d0>
   8f110:	2908703a 	and	r4,r5,r4
   8f114:	9929883a 	add	r20,r19,r4
   8f118:	a1c0a30e 	bge	r20,r7,8f3a8 <_realloc_r+0x3dc>
   8f11c:	4080004c 	andi	r2,r8,1
   8f120:	1000551e 	bne	r2,zero,8f278 <_realloc_r+0x2ac>
   8f124:	80800017 	ldw	r2,0(r16)
   8f128:	80afc83a 	sub	r23,r16,r2
   8f12c:	b8c00117 	ldw	r3,4(r23)
   8f130:	00bfff04 	movi	r2,-4
   8f134:	1884703a 	and	r2,r3,r2
   8f138:	30002e26 	beq	r6,zero,8f1f4 <_realloc_r+0x228>
   8f13c:	3240b926 	beq	r6,r9,8f424 <_realloc_r+0x458>
   8f140:	98a9883a 	add	r20,r19,r2
   8f144:	2509883a 	add	r4,r4,r20
   8f148:	d9000015 	stw	r4,0(sp)
   8f14c:	21c02a16 	blt	r4,r7,8f1f8 <_realloc_r+0x22c>
   8f150:	30800317 	ldw	r2,12(r6)
   8f154:	30c00217 	ldw	r3,8(r6)
   8f158:	01400904 	movi	r5,36
   8f15c:	99bfff04 	addi	r6,r19,-4
   8f160:	18800315 	stw	r2,12(r3)
   8f164:	10c00215 	stw	r3,8(r2)
   8f168:	b9000317 	ldw	r4,12(r23)
   8f16c:	b8800217 	ldw	r2,8(r23)
   8f170:	b82b883a 	mov	r21,r23
   8f174:	bc000204 	addi	r16,r23,8
   8f178:	20800215 	stw	r2,8(r4)
   8f17c:	11000315 	stw	r4,12(r2)
   8f180:	2980e436 	bltu	r5,r6,8f514 <_realloc_r+0x548>
   8f184:	008004c4 	movi	r2,19
   8f188:	9009883a 	mov	r4,r18
   8f18c:	8011883a 	mov	r8,r16
   8f190:	11800f2e 	bgeu	r2,r6,8f1d0 <_realloc_r+0x204>
   8f194:	90800017 	ldw	r2,0(r18)
   8f198:	ba000404 	addi	r8,r23,16
   8f19c:	91000204 	addi	r4,r18,8
   8f1a0:	b8800215 	stw	r2,8(r23)
   8f1a4:	90c00117 	ldw	r3,4(r18)
   8f1a8:	008006c4 	movi	r2,27
   8f1ac:	b8c00315 	stw	r3,12(r23)
   8f1b0:	1180072e 	bgeu	r2,r6,8f1d0 <_realloc_r+0x204>
   8f1b4:	90c00217 	ldw	r3,8(r18)
   8f1b8:	ba000604 	addi	r8,r23,24
   8f1bc:	91000404 	addi	r4,r18,16
   8f1c0:	b8c00415 	stw	r3,16(r23)
   8f1c4:	90800317 	ldw	r2,12(r18)
   8f1c8:	b8800515 	stw	r2,20(r23)
   8f1cc:	3140e726 	beq	r6,r5,8f56c <_realloc_r+0x5a0>
   8f1d0:	20800017 	ldw	r2,0(r4)
   8f1d4:	dd000017 	ldw	r20,0(sp)
   8f1d8:	b80f883a 	mov	r7,r23
   8f1dc:	40800015 	stw	r2,0(r8)
   8f1e0:	20c00117 	ldw	r3,4(r4)
   8f1e4:	40c00115 	stw	r3,4(r8)
   8f1e8:	20800217 	ldw	r2,8(r4)
   8f1ec:	40800215 	stw	r2,8(r8)
   8f1f0:	003f9706 	br	8f050 <_realloc_r+0x84>
   8f1f4:	98a9883a 	add	r20,r19,r2
   8f1f8:	a1c01f16 	blt	r20,r7,8f278 <_realloc_r+0x2ac>
   8f1fc:	b8c00317 	ldw	r3,12(r23)
   8f200:	b8800217 	ldw	r2,8(r23)
   8f204:	99bfff04 	addi	r6,r19,-4
   8f208:	01400904 	movi	r5,36
   8f20c:	b82b883a 	mov	r21,r23
   8f210:	18800215 	stw	r2,8(r3)
   8f214:	10c00315 	stw	r3,12(r2)
   8f218:	bc000204 	addi	r16,r23,8
   8f21c:	2980c336 	bltu	r5,r6,8f52c <_realloc_r+0x560>
   8f220:	008004c4 	movi	r2,19
   8f224:	9009883a 	mov	r4,r18
   8f228:	8011883a 	mov	r8,r16
   8f22c:	11800f2e 	bgeu	r2,r6,8f26c <_realloc_r+0x2a0>
   8f230:	90800017 	ldw	r2,0(r18)
   8f234:	ba000404 	addi	r8,r23,16
   8f238:	91000204 	addi	r4,r18,8
   8f23c:	b8800215 	stw	r2,8(r23)
   8f240:	90c00117 	ldw	r3,4(r18)
   8f244:	008006c4 	movi	r2,27
   8f248:	b8c00315 	stw	r3,12(r23)
   8f24c:	1180072e 	bgeu	r2,r6,8f26c <_realloc_r+0x2a0>
   8f250:	90c00217 	ldw	r3,8(r18)
   8f254:	ba000604 	addi	r8,r23,24
   8f258:	91000404 	addi	r4,r18,16
   8f25c:	b8c00415 	stw	r3,16(r23)
   8f260:	90800317 	ldw	r2,12(r18)
   8f264:	b8800515 	stw	r2,20(r23)
   8f268:	3140c726 	beq	r6,r5,8f588 <_realloc_r+0x5bc>
   8f26c:	20800017 	ldw	r2,0(r4)
   8f270:	b80f883a 	mov	r7,r23
   8f274:	003fd906 	br	8f1dc <_realloc_r+0x210>
   8f278:	880b883a 	mov	r5,r17
   8f27c:	b009883a 	mov	r4,r22
   8f280:	008d3b00 	call	8d3b0 <_malloc_r>
   8f284:	1023883a 	mov	r17,r2
   8f288:	10002526 	beq	r2,zero,8f320 <_realloc_r+0x354>
   8f28c:	80800117 	ldw	r2,4(r16)
   8f290:	00ffff84 	movi	r3,-2
   8f294:	893ffe04 	addi	r4,r17,-8
   8f298:	10c4703a 	and	r2,r2,r3
   8f29c:	8085883a 	add	r2,r16,r2
   8f2a0:	20809526 	beq	r4,r2,8f4f8 <_realloc_r+0x52c>
   8f2a4:	99bfff04 	addi	r6,r19,-4
   8f2a8:	01c00904 	movi	r7,36
   8f2ac:	39804536 	bltu	r7,r6,8f3c4 <_realloc_r+0x3f8>
   8f2b0:	008004c4 	movi	r2,19
   8f2b4:	9009883a 	mov	r4,r18
   8f2b8:	880b883a 	mov	r5,r17
   8f2bc:	11800f2e 	bgeu	r2,r6,8f2fc <_realloc_r+0x330>
   8f2c0:	90800017 	ldw	r2,0(r18)
   8f2c4:	89400204 	addi	r5,r17,8
   8f2c8:	91000204 	addi	r4,r18,8
   8f2cc:	88800015 	stw	r2,0(r17)
   8f2d0:	90c00117 	ldw	r3,4(r18)
   8f2d4:	008006c4 	movi	r2,27
   8f2d8:	88c00115 	stw	r3,4(r17)
   8f2dc:	1180072e 	bgeu	r2,r6,8f2fc <_realloc_r+0x330>
   8f2e0:	90c00217 	ldw	r3,8(r18)
   8f2e4:	89400404 	addi	r5,r17,16
   8f2e8:	91000404 	addi	r4,r18,16
   8f2ec:	88c00215 	stw	r3,8(r17)
   8f2f0:	90800317 	ldw	r2,12(r18)
   8f2f4:	88800315 	stw	r2,12(r17)
   8f2f8:	31c09126 	beq	r6,r7,8f540 <_realloc_r+0x574>
   8f2fc:	20800017 	ldw	r2,0(r4)
   8f300:	28800015 	stw	r2,0(r5)
   8f304:	20c00117 	ldw	r3,4(r4)
   8f308:	28c00115 	stw	r3,4(r5)
   8f30c:	20800217 	ldw	r2,8(r4)
   8f310:	28800215 	stw	r2,8(r5)
   8f314:	900b883a 	mov	r5,r18
   8f318:	b009883a 	mov	r4,r22
   8f31c:	008c8280 	call	8c828 <_free_r>
   8f320:	b009883a 	mov	r4,r22
   8f324:	00913940 	call	91394 <__malloc_unlock>
   8f328:	003f5e06 	br	8f0a4 <_realloc_r+0xd8>
   8f32c:	300b883a 	mov	r5,r6
   8f330:	dfc00b17 	ldw	ra,44(sp)
   8f334:	df000a17 	ldw	fp,40(sp)
   8f338:	ddc00917 	ldw	r23,36(sp)
   8f33c:	dd800817 	ldw	r22,32(sp)
   8f340:	dd400717 	ldw	r21,28(sp)
   8f344:	dd000617 	ldw	r20,24(sp)
   8f348:	dcc00517 	ldw	r19,20(sp)
   8f34c:	dc800417 	ldw	r18,16(sp)
   8f350:	dc400317 	ldw	r17,12(sp)
   8f354:	dc000217 	ldw	r16,8(sp)
   8f358:	dec00c04 	addi	sp,sp,48
   8f35c:	008d3b01 	jmpi	8d3b0 <_malloc_r>
   8f360:	38800117 	ldw	r2,4(r7)
   8f364:	e54b883a 	add	r5,fp,r21
   8f368:	31000054 	ori	r4,r6,1
   8f36c:	1080004c 	andi	r2,r2,1
   8f370:	1704b03a 	or	r2,r2,fp
   8f374:	38800115 	stw	r2,4(r7)
   8f378:	29000115 	stw	r4,4(r5)
   8f37c:	2987883a 	add	r3,r5,r6
   8f380:	18800117 	ldw	r2,4(r3)
   8f384:	29400204 	addi	r5,r5,8
   8f388:	b009883a 	mov	r4,r22
   8f38c:	10800054 	ori	r2,r2,1
   8f390:	18800115 	stw	r2,4(r3)
   8f394:	008c8280 	call	8c828 <_free_r>
   8f398:	003f3806 	br	8f07c <_realloc_r+0xb0>
   8f39c:	000d883a 	mov	r6,zero
   8f3a0:	0009883a 	mov	r4,zero
   8f3a4:	003f5d06 	br	8f11c <_realloc_r+0x150>
   8f3a8:	30c00217 	ldw	r3,8(r6)
   8f3ac:	30800317 	ldw	r2,12(r6)
   8f3b0:	800f883a 	mov	r7,r16
   8f3b4:	84000204 	addi	r16,r16,8
   8f3b8:	10c00215 	stw	r3,8(r2)
   8f3bc:	18800315 	stw	r2,12(r3)
   8f3c0:	003f2306 	br	8f050 <_realloc_r+0x84>
   8f3c4:	8809883a 	mov	r4,r17
   8f3c8:	900b883a 	mov	r5,r18
   8f3cc:	008dc740 	call	8dc74 <memmove>
   8f3d0:	003fd006 	br	8f314 <_realloc_r+0x348>
   8f3d4:	30800117 	ldw	r2,4(r6)
   8f3d8:	e0c00404 	addi	r3,fp,16
   8f3dc:	1108703a 	and	r4,r2,r4
   8f3e0:	9905883a 	add	r2,r19,r4
   8f3e4:	10ff4d16 	blt	r2,r3,8f11c <_realloc_r+0x150>
   8f3e8:	1705c83a 	sub	r2,r2,fp
   8f3ec:	870b883a 	add	r5,r16,fp
   8f3f0:	10800054 	ori	r2,r2,1
   8f3f4:	28800115 	stw	r2,4(r5)
   8f3f8:	80c00117 	ldw	r3,4(r16)
   8f3fc:	008002f4 	movhi	r2,11
   8f400:	10841104 	addi	r2,r2,4164
   8f404:	b009883a 	mov	r4,r22
   8f408:	18c0004c 	andi	r3,r3,1
   8f40c:	e0c6b03a 	or	r3,fp,r3
   8f410:	11400215 	stw	r5,8(r2)
   8f414:	80c00115 	stw	r3,4(r16)
   8f418:	00913940 	call	91394 <__malloc_unlock>
   8f41c:	84400204 	addi	r17,r16,8
   8f420:	003f2006 	br	8f0a4 <_realloc_r+0xd8>
   8f424:	98a9883a 	add	r20,r19,r2
   8f428:	2509883a 	add	r4,r4,r20
   8f42c:	e0800404 	addi	r2,fp,16
   8f430:	d9000115 	stw	r4,4(sp)
   8f434:	20bf7016 	blt	r4,r2,8f1f8 <_realloc_r+0x22c>
   8f438:	b8c00317 	ldw	r3,12(r23)
   8f43c:	b8800217 	ldw	r2,8(r23)
   8f440:	99bfff04 	addi	r6,r19,-4
   8f444:	01400904 	movi	r5,36
   8f448:	18800215 	stw	r2,8(r3)
   8f44c:	10c00315 	stw	r3,12(r2)
   8f450:	bc400204 	addi	r17,r23,8
   8f454:	29804136 	bltu	r5,r6,8f55c <_realloc_r+0x590>
   8f458:	008004c4 	movi	r2,19
   8f45c:	9009883a 	mov	r4,r18
   8f460:	880f883a 	mov	r7,r17
   8f464:	11800f2e 	bgeu	r2,r6,8f4a4 <_realloc_r+0x4d8>
   8f468:	90800017 	ldw	r2,0(r18)
   8f46c:	b9c00404 	addi	r7,r23,16
   8f470:	91000204 	addi	r4,r18,8
   8f474:	b8800215 	stw	r2,8(r23)
   8f478:	90c00117 	ldw	r3,4(r18)
   8f47c:	008006c4 	movi	r2,27
   8f480:	b8c00315 	stw	r3,12(r23)
   8f484:	1180072e 	bgeu	r2,r6,8f4a4 <_realloc_r+0x4d8>
   8f488:	90c00217 	ldw	r3,8(r18)
   8f48c:	b9c00604 	addi	r7,r23,24
   8f490:	91000404 	addi	r4,r18,16
   8f494:	b8c00415 	stw	r3,16(r23)
   8f498:	90800317 	ldw	r2,12(r18)
   8f49c:	b8800515 	stw	r2,20(r23)
   8f4a0:	31404026 	beq	r6,r5,8f5a4 <_realloc_r+0x5d8>
   8f4a4:	20800017 	ldw	r2,0(r4)
   8f4a8:	38800015 	stw	r2,0(r7)
   8f4ac:	20c00117 	ldw	r3,4(r4)
   8f4b0:	38c00115 	stw	r3,4(r7)
   8f4b4:	20800217 	ldw	r2,8(r4)
   8f4b8:	38800215 	stw	r2,8(r7)
   8f4bc:	d8c00117 	ldw	r3,4(sp)
   8f4c0:	bf0b883a 	add	r5,r23,fp
   8f4c4:	b009883a 	mov	r4,r22
   8f4c8:	1f05c83a 	sub	r2,r3,fp
   8f4cc:	10800054 	ori	r2,r2,1
   8f4d0:	28800115 	stw	r2,4(r5)
   8f4d4:	b8c00117 	ldw	r3,4(r23)
   8f4d8:	008002f4 	movhi	r2,11
   8f4dc:	10841104 	addi	r2,r2,4164
   8f4e0:	11400215 	stw	r5,8(r2)
   8f4e4:	18c0004c 	andi	r3,r3,1
   8f4e8:	e0c6b03a 	or	r3,fp,r3
   8f4ec:	b8c00115 	stw	r3,4(r23)
   8f4f0:	00913940 	call	91394 <__malloc_unlock>
   8f4f4:	003eeb06 	br	8f0a4 <_realloc_r+0xd8>
   8f4f8:	20800117 	ldw	r2,4(r4)
   8f4fc:	00ffff04 	movi	r3,-4
   8f500:	800f883a 	mov	r7,r16
   8f504:	10c4703a 	and	r2,r2,r3
   8f508:	98a9883a 	add	r20,r19,r2
   8f50c:	84000204 	addi	r16,r16,8
   8f510:	003ecf06 	br	8f050 <_realloc_r+0x84>
   8f514:	900b883a 	mov	r5,r18
   8f518:	8009883a 	mov	r4,r16
   8f51c:	008dc740 	call	8dc74 <memmove>
   8f520:	dd000017 	ldw	r20,0(sp)
   8f524:	b80f883a 	mov	r7,r23
   8f528:	003ec906 	br	8f050 <_realloc_r+0x84>
   8f52c:	900b883a 	mov	r5,r18
   8f530:	8009883a 	mov	r4,r16
   8f534:	008dc740 	call	8dc74 <memmove>
   8f538:	b80f883a 	mov	r7,r23
   8f53c:	003ec406 	br	8f050 <_realloc_r+0x84>
   8f540:	90c00417 	ldw	r3,16(r18)
   8f544:	89400604 	addi	r5,r17,24
   8f548:	91000604 	addi	r4,r18,24
   8f54c:	88c00415 	stw	r3,16(r17)
   8f550:	90800517 	ldw	r2,20(r18)
   8f554:	88800515 	stw	r2,20(r17)
   8f558:	003f6806 	br	8f2fc <_realloc_r+0x330>
   8f55c:	900b883a 	mov	r5,r18
   8f560:	8809883a 	mov	r4,r17
   8f564:	008dc740 	call	8dc74 <memmove>
   8f568:	003fd406 	br	8f4bc <_realloc_r+0x4f0>
   8f56c:	90c00417 	ldw	r3,16(r18)
   8f570:	91000604 	addi	r4,r18,24
   8f574:	ba000804 	addi	r8,r23,32
   8f578:	b8c00615 	stw	r3,24(r23)
   8f57c:	90800517 	ldw	r2,20(r18)
   8f580:	b8800715 	stw	r2,28(r23)
   8f584:	003f1206 	br	8f1d0 <_realloc_r+0x204>
   8f588:	90c00417 	ldw	r3,16(r18)
   8f58c:	91000604 	addi	r4,r18,24
   8f590:	ba000804 	addi	r8,r23,32
   8f594:	b8c00615 	stw	r3,24(r23)
   8f598:	90800517 	ldw	r2,20(r18)
   8f59c:	b8800715 	stw	r2,28(r23)
   8f5a0:	003f3206 	br	8f26c <_realloc_r+0x2a0>
   8f5a4:	90c00417 	ldw	r3,16(r18)
   8f5a8:	91000604 	addi	r4,r18,24
   8f5ac:	b9c00804 	addi	r7,r23,32
   8f5b0:	b8c00615 	stw	r3,24(r23)
   8f5b4:	90800517 	ldw	r2,20(r18)
   8f5b8:	b8800715 	stw	r2,28(r23)
   8f5bc:	003fb906 	br	8f4a4 <_realloc_r+0x4d8>

0008f5c0 <__isinfd>:
   8f5c0:	200d883a 	mov	r6,r4
   8f5c4:	0109c83a 	sub	r4,zero,r4
   8f5c8:	2188b03a 	or	r4,r4,r6
   8f5cc:	2008d7fa 	srli	r4,r4,31
   8f5d0:	00a00034 	movhi	r2,32768
   8f5d4:	10bfffc4 	addi	r2,r2,-1
   8f5d8:	1144703a 	and	r2,r2,r5
   8f5dc:	2088b03a 	or	r4,r4,r2
   8f5e0:	009ffc34 	movhi	r2,32752
   8f5e4:	1105c83a 	sub	r2,r2,r4
   8f5e8:	0087c83a 	sub	r3,zero,r2
   8f5ec:	10c4b03a 	or	r2,r2,r3
   8f5f0:	1004d7fa 	srli	r2,r2,31
   8f5f4:	00c00044 	movi	r3,1
   8f5f8:	1885c83a 	sub	r2,r3,r2
   8f5fc:	f800283a 	ret

0008f600 <_sbrk_r>:
   8f600:	defffd04 	addi	sp,sp,-12
   8f604:	dc000015 	stw	r16,0(sp)
   8f608:	040002f4 	movhi	r16,11
   8f60c:	8409bb04 	addi	r16,r16,9964
   8f610:	dc400115 	stw	r17,4(sp)
   8f614:	80000015 	stw	zero,0(r16)
   8f618:	2023883a 	mov	r17,r4
   8f61c:	2809883a 	mov	r4,r5
   8f620:	dfc00215 	stw	ra,8(sp)
   8f624:	00915940 	call	91594 <sbrk>
   8f628:	1007883a 	mov	r3,r2
   8f62c:	00bfffc4 	movi	r2,-1
   8f630:	18800626 	beq	r3,r2,8f64c <_sbrk_r+0x4c>
   8f634:	1805883a 	mov	r2,r3
   8f638:	dfc00217 	ldw	ra,8(sp)
   8f63c:	dc400117 	ldw	r17,4(sp)
   8f640:	dc000017 	ldw	r16,0(sp)
   8f644:	dec00304 	addi	sp,sp,12
   8f648:	f800283a 	ret
   8f64c:	80800017 	ldw	r2,0(r16)
   8f650:	103ff826 	beq	r2,zero,8f634 <_sbrk_r+0x34>
   8f654:	88800015 	stw	r2,0(r17)
   8f658:	1805883a 	mov	r2,r3
   8f65c:	dfc00217 	ldw	ra,8(sp)
   8f660:	dc400117 	ldw	r17,4(sp)
   8f664:	dc000017 	ldw	r16,0(sp)
   8f668:	dec00304 	addi	sp,sp,12
   8f66c:	f800283a 	ret

0008f670 <__sclose>:
   8f670:	2940038f 	ldh	r5,14(r5)
   8f674:	008faf01 	jmpi	8faf0 <_close_r>

0008f678 <__sseek>:
   8f678:	defffe04 	addi	sp,sp,-8
   8f67c:	dc000015 	stw	r16,0(sp)
   8f680:	2821883a 	mov	r16,r5
   8f684:	2940038f 	ldh	r5,14(r5)
   8f688:	dfc00115 	stw	ra,4(sp)
   8f68c:	008fd680 	call	8fd68 <_lseek_r>
   8f690:	1007883a 	mov	r3,r2
   8f694:	00bfffc4 	movi	r2,-1
   8f698:	18800926 	beq	r3,r2,8f6c0 <__sseek+0x48>
   8f69c:	8080030b 	ldhu	r2,12(r16)
   8f6a0:	80c01415 	stw	r3,80(r16)
   8f6a4:	10840014 	ori	r2,r2,4096
   8f6a8:	8080030d 	sth	r2,12(r16)
   8f6ac:	1805883a 	mov	r2,r3
   8f6b0:	dfc00117 	ldw	ra,4(sp)
   8f6b4:	dc000017 	ldw	r16,0(sp)
   8f6b8:	dec00204 	addi	sp,sp,8
   8f6bc:	f800283a 	ret
   8f6c0:	8080030b 	ldhu	r2,12(r16)
   8f6c4:	10bbffcc 	andi	r2,r2,61439
   8f6c8:	8080030d 	sth	r2,12(r16)
   8f6cc:	1805883a 	mov	r2,r3
   8f6d0:	dfc00117 	ldw	ra,4(sp)
   8f6d4:	dc000017 	ldw	r16,0(sp)
   8f6d8:	dec00204 	addi	sp,sp,8
   8f6dc:	f800283a 	ret

0008f6e0 <__swrite>:
   8f6e0:	2880030b 	ldhu	r2,12(r5)
   8f6e4:	defffb04 	addi	sp,sp,-20
   8f6e8:	dcc00315 	stw	r19,12(sp)
   8f6ec:	1080400c 	andi	r2,r2,256
   8f6f0:	dc800215 	stw	r18,8(sp)
   8f6f4:	dc400115 	stw	r17,4(sp)
   8f6f8:	dc000015 	stw	r16,0(sp)
   8f6fc:	3027883a 	mov	r19,r6
   8f700:	3825883a 	mov	r18,r7
   8f704:	dfc00415 	stw	ra,16(sp)
   8f708:	2821883a 	mov	r16,r5
   8f70c:	000d883a 	mov	r6,zero
   8f710:	01c00084 	movi	r7,2
   8f714:	2023883a 	mov	r17,r4
   8f718:	10000226 	beq	r2,zero,8f724 <__swrite+0x44>
   8f71c:	2940038f 	ldh	r5,14(r5)
   8f720:	008fd680 	call	8fd68 <_lseek_r>
   8f724:	8080030b 	ldhu	r2,12(r16)
   8f728:	8140038f 	ldh	r5,14(r16)
   8f72c:	8809883a 	mov	r4,r17
   8f730:	10bbffcc 	andi	r2,r2,61439
   8f734:	980d883a 	mov	r6,r19
   8f738:	900f883a 	mov	r7,r18
   8f73c:	8080030d 	sth	r2,12(r16)
   8f740:	dfc00417 	ldw	ra,16(sp)
   8f744:	dcc00317 	ldw	r19,12(sp)
   8f748:	dc800217 	ldw	r18,8(sp)
   8f74c:	dc400117 	ldw	r17,4(sp)
   8f750:	dc000017 	ldw	r16,0(sp)
   8f754:	dec00504 	addi	sp,sp,20
   8f758:	008f9c41 	jmpi	8f9c4 <_write_r>

0008f75c <__sread>:
   8f75c:	defffe04 	addi	sp,sp,-8
   8f760:	dc000015 	stw	r16,0(sp)
   8f764:	2821883a 	mov	r16,r5
   8f768:	2940038f 	ldh	r5,14(r5)
   8f76c:	dfc00115 	stw	ra,4(sp)
   8f770:	008fde00 	call	8fde0 <_read_r>
   8f774:	1007883a 	mov	r3,r2
   8f778:	10000816 	blt	r2,zero,8f79c <__sread+0x40>
   8f77c:	80801417 	ldw	r2,80(r16)
   8f780:	10c5883a 	add	r2,r2,r3
   8f784:	80801415 	stw	r2,80(r16)
   8f788:	1805883a 	mov	r2,r3
   8f78c:	dfc00117 	ldw	ra,4(sp)
   8f790:	dc000017 	ldw	r16,0(sp)
   8f794:	dec00204 	addi	sp,sp,8
   8f798:	f800283a 	ret
   8f79c:	8080030b 	ldhu	r2,12(r16)
   8f7a0:	10bbffcc 	andi	r2,r2,61439
   8f7a4:	8080030d 	sth	r2,12(r16)
   8f7a8:	1805883a 	mov	r2,r3
   8f7ac:	dfc00117 	ldw	ra,4(sp)
   8f7b0:	dc000017 	ldw	r16,0(sp)
   8f7b4:	dec00204 	addi	sp,sp,8
   8f7b8:	f800283a 	ret

0008f7bc <strcmp>:
   8f7bc:	2144b03a 	or	r2,r4,r5
   8f7c0:	108000cc 	andi	r2,r2,3
   8f7c4:	10001d1e 	bne	r2,zero,8f83c <strcmp+0x80>
   8f7c8:	200f883a 	mov	r7,r4
   8f7cc:	28800017 	ldw	r2,0(r5)
   8f7d0:	21000017 	ldw	r4,0(r4)
   8f7d4:	280d883a 	mov	r6,r5
   8f7d8:	2080161e 	bne	r4,r2,8f834 <strcmp+0x78>
   8f7dc:	023fbff4 	movhi	r8,65279
   8f7e0:	423fbfc4 	addi	r8,r8,-257
   8f7e4:	2207883a 	add	r3,r4,r8
   8f7e8:	01602074 	movhi	r5,32897
   8f7ec:	29602004 	addi	r5,r5,-32640
   8f7f0:	1946703a 	and	r3,r3,r5
   8f7f4:	0104303a 	nor	r2,zero,r4
   8f7f8:	10c4703a 	and	r2,r2,r3
   8f7fc:	10001c1e 	bne	r2,zero,8f870 <strcmp+0xb4>
   8f800:	4013883a 	mov	r9,r8
   8f804:	2811883a 	mov	r8,r5
   8f808:	00000106 	br	8f810 <strcmp+0x54>
   8f80c:	1800181e 	bne	r3,zero,8f870 <strcmp+0xb4>
   8f810:	39c00104 	addi	r7,r7,4
   8f814:	39000017 	ldw	r4,0(r7)
   8f818:	31800104 	addi	r6,r6,4
   8f81c:	31400017 	ldw	r5,0(r6)
   8f820:	2245883a 	add	r2,r4,r9
   8f824:	1204703a 	and	r2,r2,r8
   8f828:	0106303a 	nor	r3,zero,r4
   8f82c:	1886703a 	and	r3,r3,r2
   8f830:	217ff626 	beq	r4,r5,8f80c <strcmp+0x50>
   8f834:	3809883a 	mov	r4,r7
   8f838:	300b883a 	mov	r5,r6
   8f83c:	20c00007 	ldb	r3,0(r4)
   8f840:	1800051e 	bne	r3,zero,8f858 <strcmp+0x9c>
   8f844:	00000606 	br	8f860 <strcmp+0xa4>
   8f848:	21000044 	addi	r4,r4,1
   8f84c:	20c00007 	ldb	r3,0(r4)
   8f850:	29400044 	addi	r5,r5,1
   8f854:	18000226 	beq	r3,zero,8f860 <strcmp+0xa4>
   8f858:	28800007 	ldb	r2,0(r5)
   8f85c:	18bffa26 	beq	r3,r2,8f848 <strcmp+0x8c>
   8f860:	20c00003 	ldbu	r3,0(r4)
   8f864:	28800003 	ldbu	r2,0(r5)
   8f868:	1885c83a 	sub	r2,r3,r2
   8f86c:	f800283a 	ret
   8f870:	0005883a 	mov	r2,zero
   8f874:	f800283a 	ret

0008f878 <__swbuf_r>:
   8f878:	defffc04 	addi	sp,sp,-16
   8f87c:	dc400215 	stw	r17,8(sp)
   8f880:	dc000115 	stw	r16,4(sp)
   8f884:	dfc00315 	stw	ra,12(sp)
   8f888:	2023883a 	mov	r17,r4
   8f88c:	2821883a 	mov	r16,r5
   8f890:	20000226 	beq	r4,zero,8f89c <__swbuf_r+0x24>
   8f894:	20800e17 	ldw	r2,56(r4)
   8f898:	10002f26 	beq	r2,zero,8f958 <__swbuf_r+0xe0>
   8f89c:	3080030b 	ldhu	r2,12(r6)
   8f8a0:	30c00617 	ldw	r3,24(r6)
   8f8a4:	1080020c 	andi	r2,r2,8
   8f8a8:	30c00215 	stw	r3,8(r6)
   8f8ac:	10002226 	beq	r2,zero,8f938 <__swbuf_r+0xc0>
   8f8b0:	30c00417 	ldw	r3,16(r6)
   8f8b4:	18002026 	beq	r3,zero,8f938 <__swbuf_r+0xc0>
   8f8b8:	31000017 	ldw	r4,0(r6)
   8f8bc:	30800517 	ldw	r2,20(r6)
   8f8c0:	20c7c83a 	sub	r3,r4,r3
   8f8c4:	18802f0e 	bge	r3,r2,8f984 <__swbuf_r+0x10c>
   8f8c8:	19400044 	addi	r5,r3,1
   8f8cc:	30800217 	ldw	r2,8(r6)
   8f8d0:	84003fcc 	andi	r16,r16,255
   8f8d4:	20c00044 	addi	r3,r4,1
   8f8d8:	10bfffc4 	addi	r2,r2,-1
   8f8dc:	30800215 	stw	r2,8(r6)
   8f8e0:	24000005 	stb	r16,0(r4)
   8f8e4:	30800517 	ldw	r2,20(r6)
   8f8e8:	30c00015 	stw	r3,0(r6)
   8f8ec:	11400c26 	beq	r2,r5,8f920 <__swbuf_r+0xa8>
   8f8f0:	3080030b 	ldhu	r2,12(r6)
   8f8f4:	1080004c 	andi	r2,r2,1
   8f8f8:	1005003a 	cmpeq	r2,r2,zero
   8f8fc:	10000626 	beq	r2,zero,8f918 <__swbuf_r+0xa0>
   8f900:	8005883a 	mov	r2,r16
   8f904:	dfc00317 	ldw	ra,12(sp)
   8f908:	dc400217 	ldw	r17,8(sp)
   8f90c:	dc000117 	ldw	r16,4(sp)
   8f910:	dec00404 	addi	sp,sp,16
   8f914:	f800283a 	ret
   8f918:	00800284 	movi	r2,10
   8f91c:	80bff81e 	bne	r16,r2,8f900 <__swbuf_r+0x88>
   8f920:	8809883a 	mov	r4,r17
   8f924:	300b883a 	mov	r5,r6
   8f928:	008c20c0 	call	8c20c <_fflush_r>
   8f92c:	103ff426 	beq	r2,zero,8f900 <__swbuf_r+0x88>
   8f930:	043fffc4 	movi	r16,-1
   8f934:	003ff206 	br	8f900 <__swbuf_r+0x88>
   8f938:	300b883a 	mov	r5,r6
   8f93c:	8809883a 	mov	r4,r17
   8f940:	d9800015 	stw	r6,0(sp)
   8f944:	008a9040 	call	8a904 <__swsetup_r>
   8f948:	d9800017 	ldw	r6,0(sp)
   8f94c:	1000061e 	bne	r2,zero,8f968 <__swbuf_r+0xf0>
   8f950:	30c00417 	ldw	r3,16(r6)
   8f954:	003fd806 	br	8f8b8 <__swbuf_r+0x40>
   8f958:	d9800015 	stw	r6,0(sp)
   8f95c:	008c4a40 	call	8c4a4 <__sinit>
   8f960:	d9800017 	ldw	r6,0(sp)
   8f964:	003fcd06 	br	8f89c <__swbuf_r+0x24>
   8f968:	3080030b 	ldhu	r2,12(r6)
   8f96c:	00c00244 	movi	r3,9
   8f970:	043fffc4 	movi	r16,-1
   8f974:	10801014 	ori	r2,r2,64
   8f978:	3080030d 	sth	r2,12(r6)
   8f97c:	88c00015 	stw	r3,0(r17)
   8f980:	003fdf06 	br	8f900 <__swbuf_r+0x88>
   8f984:	300b883a 	mov	r5,r6
   8f988:	8809883a 	mov	r4,r17
   8f98c:	d9800015 	stw	r6,0(sp)
   8f990:	008c20c0 	call	8c20c <_fflush_r>
   8f994:	d9800017 	ldw	r6,0(sp)
   8f998:	103fe51e 	bne	r2,zero,8f930 <__swbuf_r+0xb8>
   8f99c:	31000017 	ldw	r4,0(r6)
   8f9a0:	01400044 	movi	r5,1
   8f9a4:	003fc906 	br	8f8cc <__swbuf_r+0x54>

0008f9a8 <__swbuf>:
   8f9a8:	018002f4 	movhi	r6,11
   8f9ac:	31899704 	addi	r6,r6,9820
   8f9b0:	2007883a 	mov	r3,r4
   8f9b4:	31000017 	ldw	r4,0(r6)
   8f9b8:	280d883a 	mov	r6,r5
   8f9bc:	180b883a 	mov	r5,r3
   8f9c0:	008f8781 	jmpi	8f878 <__swbuf_r>

0008f9c4 <_write_r>:
   8f9c4:	defffd04 	addi	sp,sp,-12
   8f9c8:	dc000015 	stw	r16,0(sp)
   8f9cc:	040002f4 	movhi	r16,11
   8f9d0:	8409bb04 	addi	r16,r16,9964
   8f9d4:	dc400115 	stw	r17,4(sp)
   8f9d8:	80000015 	stw	zero,0(r16)
   8f9dc:	2023883a 	mov	r17,r4
   8f9e0:	2809883a 	mov	r4,r5
   8f9e4:	300b883a 	mov	r5,r6
   8f9e8:	380d883a 	mov	r6,r7
   8f9ec:	dfc00215 	stw	ra,8(sp)
   8f9f0:	00916500 	call	91650 <write>
   8f9f4:	1007883a 	mov	r3,r2
   8f9f8:	00bfffc4 	movi	r2,-1
   8f9fc:	18800626 	beq	r3,r2,8fa18 <_write_r+0x54>
   8fa00:	1805883a 	mov	r2,r3
   8fa04:	dfc00217 	ldw	ra,8(sp)
   8fa08:	dc400117 	ldw	r17,4(sp)
   8fa0c:	dc000017 	ldw	r16,0(sp)
   8fa10:	dec00304 	addi	sp,sp,12
   8fa14:	f800283a 	ret
   8fa18:	80800017 	ldw	r2,0(r16)
   8fa1c:	103ff826 	beq	r2,zero,8fa00 <_write_r+0x3c>
   8fa20:	88800015 	stw	r2,0(r17)
   8fa24:	1805883a 	mov	r2,r3
   8fa28:	dfc00217 	ldw	ra,8(sp)
   8fa2c:	dc400117 	ldw	r17,4(sp)
   8fa30:	dc000017 	ldw	r16,0(sp)
   8fa34:	dec00304 	addi	sp,sp,12
   8fa38:	f800283a 	ret

0008fa3c <_calloc_r>:
   8fa3c:	298b383a 	mul	r5,r5,r6
   8fa40:	defffe04 	addi	sp,sp,-8
   8fa44:	dc000015 	stw	r16,0(sp)
   8fa48:	dfc00115 	stw	ra,4(sp)
   8fa4c:	008d3b00 	call	8d3b0 <_malloc_r>
   8fa50:	1021883a 	mov	r16,r2
   8fa54:	01c00904 	movi	r7,36
   8fa58:	10000d26 	beq	r2,zero,8fa90 <_calloc_r+0x54>
   8fa5c:	10ffff17 	ldw	r3,-4(r2)
   8fa60:	1009883a 	mov	r4,r2
   8fa64:	00bfff04 	movi	r2,-4
   8fa68:	1886703a 	and	r3,r3,r2
   8fa6c:	1887883a 	add	r3,r3,r2
   8fa70:	180d883a 	mov	r6,r3
   8fa74:	000b883a 	mov	r5,zero
   8fa78:	38c01736 	bltu	r7,r3,8fad8 <_calloc_r+0x9c>
   8fa7c:	008004c4 	movi	r2,19
   8fa80:	10c00836 	bltu	r2,r3,8faa4 <_calloc_r+0x68>
   8fa84:	20000215 	stw	zero,8(r4)
   8fa88:	20000015 	stw	zero,0(r4)
   8fa8c:	20000115 	stw	zero,4(r4)
   8fa90:	8005883a 	mov	r2,r16
   8fa94:	dfc00117 	ldw	ra,4(sp)
   8fa98:	dc000017 	ldw	r16,0(sp)
   8fa9c:	dec00204 	addi	sp,sp,8
   8faa0:	f800283a 	ret
   8faa4:	008006c4 	movi	r2,27
   8faa8:	80000015 	stw	zero,0(r16)
   8faac:	80000115 	stw	zero,4(r16)
   8fab0:	81000204 	addi	r4,r16,8
   8fab4:	10fff32e 	bgeu	r2,r3,8fa84 <_calloc_r+0x48>
   8fab8:	80000215 	stw	zero,8(r16)
   8fabc:	80000315 	stw	zero,12(r16)
   8fac0:	81000404 	addi	r4,r16,16
   8fac4:	19ffef1e 	bne	r3,r7,8fa84 <_calloc_r+0x48>
   8fac8:	81000604 	addi	r4,r16,24
   8facc:	80000415 	stw	zero,16(r16)
   8fad0:	80000515 	stw	zero,20(r16)
   8fad4:	003feb06 	br	8fa84 <_calloc_r+0x48>
   8fad8:	008dd540 	call	8dd54 <memset>
   8fadc:	8005883a 	mov	r2,r16
   8fae0:	dfc00117 	ldw	ra,4(sp)
   8fae4:	dc000017 	ldw	r16,0(sp)
   8fae8:	dec00204 	addi	sp,sp,8
   8faec:	f800283a 	ret

0008faf0 <_close_r>:
   8faf0:	defffd04 	addi	sp,sp,-12
   8faf4:	dc000015 	stw	r16,0(sp)
   8faf8:	040002f4 	movhi	r16,11
   8fafc:	8409bb04 	addi	r16,r16,9964
   8fb00:	dc400115 	stw	r17,4(sp)
   8fb04:	80000015 	stw	zero,0(r16)
   8fb08:	2023883a 	mov	r17,r4
   8fb0c:	2809883a 	mov	r4,r5
   8fb10:	dfc00215 	stw	ra,8(sp)
   8fb14:	0090b300 	call	90b30 <close>
   8fb18:	1007883a 	mov	r3,r2
   8fb1c:	00bfffc4 	movi	r2,-1
   8fb20:	18800626 	beq	r3,r2,8fb3c <_close_r+0x4c>
   8fb24:	1805883a 	mov	r2,r3
   8fb28:	dfc00217 	ldw	ra,8(sp)
   8fb2c:	dc400117 	ldw	r17,4(sp)
   8fb30:	dc000017 	ldw	r16,0(sp)
   8fb34:	dec00304 	addi	sp,sp,12
   8fb38:	f800283a 	ret
   8fb3c:	80800017 	ldw	r2,0(r16)
   8fb40:	103ff826 	beq	r2,zero,8fb24 <_close_r+0x34>
   8fb44:	88800015 	stw	r2,0(r17)
   8fb48:	1805883a 	mov	r2,r3
   8fb4c:	dfc00217 	ldw	ra,8(sp)
   8fb50:	dc400117 	ldw	r17,4(sp)
   8fb54:	dc000017 	ldw	r16,0(sp)
   8fb58:	dec00304 	addi	sp,sp,12
   8fb5c:	f800283a 	ret

0008fb60 <_fclose_r>:
   8fb60:	defffc04 	addi	sp,sp,-16
   8fb64:	dc400115 	stw	r17,4(sp)
   8fb68:	dc000015 	stw	r16,0(sp)
   8fb6c:	dfc00315 	stw	ra,12(sp)
   8fb70:	dc800215 	stw	r18,8(sp)
   8fb74:	2821883a 	mov	r16,r5
   8fb78:	2023883a 	mov	r17,r4
   8fb7c:	28002926 	beq	r5,zero,8fc24 <_fclose_r+0xc4>
   8fb80:	008c4940 	call	8c494 <__sfp_lock_acquire>
   8fb84:	88000226 	beq	r17,zero,8fb90 <_fclose_r+0x30>
   8fb88:	88800e17 	ldw	r2,56(r17)
   8fb8c:	10002d26 	beq	r2,zero,8fc44 <_fclose_r+0xe4>
   8fb90:	8080030f 	ldh	r2,12(r16)
   8fb94:	10002226 	beq	r2,zero,8fc20 <_fclose_r+0xc0>
   8fb98:	8809883a 	mov	r4,r17
   8fb9c:	800b883a 	mov	r5,r16
   8fba0:	008c20c0 	call	8c20c <_fflush_r>
   8fba4:	1025883a 	mov	r18,r2
   8fba8:	80800b17 	ldw	r2,44(r16)
   8fbac:	10000426 	beq	r2,zero,8fbc0 <_fclose_r+0x60>
   8fbb0:	81400717 	ldw	r5,28(r16)
   8fbb4:	8809883a 	mov	r4,r17
   8fbb8:	103ee83a 	callr	r2
   8fbbc:	10002a16 	blt	r2,zero,8fc68 <_fclose_r+0x108>
   8fbc0:	8080030b 	ldhu	r2,12(r16)
   8fbc4:	1080200c 	andi	r2,r2,128
   8fbc8:	1000231e 	bne	r2,zero,8fc58 <_fclose_r+0xf8>
   8fbcc:	81400c17 	ldw	r5,48(r16)
   8fbd0:	28000526 	beq	r5,zero,8fbe8 <_fclose_r+0x88>
   8fbd4:	80801004 	addi	r2,r16,64
   8fbd8:	28800226 	beq	r5,r2,8fbe4 <_fclose_r+0x84>
   8fbdc:	8809883a 	mov	r4,r17
   8fbe0:	008c8280 	call	8c828 <_free_r>
   8fbe4:	80000c15 	stw	zero,48(r16)
   8fbe8:	81401117 	ldw	r5,68(r16)
   8fbec:	28000326 	beq	r5,zero,8fbfc <_fclose_r+0x9c>
   8fbf0:	8809883a 	mov	r4,r17
   8fbf4:	008c8280 	call	8c828 <_free_r>
   8fbf8:	80001115 	stw	zero,68(r16)
   8fbfc:	8000030d 	sth	zero,12(r16)
   8fc00:	008c4980 	call	8c498 <__sfp_lock_release>
   8fc04:	9005883a 	mov	r2,r18
   8fc08:	dfc00317 	ldw	ra,12(sp)
   8fc0c:	dc800217 	ldw	r18,8(sp)
   8fc10:	dc400117 	ldw	r17,4(sp)
   8fc14:	dc000017 	ldw	r16,0(sp)
   8fc18:	dec00404 	addi	sp,sp,16
   8fc1c:	f800283a 	ret
   8fc20:	008c4980 	call	8c498 <__sfp_lock_release>
   8fc24:	0025883a 	mov	r18,zero
   8fc28:	9005883a 	mov	r2,r18
   8fc2c:	dfc00317 	ldw	ra,12(sp)
   8fc30:	dc800217 	ldw	r18,8(sp)
   8fc34:	dc400117 	ldw	r17,4(sp)
   8fc38:	dc000017 	ldw	r16,0(sp)
   8fc3c:	dec00404 	addi	sp,sp,16
   8fc40:	f800283a 	ret
   8fc44:	8809883a 	mov	r4,r17
   8fc48:	008c4a40 	call	8c4a4 <__sinit>
   8fc4c:	8080030f 	ldh	r2,12(r16)
   8fc50:	103fd11e 	bne	r2,zero,8fb98 <_fclose_r+0x38>
   8fc54:	003ff206 	br	8fc20 <_fclose_r+0xc0>
   8fc58:	81400417 	ldw	r5,16(r16)
   8fc5c:	8809883a 	mov	r4,r17
   8fc60:	008c8280 	call	8c828 <_free_r>
   8fc64:	003fd906 	br	8fbcc <_fclose_r+0x6c>
   8fc68:	04bfffc4 	movi	r18,-1
   8fc6c:	003fd406 	br	8fbc0 <_fclose_r+0x60>

0008fc70 <fclose>:
   8fc70:	008002f4 	movhi	r2,11
   8fc74:	10899704 	addi	r2,r2,9820
   8fc78:	200b883a 	mov	r5,r4
   8fc7c:	11000017 	ldw	r4,0(r2)
   8fc80:	008fb601 	jmpi	8fb60 <_fclose_r>

0008fc84 <_fstat_r>:
   8fc84:	defffd04 	addi	sp,sp,-12
   8fc88:	dc000015 	stw	r16,0(sp)
   8fc8c:	040002f4 	movhi	r16,11
   8fc90:	8409bb04 	addi	r16,r16,9964
   8fc94:	dc400115 	stw	r17,4(sp)
   8fc98:	80000015 	stw	zero,0(r16)
   8fc9c:	2023883a 	mov	r17,r4
   8fca0:	2809883a 	mov	r4,r5
   8fca4:	300b883a 	mov	r5,r6
   8fca8:	dfc00215 	stw	ra,8(sp)
   8fcac:	0090cb80 	call	90cb8 <fstat>
   8fcb0:	1007883a 	mov	r3,r2
   8fcb4:	00bfffc4 	movi	r2,-1
   8fcb8:	18800626 	beq	r3,r2,8fcd4 <_fstat_r+0x50>
   8fcbc:	1805883a 	mov	r2,r3
   8fcc0:	dfc00217 	ldw	ra,8(sp)
   8fcc4:	dc400117 	ldw	r17,4(sp)
   8fcc8:	dc000017 	ldw	r16,0(sp)
   8fccc:	dec00304 	addi	sp,sp,12
   8fcd0:	f800283a 	ret
   8fcd4:	80800017 	ldw	r2,0(r16)
   8fcd8:	103ff826 	beq	r2,zero,8fcbc <_fstat_r+0x38>
   8fcdc:	88800015 	stw	r2,0(r17)
   8fce0:	1805883a 	mov	r2,r3
   8fce4:	dfc00217 	ldw	ra,8(sp)
   8fce8:	dc400117 	ldw	r17,4(sp)
   8fcec:	dc000017 	ldw	r16,0(sp)
   8fcf0:	dec00304 	addi	sp,sp,12
   8fcf4:	f800283a 	ret

0008fcf8 <_isatty_r>:
   8fcf8:	defffd04 	addi	sp,sp,-12
   8fcfc:	dc000015 	stw	r16,0(sp)
   8fd00:	040002f4 	movhi	r16,11
   8fd04:	8409bb04 	addi	r16,r16,9964
   8fd08:	dc400115 	stw	r17,4(sp)
   8fd0c:	80000015 	stw	zero,0(r16)
   8fd10:	2023883a 	mov	r17,r4
   8fd14:	2809883a 	mov	r4,r5
   8fd18:	dfc00215 	stw	ra,8(sp)
   8fd1c:	0090fac0 	call	90fac <isatty>
   8fd20:	1007883a 	mov	r3,r2
   8fd24:	00bfffc4 	movi	r2,-1
   8fd28:	18800626 	beq	r3,r2,8fd44 <_isatty_r+0x4c>
   8fd2c:	1805883a 	mov	r2,r3
   8fd30:	dfc00217 	ldw	ra,8(sp)
   8fd34:	dc400117 	ldw	r17,4(sp)
   8fd38:	dc000017 	ldw	r16,0(sp)
   8fd3c:	dec00304 	addi	sp,sp,12
   8fd40:	f800283a 	ret
   8fd44:	80800017 	ldw	r2,0(r16)
   8fd48:	103ff826 	beq	r2,zero,8fd2c <_isatty_r+0x34>
   8fd4c:	88800015 	stw	r2,0(r17)
   8fd50:	1805883a 	mov	r2,r3
   8fd54:	dfc00217 	ldw	ra,8(sp)
   8fd58:	dc400117 	ldw	r17,4(sp)
   8fd5c:	dc000017 	ldw	r16,0(sp)
   8fd60:	dec00304 	addi	sp,sp,12
   8fd64:	f800283a 	ret

0008fd68 <_lseek_r>:
   8fd68:	defffd04 	addi	sp,sp,-12
   8fd6c:	dc000015 	stw	r16,0(sp)
   8fd70:	040002f4 	movhi	r16,11
   8fd74:	8409bb04 	addi	r16,r16,9964
   8fd78:	dc400115 	stw	r17,4(sp)
   8fd7c:	80000015 	stw	zero,0(r16)
   8fd80:	2023883a 	mov	r17,r4
   8fd84:	2809883a 	mov	r4,r5
   8fd88:	300b883a 	mov	r5,r6
   8fd8c:	380d883a 	mov	r6,r7
   8fd90:	dfc00215 	stw	ra,8(sp)
   8fd94:	00911b80 	call	911b8 <lseek>
   8fd98:	1007883a 	mov	r3,r2
   8fd9c:	00bfffc4 	movi	r2,-1
   8fda0:	18800626 	beq	r3,r2,8fdbc <_lseek_r+0x54>
   8fda4:	1805883a 	mov	r2,r3
   8fda8:	dfc00217 	ldw	ra,8(sp)
   8fdac:	dc400117 	ldw	r17,4(sp)
   8fdb0:	dc000017 	ldw	r16,0(sp)
   8fdb4:	dec00304 	addi	sp,sp,12
   8fdb8:	f800283a 	ret
   8fdbc:	80800017 	ldw	r2,0(r16)
   8fdc0:	103ff826 	beq	r2,zero,8fda4 <_lseek_r+0x3c>
   8fdc4:	88800015 	stw	r2,0(r17)
   8fdc8:	1805883a 	mov	r2,r3
   8fdcc:	dfc00217 	ldw	ra,8(sp)
   8fdd0:	dc400117 	ldw	r17,4(sp)
   8fdd4:	dc000017 	ldw	r16,0(sp)
   8fdd8:	dec00304 	addi	sp,sp,12
   8fddc:	f800283a 	ret

0008fde0 <_read_r>:
   8fde0:	defffd04 	addi	sp,sp,-12
   8fde4:	dc000015 	stw	r16,0(sp)
   8fde8:	040002f4 	movhi	r16,11
   8fdec:	8409bb04 	addi	r16,r16,9964
   8fdf0:	dc400115 	stw	r17,4(sp)
   8fdf4:	80000015 	stw	zero,0(r16)
   8fdf8:	2023883a 	mov	r17,r4
   8fdfc:	2809883a 	mov	r4,r5
   8fe00:	300b883a 	mov	r5,r6
   8fe04:	380d883a 	mov	r6,r7
   8fe08:	dfc00215 	stw	ra,8(sp)
   8fe0c:	00913b40 	call	913b4 <read>
   8fe10:	1007883a 	mov	r3,r2
   8fe14:	00bfffc4 	movi	r2,-1
   8fe18:	18800626 	beq	r3,r2,8fe34 <_read_r+0x54>
   8fe1c:	1805883a 	mov	r2,r3
   8fe20:	dfc00217 	ldw	ra,8(sp)
   8fe24:	dc400117 	ldw	r17,4(sp)
   8fe28:	dc000017 	ldw	r16,0(sp)
   8fe2c:	dec00304 	addi	sp,sp,12
   8fe30:	f800283a 	ret
   8fe34:	80800017 	ldw	r2,0(r16)
   8fe38:	103ff826 	beq	r2,zero,8fe1c <_read_r+0x3c>
   8fe3c:	88800015 	stw	r2,0(r17)
   8fe40:	1805883a 	mov	r2,r3
   8fe44:	dfc00217 	ldw	ra,8(sp)
   8fe48:	dc400117 	ldw	r17,4(sp)
   8fe4c:	dc000017 	ldw	r16,0(sp)
   8fe50:	dec00304 	addi	sp,sp,12
   8fe54:	f800283a 	ret

0008fe58 <__udivdi3>:
   8fe58:	defff004 	addi	sp,sp,-64
   8fe5c:	2005883a 	mov	r2,r4
   8fe60:	3011883a 	mov	r8,r6
   8fe64:	df000e15 	stw	fp,56(sp)
   8fe68:	dd000a15 	stw	r20,40(sp)
   8fe6c:	dc000615 	stw	r16,24(sp)
   8fe70:	dfc00f15 	stw	ra,60(sp)
   8fe74:	ddc00d15 	stw	r23,52(sp)
   8fe78:	dd800c15 	stw	r22,48(sp)
   8fe7c:	dd400b15 	stw	r21,44(sp)
   8fe80:	dcc00915 	stw	r19,36(sp)
   8fe84:	dc800815 	stw	r18,32(sp)
   8fe88:	dc400715 	stw	r17,28(sp)
   8fe8c:	4021883a 	mov	r16,r8
   8fe90:	1039883a 	mov	fp,r2
   8fe94:	2829883a 	mov	r20,r5
   8fe98:	38003b1e 	bne	r7,zero,8ff88 <__udivdi3+0x130>
   8fe9c:	2a005c36 	bltu	r5,r8,90010 <__udivdi3+0x1b8>
   8fea0:	4000a626 	beq	r8,zero,9013c <__udivdi3+0x2e4>
   8fea4:	00bfffd4 	movui	r2,65535
   8fea8:	14009e36 	bltu	r2,r16,90124 <__udivdi3+0x2cc>
   8feac:	00803fc4 	movi	r2,255
   8feb0:	14013d36 	bltu	r2,r16,903a8 <__udivdi3+0x550>
   8feb4:	000b883a 	mov	r5,zero
   8feb8:	0005883a 	mov	r2,zero
   8febc:	8084d83a 	srl	r2,r16,r2
   8fec0:	01000274 	movhi	r4,9
   8fec4:	210e8604 	addi	r4,r4,14872
   8fec8:	01800804 	movi	r6,32
   8fecc:	1105883a 	add	r2,r2,r4
   8fed0:	10c00003 	ldbu	r3,0(r2)
   8fed4:	28c7883a 	add	r3,r5,r3
   8fed8:	30edc83a 	sub	r22,r6,r3
   8fedc:	b000ee1e 	bne	r22,zero,90298 <__udivdi3+0x440>
   8fee0:	802ad43a 	srli	r21,r16,16
   8fee4:	00800044 	movi	r2,1
   8fee8:	a423c83a 	sub	r17,r20,r16
   8feec:	85ffffcc 	andi	r23,r16,65535
   8fef0:	d8800315 	stw	r2,12(sp)
   8fef4:	8809883a 	mov	r4,r17
   8fef8:	a80b883a 	mov	r5,r21
   8fefc:	0090b200 	call	90b20 <__udivsi3>
   8ff00:	8809883a 	mov	r4,r17
   8ff04:	a80b883a 	mov	r5,r21
   8ff08:	102d883a 	mov	r22,r2
   8ff0c:	0090b280 	call	90b28 <__umodsi3>
   8ff10:	1004943a 	slli	r2,r2,16
   8ff14:	e006d43a 	srli	r3,fp,16
   8ff18:	bda3383a 	mul	r17,r23,r22
   8ff1c:	10c4b03a 	or	r2,r2,r3
   8ff20:	1440042e 	bgeu	r2,r17,8ff34 <__udivdi3+0xdc>
   8ff24:	1405883a 	add	r2,r2,r16
   8ff28:	b5bfffc4 	addi	r22,r22,-1
   8ff2c:	14000136 	bltu	r2,r16,8ff34 <__udivdi3+0xdc>
   8ff30:	14413d36 	bltu	r2,r17,90428 <__udivdi3+0x5d0>
   8ff34:	1463c83a 	sub	r17,r2,r17
   8ff38:	8809883a 	mov	r4,r17
   8ff3c:	a80b883a 	mov	r5,r21
   8ff40:	0090b200 	call	90b20 <__udivsi3>
   8ff44:	8809883a 	mov	r4,r17
   8ff48:	a80b883a 	mov	r5,r21
   8ff4c:	1029883a 	mov	r20,r2
   8ff50:	0090b280 	call	90b28 <__umodsi3>
   8ff54:	1004943a 	slli	r2,r2,16
   8ff58:	bd09383a 	mul	r4,r23,r20
   8ff5c:	e0ffffcc 	andi	r3,fp,65535
   8ff60:	10c4b03a 	or	r2,r2,r3
   8ff64:	1100042e 	bgeu	r2,r4,8ff78 <__udivdi3+0x120>
   8ff68:	8085883a 	add	r2,r16,r2
   8ff6c:	a53fffc4 	addi	r20,r20,-1
   8ff70:	14000136 	bltu	r2,r16,8ff78 <__udivdi3+0x120>
   8ff74:	11012036 	bltu	r2,r4,903f8 <__udivdi3+0x5a0>
   8ff78:	b004943a 	slli	r2,r22,16
   8ff7c:	d9000317 	ldw	r4,12(sp)
   8ff80:	a084b03a 	or	r2,r20,r2
   8ff84:	00001506 	br	8ffdc <__udivdi3+0x184>
   8ff88:	380d883a 	mov	r6,r7
   8ff8c:	29c06236 	bltu	r5,r7,90118 <__udivdi3+0x2c0>
   8ff90:	00bfffd4 	movui	r2,65535
   8ff94:	11c05a36 	bltu	r2,r7,90100 <__udivdi3+0x2a8>
   8ff98:	00803fc4 	movi	r2,255
   8ff9c:	11c0fc36 	bltu	r2,r7,90390 <__udivdi3+0x538>
   8ffa0:	000b883a 	mov	r5,zero
   8ffa4:	0005883a 	mov	r2,zero
   8ffa8:	3084d83a 	srl	r2,r6,r2
   8ffac:	01000274 	movhi	r4,9
   8ffb0:	210e8604 	addi	r4,r4,14872
   8ffb4:	01c00804 	movi	r7,32
   8ffb8:	1105883a 	add	r2,r2,r4
   8ffbc:	10c00003 	ldbu	r3,0(r2)
   8ffc0:	28c7883a 	add	r3,r5,r3
   8ffc4:	38efc83a 	sub	r23,r7,r3
   8ffc8:	b800691e 	bne	r23,zero,90170 <__udivdi3+0x318>
   8ffcc:	35000136 	bltu	r6,r20,8ffd4 <__udivdi3+0x17c>
   8ffd0:	e4005136 	bltu	fp,r16,90118 <__udivdi3+0x2c0>
   8ffd4:	00800044 	movi	r2,1
   8ffd8:	0009883a 	mov	r4,zero
   8ffdc:	2007883a 	mov	r3,r4
   8ffe0:	dfc00f17 	ldw	ra,60(sp)
   8ffe4:	df000e17 	ldw	fp,56(sp)
   8ffe8:	ddc00d17 	ldw	r23,52(sp)
   8ffec:	dd800c17 	ldw	r22,48(sp)
   8fff0:	dd400b17 	ldw	r21,44(sp)
   8fff4:	dd000a17 	ldw	r20,40(sp)
   8fff8:	dcc00917 	ldw	r19,36(sp)
   8fffc:	dc800817 	ldw	r18,32(sp)
   90000:	dc400717 	ldw	r17,28(sp)
   90004:	dc000617 	ldw	r16,24(sp)
   90008:	dec01004 	addi	sp,sp,64
   9000c:	f800283a 	ret
   90010:	00bfffd4 	movui	r2,65535
   90014:	12005036 	bltu	r2,r8,90158 <__udivdi3+0x300>
   90018:	00803fc4 	movi	r2,255
   9001c:	1200e836 	bltu	r2,r8,903c0 <__udivdi3+0x568>
   90020:	000b883a 	mov	r5,zero
   90024:	0005883a 	mov	r2,zero
   90028:	8084d83a 	srl	r2,r16,r2
   9002c:	01000274 	movhi	r4,9
   90030:	210e8604 	addi	r4,r4,14872
   90034:	01800804 	movi	r6,32
   90038:	1105883a 	add	r2,r2,r4
   9003c:	10c00003 	ldbu	r3,0(r2)
   90040:	28c7883a 	add	r3,r5,r3
   90044:	30cbc83a 	sub	r5,r6,r3
   90048:	28000626 	beq	r5,zero,90064 <__udivdi3+0x20c>
   9004c:	3145c83a 	sub	r2,r6,r5
   90050:	e084d83a 	srl	r2,fp,r2
   90054:	a146983a 	sll	r3,r20,r5
   90058:	e178983a 	sll	fp,fp,r5
   9005c:	8160983a 	sll	r16,r16,r5
   90060:	18a8b03a 	or	r20,r3,r2
   90064:	802ad43a 	srli	r21,r16,16
   90068:	a009883a 	mov	r4,r20
   9006c:	85ffffcc 	andi	r23,r16,65535
   90070:	a80b883a 	mov	r5,r21
   90074:	0090b200 	call	90b20 <__udivsi3>
   90078:	a009883a 	mov	r4,r20
   9007c:	a80b883a 	mov	r5,r21
   90080:	102d883a 	mov	r22,r2
   90084:	0090b280 	call	90b28 <__umodsi3>
   90088:	1004943a 	slli	r2,r2,16
   9008c:	e006d43a 	srli	r3,fp,16
   90090:	bda3383a 	mul	r17,r23,r22
   90094:	10c4b03a 	or	r2,r2,r3
   90098:	1440042e 	bgeu	r2,r17,900ac <__udivdi3+0x254>
   9009c:	1405883a 	add	r2,r2,r16
   900a0:	b5bfffc4 	addi	r22,r22,-1
   900a4:	14000136 	bltu	r2,r16,900ac <__udivdi3+0x254>
   900a8:	1440d536 	bltu	r2,r17,90400 <__udivdi3+0x5a8>
   900ac:	1463c83a 	sub	r17,r2,r17
   900b0:	8809883a 	mov	r4,r17
   900b4:	a80b883a 	mov	r5,r21
   900b8:	0090b200 	call	90b20 <__udivsi3>
   900bc:	8809883a 	mov	r4,r17
   900c0:	a80b883a 	mov	r5,r21
   900c4:	1029883a 	mov	r20,r2
   900c8:	0090b280 	call	90b28 <__umodsi3>
   900cc:	1004943a 	slli	r2,r2,16
   900d0:	bd09383a 	mul	r4,r23,r20
   900d4:	e0ffffcc 	andi	r3,fp,65535
   900d8:	10c4b03a 	or	r2,r2,r3
   900dc:	1100042e 	bgeu	r2,r4,900f0 <__udivdi3+0x298>
   900e0:	8085883a 	add	r2,r16,r2
   900e4:	a53fffc4 	addi	r20,r20,-1
   900e8:	14000136 	bltu	r2,r16,900f0 <__udivdi3+0x298>
   900ec:	1100c736 	bltu	r2,r4,9040c <__udivdi3+0x5b4>
   900f0:	b004943a 	slli	r2,r22,16
   900f4:	0009883a 	mov	r4,zero
   900f8:	a084b03a 	or	r2,r20,r2
   900fc:	003fb706 	br	8ffdc <__udivdi3+0x184>
   90100:	00804034 	movhi	r2,256
   90104:	10bfffc4 	addi	r2,r2,-1
   90108:	11c0a436 	bltu	r2,r7,9039c <__udivdi3+0x544>
   9010c:	01400404 	movi	r5,16
   90110:	2805883a 	mov	r2,r5
   90114:	003fa406 	br	8ffa8 <__udivdi3+0x150>
   90118:	0005883a 	mov	r2,zero
   9011c:	0009883a 	mov	r4,zero
   90120:	003fae06 	br	8ffdc <__udivdi3+0x184>
   90124:	00804034 	movhi	r2,256
   90128:	10bfffc4 	addi	r2,r2,-1
   9012c:	1400a136 	bltu	r2,r16,903b4 <__udivdi3+0x55c>
   90130:	01400404 	movi	r5,16
   90134:	2805883a 	mov	r2,r5
   90138:	003f6006 	br	8febc <__udivdi3+0x64>
   9013c:	01000044 	movi	r4,1
   90140:	000b883a 	mov	r5,zero
   90144:	0090b200 	call	90b20 <__udivsi3>
   90148:	1021883a 	mov	r16,r2
   9014c:	00bfffd4 	movui	r2,65535
   90150:	143ff436 	bltu	r2,r16,90124 <__udivdi3+0x2cc>
   90154:	003f5506 	br	8feac <__udivdi3+0x54>
   90158:	00804034 	movhi	r2,256
   9015c:	10bfffc4 	addi	r2,r2,-1
   90160:	12009a36 	bltu	r2,r8,903cc <__udivdi3+0x574>
   90164:	01400404 	movi	r5,16
   90168:	2805883a 	mov	r2,r5
   9016c:	003fae06 	br	90028 <__udivdi3+0x1d0>
   90170:	3dc5c83a 	sub	r2,r7,r23
   90174:	35c8983a 	sll	r4,r6,r23
   90178:	8086d83a 	srl	r3,r16,r2
   9017c:	a0a2d83a 	srl	r17,r20,r2
   90180:	e084d83a 	srl	r2,fp,r2
   90184:	20eab03a 	or	r21,r4,r3
   90188:	a82cd43a 	srli	r22,r21,16
   9018c:	a5c6983a 	sll	r3,r20,r23
   90190:	8809883a 	mov	r4,r17
   90194:	b00b883a 	mov	r5,r22
   90198:	1886b03a 	or	r3,r3,r2
   9019c:	d8c00215 	stw	r3,8(sp)
   901a0:	0090b200 	call	90b20 <__udivsi3>
   901a4:	8809883a 	mov	r4,r17
   901a8:	b00b883a 	mov	r5,r22
   901ac:	1029883a 	mov	r20,r2
   901b0:	0090b280 	call	90b28 <__umodsi3>
   901b4:	a8ffffcc 	andi	r3,r21,65535
   901b8:	d8c00515 	stw	r3,20(sp)
   901bc:	d9000217 	ldw	r4,8(sp)
   901c0:	d9400517 	ldw	r5,20(sp)
   901c4:	1004943a 	slli	r2,r2,16
   901c8:	2006d43a 	srli	r3,r4,16
   901cc:	85e0983a 	sll	r16,r16,r23
   901d0:	2d23383a 	mul	r17,r5,r20
   901d4:	10c4b03a 	or	r2,r2,r3
   901d8:	dc000015 	stw	r16,0(sp)
   901dc:	1440032e 	bgeu	r2,r17,901ec <__udivdi3+0x394>
   901e0:	1545883a 	add	r2,r2,r21
   901e4:	a53fffc4 	addi	r20,r20,-1
   901e8:	15407f2e 	bgeu	r2,r21,903e8 <__udivdi3+0x590>
   901ec:	1463c83a 	sub	r17,r2,r17
   901f0:	8809883a 	mov	r4,r17
   901f4:	b00b883a 	mov	r5,r22
   901f8:	0090b200 	call	90b20 <__udivsi3>
   901fc:	8809883a 	mov	r4,r17
   90200:	b00b883a 	mov	r5,r22
   90204:	1021883a 	mov	r16,r2
   90208:	0090b280 	call	90b28 <__umodsi3>
   9020c:	d8c00517 	ldw	r3,20(sp)
   90210:	d9000217 	ldw	r4,8(sp)
   90214:	1004943a 	slli	r2,r2,16
   90218:	1c0f383a 	mul	r7,r3,r16
   9021c:	20ffffcc 	andi	r3,r4,65535
   90220:	10e2b03a 	or	r17,r2,r3
   90224:	89c0032e 	bgeu	r17,r7,90234 <__udivdi3+0x3dc>
   90228:	8d63883a 	add	r17,r17,r21
   9022c:	843fffc4 	addi	r16,r16,-1
   90230:	8d40692e 	bgeu	r17,r21,903d8 <__udivdi3+0x580>
   90234:	a008943a 	slli	r4,r20,16
   90238:	d9400017 	ldw	r5,0(sp)
   9023c:	89e3c83a 	sub	r17,r17,r7
   90240:	8110b03a 	or	r8,r16,r4
   90244:	280cd43a 	srli	r6,r5,16
   90248:	28ffffcc 	andi	r3,r5,65535
   9024c:	40bfffcc 	andi	r2,r8,65535
   90250:	400ad43a 	srli	r5,r8,16
   90254:	10d3383a 	mul	r9,r2,r3
   90258:	1185383a 	mul	r2,r2,r6
   9025c:	28c7383a 	mul	r3,r5,r3
   90260:	4808d43a 	srli	r4,r9,16
   90264:	298b383a 	mul	r5,r5,r6
   90268:	10c5883a 	add	r2,r2,r3
   9026c:	2089883a 	add	r4,r4,r2
   90270:	20c0022e 	bgeu	r4,r3,9027c <__udivdi3+0x424>
   90274:	00800074 	movhi	r2,1
   90278:	288b883a 	add	r5,r5,r2
   9027c:	2004d43a 	srli	r2,r4,16
   90280:	288b883a 	add	r5,r5,r2
   90284:	89403f36 	bltu	r17,r5,90384 <__udivdi3+0x52c>
   90288:	89403926 	beq	r17,r5,90370 <__udivdi3+0x518>
   9028c:	4005883a 	mov	r2,r8
   90290:	0009883a 	mov	r4,zero
   90294:	003f5106 	br	8ffdc <__udivdi3+0x184>
   90298:	85a0983a 	sll	r16,r16,r22
   9029c:	3585c83a 	sub	r2,r6,r22
   902a0:	a0a2d83a 	srl	r17,r20,r2
   902a4:	802ad43a 	srli	r21,r16,16
   902a8:	e084d83a 	srl	r2,fp,r2
   902ac:	a586983a 	sll	r3,r20,r22
   902b0:	8809883a 	mov	r4,r17
   902b4:	a80b883a 	mov	r5,r21
   902b8:	1886b03a 	or	r3,r3,r2
   902bc:	d8c00115 	stw	r3,4(sp)
   902c0:	0090b200 	call	90b20 <__udivsi3>
   902c4:	8809883a 	mov	r4,r17
   902c8:	a80b883a 	mov	r5,r21
   902cc:	d8800415 	stw	r2,16(sp)
   902d0:	0090b280 	call	90b28 <__umodsi3>
   902d4:	d9000117 	ldw	r4,4(sp)
   902d8:	d9400417 	ldw	r5,16(sp)
   902dc:	1004943a 	slli	r2,r2,16
   902e0:	85ffffcc 	andi	r23,r16,65535
   902e4:	2006d43a 	srli	r3,r4,16
   902e8:	b963383a 	mul	r17,r23,r5
   902ec:	10c4b03a 	or	r2,r2,r3
   902f0:	1440042e 	bgeu	r2,r17,90304 <__udivdi3+0x4ac>
   902f4:	297fffc4 	addi	r5,r5,-1
   902f8:	1405883a 	add	r2,r2,r16
   902fc:	d9400415 	stw	r5,16(sp)
   90300:	1400442e 	bgeu	r2,r16,90414 <__udivdi3+0x5bc>
   90304:	1463c83a 	sub	r17,r2,r17
   90308:	8809883a 	mov	r4,r17
   9030c:	a80b883a 	mov	r5,r21
   90310:	0090b200 	call	90b20 <__udivsi3>
   90314:	8809883a 	mov	r4,r17
   90318:	a80b883a 	mov	r5,r21
   9031c:	1029883a 	mov	r20,r2
   90320:	0090b280 	call	90b28 <__umodsi3>
   90324:	d9400117 	ldw	r5,4(sp)
   90328:	1004943a 	slli	r2,r2,16
   9032c:	bd09383a 	mul	r4,r23,r20
   90330:	28ffffcc 	andi	r3,r5,65535
   90334:	10c6b03a 	or	r3,r2,r3
   90338:	1900062e 	bgeu	r3,r4,90354 <__udivdi3+0x4fc>
   9033c:	1c07883a 	add	r3,r3,r16
   90340:	a53fffc4 	addi	r20,r20,-1
   90344:	1c000336 	bltu	r3,r16,90354 <__udivdi3+0x4fc>
   90348:	1900022e 	bgeu	r3,r4,90354 <__udivdi3+0x4fc>
   9034c:	a53fffc4 	addi	r20,r20,-1
   90350:	1c07883a 	add	r3,r3,r16
   90354:	d9400417 	ldw	r5,16(sp)
   90358:	e5b8983a 	sll	fp,fp,r22
   9035c:	1923c83a 	sub	r17,r3,r4
   90360:	2804943a 	slli	r2,r5,16
   90364:	a0a8b03a 	or	r20,r20,r2
   90368:	dd000315 	stw	r20,12(sp)
   9036c:	003ee106 	br	8fef4 <__udivdi3+0x9c>
   90370:	2004943a 	slli	r2,r4,16
   90374:	e5c8983a 	sll	r4,fp,r23
   90378:	48ffffcc 	andi	r3,r9,65535
   9037c:	10c5883a 	add	r2,r2,r3
   90380:	20bfc22e 	bgeu	r4,r2,9028c <__udivdi3+0x434>
   90384:	40bfffc4 	addi	r2,r8,-1
   90388:	0009883a 	mov	r4,zero
   9038c:	003f1306 	br	8ffdc <__udivdi3+0x184>
   90390:	01400204 	movi	r5,8
   90394:	2805883a 	mov	r2,r5
   90398:	003f0306 	br	8ffa8 <__udivdi3+0x150>
   9039c:	01400604 	movi	r5,24
   903a0:	2805883a 	mov	r2,r5
   903a4:	003f0006 	br	8ffa8 <__udivdi3+0x150>
   903a8:	01400204 	movi	r5,8
   903ac:	2805883a 	mov	r2,r5
   903b0:	003ec206 	br	8febc <__udivdi3+0x64>
   903b4:	01400604 	movi	r5,24
   903b8:	2805883a 	mov	r2,r5
   903bc:	003ebf06 	br	8febc <__udivdi3+0x64>
   903c0:	01400204 	movi	r5,8
   903c4:	2805883a 	mov	r2,r5
   903c8:	003f1706 	br	90028 <__udivdi3+0x1d0>
   903cc:	01400604 	movi	r5,24
   903d0:	2805883a 	mov	r2,r5
   903d4:	003f1406 	br	90028 <__udivdi3+0x1d0>
   903d8:	89ff962e 	bgeu	r17,r7,90234 <__udivdi3+0x3dc>
   903dc:	8d63883a 	add	r17,r17,r21
   903e0:	843fffc4 	addi	r16,r16,-1
   903e4:	003f9306 	br	90234 <__udivdi3+0x3dc>
   903e8:	147f802e 	bgeu	r2,r17,901ec <__udivdi3+0x394>
   903ec:	a53fffc4 	addi	r20,r20,-1
   903f0:	1545883a 	add	r2,r2,r21
   903f4:	003f7d06 	br	901ec <__udivdi3+0x394>
   903f8:	a53fffc4 	addi	r20,r20,-1
   903fc:	003ede06 	br	8ff78 <__udivdi3+0x120>
   90400:	b5bfffc4 	addi	r22,r22,-1
   90404:	1405883a 	add	r2,r2,r16
   90408:	003f2806 	br	900ac <__udivdi3+0x254>
   9040c:	a53fffc4 	addi	r20,r20,-1
   90410:	003f3706 	br	900f0 <__udivdi3+0x298>
   90414:	147fbb2e 	bgeu	r2,r17,90304 <__udivdi3+0x4ac>
   90418:	297fffc4 	addi	r5,r5,-1
   9041c:	1405883a 	add	r2,r2,r16
   90420:	d9400415 	stw	r5,16(sp)
   90424:	003fb706 	br	90304 <__udivdi3+0x4ac>
   90428:	b5bfffc4 	addi	r22,r22,-1
   9042c:	1405883a 	add	r2,r2,r16
   90430:	003ec006 	br	8ff34 <__udivdi3+0xdc>

00090434 <__umoddi3>:
   90434:	defff104 	addi	sp,sp,-60
   90438:	dd800b15 	stw	r22,44(sp)
   9043c:	dd000915 	stw	r20,36(sp)
   90440:	dc000515 	stw	r16,20(sp)
   90444:	dfc00e15 	stw	ra,56(sp)
   90448:	df000d15 	stw	fp,52(sp)
   9044c:	ddc00c15 	stw	r23,48(sp)
   90450:	dd400a15 	stw	r21,40(sp)
   90454:	dcc00815 	stw	r19,32(sp)
   90458:	dc800715 	stw	r18,28(sp)
   9045c:	dc400615 	stw	r17,24(sp)
   90460:	3021883a 	mov	r16,r6
   90464:	202d883a 	mov	r22,r4
   90468:	2829883a 	mov	r20,r5
   9046c:	38002b1e 	bne	r7,zero,9051c <__umoddi3+0xe8>
   90470:	29805036 	bltu	r5,r6,905b4 <__umoddi3+0x180>
   90474:	30008a26 	beq	r6,zero,906a0 <__umoddi3+0x26c>
   90478:	00bfffd4 	movui	r2,65535
   9047c:	14008236 	bltu	r2,r16,90688 <__umoddi3+0x254>
   90480:	00803fc4 	movi	r2,255
   90484:	14013636 	bltu	r2,r16,90960 <__umoddi3+0x52c>
   90488:	000b883a 	mov	r5,zero
   9048c:	0005883a 	mov	r2,zero
   90490:	8084d83a 	srl	r2,r16,r2
   90494:	01000274 	movhi	r4,9
   90498:	210e8604 	addi	r4,r4,14872
   9049c:	01800804 	movi	r6,32
   904a0:	1105883a 	add	r2,r2,r4
   904a4:	10c00003 	ldbu	r3,0(r2)
   904a8:	28c7883a 	add	r3,r5,r3
   904ac:	30efc83a 	sub	r23,r6,r3
   904b0:	b800941e 	bne	r23,zero,90704 <__umoddi3+0x2d0>
   904b4:	802ad43a 	srli	r21,r16,16
   904b8:	a423c83a 	sub	r17,r20,r16
   904bc:	0039883a 	mov	fp,zero
   904c0:	853fffcc 	andi	r20,r16,65535
   904c4:	8809883a 	mov	r4,r17
   904c8:	a80b883a 	mov	r5,r21
   904cc:	0090b200 	call	90b20 <__udivsi3>
   904d0:	8809883a 	mov	r4,r17
   904d4:	a80b883a 	mov	r5,r21
   904d8:	a0a3383a 	mul	r17,r20,r2
   904dc:	0090b280 	call	90b28 <__umodsi3>
   904e0:	1004943a 	slli	r2,r2,16
   904e4:	b006d43a 	srli	r3,r22,16
   904e8:	10c4b03a 	or	r2,r2,r3
   904ec:	1440032e 	bgeu	r2,r17,904fc <__umoddi3+0xc8>
   904f0:	1405883a 	add	r2,r2,r16
   904f4:	14000136 	bltu	r2,r16,904fc <__umoddi3+0xc8>
   904f8:	14413536 	bltu	r2,r17,909d0 <__umoddi3+0x59c>
   904fc:	1463c83a 	sub	r17,r2,r17
   90500:	8809883a 	mov	r4,r17
   90504:	a80b883a 	mov	r5,r21
   90508:	0090b200 	call	90b20 <__udivsi3>
   9050c:	8809883a 	mov	r4,r17
   90510:	a0a3383a 	mul	r17,r20,r2
   90514:	a80b883a 	mov	r5,r21
   90518:	00004d06 	br	90650 <__umoddi3+0x21c>
   9051c:	380d883a 	mov	r6,r7
   90520:	29c0102e 	bgeu	r5,r7,90564 <__umoddi3+0x130>
   90524:	2011883a 	mov	r8,r4
   90528:	2813883a 	mov	r9,r5
   9052c:	4005883a 	mov	r2,r8
   90530:	4807883a 	mov	r3,r9
   90534:	dfc00e17 	ldw	ra,56(sp)
   90538:	df000d17 	ldw	fp,52(sp)
   9053c:	ddc00c17 	ldw	r23,48(sp)
   90540:	dd800b17 	ldw	r22,44(sp)
   90544:	dd400a17 	ldw	r21,40(sp)
   90548:	dd000917 	ldw	r20,36(sp)
   9054c:	dcc00817 	ldw	r19,32(sp)
   90550:	dc800717 	ldw	r18,28(sp)
   90554:	dc400617 	ldw	r17,24(sp)
   90558:	dc000517 	ldw	r16,20(sp)
   9055c:	dec00f04 	addi	sp,sp,60
   90560:	f800283a 	ret
   90564:	00bfffd4 	movui	r2,65535
   90568:	11c05a36 	bltu	r2,r7,906d4 <__umoddi3+0x2a0>
   9056c:	00803fc4 	movi	r2,255
   90570:	11c0fe36 	bltu	r2,r7,9096c <__umoddi3+0x538>
   90574:	000b883a 	mov	r5,zero
   90578:	0005883a 	mov	r2,zero
   9057c:	3084d83a 	srl	r2,r6,r2
   90580:	01000274 	movhi	r4,9
   90584:	210e8604 	addi	r4,r4,14872
   90588:	01c00804 	movi	r7,32
   9058c:	1105883a 	add	r2,r2,r4
   90590:	10c00003 	ldbu	r3,0(r2)
   90594:	28c7883a 	add	r3,r5,r3
   90598:	38ebc83a 	sub	r21,r7,r3
   9059c:	a800851e 	bne	r21,zero,907b4 <__umoddi3+0x380>
   905a0:	35005236 	bltu	r6,r20,906ec <__umoddi3+0x2b8>
   905a4:	b400512e 	bgeu	r22,r16,906ec <__umoddi3+0x2b8>
   905a8:	b011883a 	mov	r8,r22
   905ac:	a013883a 	mov	r9,r20
   905b0:	003fde06 	br	9052c <__umoddi3+0xf8>
   905b4:	00bfffd4 	movui	r2,65535
   905b8:	11804036 	bltu	r2,r6,906bc <__umoddi3+0x288>
   905bc:	00803fc4 	movi	r2,255
   905c0:	1180ed36 	bltu	r2,r6,90978 <__umoddi3+0x544>
   905c4:	000b883a 	mov	r5,zero
   905c8:	0005883a 	mov	r2,zero
   905cc:	8084d83a 	srl	r2,r16,r2
   905d0:	01000274 	movhi	r4,9
   905d4:	210e8604 	addi	r4,r4,14872
   905d8:	01800804 	movi	r6,32
   905dc:	1105883a 	add	r2,r2,r4
   905e0:	10c00003 	ldbu	r3,0(r2)
   905e4:	28c7883a 	add	r3,r5,r3
   905e8:	30c7c83a 	sub	r3,r6,r3
   905ec:	1800bf1e 	bne	r3,zero,908ec <__umoddi3+0x4b8>
   905f0:	0039883a 	mov	fp,zero
   905f4:	802ad43a 	srli	r21,r16,16
   905f8:	a009883a 	mov	r4,r20
   905fc:	85ffffcc 	andi	r23,r16,65535
   90600:	a80b883a 	mov	r5,r21
   90604:	0090b200 	call	90b20 <__udivsi3>
   90608:	a009883a 	mov	r4,r20
   9060c:	a80b883a 	mov	r5,r21
   90610:	b8a3383a 	mul	r17,r23,r2
   90614:	0090b280 	call	90b28 <__umodsi3>
   90618:	1004943a 	slli	r2,r2,16
   9061c:	b006d43a 	srli	r3,r22,16
   90620:	10c4b03a 	or	r2,r2,r3
   90624:	1440032e 	bgeu	r2,r17,90634 <__umoddi3+0x200>
   90628:	1405883a 	add	r2,r2,r16
   9062c:	14000136 	bltu	r2,r16,90634 <__umoddi3+0x200>
   90630:	1440e536 	bltu	r2,r17,909c8 <__umoddi3+0x594>
   90634:	1463c83a 	sub	r17,r2,r17
   90638:	8809883a 	mov	r4,r17
   9063c:	a80b883a 	mov	r5,r21
   90640:	0090b200 	call	90b20 <__udivsi3>
   90644:	8809883a 	mov	r4,r17
   90648:	b8a3383a 	mul	r17,r23,r2
   9064c:	a80b883a 	mov	r5,r21
   90650:	0090b280 	call	90b28 <__umodsi3>
   90654:	1004943a 	slli	r2,r2,16
   90658:	b0ffffcc 	andi	r3,r22,65535
   9065c:	10c4b03a 	or	r2,r2,r3
   90660:	1440042e 	bgeu	r2,r17,90674 <__umoddi3+0x240>
   90664:	1405883a 	add	r2,r2,r16
   90668:	14000236 	bltu	r2,r16,90674 <__umoddi3+0x240>
   9066c:	1440012e 	bgeu	r2,r17,90674 <__umoddi3+0x240>
   90670:	1405883a 	add	r2,r2,r16
   90674:	1445c83a 	sub	r2,r2,r17
   90678:	1724d83a 	srl	r18,r2,fp
   9067c:	0013883a 	mov	r9,zero
   90680:	9011883a 	mov	r8,r18
   90684:	003fa906 	br	9052c <__umoddi3+0xf8>
   90688:	00804034 	movhi	r2,256
   9068c:	10bfffc4 	addi	r2,r2,-1
   90690:	1400b036 	bltu	r2,r16,90954 <__umoddi3+0x520>
   90694:	01400404 	movi	r5,16
   90698:	2805883a 	mov	r2,r5
   9069c:	003f7c06 	br	90490 <__umoddi3+0x5c>
   906a0:	01000044 	movi	r4,1
   906a4:	000b883a 	mov	r5,zero
   906a8:	0090b200 	call	90b20 <__udivsi3>
   906ac:	1021883a 	mov	r16,r2
   906b0:	00bfffd4 	movui	r2,65535
   906b4:	143ff436 	bltu	r2,r16,90688 <__umoddi3+0x254>
   906b8:	003f7106 	br	90480 <__umoddi3+0x4c>
   906bc:	00804034 	movhi	r2,256
   906c0:	10bfffc4 	addi	r2,r2,-1
   906c4:	1180af36 	bltu	r2,r6,90984 <__umoddi3+0x550>
   906c8:	01400404 	movi	r5,16
   906cc:	2805883a 	mov	r2,r5
   906d0:	003fbe06 	br	905cc <__umoddi3+0x198>
   906d4:	00804034 	movhi	r2,256
   906d8:	10bfffc4 	addi	r2,r2,-1
   906dc:	11c0ac36 	bltu	r2,r7,90990 <__umoddi3+0x55c>
   906e0:	01400404 	movi	r5,16
   906e4:	2805883a 	mov	r2,r5
   906e8:	003fa406 	br	9057c <__umoddi3+0x148>
   906ec:	b409c83a 	sub	r4,r22,r16
   906f0:	b105803a 	cmpltu	r2,r22,r4
   906f4:	a187c83a 	sub	r3,r20,r6
   906f8:	18a9c83a 	sub	r20,r3,r2
   906fc:	202d883a 	mov	r22,r4
   90700:	003fa906 	br	905a8 <__umoddi3+0x174>
   90704:	85e0983a 	sll	r16,r16,r23
   90708:	35c5c83a 	sub	r2,r6,r23
   9070c:	a0a2d83a 	srl	r17,r20,r2
   90710:	802ad43a 	srli	r21,r16,16
   90714:	b084d83a 	srl	r2,r22,r2
   90718:	a5c6983a 	sll	r3,r20,r23
   9071c:	8809883a 	mov	r4,r17
   90720:	a80b883a 	mov	r5,r21
   90724:	1886b03a 	or	r3,r3,r2
   90728:	d8c00115 	stw	r3,4(sp)
   9072c:	853fffcc 	andi	r20,r16,65535
   90730:	0090b200 	call	90b20 <__udivsi3>
   90734:	8809883a 	mov	r4,r17
   90738:	a80b883a 	mov	r5,r21
   9073c:	a0a3383a 	mul	r17,r20,r2
   90740:	0090b280 	call	90b28 <__umodsi3>
   90744:	d9000117 	ldw	r4,4(sp)
   90748:	1004943a 	slli	r2,r2,16
   9074c:	b839883a 	mov	fp,r23
   90750:	2006d43a 	srli	r3,r4,16
   90754:	10c4b03a 	or	r2,r2,r3
   90758:	1440022e 	bgeu	r2,r17,90764 <__umoddi3+0x330>
   9075c:	1405883a 	add	r2,r2,r16
   90760:	1400962e 	bgeu	r2,r16,909bc <__umoddi3+0x588>
   90764:	1463c83a 	sub	r17,r2,r17
   90768:	8809883a 	mov	r4,r17
   9076c:	a80b883a 	mov	r5,r21
   90770:	0090b200 	call	90b20 <__udivsi3>
   90774:	8809883a 	mov	r4,r17
   90778:	a80b883a 	mov	r5,r21
   9077c:	a0a3383a 	mul	r17,r20,r2
   90780:	0090b280 	call	90b28 <__umodsi3>
   90784:	d9400117 	ldw	r5,4(sp)
   90788:	1004943a 	slli	r2,r2,16
   9078c:	28ffffcc 	andi	r3,r5,65535
   90790:	10c4b03a 	or	r2,r2,r3
   90794:	1440042e 	bgeu	r2,r17,907a8 <__umoddi3+0x374>
   90798:	1405883a 	add	r2,r2,r16
   9079c:	14000236 	bltu	r2,r16,907a8 <__umoddi3+0x374>
   907a0:	1440012e 	bgeu	r2,r17,907a8 <__umoddi3+0x374>
   907a4:	1405883a 	add	r2,r2,r16
   907a8:	b5ec983a 	sll	r22,r22,r23
   907ac:	1463c83a 	sub	r17,r2,r17
   907b0:	003f4406 	br	904c4 <__umoddi3+0x90>
   907b4:	3d4fc83a 	sub	r7,r7,r21
   907b8:	3546983a 	sll	r3,r6,r21
   907bc:	81c4d83a 	srl	r2,r16,r7
   907c0:	a1e2d83a 	srl	r17,r20,r7
   907c4:	a54c983a 	sll	r6,r20,r21
   907c8:	18aeb03a 	or	r23,r3,r2
   907cc:	b828d43a 	srli	r20,r23,16
   907d0:	b1c4d83a 	srl	r2,r22,r7
   907d4:	8809883a 	mov	r4,r17
   907d8:	a00b883a 	mov	r5,r20
   907dc:	308cb03a 	or	r6,r6,r2
   907e0:	d9c00315 	stw	r7,12(sp)
   907e4:	d9800215 	stw	r6,8(sp)
   907e8:	0090b200 	call	90b20 <__udivsi3>
   907ec:	8809883a 	mov	r4,r17
   907f0:	a00b883a 	mov	r5,r20
   907f4:	1039883a 	mov	fp,r2
   907f8:	0090b280 	call	90b28 <__umodsi3>
   907fc:	b8ffffcc 	andi	r3,r23,65535
   90800:	d8c00415 	stw	r3,16(sp)
   90804:	d9000217 	ldw	r4,8(sp)
   90808:	d9400417 	ldw	r5,16(sp)
   9080c:	1004943a 	slli	r2,r2,16
   90810:	2006d43a 	srli	r3,r4,16
   90814:	8560983a 	sll	r16,r16,r21
   90818:	2f23383a 	mul	r17,r5,fp
   9081c:	10c4b03a 	or	r2,r2,r3
   90820:	dc000015 	stw	r16,0(sp)
   90824:	b56c983a 	sll	r22,r22,r21
   90828:	1440032e 	bgeu	r2,r17,90838 <__umoddi3+0x404>
   9082c:	15c5883a 	add	r2,r2,r23
   90830:	e73fffc4 	addi	fp,fp,-1
   90834:	15c05d2e 	bgeu	r2,r23,909ac <__umoddi3+0x578>
   90838:	1463c83a 	sub	r17,r2,r17
   9083c:	8809883a 	mov	r4,r17
   90840:	a00b883a 	mov	r5,r20
   90844:	0090b200 	call	90b20 <__udivsi3>
   90848:	8809883a 	mov	r4,r17
   9084c:	a00b883a 	mov	r5,r20
   90850:	1021883a 	mov	r16,r2
   90854:	0090b280 	call	90b28 <__umodsi3>
   90858:	d8c00417 	ldw	r3,16(sp)
   9085c:	d9000217 	ldw	r4,8(sp)
   90860:	1004943a 	slli	r2,r2,16
   90864:	1c23383a 	mul	r17,r3,r16
   90868:	20ffffcc 	andi	r3,r4,65535
   9086c:	10ceb03a 	or	r7,r2,r3
   90870:	3c40032e 	bgeu	r7,r17,90880 <__umoddi3+0x44c>
   90874:	3dcf883a 	add	r7,r7,r23
   90878:	843fffc4 	addi	r16,r16,-1
   9087c:	3dc0472e 	bgeu	r7,r23,9099c <__umoddi3+0x568>
   90880:	e004943a 	slli	r2,fp,16
   90884:	d9400017 	ldw	r5,0(sp)
   90888:	3c4fc83a 	sub	r7,r7,r17
   9088c:	8084b03a 	or	r2,r16,r2
   90890:	28ffffcc 	andi	r3,r5,65535
   90894:	280cd43a 	srli	r6,r5,16
   90898:	100ad43a 	srli	r5,r2,16
   9089c:	10bfffcc 	andi	r2,r2,65535
   908a0:	10d1383a 	mul	r8,r2,r3
   908a4:	28c7383a 	mul	r3,r5,r3
   908a8:	1185383a 	mul	r2,r2,r6
   908ac:	4008d43a 	srli	r4,r8,16
   908b0:	298b383a 	mul	r5,r5,r6
   908b4:	10c5883a 	add	r2,r2,r3
   908b8:	2089883a 	add	r4,r4,r2
   908bc:	20c0022e 	bgeu	r4,r3,908c8 <__umoddi3+0x494>
   908c0:	00800074 	movhi	r2,1
   908c4:	288b883a 	add	r5,r5,r2
   908c8:	2004d43a 	srli	r2,r4,16
   908cc:	2008943a 	slli	r4,r4,16
   908d0:	40ffffcc 	andi	r3,r8,65535
   908d4:	288b883a 	add	r5,r5,r2
   908d8:	20c9883a 	add	r4,r4,r3
   908dc:	39400b36 	bltu	r7,r5,9090c <__umoddi3+0x4d8>
   908e0:	39403d26 	beq	r7,r5,909d8 <__umoddi3+0x5a4>
   908e4:	394bc83a 	sub	r5,r7,r5
   908e8:	00000f06 	br	90928 <__umoddi3+0x4f4>
   908ec:	30c5c83a 	sub	r2,r6,r3
   908f0:	1839883a 	mov	fp,r3
   908f4:	b084d83a 	srl	r2,r22,r2
   908f8:	a0c6983a 	sll	r3,r20,r3
   908fc:	8720983a 	sll	r16,r16,fp
   90900:	b72c983a 	sll	r22,r22,fp
   90904:	18a8b03a 	or	r20,r3,r2
   90908:	003f3a06 	br	905f4 <__umoddi3+0x1c0>
   9090c:	d8c00017 	ldw	r3,0(sp)
   90910:	20c5c83a 	sub	r2,r4,r3
   90914:	2089803a 	cmpltu	r4,r4,r2
   90918:	2dc7c83a 	sub	r3,r5,r23
   9091c:	1907c83a 	sub	r3,r3,r4
   90920:	38cbc83a 	sub	r5,r7,r3
   90924:	1009883a 	mov	r4,r2
   90928:	b105c83a 	sub	r2,r22,r4
   9092c:	b087803a 	cmpltu	r3,r22,r2
   90930:	28c7c83a 	sub	r3,r5,r3
   90934:	d9400317 	ldw	r5,12(sp)
   90938:	1544d83a 	srl	r2,r2,r21
   9093c:	1948983a 	sll	r4,r3,r5
   90940:	1d46d83a 	srl	r3,r3,r21
   90944:	20a4b03a 	or	r18,r4,r2
   90948:	9011883a 	mov	r8,r18
   9094c:	1813883a 	mov	r9,r3
   90950:	003ef606 	br	9052c <__umoddi3+0xf8>
   90954:	01400604 	movi	r5,24
   90958:	2805883a 	mov	r2,r5
   9095c:	003ecc06 	br	90490 <__umoddi3+0x5c>
   90960:	01400204 	movi	r5,8
   90964:	2805883a 	mov	r2,r5
   90968:	003ec906 	br	90490 <__umoddi3+0x5c>
   9096c:	01400204 	movi	r5,8
   90970:	2805883a 	mov	r2,r5
   90974:	003f0106 	br	9057c <__umoddi3+0x148>
   90978:	01400204 	movi	r5,8
   9097c:	2805883a 	mov	r2,r5
   90980:	003f1206 	br	905cc <__umoddi3+0x198>
   90984:	01400604 	movi	r5,24
   90988:	2805883a 	mov	r2,r5
   9098c:	003f0f06 	br	905cc <__umoddi3+0x198>
   90990:	01400604 	movi	r5,24
   90994:	2805883a 	mov	r2,r5
   90998:	003ef806 	br	9057c <__umoddi3+0x148>
   9099c:	3c7fb82e 	bgeu	r7,r17,90880 <__umoddi3+0x44c>
   909a0:	843fffc4 	addi	r16,r16,-1
   909a4:	3dcf883a 	add	r7,r7,r23
   909a8:	003fb506 	br	90880 <__umoddi3+0x44c>
   909ac:	147fa22e 	bgeu	r2,r17,90838 <__umoddi3+0x404>
   909b0:	e73fffc4 	addi	fp,fp,-1
   909b4:	15c5883a 	add	r2,r2,r23
   909b8:	003f9f06 	br	90838 <__umoddi3+0x404>
   909bc:	147f692e 	bgeu	r2,r17,90764 <__umoddi3+0x330>
   909c0:	1405883a 	add	r2,r2,r16
   909c4:	003f6706 	br	90764 <__umoddi3+0x330>
   909c8:	1405883a 	add	r2,r2,r16
   909cc:	003f1906 	br	90634 <__umoddi3+0x200>
   909d0:	1405883a 	add	r2,r2,r16
   909d4:	003ec906 	br	904fc <__umoddi3+0xc8>
   909d8:	b13fcc36 	bltu	r22,r4,9090c <__umoddi3+0x4d8>
   909dc:	000b883a 	mov	r5,zero
   909e0:	003fd106 	br	90928 <__umoddi3+0x4f4>

000909e4 <udivmodsi4>:
   909e4:	29001b2e 	bgeu	r5,r4,90a54 <udivmodsi4+0x70>
   909e8:	28001a16 	blt	r5,zero,90a54 <udivmodsi4+0x70>
   909ec:	00800044 	movi	r2,1
   909f0:	0007883a 	mov	r3,zero
   909f4:	01c007c4 	movi	r7,31
   909f8:	00000306 	br	90a08 <udivmodsi4+0x24>
   909fc:	19c01326 	beq	r3,r7,90a4c <udivmodsi4+0x68>
   90a00:	18c00044 	addi	r3,r3,1
   90a04:	28000416 	blt	r5,zero,90a18 <udivmodsi4+0x34>
   90a08:	294b883a 	add	r5,r5,r5
   90a0c:	1085883a 	add	r2,r2,r2
   90a10:	293ffa36 	bltu	r5,r4,909fc <udivmodsi4+0x18>
   90a14:	10000d26 	beq	r2,zero,90a4c <udivmodsi4+0x68>
   90a18:	0007883a 	mov	r3,zero
   90a1c:	21400236 	bltu	r4,r5,90a28 <udivmodsi4+0x44>
   90a20:	2149c83a 	sub	r4,r4,r5
   90a24:	1886b03a 	or	r3,r3,r2
   90a28:	1004d07a 	srli	r2,r2,1
   90a2c:	280ad07a 	srli	r5,r5,1
   90a30:	103ffa1e 	bne	r2,zero,90a1c <udivmodsi4+0x38>
   90a34:	30000226 	beq	r6,zero,90a40 <udivmodsi4+0x5c>
   90a38:	2005883a 	mov	r2,r4
   90a3c:	f800283a 	ret
   90a40:	1809883a 	mov	r4,r3
   90a44:	2005883a 	mov	r2,r4
   90a48:	f800283a 	ret
   90a4c:	0007883a 	mov	r3,zero
   90a50:	003ff806 	br	90a34 <udivmodsi4+0x50>
   90a54:	00800044 	movi	r2,1
   90a58:	0007883a 	mov	r3,zero
   90a5c:	003fef06 	br	90a1c <udivmodsi4+0x38>

00090a60 <__divsi3>:
   90a60:	defffe04 	addi	sp,sp,-8
   90a64:	dc000015 	stw	r16,0(sp)
   90a68:	dfc00115 	stw	ra,4(sp)
   90a6c:	0021883a 	mov	r16,zero
   90a70:	20000c16 	blt	r4,zero,90aa4 <__divsi3+0x44>
   90a74:	000d883a 	mov	r6,zero
   90a78:	28000e16 	blt	r5,zero,90ab4 <__divsi3+0x54>
   90a7c:	00909e40 	call	909e4 <udivmodsi4>
   90a80:	1007883a 	mov	r3,r2
   90a84:	8005003a 	cmpeq	r2,r16,zero
   90a88:	1000011e 	bne	r2,zero,90a90 <__divsi3+0x30>
   90a8c:	00c7c83a 	sub	r3,zero,r3
   90a90:	1805883a 	mov	r2,r3
   90a94:	dfc00117 	ldw	ra,4(sp)
   90a98:	dc000017 	ldw	r16,0(sp)
   90a9c:	dec00204 	addi	sp,sp,8
   90aa0:	f800283a 	ret
   90aa4:	0109c83a 	sub	r4,zero,r4
   90aa8:	04000044 	movi	r16,1
   90aac:	000d883a 	mov	r6,zero
   90ab0:	283ff20e 	bge	r5,zero,90a7c <__divsi3+0x1c>
   90ab4:	014bc83a 	sub	r5,zero,r5
   90ab8:	8021003a 	cmpeq	r16,r16,zero
   90abc:	003fef06 	br	90a7c <__divsi3+0x1c>

00090ac0 <__modsi3>:
   90ac0:	deffff04 	addi	sp,sp,-4
   90ac4:	dfc00015 	stw	ra,0(sp)
   90ac8:	01800044 	movi	r6,1
   90acc:	2807883a 	mov	r3,r5
   90ad0:	20000416 	blt	r4,zero,90ae4 <__modsi3+0x24>
   90ad4:	28000c16 	blt	r5,zero,90b08 <__modsi3+0x48>
   90ad8:	dfc00017 	ldw	ra,0(sp)
   90adc:	dec00104 	addi	sp,sp,4
   90ae0:	00909e41 	jmpi	909e4 <udivmodsi4>
   90ae4:	0109c83a 	sub	r4,zero,r4
   90ae8:	28000b16 	blt	r5,zero,90b18 <__modsi3+0x58>
   90aec:	180b883a 	mov	r5,r3
   90af0:	01800044 	movi	r6,1
   90af4:	00909e40 	call	909e4 <udivmodsi4>
   90af8:	0085c83a 	sub	r2,zero,r2
   90afc:	dfc00017 	ldw	ra,0(sp)
   90b00:	dec00104 	addi	sp,sp,4
   90b04:	f800283a 	ret
   90b08:	014bc83a 	sub	r5,zero,r5
   90b0c:	dfc00017 	ldw	ra,0(sp)
   90b10:	dec00104 	addi	sp,sp,4
   90b14:	00909e41 	jmpi	909e4 <udivmodsi4>
   90b18:	0147c83a 	sub	r3,zero,r5
   90b1c:	003ff306 	br	90aec <__modsi3+0x2c>

00090b20 <__udivsi3>:
   90b20:	000d883a 	mov	r6,zero
   90b24:	00909e41 	jmpi	909e4 <udivmodsi4>

00090b28 <__umodsi3>:
   90b28:	01800044 	movi	r6,1
   90b2c:	00909e41 	jmpi	909e4 <udivmodsi4>

00090b30 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   90b30:	defff804 	addi	sp,sp,-32
   90b34:	dfc00715 	stw	ra,28(sp)
   90b38:	df000615 	stw	fp,24(sp)
   90b3c:	df000604 	addi	fp,sp,24
   90b40:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   90b44:	e0bffc17 	ldw	r2,-16(fp)
   90b48:	1004803a 	cmplt	r2,r2,zero
   90b4c:	1000081e 	bne	r2,zero,90b70 <close+0x40>
   90b50:	e0bffc17 	ldw	r2,-16(fp)
   90b54:	10800324 	muli	r2,r2,12
   90b58:	1007883a 	mov	r3,r2
   90b5c:	008002f4 	movhi	r2,11
   90b60:	10851d04 	addi	r2,r2,5236
   90b64:	1887883a 	add	r3,r3,r2
   90b68:	e0ffff15 	stw	r3,-4(fp)
   90b6c:	00000106 	br	90b74 <close+0x44>
   90b70:	e03fff15 	stw	zero,-4(fp)
   90b74:	e0bfff17 	ldw	r2,-4(fp)
   90b78:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   90b7c:	e0bffb17 	ldw	r2,-20(fp)
   90b80:	1005003a 	cmpeq	r2,r2,zero
   90b84:	10001d1e 	bne	r2,zero,90bfc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   90b88:	e0bffb17 	ldw	r2,-20(fp)
   90b8c:	10800017 	ldw	r2,0(r2)
   90b90:	10800417 	ldw	r2,16(r2)
   90b94:	1005003a 	cmpeq	r2,r2,zero
   90b98:	1000071e 	bne	r2,zero,90bb8 <close+0x88>
   90b9c:	e0bffb17 	ldw	r2,-20(fp)
   90ba0:	10800017 	ldw	r2,0(r2)
   90ba4:	10800417 	ldw	r2,16(r2)
   90ba8:	e13ffb17 	ldw	r4,-20(fp)
   90bac:	103ee83a 	callr	r2
   90bb0:	e0bffe15 	stw	r2,-8(fp)
   90bb4:	00000106 	br	90bbc <close+0x8c>
   90bb8:	e03ffe15 	stw	zero,-8(fp)
   90bbc:	e0bffe17 	ldw	r2,-8(fp)
   90bc0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   90bc4:	e13ffc17 	ldw	r4,-16(fp)
   90bc8:	00915340 	call	91534 <alt_release_fd>
    if (rval < 0)
   90bcc:	e0bffa17 	ldw	r2,-24(fp)
   90bd0:	1004403a 	cmpge	r2,r2,zero
   90bd4:	1000071e 	bne	r2,zero,90bf4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   90bd8:	0090c2c0 	call	90c2c <alt_get_errno>
   90bdc:	e0fffa17 	ldw	r3,-24(fp)
   90be0:	00c7c83a 	sub	r3,zero,r3
   90be4:	10c00015 	stw	r3,0(r2)
      return -1;
   90be8:	00bfffc4 	movi	r2,-1
   90bec:	e0bffd15 	stw	r2,-12(fp)
   90bf0:	00000806 	br	90c14 <close+0xe4>
    }
    return 0;
   90bf4:	e03ffd15 	stw	zero,-12(fp)
   90bf8:	00000606 	br	90c14 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   90bfc:	0090c2c0 	call	90c2c <alt_get_errno>
   90c00:	1007883a 	mov	r3,r2
   90c04:	00801444 	movi	r2,81
   90c08:	18800015 	stw	r2,0(r3)
    return -1;
   90c0c:	00bfffc4 	movi	r2,-1
   90c10:	e0bffd15 	stw	r2,-12(fp)
   90c14:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   90c18:	e037883a 	mov	sp,fp
   90c1c:	dfc00117 	ldw	ra,4(sp)
   90c20:	df000017 	ldw	fp,0(sp)
   90c24:	dec00204 	addi	sp,sp,8
   90c28:	f800283a 	ret

00090c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90c2c:	defffd04 	addi	sp,sp,-12
   90c30:	dfc00215 	stw	ra,8(sp)
   90c34:	df000115 	stw	fp,4(sp)
   90c38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   90c3c:	008002f4 	movhi	r2,11
   90c40:	1089a204 	addi	r2,r2,9864
   90c44:	10800017 	ldw	r2,0(r2)
   90c48:	1005003a 	cmpeq	r2,r2,zero
   90c4c:	1000061e 	bne	r2,zero,90c68 <alt_get_errno+0x3c>
   90c50:	008002f4 	movhi	r2,11
   90c54:	1089a204 	addi	r2,r2,9864
   90c58:	10800017 	ldw	r2,0(r2)
   90c5c:	103ee83a 	callr	r2
   90c60:	e0bfff15 	stw	r2,-4(fp)
   90c64:	00000306 	br	90c74 <alt_get_errno+0x48>
   90c68:	008002f4 	movhi	r2,11
   90c6c:	1089bb04 	addi	r2,r2,9964
   90c70:	e0bfff15 	stw	r2,-4(fp)
   90c74:	e0bfff17 	ldw	r2,-4(fp)
}
   90c78:	e037883a 	mov	sp,fp
   90c7c:	dfc00117 	ldw	ra,4(sp)
   90c80:	df000017 	ldw	fp,0(sp)
   90c84:	dec00204 	addi	sp,sp,8
   90c88:	f800283a 	ret

00090c8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   90c8c:	defffc04 	addi	sp,sp,-16
   90c90:	df000315 	stw	fp,12(sp)
   90c94:	df000304 	addi	fp,sp,12
   90c98:	e13ffd15 	stw	r4,-12(fp)
   90c9c:	e17ffe15 	stw	r5,-8(fp)
   90ca0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   90ca4:	e0bfff17 	ldw	r2,-4(fp)
}
   90ca8:	e037883a 	mov	sp,fp
   90cac:	df000017 	ldw	fp,0(sp)
   90cb0:	dec00104 	addi	sp,sp,4
   90cb4:	f800283a 	ret

00090cb8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   90cb8:	defff904 	addi	sp,sp,-28
   90cbc:	dfc00615 	stw	ra,24(sp)
   90cc0:	df000515 	stw	fp,20(sp)
   90cc4:	df000504 	addi	fp,sp,20
   90cc8:	e13ffc15 	stw	r4,-16(fp)
   90ccc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   90cd0:	e0bffc17 	ldw	r2,-16(fp)
   90cd4:	1004803a 	cmplt	r2,r2,zero
   90cd8:	1000081e 	bne	r2,zero,90cfc <fstat+0x44>
   90cdc:	e0bffc17 	ldw	r2,-16(fp)
   90ce0:	10800324 	muli	r2,r2,12
   90ce4:	1007883a 	mov	r3,r2
   90ce8:	008002f4 	movhi	r2,11
   90cec:	10851d04 	addi	r2,r2,5236
   90cf0:	1887883a 	add	r3,r3,r2
   90cf4:	e0ffff15 	stw	r3,-4(fp)
   90cf8:	00000106 	br	90d00 <fstat+0x48>
   90cfc:	e03fff15 	stw	zero,-4(fp)
   90d00:	e0bfff17 	ldw	r2,-4(fp)
   90d04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   90d08:	e0bffb17 	ldw	r2,-20(fp)
   90d0c:	1005003a 	cmpeq	r2,r2,zero
   90d10:	1000121e 	bne	r2,zero,90d5c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   90d14:	e0bffb17 	ldw	r2,-20(fp)
   90d18:	10800017 	ldw	r2,0(r2)
   90d1c:	10800817 	ldw	r2,32(r2)
   90d20:	1005003a 	cmpeq	r2,r2,zero
   90d24:	1000081e 	bne	r2,zero,90d48 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   90d28:	e0bffb17 	ldw	r2,-20(fp)
   90d2c:	10800017 	ldw	r2,0(r2)
   90d30:	10800817 	ldw	r2,32(r2)
   90d34:	e13ffb17 	ldw	r4,-20(fp)
   90d38:	e17ffd17 	ldw	r5,-12(fp)
   90d3c:	103ee83a 	callr	r2
   90d40:	e0bffe15 	stw	r2,-8(fp)
   90d44:	00000b06 	br	90d74 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   90d48:	e0fffd17 	ldw	r3,-12(fp)
   90d4c:	00880004 	movi	r2,8192
   90d50:	18800115 	stw	r2,4(r3)
      return 0;
   90d54:	e03ffe15 	stw	zero,-8(fp)
   90d58:	00000606 	br	90d74 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   90d5c:	0090d8c0 	call	90d8c <alt_get_errno>
   90d60:	1007883a 	mov	r3,r2
   90d64:	00801444 	movi	r2,81
   90d68:	18800015 	stw	r2,0(r3)
    return -1;
   90d6c:	00bfffc4 	movi	r2,-1
   90d70:	e0bffe15 	stw	r2,-8(fp)
   90d74:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   90d78:	e037883a 	mov	sp,fp
   90d7c:	dfc00117 	ldw	ra,4(sp)
   90d80:	df000017 	ldw	fp,0(sp)
   90d84:	dec00204 	addi	sp,sp,8
   90d88:	f800283a 	ret

00090d8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90d8c:	defffd04 	addi	sp,sp,-12
   90d90:	dfc00215 	stw	ra,8(sp)
   90d94:	df000115 	stw	fp,4(sp)
   90d98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   90d9c:	008002f4 	movhi	r2,11
   90da0:	1089a204 	addi	r2,r2,9864
   90da4:	10800017 	ldw	r2,0(r2)
   90da8:	1005003a 	cmpeq	r2,r2,zero
   90dac:	1000061e 	bne	r2,zero,90dc8 <alt_get_errno+0x3c>
   90db0:	008002f4 	movhi	r2,11
   90db4:	1089a204 	addi	r2,r2,9864
   90db8:	10800017 	ldw	r2,0(r2)
   90dbc:	103ee83a 	callr	r2
   90dc0:	e0bfff15 	stw	r2,-4(fp)
   90dc4:	00000306 	br	90dd4 <alt_get_errno+0x48>
   90dc8:	008002f4 	movhi	r2,11
   90dcc:	1089bb04 	addi	r2,r2,9964
   90dd0:	e0bfff15 	stw	r2,-4(fp)
   90dd4:	e0bfff17 	ldw	r2,-4(fp)
}
   90dd8:	e037883a 	mov	sp,fp
   90ddc:	dfc00117 	ldw	ra,4(sp)
   90de0:	df000017 	ldw	fp,0(sp)
   90de4:	dec00204 	addi	sp,sp,8
   90de8:	f800283a 	ret

00090dec <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   90dec:	deffef04 	addi	sp,sp,-68
   90df0:	df001015 	stw	fp,64(sp)
   90df4:	df001004 	addi	fp,sp,64
   90df8:	e13ffc15 	stw	r4,-16(fp)
   90dfc:	e17ffd15 	stw	r5,-12(fp)
   90e00:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   90e04:	00bffa84 	movi	r2,-22
   90e08:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   90e0c:	e0bffc17 	ldw	r2,-16(fp)
   90e10:	10800828 	cmpgeui	r2,r2,32
   90e14:	1000601e 	bne	r2,zero,90f98 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90e18:	0005303a 	rdctl	r2,status
   90e1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90e20:	e0fff917 	ldw	r3,-28(fp)
   90e24:	00bfff84 	movi	r2,-2
   90e28:	1884703a 	and	r2,r3,r2
   90e2c:	1001703a 	wrctl	status,r2
  
  return context;
   90e30:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   90e34:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   90e38:	e0bffc17 	ldw	r2,-16(fp)
   90e3c:	00c002f4 	movhi	r3,11
   90e40:	18ca4f04 	addi	r3,r3,10556
   90e44:	100490fa 	slli	r2,r2,3
   90e48:	10c7883a 	add	r3,r2,r3
   90e4c:	e0bffe17 	ldw	r2,-8(fp)
   90e50:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   90e54:	e0bffc17 	ldw	r2,-16(fp)
   90e58:	00c002f4 	movhi	r3,11
   90e5c:	18ca4f04 	addi	r3,r3,10556
   90e60:	100490fa 	slli	r2,r2,3
   90e64:	10c5883a 	add	r2,r2,r3
   90e68:	10c00104 	addi	r3,r2,4
   90e6c:	e0bffd17 	ldw	r2,-12(fp)
   90e70:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   90e74:	e0bffe17 	ldw	r2,-8(fp)
   90e78:	1005003a 	cmpeq	r2,r2,zero
   90e7c:	1000201e 	bne	r2,zero,90f00 <alt_irq_register+0x114>
   90e80:	e0bffc17 	ldw	r2,-16(fp)
   90e84:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90e88:	0005303a 	rdctl	r2,status
   90e8c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90e90:	e0fff617 	ldw	r3,-40(fp)
   90e94:	00bfff84 	movi	r2,-2
   90e98:	1884703a 	and	r2,r3,r2
   90e9c:	1001703a 	wrctl	status,r2
  
  return context;
   90ea0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   90ea4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   90ea8:	e0fff717 	ldw	r3,-36(fp)
   90eac:	00800044 	movi	r2,1
   90eb0:	10c4983a 	sll	r2,r2,r3
   90eb4:	1007883a 	mov	r3,r2
   90eb8:	008002f4 	movhi	r2,11
   90ebc:	1089bc04 	addi	r2,r2,9968
   90ec0:	10800017 	ldw	r2,0(r2)
   90ec4:	1886b03a 	or	r3,r3,r2
   90ec8:	008002f4 	movhi	r2,11
   90ecc:	1089bc04 	addi	r2,r2,9968
   90ed0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   90ed4:	008002f4 	movhi	r2,11
   90ed8:	1089bc04 	addi	r2,r2,9968
   90edc:	10800017 	ldw	r2,0(r2)
   90ee0:	100170fa 	wrctl	ienable,r2
   90ee4:	e0bff817 	ldw	r2,-32(fp)
   90ee8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90eec:	e0bff517 	ldw	r2,-44(fp)
   90ef0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90ef4:	0005883a 	mov	r2,zero
   90ef8:	e0bfff15 	stw	r2,-4(fp)
   90efc:	00002006 	br	90f80 <alt_irq_register+0x194>
   90f00:	e0bffc17 	ldw	r2,-16(fp)
   90f04:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90f08:	0005303a 	rdctl	r2,status
   90f0c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90f10:	e0fff217 	ldw	r3,-56(fp)
   90f14:	00bfff84 	movi	r2,-2
   90f18:	1884703a 	and	r2,r3,r2
   90f1c:	1001703a 	wrctl	status,r2
  
  return context;
   90f20:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   90f24:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   90f28:	e0fff317 	ldw	r3,-52(fp)
   90f2c:	00800044 	movi	r2,1
   90f30:	10c4983a 	sll	r2,r2,r3
   90f34:	0084303a 	nor	r2,zero,r2
   90f38:	1007883a 	mov	r3,r2
   90f3c:	008002f4 	movhi	r2,11
   90f40:	1089bc04 	addi	r2,r2,9968
   90f44:	10800017 	ldw	r2,0(r2)
   90f48:	1886703a 	and	r3,r3,r2
   90f4c:	008002f4 	movhi	r2,11
   90f50:	1089bc04 	addi	r2,r2,9968
   90f54:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   90f58:	008002f4 	movhi	r2,11
   90f5c:	1089bc04 	addi	r2,r2,9968
   90f60:	10800017 	ldw	r2,0(r2)
   90f64:	100170fa 	wrctl	ienable,r2
   90f68:	e0bff417 	ldw	r2,-48(fp)
   90f6c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90f70:	e0bff117 	ldw	r2,-60(fp)
   90f74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90f78:	0005883a 	mov	r2,zero
   90f7c:	e0bfff15 	stw	r2,-4(fp)
   90f80:	e0bfff17 	ldw	r2,-4(fp)
   90f84:	e0bffb15 	stw	r2,-20(fp)
   90f88:	e0bffa17 	ldw	r2,-24(fp)
   90f8c:	e0bff015 	stw	r2,-64(fp)
   90f90:	e0bff017 	ldw	r2,-64(fp)
   90f94:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   90f98:	e0bffb17 	ldw	r2,-20(fp)
}
   90f9c:	e037883a 	mov	sp,fp
   90fa0:	df000017 	ldw	fp,0(sp)
   90fa4:	dec00104 	addi	sp,sp,4
   90fa8:	f800283a 	ret

00090fac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   90fac:	deffeb04 	addi	sp,sp,-84
   90fb0:	dfc01415 	stw	ra,80(sp)
   90fb4:	df001315 	stw	fp,76(sp)
   90fb8:	df001304 	addi	fp,sp,76
   90fbc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   90fc0:	e0bffd17 	ldw	r2,-12(fp)
   90fc4:	1004803a 	cmplt	r2,r2,zero
   90fc8:	1000081e 	bne	r2,zero,90fec <isatty+0x40>
   90fcc:	e0bffd17 	ldw	r2,-12(fp)
   90fd0:	10800324 	muli	r2,r2,12
   90fd4:	1007883a 	mov	r3,r2
   90fd8:	008002f4 	movhi	r2,11
   90fdc:	10851d04 	addi	r2,r2,5236
   90fe0:	1887883a 	add	r3,r3,r2
   90fe4:	e0ffff15 	stw	r3,-4(fp)
   90fe8:	00000106 	br	90ff0 <isatty+0x44>
   90fec:	e03fff15 	stw	zero,-4(fp)
   90ff0:	e0bfff17 	ldw	r2,-4(fp)
   90ff4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   90ff8:	e0bfed17 	ldw	r2,-76(fp)
   90ffc:	1005003a 	cmpeq	r2,r2,zero
   91000:	10000f1e 	bne	r2,zero,91040 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   91004:	e0bfed17 	ldw	r2,-76(fp)
   91008:	10800017 	ldw	r2,0(r2)
   9100c:	10800817 	ldw	r2,32(r2)
   91010:	1004c03a 	cmpne	r2,r2,zero
   91014:	1000031e 	bne	r2,zero,91024 <isatty+0x78>
    {
      return 1;
   91018:	00800044 	movi	r2,1
   9101c:	e0bffe15 	stw	r2,-8(fp)
   91020:	00000c06 	br	91054 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   91024:	e17fee04 	addi	r5,fp,-72
   91028:	e13ffd17 	ldw	r4,-12(fp)
   9102c:	0090cb80 	call	90cb8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   91030:	e0bfef17 	ldw	r2,-68(fp)
   91034:	10880020 	cmpeqi	r2,r2,8192
   91038:	e0bffe15 	stw	r2,-8(fp)
   9103c:	00000506 	br	91054 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   91040:	009106c0 	call	9106c <alt_get_errno>
   91044:	1007883a 	mov	r3,r2
   91048:	00801444 	movi	r2,81
   9104c:	18800015 	stw	r2,0(r3)
    return 0;
   91050:	e03ffe15 	stw	zero,-8(fp)
   91054:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   91058:	e037883a 	mov	sp,fp
   9105c:	dfc00117 	ldw	ra,4(sp)
   91060:	df000017 	ldw	fp,0(sp)
   91064:	dec00204 	addi	sp,sp,8
   91068:	f800283a 	ret

0009106c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9106c:	defffd04 	addi	sp,sp,-12
   91070:	dfc00215 	stw	ra,8(sp)
   91074:	df000115 	stw	fp,4(sp)
   91078:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   9107c:	008002f4 	movhi	r2,11
   91080:	1089a204 	addi	r2,r2,9864
   91084:	10800017 	ldw	r2,0(r2)
   91088:	1005003a 	cmpeq	r2,r2,zero
   9108c:	1000061e 	bne	r2,zero,910a8 <alt_get_errno+0x3c>
   91090:	008002f4 	movhi	r2,11
   91094:	1089a204 	addi	r2,r2,9864
   91098:	10800017 	ldw	r2,0(r2)
   9109c:	103ee83a 	callr	r2
   910a0:	e0bfff15 	stw	r2,-4(fp)
   910a4:	00000306 	br	910b4 <alt_get_errno+0x48>
   910a8:	008002f4 	movhi	r2,11
   910ac:	1089bb04 	addi	r2,r2,9964
   910b0:	e0bfff15 	stw	r2,-4(fp)
   910b4:	e0bfff17 	ldw	r2,-4(fp)
}
   910b8:	e037883a 	mov	sp,fp
   910bc:	dfc00117 	ldw	ra,4(sp)
   910c0:	df000017 	ldw	fp,0(sp)
   910c4:	dec00204 	addi	sp,sp,8
   910c8:	f800283a 	ret

000910cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   910cc:	defffe04 	addi	sp,sp,-8
   910d0:	dfc00115 	stw	ra,4(sp)
   910d4:	df000015 	stw	fp,0(sp)
   910d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   910dc:	01000274 	movhi	r4,9
   910e0:	210f5204 	addi	r4,r4,15688
   910e4:	01400274 	movhi	r5,9
   910e8:	294f5204 	addi	r5,r5,15688
   910ec:	018002f4 	movhi	r6,11
   910f0:	3189a704 	addi	r6,r6,9884
   910f4:	009114c0 	call	9114c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   910f8:	01000234 	movhi	r4,8
   910fc:	21000804 	addi	r4,r4,32
   91100:	01400234 	movhi	r5,8
   91104:	29400804 	addi	r5,r5,32
   91108:	01800234 	movhi	r6,8
   9110c:	31806d04 	addi	r6,r6,436
   91110:	009114c0 	call	9114c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   91114:	01000274 	movhi	r4,9
   91118:	210de004 	addi	r4,r4,14208
   9111c:	01400274 	movhi	r5,9
   91120:	294de004 	addi	r5,r5,14208
   91124:	01800274 	movhi	r6,9
   91128:	318f5204 	addi	r6,r6,15688
   9112c:	009114c0 	call	9114c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   91130:	00925980 	call	92598 <alt_dcache_flush_all>
  alt_icache_flush_all();
   91134:	00927b80 	call	927b8 <alt_icache_flush_all>
}
   91138:	e037883a 	mov	sp,fp
   9113c:	dfc00117 	ldw	ra,4(sp)
   91140:	df000017 	ldw	fp,0(sp)
   91144:	dec00204 	addi	sp,sp,8
   91148:	f800283a 	ret

0009114c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   9114c:	defffc04 	addi	sp,sp,-16
   91150:	df000315 	stw	fp,12(sp)
   91154:	df000304 	addi	fp,sp,12
   91158:	e13ffd15 	stw	r4,-12(fp)
   9115c:	e17ffe15 	stw	r5,-8(fp)
   91160:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   91164:	e0fffe17 	ldw	r3,-8(fp)
   91168:	e0bffd17 	ldw	r2,-12(fp)
   9116c:	18800e26 	beq	r3,r2,911a8 <alt_load_section+0x5c>
  {
    while( to != end )
   91170:	00000a06 	br	9119c <alt_load_section+0x50>
    {
      *to++ = *from++;
   91174:	e0bffd17 	ldw	r2,-12(fp)
   91178:	10c00017 	ldw	r3,0(r2)
   9117c:	e0bffe17 	ldw	r2,-8(fp)
   91180:	10c00015 	stw	r3,0(r2)
   91184:	e0bffe17 	ldw	r2,-8(fp)
   91188:	10800104 	addi	r2,r2,4
   9118c:	e0bffe15 	stw	r2,-8(fp)
   91190:	e0bffd17 	ldw	r2,-12(fp)
   91194:	10800104 	addi	r2,r2,4
   91198:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   9119c:	e0fffe17 	ldw	r3,-8(fp)
   911a0:	e0bfff17 	ldw	r2,-4(fp)
   911a4:	18bff31e 	bne	r3,r2,91174 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   911a8:	e037883a 	mov	sp,fp
   911ac:	df000017 	ldw	fp,0(sp)
   911b0:	dec00104 	addi	sp,sp,4
   911b4:	f800283a 	ret

000911b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   911b8:	defff804 	addi	sp,sp,-32
   911bc:	dfc00715 	stw	ra,28(sp)
   911c0:	df000615 	stw	fp,24(sp)
   911c4:	df000604 	addi	fp,sp,24
   911c8:	e13ffc15 	stw	r4,-16(fp)
   911cc:	e17ffd15 	stw	r5,-12(fp)
   911d0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   911d4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   911d8:	e0bffc17 	ldw	r2,-16(fp)
   911dc:	1004803a 	cmplt	r2,r2,zero
   911e0:	1000081e 	bne	r2,zero,91204 <lseek+0x4c>
   911e4:	e0bffc17 	ldw	r2,-16(fp)
   911e8:	10800324 	muli	r2,r2,12
   911ec:	1007883a 	mov	r3,r2
   911f0:	008002f4 	movhi	r2,11
   911f4:	10851d04 	addi	r2,r2,5236
   911f8:	1887883a 	add	r3,r3,r2
   911fc:	e0ffff15 	stw	r3,-4(fp)
   91200:	00000106 	br	91208 <lseek+0x50>
   91204:	e03fff15 	stw	zero,-4(fp)
   91208:	e0bfff17 	ldw	r2,-4(fp)
   9120c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   91210:	e0bffb17 	ldw	r2,-20(fp)
   91214:	1005003a 	cmpeq	r2,r2,zero
   91218:	1000111e 	bne	r2,zero,91260 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   9121c:	e0bffb17 	ldw	r2,-20(fp)
   91220:	10800017 	ldw	r2,0(r2)
   91224:	10800717 	ldw	r2,28(r2)
   91228:	1005003a 	cmpeq	r2,r2,zero
   9122c:	1000091e 	bne	r2,zero,91254 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   91230:	e0bffb17 	ldw	r2,-20(fp)
   91234:	10800017 	ldw	r2,0(r2)
   91238:	10800717 	ldw	r2,28(r2)
   9123c:	e13ffb17 	ldw	r4,-20(fp)
   91240:	e17ffd17 	ldw	r5,-12(fp)
   91244:	e1bffe17 	ldw	r6,-8(fp)
   91248:	103ee83a 	callr	r2
   9124c:	e0bffa15 	stw	r2,-24(fp)
   91250:	00000506 	br	91268 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   91254:	00bfde84 	movi	r2,-134
   91258:	e0bffa15 	stw	r2,-24(fp)
   9125c:	00000206 	br	91268 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   91260:	00bfebc4 	movi	r2,-81
   91264:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   91268:	e0bffa17 	ldw	r2,-24(fp)
   9126c:	1004403a 	cmpge	r2,r2,zero
   91270:	1000071e 	bne	r2,zero,91290 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   91274:	00912a80 	call	912a8 <alt_get_errno>
   91278:	1007883a 	mov	r3,r2
   9127c:	e0bffa17 	ldw	r2,-24(fp)
   91280:	0085c83a 	sub	r2,zero,r2
   91284:	18800015 	stw	r2,0(r3)
    rc = -1;
   91288:	00bfffc4 	movi	r2,-1
   9128c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   91290:	e0bffa17 	ldw	r2,-24(fp)
}
   91294:	e037883a 	mov	sp,fp
   91298:	dfc00117 	ldw	ra,4(sp)
   9129c:	df000017 	ldw	fp,0(sp)
   912a0:	dec00204 	addi	sp,sp,8
   912a4:	f800283a 	ret

000912a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   912a8:	defffd04 	addi	sp,sp,-12
   912ac:	dfc00215 	stw	ra,8(sp)
   912b0:	df000115 	stw	fp,4(sp)
   912b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   912b8:	008002f4 	movhi	r2,11
   912bc:	1089a204 	addi	r2,r2,9864
   912c0:	10800017 	ldw	r2,0(r2)
   912c4:	1005003a 	cmpeq	r2,r2,zero
   912c8:	1000061e 	bne	r2,zero,912e4 <alt_get_errno+0x3c>
   912cc:	008002f4 	movhi	r2,11
   912d0:	1089a204 	addi	r2,r2,9864
   912d4:	10800017 	ldw	r2,0(r2)
   912d8:	103ee83a 	callr	r2
   912dc:	e0bfff15 	stw	r2,-4(fp)
   912e0:	00000306 	br	912f0 <alt_get_errno+0x48>
   912e4:	008002f4 	movhi	r2,11
   912e8:	1089bb04 	addi	r2,r2,9964
   912ec:	e0bfff15 	stw	r2,-4(fp)
   912f0:	e0bfff17 	ldw	r2,-4(fp)
}
   912f4:	e037883a 	mov	sp,fp
   912f8:	dfc00117 	ldw	ra,4(sp)
   912fc:	df000017 	ldw	fp,0(sp)
   91300:	dec00204 	addi	sp,sp,8
   91304:	f800283a 	ret

00091308 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   91308:	defffd04 	addi	sp,sp,-12
   9130c:	dfc00215 	stw	ra,8(sp)
   91310:	df000115 	stw	fp,4(sp)
   91314:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   91318:	0009883a 	mov	r4,zero
   9131c:	00917d00 	call	917d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   91320:	00918040 	call	91804 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   91324:	01000274 	movhi	r4,9
   91328:	210f4804 	addi	r4,r4,15648
   9132c:	01400274 	movhi	r5,9
   91330:	294f4804 	addi	r5,r5,15648
   91334:	01800274 	movhi	r6,9
   91338:	318f4804 	addi	r6,r6,15648
   9133c:	0092b780 	call	92b78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   91340:	00926f00 	call	926f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   91344:	01000274 	movhi	r4,9
   91348:	2109d504 	addi	r4,r4,10068
   9134c:	00933740 	call	93374 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   91350:	d1202817 	ldw	r4,-32608(gp)
   91354:	d1602917 	ldw	r5,-32604(gp)
   91358:	d1a02a17 	ldw	r6,-32600(gp)
   9135c:	00802000 	call	80200 <main>
   91360:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   91364:	01000044 	movi	r4,1
   91368:	0090b300 	call	90b30 <close>
  exit (result);
   9136c:	e13fff17 	ldw	r4,-4(fp)
   91370:	00933880 	call	93388 <exit>

00091374 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   91374:	defffe04 	addi	sp,sp,-8
   91378:	df000115 	stw	fp,4(sp)
   9137c:	df000104 	addi	fp,sp,4
   91380:	e13fff15 	stw	r4,-4(fp)
}
   91384:	e037883a 	mov	sp,fp
   91388:	df000017 	ldw	fp,0(sp)
   9138c:	dec00104 	addi	sp,sp,4
   91390:	f800283a 	ret

00091394 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   91394:	defffe04 	addi	sp,sp,-8
   91398:	df000115 	stw	fp,4(sp)
   9139c:	df000104 	addi	fp,sp,4
   913a0:	e13fff15 	stw	r4,-4(fp)
}
   913a4:	e037883a 	mov	sp,fp
   913a8:	df000017 	ldw	fp,0(sp)
   913ac:	dec00104 	addi	sp,sp,4
   913b0:	f800283a 	ret

000913b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   913b4:	defff704 	addi	sp,sp,-36
   913b8:	dfc00815 	stw	ra,32(sp)
   913bc:	df000715 	stw	fp,28(sp)
   913c0:	df000704 	addi	fp,sp,28
   913c4:	e13ffb15 	stw	r4,-20(fp)
   913c8:	e17ffc15 	stw	r5,-16(fp)
   913cc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   913d0:	e0bffb17 	ldw	r2,-20(fp)
   913d4:	1004803a 	cmplt	r2,r2,zero
   913d8:	1000081e 	bne	r2,zero,913fc <read+0x48>
   913dc:	e0bffb17 	ldw	r2,-20(fp)
   913e0:	10800324 	muli	r2,r2,12
   913e4:	1007883a 	mov	r3,r2
   913e8:	008002f4 	movhi	r2,11
   913ec:	10851d04 	addi	r2,r2,5236
   913f0:	1887883a 	add	r3,r3,r2
   913f4:	e0ffff15 	stw	r3,-4(fp)
   913f8:	00000106 	br	91400 <read+0x4c>
   913fc:	e03fff15 	stw	zero,-4(fp)
   91400:	e0bfff17 	ldw	r2,-4(fp)
   91404:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   91408:	e0bffa17 	ldw	r2,-24(fp)
   9140c:	1005003a 	cmpeq	r2,r2,zero
   91410:	1000241e 	bne	r2,zero,914a4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   91414:	e0bffa17 	ldw	r2,-24(fp)
   91418:	10800217 	ldw	r2,8(r2)
   9141c:	108000cc 	andi	r2,r2,3
   91420:	10800060 	cmpeqi	r2,r2,1
   91424:	10001a1e 	bne	r2,zero,91490 <read+0xdc>
   91428:	e0bffa17 	ldw	r2,-24(fp)
   9142c:	10800017 	ldw	r2,0(r2)
   91430:	10800517 	ldw	r2,20(r2)
   91434:	1005003a 	cmpeq	r2,r2,zero
   91438:	1000151e 	bne	r2,zero,91490 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   9143c:	e0bffa17 	ldw	r2,-24(fp)
   91440:	10800017 	ldw	r2,0(r2)
   91444:	10800517 	ldw	r2,20(r2)
   91448:	e17ffc17 	ldw	r5,-16(fp)
   9144c:	e1bffd17 	ldw	r6,-12(fp)
   91450:	e13ffa17 	ldw	r4,-24(fp)
   91454:	103ee83a 	callr	r2
   91458:	e0bff915 	stw	r2,-28(fp)
   9145c:	e0bff917 	ldw	r2,-28(fp)
   91460:	1004403a 	cmpge	r2,r2,zero
   91464:	1000071e 	bne	r2,zero,91484 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   91468:	00914d40 	call	914d4 <alt_get_errno>
   9146c:	e0fff917 	ldw	r3,-28(fp)
   91470:	00c7c83a 	sub	r3,zero,r3
   91474:	10c00015 	stw	r3,0(r2)
          return -1;
   91478:	00bfffc4 	movi	r2,-1
   9147c:	e0bffe15 	stw	r2,-8(fp)
   91480:	00000e06 	br	914bc <read+0x108>
        }
        return rval;
   91484:	e0bff917 	ldw	r2,-28(fp)
   91488:	e0bffe15 	stw	r2,-8(fp)
   9148c:	00000b06 	br	914bc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   91490:	00914d40 	call	914d4 <alt_get_errno>
   91494:	1007883a 	mov	r3,r2
   91498:	00800344 	movi	r2,13
   9149c:	18800015 	stw	r2,0(r3)
   914a0:	00000406 	br	914b4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   914a4:	00914d40 	call	914d4 <alt_get_errno>
   914a8:	1007883a 	mov	r3,r2
   914ac:	00801444 	movi	r2,81
   914b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   914b4:	00bfffc4 	movi	r2,-1
   914b8:	e0bffe15 	stw	r2,-8(fp)
   914bc:	e0bffe17 	ldw	r2,-8(fp)
}
   914c0:	e037883a 	mov	sp,fp
   914c4:	dfc00117 	ldw	ra,4(sp)
   914c8:	df000017 	ldw	fp,0(sp)
   914cc:	dec00204 	addi	sp,sp,8
   914d0:	f800283a 	ret

000914d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   914d4:	defffd04 	addi	sp,sp,-12
   914d8:	dfc00215 	stw	ra,8(sp)
   914dc:	df000115 	stw	fp,4(sp)
   914e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   914e4:	008002f4 	movhi	r2,11
   914e8:	1089a204 	addi	r2,r2,9864
   914ec:	10800017 	ldw	r2,0(r2)
   914f0:	1005003a 	cmpeq	r2,r2,zero
   914f4:	1000061e 	bne	r2,zero,91510 <alt_get_errno+0x3c>
   914f8:	008002f4 	movhi	r2,11
   914fc:	1089a204 	addi	r2,r2,9864
   91500:	10800017 	ldw	r2,0(r2)
   91504:	103ee83a 	callr	r2
   91508:	e0bfff15 	stw	r2,-4(fp)
   9150c:	00000306 	br	9151c <alt_get_errno+0x48>
   91510:	008002f4 	movhi	r2,11
   91514:	1089bb04 	addi	r2,r2,9964
   91518:	e0bfff15 	stw	r2,-4(fp)
   9151c:	e0bfff17 	ldw	r2,-4(fp)
}
   91520:	e037883a 	mov	sp,fp
   91524:	dfc00117 	ldw	ra,4(sp)
   91528:	df000017 	ldw	fp,0(sp)
   9152c:	dec00204 	addi	sp,sp,8
   91530:	f800283a 	ret

00091534 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   91534:	defffe04 	addi	sp,sp,-8
   91538:	df000115 	stw	fp,4(sp)
   9153c:	df000104 	addi	fp,sp,4
   91540:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   91544:	e0bfff17 	ldw	r2,-4(fp)
   91548:	108000d0 	cmplti	r2,r2,3
   9154c:	10000d1e 	bne	r2,zero,91584 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   91550:	e0bfff17 	ldw	r2,-4(fp)
   91554:	00c002f4 	movhi	r3,11
   91558:	18c51d04 	addi	r3,r3,5236
   9155c:	10800324 	muli	r2,r2,12
   91560:	10c5883a 	add	r2,r2,r3
   91564:	10800204 	addi	r2,r2,8
   91568:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   9156c:	e0bfff17 	ldw	r2,-4(fp)
   91570:	00c002f4 	movhi	r3,11
   91574:	18c51d04 	addi	r3,r3,5236
   91578:	10800324 	muli	r2,r2,12
   9157c:	10c5883a 	add	r2,r2,r3
   91580:	10000015 	stw	zero,0(r2)
  }
}
   91584:	e037883a 	mov	sp,fp
   91588:	df000017 	ldw	fp,0(sp)
   9158c:	dec00104 	addi	sp,sp,4
   91590:	f800283a 	ret

00091594 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   91594:	defff804 	addi	sp,sp,-32
   91598:	df000715 	stw	fp,28(sp)
   9159c:	df000704 	addi	fp,sp,28
   915a0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   915a4:	0005303a 	rdctl	r2,status
   915a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   915ac:	e0fffb17 	ldw	r3,-20(fp)
   915b0:	00bfff84 	movi	r2,-2
   915b4:	1884703a 	and	r2,r3,r2
   915b8:	1001703a 	wrctl	status,r2
  
  return context;
   915bc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   915c0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   915c4:	d0a00f17 	ldw	r2,-32708(gp)
   915c8:	10c000c4 	addi	r3,r2,3
   915cc:	00bfff04 	movi	r2,-4
   915d0:	1884703a 	and	r2,r3,r2
   915d4:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   915d8:	d0e00f17 	ldw	r3,-32708(gp)
   915dc:	e0bffe17 	ldw	r2,-8(fp)
   915e0:	1887883a 	add	r3,r3,r2
   915e4:	00800434 	movhi	r2,16
   915e8:	10800004 	addi	r2,r2,0
   915ec:	10c0072e 	bgeu	r2,r3,9160c <sbrk+0x78>
   915f0:	e0bffd17 	ldw	r2,-12(fp)
   915f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   915f8:	e0bffa17 	ldw	r2,-24(fp)
   915fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   91600:	00bfffc4 	movi	r2,-1
   91604:	e0bfff15 	stw	r2,-4(fp)
   91608:	00000c06 	br	9163c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   9160c:	d0a00f17 	ldw	r2,-32708(gp)
   91610:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   91614:	d0e00f17 	ldw	r3,-32708(gp)
   91618:	e0bffe17 	ldw	r2,-8(fp)
   9161c:	1885883a 	add	r2,r3,r2
   91620:	d0a00f15 	stw	r2,-32708(gp)
   91624:	e0bffd17 	ldw	r2,-12(fp)
   91628:	e0bff915 	stw	r2,-28(fp)
   9162c:	e0bff917 	ldw	r2,-28(fp)
   91630:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   91634:	e0bffc17 	ldw	r2,-16(fp)
   91638:	e0bfff15 	stw	r2,-4(fp)
   9163c:	e0bfff17 	ldw	r2,-4(fp)
} 
   91640:	e037883a 	mov	sp,fp
   91644:	df000017 	ldw	fp,0(sp)
   91648:	dec00104 	addi	sp,sp,4
   9164c:	f800283a 	ret

00091650 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   91650:	defff704 	addi	sp,sp,-36
   91654:	dfc00815 	stw	ra,32(sp)
   91658:	df000715 	stw	fp,28(sp)
   9165c:	df000704 	addi	fp,sp,28
   91660:	e13ffb15 	stw	r4,-20(fp)
   91664:	e17ffc15 	stw	r5,-16(fp)
   91668:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   9166c:	e0bffb17 	ldw	r2,-20(fp)
   91670:	1004803a 	cmplt	r2,r2,zero
   91674:	1000081e 	bne	r2,zero,91698 <write+0x48>
   91678:	e0bffb17 	ldw	r2,-20(fp)
   9167c:	10800324 	muli	r2,r2,12
   91680:	1007883a 	mov	r3,r2
   91684:	008002f4 	movhi	r2,11
   91688:	10851d04 	addi	r2,r2,5236
   9168c:	1887883a 	add	r3,r3,r2
   91690:	e0ffff15 	stw	r3,-4(fp)
   91694:	00000106 	br	9169c <write+0x4c>
   91698:	e03fff15 	stw	zero,-4(fp)
   9169c:	e0bfff17 	ldw	r2,-4(fp)
   916a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   916a4:	e0bffa17 	ldw	r2,-24(fp)
   916a8:	1005003a 	cmpeq	r2,r2,zero
   916ac:	1000241e 	bne	r2,zero,91740 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   916b0:	e0bffa17 	ldw	r2,-24(fp)
   916b4:	10800217 	ldw	r2,8(r2)
   916b8:	108000cc 	andi	r2,r2,3
   916bc:	1005003a 	cmpeq	r2,r2,zero
   916c0:	10001a1e 	bne	r2,zero,9172c <write+0xdc>
   916c4:	e0bffa17 	ldw	r2,-24(fp)
   916c8:	10800017 	ldw	r2,0(r2)
   916cc:	10800617 	ldw	r2,24(r2)
   916d0:	1005003a 	cmpeq	r2,r2,zero
   916d4:	1000151e 	bne	r2,zero,9172c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   916d8:	e0bffa17 	ldw	r2,-24(fp)
   916dc:	10800017 	ldw	r2,0(r2)
   916e0:	10800617 	ldw	r2,24(r2)
   916e4:	e17ffc17 	ldw	r5,-16(fp)
   916e8:	e1bffd17 	ldw	r6,-12(fp)
   916ec:	e13ffa17 	ldw	r4,-24(fp)
   916f0:	103ee83a 	callr	r2
   916f4:	e0bff915 	stw	r2,-28(fp)
   916f8:	e0bff917 	ldw	r2,-28(fp)
   916fc:	1004403a 	cmpge	r2,r2,zero
   91700:	1000071e 	bne	r2,zero,91720 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   91704:	00917700 	call	91770 <alt_get_errno>
   91708:	e0fff917 	ldw	r3,-28(fp)
   9170c:	00c7c83a 	sub	r3,zero,r3
   91710:	10c00015 	stw	r3,0(r2)
        return -1;
   91714:	00bfffc4 	movi	r2,-1
   91718:	e0bffe15 	stw	r2,-8(fp)
   9171c:	00000e06 	br	91758 <write+0x108>
      }
      return rval;
   91720:	e0bff917 	ldw	r2,-28(fp)
   91724:	e0bffe15 	stw	r2,-8(fp)
   91728:	00000b06 	br	91758 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   9172c:	00917700 	call	91770 <alt_get_errno>
   91730:	1007883a 	mov	r3,r2
   91734:	00800344 	movi	r2,13
   91738:	18800015 	stw	r2,0(r3)
   9173c:	00000406 	br	91750 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   91740:	00917700 	call	91770 <alt_get_errno>
   91744:	1007883a 	mov	r3,r2
   91748:	00801444 	movi	r2,81
   9174c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   91750:	00bfffc4 	movi	r2,-1
   91754:	e0bffe15 	stw	r2,-8(fp)
   91758:	e0bffe17 	ldw	r2,-8(fp)
}
   9175c:	e037883a 	mov	sp,fp
   91760:	dfc00117 	ldw	ra,4(sp)
   91764:	df000017 	ldw	fp,0(sp)
   91768:	dec00204 	addi	sp,sp,8
   9176c:	f800283a 	ret

00091770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91770:	defffd04 	addi	sp,sp,-12
   91774:	dfc00215 	stw	ra,8(sp)
   91778:	df000115 	stw	fp,4(sp)
   9177c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   91780:	008002f4 	movhi	r2,11
   91784:	1089a204 	addi	r2,r2,9864
   91788:	10800017 	ldw	r2,0(r2)
   9178c:	1005003a 	cmpeq	r2,r2,zero
   91790:	1000061e 	bne	r2,zero,917ac <alt_get_errno+0x3c>
   91794:	008002f4 	movhi	r2,11
   91798:	1089a204 	addi	r2,r2,9864
   9179c:	10800017 	ldw	r2,0(r2)
   917a0:	103ee83a 	callr	r2
   917a4:	e0bfff15 	stw	r2,-4(fp)
   917a8:	00000306 	br	917b8 <alt_get_errno+0x48>
   917ac:	008002f4 	movhi	r2,11
   917b0:	1089bb04 	addi	r2,r2,9964
   917b4:	e0bfff15 	stw	r2,-4(fp)
   917b8:	e0bfff17 	ldw	r2,-4(fp)
}
   917bc:	e037883a 	mov	sp,fp
   917c0:	dfc00117 	ldw	ra,4(sp)
   917c4:	df000017 	ldw	fp,0(sp)
   917c8:	dec00204 	addi	sp,sp,8
   917cc:	f800283a 	ret

000917d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   917d0:	defffd04 	addi	sp,sp,-12
   917d4:	dfc00215 	stw	ra,8(sp)
   917d8:	df000115 	stw	fp,4(sp)
   917dc:	df000104 	addi	fp,sp,4
   917e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   917e4:	00930580 	call	93058 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   917e8:	00800044 	movi	r2,1
   917ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   917f0:	e037883a 	mov	sp,fp
   917f4:	dfc00117 	ldw	ra,4(sp)
   917f8:	df000017 	ldw	fp,0(sp)
   917fc:	dec00204 	addi	sp,sp,8
   91800:	f800283a 	ret

00091804 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   91804:	defffe04 	addi	sp,sp,-8
   91808:	dfc00115 	stw	ra,4(sp)
   9180c:	df000015 	stw	fp,0(sp)
   91810:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   91814:	01000434 	movhi	r4,16
   91818:	21041004 	addi	r4,r4,4160
   9181c:	000b883a 	mov	r5,zero
   91820:	000d883a 	mov	r6,zero
   91824:	01c0fa04 	movi	r7,1000
   91828:	00923b40 	call	923b4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   9182c:	010002f4 	movhi	r4,11
   91830:	21058704 	addi	r4,r4,5660
   91834:	000b883a 	mov	r5,zero
   91838:	01800044 	movi	r6,1
   9183c:	00919e00 	call	919e0 <altera_avalon_jtag_uart_init>
   91840:	010002f4 	movhi	r4,11
   91844:	21057d04 	addi	r4,r4,5620
   91848:	00918600 	call	91860 <alt_dev_reg>
}
   9184c:	e037883a 	mov	sp,fp
   91850:	dfc00117 	ldw	ra,4(sp)
   91854:	df000017 	ldw	fp,0(sp)
   91858:	dec00204 	addi	sp,sp,8
   9185c:	f800283a 	ret

00091860 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   91860:	defffd04 	addi	sp,sp,-12
   91864:	dfc00215 	stw	ra,8(sp)
   91868:	df000115 	stw	fp,4(sp)
   9186c:	df000104 	addi	fp,sp,4
   91870:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   91874:	e13fff17 	ldw	r4,-4(fp)
   91878:	014002f4 	movhi	r5,11
   9187c:	29499f04 	addi	r5,r5,9852
   91880:	00925dc0 	call	925dc <alt_dev_llist_insert>
}
   91884:	e037883a 	mov	sp,fp
   91888:	dfc00117 	ldw	ra,4(sp)
   9188c:	df000017 	ldw	fp,0(sp)
   91890:	dec00204 	addi	sp,sp,8
   91894:	f800283a 	ret

00091898 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   91898:	defffa04 	addi	sp,sp,-24
   9189c:	dfc00515 	stw	ra,20(sp)
   918a0:	df000415 	stw	fp,16(sp)
   918a4:	df000404 	addi	fp,sp,16
   918a8:	e13ffd15 	stw	r4,-12(fp)
   918ac:	e17ffe15 	stw	r5,-8(fp)
   918b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   918b4:	e0bffd17 	ldw	r2,-12(fp)
   918b8:	10800017 	ldw	r2,0(r2)
   918bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   918c0:	e0bffc17 	ldw	r2,-16(fp)
   918c4:	11000a04 	addi	r4,r2,40
   918c8:	e0bffd17 	ldw	r2,-12(fp)
   918cc:	11c00217 	ldw	r7,8(r2)
   918d0:	e17ffe17 	ldw	r5,-8(fp)
   918d4:	e1bfff17 	ldw	r6,-4(fp)
   918d8:	0091ee00 	call	91ee0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   918dc:	e037883a 	mov	sp,fp
   918e0:	dfc00117 	ldw	ra,4(sp)
   918e4:	df000017 	ldw	fp,0(sp)
   918e8:	dec00204 	addi	sp,sp,8
   918ec:	f800283a 	ret

000918f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   918f0:	defffa04 	addi	sp,sp,-24
   918f4:	dfc00515 	stw	ra,20(sp)
   918f8:	df000415 	stw	fp,16(sp)
   918fc:	df000404 	addi	fp,sp,16
   91900:	e13ffd15 	stw	r4,-12(fp)
   91904:	e17ffe15 	stw	r5,-8(fp)
   91908:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9190c:	e0bffd17 	ldw	r2,-12(fp)
   91910:	10800017 	ldw	r2,0(r2)
   91914:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   91918:	e0bffc17 	ldw	r2,-16(fp)
   9191c:	11000a04 	addi	r4,r2,40
   91920:	e0bffd17 	ldw	r2,-12(fp)
   91924:	11c00217 	ldw	r7,8(r2)
   91928:	e17ffe17 	ldw	r5,-8(fp)
   9192c:	e1bfff17 	ldw	r6,-4(fp)
   91930:	00921040 	call	92104 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   91934:	e037883a 	mov	sp,fp
   91938:	dfc00117 	ldw	ra,4(sp)
   9193c:	df000017 	ldw	fp,0(sp)
   91940:	dec00204 	addi	sp,sp,8
   91944:	f800283a 	ret

00091948 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   91948:	defffc04 	addi	sp,sp,-16
   9194c:	dfc00315 	stw	ra,12(sp)
   91950:	df000215 	stw	fp,8(sp)
   91954:	df000204 	addi	fp,sp,8
   91958:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9195c:	e0bfff17 	ldw	r2,-4(fp)
   91960:	10800017 	ldw	r2,0(r2)
   91964:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   91968:	e0bffe17 	ldw	r2,-8(fp)
   9196c:	11000a04 	addi	r4,r2,40
   91970:	e0bfff17 	ldw	r2,-4(fp)
   91974:	11400217 	ldw	r5,8(r2)
   91978:	0091d780 	call	91d78 <altera_avalon_jtag_uart_close>
}
   9197c:	e037883a 	mov	sp,fp
   91980:	dfc00117 	ldw	ra,4(sp)
   91984:	df000017 	ldw	fp,0(sp)
   91988:	dec00204 	addi	sp,sp,8
   9198c:	f800283a 	ret

00091990 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   91990:	defffa04 	addi	sp,sp,-24
   91994:	dfc00515 	stw	ra,20(sp)
   91998:	df000415 	stw	fp,16(sp)
   9199c:	df000404 	addi	fp,sp,16
   919a0:	e13ffd15 	stw	r4,-12(fp)
   919a4:	e17ffe15 	stw	r5,-8(fp)
   919a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   919ac:	e0bffd17 	ldw	r2,-12(fp)
   919b0:	10800017 	ldw	r2,0(r2)
   919b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   919b8:	e0bffc17 	ldw	r2,-16(fp)
   919bc:	11000a04 	addi	r4,r2,40
   919c0:	e17ffe17 	ldw	r5,-8(fp)
   919c4:	e1bfff17 	ldw	r6,-4(fp)
   919c8:	0091dec0 	call	91dec <altera_avalon_jtag_uart_ioctl>
}
   919cc:	e037883a 	mov	sp,fp
   919d0:	dfc00117 	ldw	ra,4(sp)
   919d4:	df000017 	ldw	fp,0(sp)
   919d8:	dec00204 	addi	sp,sp,8
   919dc:	f800283a 	ret

000919e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   919e0:	defffa04 	addi	sp,sp,-24
   919e4:	dfc00515 	stw	ra,20(sp)
   919e8:	df000415 	stw	fp,16(sp)
   919ec:	df000404 	addi	fp,sp,16
   919f0:	e13ffd15 	stw	r4,-12(fp)
   919f4:	e17ffe15 	stw	r5,-8(fp)
   919f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   919fc:	e0fffd17 	ldw	r3,-12(fp)
   91a00:	00800044 	movi	r2,1
   91a04:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   91a08:	e0bffd17 	ldw	r2,-12(fp)
   91a0c:	10800017 	ldw	r2,0(r2)
   91a10:	11000104 	addi	r4,r2,4
   91a14:	e0bffd17 	ldw	r2,-12(fp)
   91a18:	10800817 	ldw	r2,32(r2)
   91a1c:	1007883a 	mov	r3,r2
   91a20:	2005883a 	mov	r2,r4
   91a24:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   91a28:	e13ffe17 	ldw	r4,-8(fp)
   91a2c:	e17fff17 	ldw	r5,-4(fp)
   91a30:	d8000015 	stw	zero,0(sp)
   91a34:	01800274 	movhi	r6,9
   91a38:	3186a804 	addi	r6,r6,6816
   91a3c:	e1fffd17 	ldw	r7,-12(fp)
   91a40:	00927e80 	call	927e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   91a44:	e0bffd17 	ldw	r2,-12(fp)
   91a48:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   91a4c:	e0bffd17 	ldw	r2,-12(fp)
   91a50:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   91a54:	008002f4 	movhi	r2,11
   91a58:	1089c004 	addi	r2,r2,9984
   91a5c:	10800017 	ldw	r2,0(r2)
   91a60:	100b883a 	mov	r5,r2
   91a64:	01800274 	movhi	r6,9
   91a68:	31873204 	addi	r6,r6,7368
   91a6c:	e1fffd17 	ldw	r7,-12(fp)
   91a70:	00924440 	call	92444 <alt_alarm_start>
   91a74:	1004403a 	cmpge	r2,r2,zero
   91a78:	1000041e 	bne	r2,zero,91a8c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   91a7c:	e0fffd17 	ldw	r3,-12(fp)
   91a80:	00a00034 	movhi	r2,32768
   91a84:	10bfffc4 	addi	r2,r2,-1
   91a88:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   91a8c:	e037883a 	mov	sp,fp
   91a90:	dfc00117 	ldw	ra,4(sp)
   91a94:	df000017 	ldw	fp,0(sp)
   91a98:	dec00204 	addi	sp,sp,8
   91a9c:	f800283a 	ret

00091aa0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   91aa0:	defff804 	addi	sp,sp,-32
   91aa4:	df000715 	stw	fp,28(sp)
   91aa8:	df000704 	addi	fp,sp,28
   91aac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   91ab0:	e0bfff17 	ldw	r2,-4(fp)
   91ab4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   91ab8:	e0bffe17 	ldw	r2,-8(fp)
   91abc:	10800017 	ldw	r2,0(r2)
   91ac0:	e0bffd15 	stw	r2,-12(fp)
   91ac4:	00000006 	br	91ac8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   91ac8:	e0bffd17 	ldw	r2,-12(fp)
   91acc:	10800104 	addi	r2,r2,4
   91ad0:	10800037 	ldwio	r2,0(r2)
   91ad4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   91ad8:	e0bffc17 	ldw	r2,-16(fp)
   91adc:	1080c00c 	andi	r2,r2,768
   91ae0:	1005003a 	cmpeq	r2,r2,zero
   91ae4:	1000741e 	bne	r2,zero,91cb8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   91ae8:	e0bffc17 	ldw	r2,-16(fp)
   91aec:	1080400c 	andi	r2,r2,256
   91af0:	1005003a 	cmpeq	r2,r2,zero
   91af4:	1000351e 	bne	r2,zero,91bcc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   91af8:	00800074 	movhi	r2,1
   91afc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91b00:	e0bffe17 	ldw	r2,-8(fp)
   91b04:	10800a17 	ldw	r2,40(r2)
   91b08:	10800044 	addi	r2,r2,1
   91b0c:	1081ffcc 	andi	r2,r2,2047
   91b10:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   91b14:	e0bffe17 	ldw	r2,-8(fp)
   91b18:	10c00b17 	ldw	r3,44(r2)
   91b1c:	e0bffa17 	ldw	r2,-24(fp)
   91b20:	18801626 	beq	r3,r2,91b7c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   91b24:	e0bffd17 	ldw	r2,-12(fp)
   91b28:	10800037 	ldwio	r2,0(r2)
   91b2c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   91b30:	e0bffb17 	ldw	r2,-20(fp)
   91b34:	10a0000c 	andi	r2,r2,32768
   91b38:	1005003a 	cmpeq	r2,r2,zero
   91b3c:	10000f1e 	bne	r2,zero,91b7c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   91b40:	e0bffe17 	ldw	r2,-8(fp)
   91b44:	10c00a17 	ldw	r3,40(r2)
   91b48:	e0bffb17 	ldw	r2,-20(fp)
   91b4c:	1009883a 	mov	r4,r2
   91b50:	e0bffe17 	ldw	r2,-8(fp)
   91b54:	1885883a 	add	r2,r3,r2
   91b58:	10800e04 	addi	r2,r2,56
   91b5c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91b60:	e0bffe17 	ldw	r2,-8(fp)
   91b64:	10800a17 	ldw	r2,40(r2)
   91b68:	10800044 	addi	r2,r2,1
   91b6c:	10c1ffcc 	andi	r3,r2,2047
   91b70:	e0bffe17 	ldw	r2,-8(fp)
   91b74:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   91b78:	003fe106 	br	91b00 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   91b7c:	e0bffb17 	ldw	r2,-20(fp)
   91b80:	10bfffec 	andhi	r2,r2,65535
   91b84:	1005003a 	cmpeq	r2,r2,zero
   91b88:	1000101e 	bne	r2,zero,91bcc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   91b8c:	e0bffe17 	ldw	r2,-8(fp)
   91b90:	10c00817 	ldw	r3,32(r2)
   91b94:	00bfff84 	movi	r2,-2
   91b98:	1886703a 	and	r3,r3,r2
   91b9c:	e0bffe17 	ldw	r2,-8(fp)
   91ba0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   91ba4:	e0bffd17 	ldw	r2,-12(fp)
   91ba8:	11000104 	addi	r4,r2,4
   91bac:	e0bffe17 	ldw	r2,-8(fp)
   91bb0:	10800817 	ldw	r2,32(r2)
   91bb4:	1007883a 	mov	r3,r2
   91bb8:	2005883a 	mov	r2,r4
   91bbc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   91bc0:	e0bffd17 	ldw	r2,-12(fp)
   91bc4:	10800104 	addi	r2,r2,4
   91bc8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   91bcc:	e0bffc17 	ldw	r2,-16(fp)
   91bd0:	1080800c 	andi	r2,r2,512
   91bd4:	1005003a 	cmpeq	r2,r2,zero
   91bd8:	103fbb1e 	bne	r2,zero,91ac8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   91bdc:	e0bffc17 	ldw	r2,-16(fp)
   91be0:	10bfffec 	andhi	r2,r2,65535
   91be4:	1004d43a 	srli	r2,r2,16
   91be8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   91bec:	00001506 	br	91c44 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   91bf0:	e13ffd17 	ldw	r4,-12(fp)
   91bf4:	e0bffe17 	ldw	r2,-8(fp)
   91bf8:	10c00d17 	ldw	r3,52(r2)
   91bfc:	e0bffe17 	ldw	r2,-8(fp)
   91c00:	1885883a 	add	r2,r3,r2
   91c04:	10820e04 	addi	r2,r2,2104
   91c08:	10800003 	ldbu	r2,0(r2)
   91c0c:	10c03fcc 	andi	r3,r2,255
   91c10:	18c0201c 	xori	r3,r3,128
   91c14:	18ffe004 	addi	r3,r3,-128
   91c18:	2005883a 	mov	r2,r4
   91c1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91c20:	e0bffe17 	ldw	r2,-8(fp)
   91c24:	10800d17 	ldw	r2,52(r2)
   91c28:	10800044 	addi	r2,r2,1
   91c2c:	10c1ffcc 	andi	r3,r2,2047
   91c30:	e0bffe17 	ldw	r2,-8(fp)
   91c34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   91c38:	e0bff917 	ldw	r2,-28(fp)
   91c3c:	10bfffc4 	addi	r2,r2,-1
   91c40:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   91c44:	e0bff917 	ldw	r2,-28(fp)
   91c48:	1005003a 	cmpeq	r2,r2,zero
   91c4c:	1000051e 	bne	r2,zero,91c64 <altera_avalon_jtag_uart_irq+0x1c4>
   91c50:	e0bffe17 	ldw	r2,-8(fp)
   91c54:	10c00d17 	ldw	r3,52(r2)
   91c58:	e0bffe17 	ldw	r2,-8(fp)
   91c5c:	10800c17 	ldw	r2,48(r2)
   91c60:	18bfe31e 	bne	r3,r2,91bf0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   91c64:	e0bff917 	ldw	r2,-28(fp)
   91c68:	1005003a 	cmpeq	r2,r2,zero
   91c6c:	103f961e 	bne	r2,zero,91ac8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   91c70:	e0bffe17 	ldw	r2,-8(fp)
   91c74:	10c00817 	ldw	r3,32(r2)
   91c78:	00bfff44 	movi	r2,-3
   91c7c:	1886703a 	and	r3,r3,r2
   91c80:	e0bffe17 	ldw	r2,-8(fp)
   91c84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   91c88:	e0bffe17 	ldw	r2,-8(fp)
   91c8c:	10800017 	ldw	r2,0(r2)
   91c90:	11000104 	addi	r4,r2,4
   91c94:	e0bffe17 	ldw	r2,-8(fp)
   91c98:	10800817 	ldw	r2,32(r2)
   91c9c:	1007883a 	mov	r3,r2
   91ca0:	2005883a 	mov	r2,r4
   91ca4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   91ca8:	e0bffd17 	ldw	r2,-12(fp)
   91cac:	10800104 	addi	r2,r2,4
   91cb0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   91cb4:	003f8406 	br	91ac8 <altera_avalon_jtag_uart_irq+0x28>
}
   91cb8:	e037883a 	mov	sp,fp
   91cbc:	df000017 	ldw	fp,0(sp)
   91cc0:	dec00104 	addi	sp,sp,4
   91cc4:	f800283a 	ret

00091cc8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   91cc8:	defffc04 	addi	sp,sp,-16
   91ccc:	df000315 	stw	fp,12(sp)
   91cd0:	df000304 	addi	fp,sp,12
   91cd4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   91cd8:	e0bfff17 	ldw	r2,-4(fp)
   91cdc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   91ce0:	e0bffe17 	ldw	r2,-8(fp)
   91ce4:	10800017 	ldw	r2,0(r2)
   91ce8:	10800104 	addi	r2,r2,4
   91cec:	10800037 	ldwio	r2,0(r2)
   91cf0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   91cf4:	e0bffd17 	ldw	r2,-12(fp)
   91cf8:	1081000c 	andi	r2,r2,1024
   91cfc:	1005003a 	cmpeq	r2,r2,zero
   91d00:	10000c1e 	bne	r2,zero,91d34 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   91d04:	e0bffe17 	ldw	r2,-8(fp)
   91d08:	10800017 	ldw	r2,0(r2)
   91d0c:	11000104 	addi	r4,r2,4
   91d10:	e0bffe17 	ldw	r2,-8(fp)
   91d14:	10800817 	ldw	r2,32(r2)
   91d18:	10810014 	ori	r2,r2,1024
   91d1c:	1007883a 	mov	r3,r2
   91d20:	2005883a 	mov	r2,r4
   91d24:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   91d28:	e0bffe17 	ldw	r2,-8(fp)
   91d2c:	10000915 	stw	zero,36(r2)
   91d30:	00000a06 	br	91d5c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   91d34:	e0bffe17 	ldw	r2,-8(fp)
   91d38:	10c00917 	ldw	r3,36(r2)
   91d3c:	00a00034 	movhi	r2,32768
   91d40:	10bfff04 	addi	r2,r2,-4
   91d44:	10c00536 	bltu	r2,r3,91d5c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   91d48:	e0bffe17 	ldw	r2,-8(fp)
   91d4c:	10800917 	ldw	r2,36(r2)
   91d50:	10c00044 	addi	r3,r2,1
   91d54:	e0bffe17 	ldw	r2,-8(fp)
   91d58:	10c00915 	stw	r3,36(r2)
   91d5c:	008002f4 	movhi	r2,11
   91d60:	1089c004 	addi	r2,r2,9984
   91d64:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   91d68:	e037883a 	mov	sp,fp
   91d6c:	df000017 	ldw	fp,0(sp)
   91d70:	dec00104 	addi	sp,sp,4
   91d74:	f800283a 	ret

00091d78 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   91d78:	defffc04 	addi	sp,sp,-16
   91d7c:	df000315 	stw	fp,12(sp)
   91d80:	df000304 	addi	fp,sp,12
   91d84:	e13ffd15 	stw	r4,-12(fp)
   91d88:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   91d8c:	00000706 	br	91dac <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   91d90:	e0bffe17 	ldw	r2,-8(fp)
   91d94:	1090000c 	andi	r2,r2,16384
   91d98:	1005003a 	cmpeq	r2,r2,zero
   91d9c:	1000031e 	bne	r2,zero,91dac <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   91da0:	00bffd44 	movi	r2,-11
   91da4:	e0bfff15 	stw	r2,-4(fp)
   91da8:	00000b06 	br	91dd8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   91dac:	e0bffd17 	ldw	r2,-12(fp)
   91db0:	10c00d17 	ldw	r3,52(r2)
   91db4:	e0bffd17 	ldw	r2,-12(fp)
   91db8:	10800c17 	ldw	r2,48(r2)
   91dbc:	18800526 	beq	r3,r2,91dd4 <altera_avalon_jtag_uart_close+0x5c>
   91dc0:	e0bffd17 	ldw	r2,-12(fp)
   91dc4:	10c00917 	ldw	r3,36(r2)
   91dc8:	e0bffd17 	ldw	r2,-12(fp)
   91dcc:	10800117 	ldw	r2,4(r2)
   91dd0:	18bfef36 	bltu	r3,r2,91d90 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   91dd4:	e03fff15 	stw	zero,-4(fp)
   91dd8:	e0bfff17 	ldw	r2,-4(fp)
}
   91ddc:	e037883a 	mov	sp,fp
   91de0:	df000017 	ldw	fp,0(sp)
   91de4:	dec00104 	addi	sp,sp,4
   91de8:	f800283a 	ret

00091dec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   91dec:	defff804 	addi	sp,sp,-32
   91df0:	df000715 	stw	fp,28(sp)
   91df4:	df000704 	addi	fp,sp,28
   91df8:	e13ffb15 	stw	r4,-20(fp)
   91dfc:	e17ffc15 	stw	r5,-16(fp)
   91e00:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   91e04:	00bff9c4 	movi	r2,-25
   91e08:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   91e0c:	e0bffc17 	ldw	r2,-16(fp)
   91e10:	e0bfff15 	stw	r2,-4(fp)
   91e14:	e0ffff17 	ldw	r3,-4(fp)
   91e18:	189a8060 	cmpeqi	r2,r3,27137
   91e1c:	1000041e 	bne	r2,zero,91e30 <altera_avalon_jtag_uart_ioctl+0x44>
   91e20:	e0ffff17 	ldw	r3,-4(fp)
   91e24:	189a80a0 	cmpeqi	r2,r3,27138
   91e28:	10001b1e 	bne	r2,zero,91e98 <altera_avalon_jtag_uart_ioctl+0xac>
   91e2c:	00002706 	br	91ecc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   91e30:	e0bffb17 	ldw	r2,-20(fp)
   91e34:	10c00117 	ldw	r3,4(r2)
   91e38:	00a00034 	movhi	r2,32768
   91e3c:	10bfffc4 	addi	r2,r2,-1
   91e40:	18802226 	beq	r3,r2,91ecc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   91e44:	e0bffd17 	ldw	r2,-12(fp)
   91e48:	10800017 	ldw	r2,0(r2)
   91e4c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   91e50:	e0bff917 	ldw	r2,-28(fp)
   91e54:	10800090 	cmplti	r2,r2,2
   91e58:	1000071e 	bne	r2,zero,91e78 <altera_avalon_jtag_uart_ioctl+0x8c>
   91e5c:	e0fff917 	ldw	r3,-28(fp)
   91e60:	00a00034 	movhi	r2,32768
   91e64:	10bfffc4 	addi	r2,r2,-1
   91e68:	18800326 	beq	r3,r2,91e78 <altera_avalon_jtag_uart_ioctl+0x8c>
   91e6c:	e0bff917 	ldw	r2,-28(fp)
   91e70:	e0bffe15 	stw	r2,-8(fp)
   91e74:	00000306 	br	91e84 <altera_avalon_jtag_uart_ioctl+0x98>
   91e78:	00e00034 	movhi	r3,32768
   91e7c:	18ffff84 	addi	r3,r3,-2
   91e80:	e0fffe15 	stw	r3,-8(fp)
   91e84:	e0bffb17 	ldw	r2,-20(fp)
   91e88:	e0fffe17 	ldw	r3,-8(fp)
   91e8c:	10c00115 	stw	r3,4(r2)
      rc = 0;
   91e90:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   91e94:	00000d06 	br	91ecc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   91e98:	e0bffb17 	ldw	r2,-20(fp)
   91e9c:	10c00117 	ldw	r3,4(r2)
   91ea0:	00a00034 	movhi	r2,32768
   91ea4:	10bfffc4 	addi	r2,r2,-1
   91ea8:	18800826 	beq	r3,r2,91ecc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   91eac:	e13ffd17 	ldw	r4,-12(fp)
   91eb0:	e0bffb17 	ldw	r2,-20(fp)
   91eb4:	10c00917 	ldw	r3,36(r2)
   91eb8:	e0bffb17 	ldw	r2,-20(fp)
   91ebc:	10800117 	ldw	r2,4(r2)
   91ec0:	1885803a 	cmpltu	r2,r3,r2
   91ec4:	20800015 	stw	r2,0(r4)
      rc = 0;
   91ec8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   91ecc:	e0bffa17 	ldw	r2,-24(fp)
}
   91ed0:	e037883a 	mov	sp,fp
   91ed4:	df000017 	ldw	fp,0(sp)
   91ed8:	dec00104 	addi	sp,sp,4
   91edc:	f800283a 	ret

00091ee0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   91ee0:	defff204 	addi	sp,sp,-56
   91ee4:	dfc00d15 	stw	ra,52(sp)
   91ee8:	df000c15 	stw	fp,48(sp)
   91eec:	df000c04 	addi	fp,sp,48
   91ef0:	e13ffb15 	stw	r4,-20(fp)
   91ef4:	e17ffc15 	stw	r5,-16(fp)
   91ef8:	e1bffd15 	stw	r6,-12(fp)
   91efc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   91f00:	e0bffc17 	ldw	r2,-16(fp)
   91f04:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   91f08:	00004806 	br	9202c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   91f0c:	e0bffb17 	ldw	r2,-20(fp)
   91f10:	10800a17 	ldw	r2,40(r2)
   91f14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   91f18:	e0bffb17 	ldw	r2,-20(fp)
   91f1c:	10800b17 	ldw	r2,44(r2)
   91f20:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   91f24:	e0fff717 	ldw	r3,-36(fp)
   91f28:	e0bff617 	ldw	r2,-40(fp)
   91f2c:	18800536 	bltu	r3,r2,91f44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   91f30:	e0bff717 	ldw	r2,-36(fp)
   91f34:	e0fff617 	ldw	r3,-40(fp)
   91f38:	10c5c83a 	sub	r2,r2,r3
   91f3c:	e0bff815 	stw	r2,-32(fp)
   91f40:	00000406 	br	91f54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   91f44:	00820004 	movi	r2,2048
   91f48:	e0fff617 	ldw	r3,-40(fp)
   91f4c:	10c5c83a 	sub	r2,r2,r3
   91f50:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   91f54:	e0bff817 	ldw	r2,-32(fp)
   91f58:	1005003a 	cmpeq	r2,r2,zero
   91f5c:	10001f1e 	bne	r2,zero,91fdc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   91f60:	e0fffd17 	ldw	r3,-12(fp)
   91f64:	e0bff817 	ldw	r2,-32(fp)
   91f68:	1880022e 	bgeu	r3,r2,91f74 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   91f6c:	e0bffd17 	ldw	r2,-12(fp)
   91f70:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   91f74:	e0bffb17 	ldw	r2,-20(fp)
   91f78:	10c00e04 	addi	r3,r2,56
   91f7c:	e0bff617 	ldw	r2,-40(fp)
   91f80:	1887883a 	add	r3,r3,r2
   91f84:	e0bffa17 	ldw	r2,-24(fp)
   91f88:	1009883a 	mov	r4,r2
   91f8c:	180b883a 	mov	r5,r3
   91f90:	e1bff817 	ldw	r6,-32(fp)
   91f94:	008dbd40 	call	8dbd4 <memcpy>
      ptr   += n;
   91f98:	e0fff817 	ldw	r3,-32(fp)
   91f9c:	e0bffa17 	ldw	r2,-24(fp)
   91fa0:	10c5883a 	add	r2,r2,r3
   91fa4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   91fa8:	e0fffd17 	ldw	r3,-12(fp)
   91fac:	e0bff817 	ldw	r2,-32(fp)
   91fb0:	1885c83a 	sub	r2,r3,r2
   91fb4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91fb8:	e0fff617 	ldw	r3,-40(fp)
   91fbc:	e0bff817 	ldw	r2,-32(fp)
   91fc0:	1885883a 	add	r2,r3,r2
   91fc4:	10c1ffcc 	andi	r3,r2,2047
   91fc8:	e0bffb17 	ldw	r2,-20(fp)
   91fcc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   91fd0:	e0bffd17 	ldw	r2,-12(fp)
   91fd4:	10800048 	cmpgei	r2,r2,1
   91fd8:	103fcc1e 	bne	r2,zero,91f0c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   91fdc:	e0fffa17 	ldw	r3,-24(fp)
   91fe0:	e0bffc17 	ldw	r2,-16(fp)
   91fe4:	1880141e 	bne	r3,r2,92038 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   91fe8:	e0bffe17 	ldw	r2,-8(fp)
   91fec:	1090000c 	andi	r2,r2,16384
   91ff0:	1004c03a 	cmpne	r2,r2,zero
   91ff4:	1000101e 	bne	r2,zero,92038 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   91ff8:	e0bffb17 	ldw	r2,-20(fp)
   91ffc:	10c00a17 	ldw	r3,40(r2)
   92000:	e0bff717 	ldw	r2,-36(fp)
   92004:	1880051e 	bne	r3,r2,9201c <altera_avalon_jtag_uart_read+0x13c>
   92008:	e0bffb17 	ldw	r2,-20(fp)
   9200c:	10c00917 	ldw	r3,36(r2)
   92010:	e0bffb17 	ldw	r2,-20(fp)
   92014:	10800117 	ldw	r2,4(r2)
   92018:	18bff736 	bltu	r3,r2,91ff8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   9201c:	e0bffb17 	ldw	r2,-20(fp)
   92020:	10c00a17 	ldw	r3,40(r2)
   92024:	e0bff717 	ldw	r2,-36(fp)
   92028:	18800326 	beq	r3,r2,92038 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9202c:	e0bffd17 	ldw	r2,-12(fp)
   92030:	10800048 	cmpgei	r2,r2,1
   92034:	103fb51e 	bne	r2,zero,91f0c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   92038:	e0fffa17 	ldw	r3,-24(fp)
   9203c:	e0bffc17 	ldw	r2,-16(fp)
   92040:	18801926 	beq	r3,r2,920a8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92044:	0005303a 	rdctl	r2,status
   92048:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9204c:	e0fff517 	ldw	r3,-44(fp)
   92050:	00bfff84 	movi	r2,-2
   92054:	1884703a 	and	r2,r3,r2
   92058:	1001703a 	wrctl	status,r2
  
  return context;
   9205c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   92060:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   92064:	e0bffb17 	ldw	r2,-20(fp)
   92068:	10800817 	ldw	r2,32(r2)
   9206c:	10c00054 	ori	r3,r2,1
   92070:	e0bffb17 	ldw	r2,-20(fp)
   92074:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   92078:	e0bffb17 	ldw	r2,-20(fp)
   9207c:	10800017 	ldw	r2,0(r2)
   92080:	11000104 	addi	r4,r2,4
   92084:	e0bffb17 	ldw	r2,-20(fp)
   92088:	10800817 	ldw	r2,32(r2)
   9208c:	1007883a 	mov	r3,r2
   92090:	2005883a 	mov	r2,r4
   92094:	10c00035 	stwio	r3,0(r2)
   92098:	e0bff917 	ldw	r2,-28(fp)
   9209c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   920a0:	e0bff417 	ldw	r2,-48(fp)
   920a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   920a8:	e0fffa17 	ldw	r3,-24(fp)
   920ac:	e0bffc17 	ldw	r2,-16(fp)
   920b0:	18800526 	beq	r3,r2,920c8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   920b4:	e0fffa17 	ldw	r3,-24(fp)
   920b8:	e0bffc17 	ldw	r2,-16(fp)
   920bc:	1887c83a 	sub	r3,r3,r2
   920c0:	e0ffff15 	stw	r3,-4(fp)
   920c4:	00000906 	br	920ec <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   920c8:	e0bffe17 	ldw	r2,-8(fp)
   920cc:	1090000c 	andi	r2,r2,16384
   920d0:	1005003a 	cmpeq	r2,r2,zero
   920d4:	1000031e 	bne	r2,zero,920e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   920d8:	00bffd44 	movi	r2,-11
   920dc:	e0bfff15 	stw	r2,-4(fp)
   920e0:	00000206 	br	920ec <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   920e4:	00bffec4 	movi	r2,-5
   920e8:	e0bfff15 	stw	r2,-4(fp)
   920ec:	e0bfff17 	ldw	r2,-4(fp)
}
   920f0:	e037883a 	mov	sp,fp
   920f4:	dfc00117 	ldw	ra,4(sp)
   920f8:	df000017 	ldw	fp,0(sp)
   920fc:	dec00204 	addi	sp,sp,8
   92100:	f800283a 	ret

00092104 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   92104:	defff204 	addi	sp,sp,-56
   92108:	dfc00d15 	stw	ra,52(sp)
   9210c:	df000c15 	stw	fp,48(sp)
   92110:	df000c04 	addi	fp,sp,48
   92114:	e13ffb15 	stw	r4,-20(fp)
   92118:	e17ffc15 	stw	r5,-16(fp)
   9211c:	e1bffd15 	stw	r6,-12(fp)
   92120:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   92124:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   92128:	e0bffc17 	ldw	r2,-16(fp)
   9212c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   92130:	00003a06 	br	9221c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   92134:	e0bffb17 	ldw	r2,-20(fp)
   92138:	10800c17 	ldw	r2,48(r2)
   9213c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   92140:	e0bffb17 	ldw	r2,-20(fp)
   92144:	10800d17 	ldw	r2,52(r2)
   92148:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   9214c:	e0fffa17 	ldw	r3,-24(fp)
   92150:	e0bff917 	ldw	r2,-28(fp)
   92154:	1880062e 	bgeu	r3,r2,92170 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   92158:	e0fff917 	ldw	r3,-28(fp)
   9215c:	e0bffa17 	ldw	r2,-24(fp)
   92160:	1885c83a 	sub	r2,r3,r2
   92164:	10bfffc4 	addi	r2,r2,-1
   92168:	e0bff815 	stw	r2,-32(fp)
   9216c:	00000c06 	br	921a0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   92170:	e0bff917 	ldw	r2,-28(fp)
   92174:	1005003a 	cmpeq	r2,r2,zero
   92178:	1000051e 	bne	r2,zero,92190 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   9217c:	00820004 	movi	r2,2048
   92180:	e0fffa17 	ldw	r3,-24(fp)
   92184:	10c5c83a 	sub	r2,r2,r3
   92188:	e0bff815 	stw	r2,-32(fp)
   9218c:	00000406 	br	921a0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   92190:	0081ffc4 	movi	r2,2047
   92194:	e0fffa17 	ldw	r3,-24(fp)
   92198:	10c5c83a 	sub	r2,r2,r3
   9219c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   921a0:	e0bff817 	ldw	r2,-32(fp)
   921a4:	1005003a 	cmpeq	r2,r2,zero
   921a8:	10001f1e 	bne	r2,zero,92228 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   921ac:	e0fffd17 	ldw	r3,-12(fp)
   921b0:	e0bff817 	ldw	r2,-32(fp)
   921b4:	1880022e 	bgeu	r3,r2,921c0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   921b8:	e0bffd17 	ldw	r2,-12(fp)
   921bc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   921c0:	e0bffb17 	ldw	r2,-20(fp)
   921c4:	10c20e04 	addi	r3,r2,2104
   921c8:	e0bffa17 	ldw	r2,-24(fp)
   921cc:	1885883a 	add	r2,r3,r2
   921d0:	e0fffc17 	ldw	r3,-16(fp)
   921d4:	1009883a 	mov	r4,r2
   921d8:	180b883a 	mov	r5,r3
   921dc:	e1bff817 	ldw	r6,-32(fp)
   921e0:	008dbd40 	call	8dbd4 <memcpy>
      ptr   += n;
   921e4:	e0fff817 	ldw	r3,-32(fp)
   921e8:	e0bffc17 	ldw	r2,-16(fp)
   921ec:	10c5883a 	add	r2,r2,r3
   921f0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   921f4:	e0fffd17 	ldw	r3,-12(fp)
   921f8:	e0bff817 	ldw	r2,-32(fp)
   921fc:	1885c83a 	sub	r2,r3,r2
   92200:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   92204:	e0fffa17 	ldw	r3,-24(fp)
   92208:	e0bff817 	ldw	r2,-32(fp)
   9220c:	1885883a 	add	r2,r3,r2
   92210:	10c1ffcc 	andi	r3,r2,2047
   92214:	e0bffb17 	ldw	r2,-20(fp)
   92218:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9221c:	e0bffd17 	ldw	r2,-12(fp)
   92220:	10800048 	cmpgei	r2,r2,1
   92224:	103fc31e 	bne	r2,zero,92134 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92228:	0005303a 	rdctl	r2,status
   9222c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92230:	e0fff517 	ldw	r3,-44(fp)
   92234:	00bfff84 	movi	r2,-2
   92238:	1884703a 	and	r2,r3,r2
   9223c:	1001703a 	wrctl	status,r2
  
  return context;
   92240:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   92244:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   92248:	e0bffb17 	ldw	r2,-20(fp)
   9224c:	10800817 	ldw	r2,32(r2)
   92250:	10c00094 	ori	r3,r2,2
   92254:	e0bffb17 	ldw	r2,-20(fp)
   92258:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9225c:	e0bffb17 	ldw	r2,-20(fp)
   92260:	10800017 	ldw	r2,0(r2)
   92264:	11000104 	addi	r4,r2,4
   92268:	e0bffb17 	ldw	r2,-20(fp)
   9226c:	10800817 	ldw	r2,32(r2)
   92270:	1007883a 	mov	r3,r2
   92274:	2005883a 	mov	r2,r4
   92278:	10c00035 	stwio	r3,0(r2)
   9227c:	e0bff717 	ldw	r2,-36(fp)
   92280:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92284:	e0bff417 	ldw	r2,-48(fp)
   92288:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   9228c:	e0bffd17 	ldw	r2,-12(fp)
   92290:	10800050 	cmplti	r2,r2,1
   92294:	1000111e 	bne	r2,zero,922dc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   92298:	e0bffe17 	ldw	r2,-8(fp)
   9229c:	1090000c 	andi	r2,r2,16384
   922a0:	1004c03a 	cmpne	r2,r2,zero
   922a4:	1000101e 	bne	r2,zero,922e8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   922a8:	e0bffb17 	ldw	r2,-20(fp)
   922ac:	10c00d17 	ldw	r3,52(r2)
   922b0:	e0bff917 	ldw	r2,-28(fp)
   922b4:	1880051e 	bne	r3,r2,922cc <altera_avalon_jtag_uart_write+0x1c8>
   922b8:	e0bffb17 	ldw	r2,-20(fp)
   922bc:	10c00917 	ldw	r3,36(r2)
   922c0:	e0bffb17 	ldw	r2,-20(fp)
   922c4:	10800117 	ldw	r2,4(r2)
   922c8:	18bff736 	bltu	r3,r2,922a8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   922cc:	e0bffb17 	ldw	r2,-20(fp)
   922d0:	10c00d17 	ldw	r3,52(r2)
   922d4:	e0bff917 	ldw	r2,-28(fp)
   922d8:	18800326 	beq	r3,r2,922e8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   922dc:	e0bffd17 	ldw	r2,-12(fp)
   922e0:	10800048 	cmpgei	r2,r2,1
   922e4:	103fcd1e 	bne	r2,zero,9221c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   922e8:	e0fffc17 	ldw	r3,-16(fp)
   922ec:	e0bff617 	ldw	r2,-40(fp)
   922f0:	18800526 	beq	r3,r2,92308 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   922f4:	e0fffc17 	ldw	r3,-16(fp)
   922f8:	e0bff617 	ldw	r2,-40(fp)
   922fc:	1887c83a 	sub	r3,r3,r2
   92300:	e0ffff15 	stw	r3,-4(fp)
   92304:	00000906 	br	9232c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   92308:	e0bffe17 	ldw	r2,-8(fp)
   9230c:	1090000c 	andi	r2,r2,16384
   92310:	1005003a 	cmpeq	r2,r2,zero
   92314:	1000031e 	bne	r2,zero,92324 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   92318:	00bffd44 	movi	r2,-11
   9231c:	e0bfff15 	stw	r2,-4(fp)
   92320:	00000206 	br	9232c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   92324:	00bffec4 	movi	r2,-5
   92328:	e0bfff15 	stw	r2,-4(fp)
   9232c:	e0bfff17 	ldw	r2,-4(fp)
}
   92330:	e037883a 	mov	sp,fp
   92334:	dfc00117 	ldw	ra,4(sp)
   92338:	df000017 	ldw	fp,0(sp)
   9233c:	dec00204 	addi	sp,sp,8
   92340:	f800283a 	ret

00092344 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   92344:	defffa04 	addi	sp,sp,-24
   92348:	dfc00515 	stw	ra,20(sp)
   9234c:	df000415 	stw	fp,16(sp)
   92350:	df000404 	addi	fp,sp,16
   92354:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   92358:	e0bfff17 	ldw	r2,-4(fp)
   9235c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   92360:	e0bfff17 	ldw	r2,-4(fp)
   92364:	10800104 	addi	r2,r2,4
   92368:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9236c:	0005303a 	rdctl	r2,status
   92370:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92374:	e0fffd17 	ldw	r3,-12(fp)
   92378:	00bfff84 	movi	r2,-2
   9237c:	1884703a 	and	r2,r3,r2
   92380:	1001703a 	wrctl	status,r2
  
  return context;
   92384:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   92388:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   9238c:	0092f4c0 	call	92f4c <alt_tick>
   92390:	e0bffe17 	ldw	r2,-8(fp)
   92394:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92398:	e0bffc17 	ldw	r2,-16(fp)
   9239c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   923a0:	e037883a 	mov	sp,fp
   923a4:	dfc00117 	ldw	ra,4(sp)
   923a8:	df000017 	ldw	fp,0(sp)
   923ac:	dec00204 	addi	sp,sp,8
   923b0:	f800283a 	ret

000923b4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   923b4:	defff804 	addi	sp,sp,-32
   923b8:	dfc00715 	stw	ra,28(sp)
   923bc:	df000615 	stw	fp,24(sp)
   923c0:	df000604 	addi	fp,sp,24
   923c4:	e13ffc15 	stw	r4,-16(fp)
   923c8:	e17ffd15 	stw	r5,-12(fp)
   923cc:	e1bffe15 	stw	r6,-8(fp)
   923d0:	e1ffff15 	stw	r7,-4(fp)
   923d4:	e0bfff17 	ldw	r2,-4(fp)
   923d8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   923dc:	008002f4 	movhi	r2,11
   923e0:	1089c004 	addi	r2,r2,9984
   923e4:	10800017 	ldw	r2,0(r2)
   923e8:	1004c03a 	cmpne	r2,r2,zero
   923ec:	1000041e 	bne	r2,zero,92400 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   923f0:	00c002f4 	movhi	r3,11
   923f4:	18c9c004 	addi	r3,r3,9984
   923f8:	e0bffb17 	ldw	r2,-20(fp)
   923fc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   92400:	e0bffc17 	ldw	r2,-16(fp)
   92404:	10800104 	addi	r2,r2,4
   92408:	1007883a 	mov	r3,r2
   9240c:	008001c4 	movi	r2,7
   92410:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   92414:	d8000015 	stw	zero,0(sp)
   92418:	e13ffd17 	ldw	r4,-12(fp)
   9241c:	e17ffe17 	ldw	r5,-8(fp)
   92420:	01800274 	movhi	r6,9
   92424:	3188d104 	addi	r6,r6,9028
   92428:	e1fffc17 	ldw	r7,-16(fp)
   9242c:	00927e80 	call	927e8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   92430:	e037883a 	mov	sp,fp
   92434:	dfc00117 	ldw	ra,4(sp)
   92438:	df000017 	ldw	fp,0(sp)
   9243c:	dec00204 	addi	sp,sp,8
   92440:	f800283a 	ret

00092444 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   92444:	defff404 	addi	sp,sp,-48
   92448:	df000b15 	stw	fp,44(sp)
   9244c:	df000b04 	addi	fp,sp,44
   92450:	e13ffb15 	stw	r4,-20(fp)
   92454:	e17ffc15 	stw	r5,-16(fp)
   92458:	e1bffd15 	stw	r6,-12(fp)
   9245c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   92460:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   92464:	008002f4 	movhi	r2,11
   92468:	1089c004 	addi	r2,r2,9984
   9246c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   92470:	1005003a 	cmpeq	r2,r2,zero
   92474:	1000411e 	bne	r2,zero,9257c <alt_alarm_start+0x138>
  {
    if (alarm)
   92478:	e0bffb17 	ldw	r2,-20(fp)
   9247c:	1005003a 	cmpeq	r2,r2,zero
   92480:	10003b1e 	bne	r2,zero,92570 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   92484:	e0fffb17 	ldw	r3,-20(fp)
   92488:	e0bffd17 	ldw	r2,-12(fp)
   9248c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   92490:	e0fffb17 	ldw	r3,-20(fp)
   92494:	e0bffe17 	ldw	r2,-8(fp)
   92498:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9249c:	0005303a 	rdctl	r2,status
   924a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   924a4:	e0fff817 	ldw	r3,-32(fp)
   924a8:	00bfff84 	movi	r2,-2
   924ac:	1884703a 	and	r2,r3,r2
   924b0:	1001703a 	wrctl	status,r2
  
  return context;
   924b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   924b8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   924bc:	008002f4 	movhi	r2,11
   924c0:	1089c104 	addi	r2,r2,9988
   924c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   924c8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   924cc:	e0fffc17 	ldw	r3,-16(fp)
   924d0:	e0bff917 	ldw	r2,-28(fp)
   924d4:	1885883a 	add	r2,r3,r2
   924d8:	10c00044 	addi	r3,r2,1
   924dc:	e0bffb17 	ldw	r2,-20(fp)
   924e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   924e4:	e0bffb17 	ldw	r2,-20(fp)
   924e8:	10c00217 	ldw	r3,8(r2)
   924ec:	e0bff917 	ldw	r2,-28(fp)
   924f0:	1880042e 	bgeu	r3,r2,92504 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   924f4:	e0fffb17 	ldw	r3,-20(fp)
   924f8:	00800044 	movi	r2,1
   924fc:	18800405 	stb	r2,16(r3)
   92500:	00000206 	br	9250c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   92504:	e0bffb17 	ldw	r2,-20(fp)
   92508:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   9250c:	e0fffb17 	ldw	r3,-20(fp)
   92510:	008002f4 	movhi	r2,11
   92514:	1089a504 	addi	r2,r2,9876
   92518:	e0bff615 	stw	r2,-40(fp)
   9251c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   92520:	e0fff717 	ldw	r3,-36(fp)
   92524:	e0bff617 	ldw	r2,-40(fp)
   92528:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   9252c:	e0bff617 	ldw	r2,-40(fp)
   92530:	10c00017 	ldw	r3,0(r2)
   92534:	e0bff717 	ldw	r2,-36(fp)
   92538:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9253c:	e0bff617 	ldw	r2,-40(fp)
   92540:	10c00017 	ldw	r3,0(r2)
   92544:	e0bff717 	ldw	r2,-36(fp)
   92548:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   9254c:	e0fff617 	ldw	r3,-40(fp)
   92550:	e0bff717 	ldw	r2,-36(fp)
   92554:	18800015 	stw	r2,0(r3)
   92558:	e0bffa17 	ldw	r2,-24(fp)
   9255c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92560:	e0bff517 	ldw	r2,-44(fp)
   92564:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   92568:	e03fff15 	stw	zero,-4(fp)
   9256c:	00000506 	br	92584 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   92570:	00bffa84 	movi	r2,-22
   92574:	e0bfff15 	stw	r2,-4(fp)
   92578:	00000206 	br	92584 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   9257c:	00bfde84 	movi	r2,-134
   92580:	e0bfff15 	stw	r2,-4(fp)
   92584:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   92588:	e037883a 	mov	sp,fp
   9258c:	df000017 	ldw	fp,0(sp)
   92590:	dec00104 	addi	sp,sp,4
   92594:	f800283a 	ret

00092598 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   92598:	defffe04 	addi	sp,sp,-8
   9259c:	df000115 	stw	fp,4(sp)
   925a0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   925a4:	e03fff15 	stw	zero,-4(fp)
   925a8:	00000506 	br	925c0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   925ac:	e0bfff17 	ldw	r2,-4(fp)
   925b0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   925b4:	e0bfff17 	ldw	r2,-4(fp)
   925b8:	10800804 	addi	r2,r2,32
   925bc:	e0bfff15 	stw	r2,-4(fp)
   925c0:	e0bfff17 	ldw	r2,-4(fp)
   925c4:	10820030 	cmpltui	r2,r2,2048
   925c8:	103ff81e 	bne	r2,zero,925ac <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   925cc:	e037883a 	mov	sp,fp
   925d0:	df000017 	ldw	fp,0(sp)
   925d4:	dec00104 	addi	sp,sp,4
   925d8:	f800283a 	ret

000925dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   925dc:	defff904 	addi	sp,sp,-28
   925e0:	dfc00615 	stw	ra,24(sp)
   925e4:	df000515 	stw	fp,20(sp)
   925e8:	df000504 	addi	fp,sp,20
   925ec:	e13ffd15 	stw	r4,-12(fp)
   925f0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   925f4:	e0bffd17 	ldw	r2,-12(fp)
   925f8:	1005003a 	cmpeq	r2,r2,zero
   925fc:	1000041e 	bne	r2,zero,92610 <alt_dev_llist_insert+0x34>
   92600:	e0bffd17 	ldw	r2,-12(fp)
   92604:	10800217 	ldw	r2,8(r2)
   92608:	1004c03a 	cmpne	r2,r2,zero
   9260c:	1000071e 	bne	r2,zero,9262c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   92610:	00926900 	call	92690 <alt_get_errno>
   92614:	1007883a 	mov	r3,r2
   92618:	00800584 	movi	r2,22
   9261c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   92620:	00bffa84 	movi	r2,-22
   92624:	e0bfff15 	stw	r2,-4(fp)
   92628:	00001306 	br	92678 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   9262c:	e0fffd17 	ldw	r3,-12(fp)
   92630:	e0bffe17 	ldw	r2,-8(fp)
   92634:	e0bffb15 	stw	r2,-20(fp)
   92638:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9263c:	e0fffc17 	ldw	r3,-16(fp)
   92640:	e0bffb17 	ldw	r2,-20(fp)
   92644:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   92648:	e0bffb17 	ldw	r2,-20(fp)
   9264c:	10c00017 	ldw	r3,0(r2)
   92650:	e0bffc17 	ldw	r2,-16(fp)
   92654:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   92658:	e0bffb17 	ldw	r2,-20(fp)
   9265c:	10c00017 	ldw	r3,0(r2)
   92660:	e0bffc17 	ldw	r2,-16(fp)
   92664:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   92668:	e0fffb17 	ldw	r3,-20(fp)
   9266c:	e0bffc17 	ldw	r2,-16(fp)
   92670:	18800015 	stw	r2,0(r3)

  return 0;  
   92674:	e03fff15 	stw	zero,-4(fp)
   92678:	e0bfff17 	ldw	r2,-4(fp)
}
   9267c:	e037883a 	mov	sp,fp
   92680:	dfc00117 	ldw	ra,4(sp)
   92684:	df000017 	ldw	fp,0(sp)
   92688:	dec00204 	addi	sp,sp,8
   9268c:	f800283a 	ret

00092690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   92690:	defffd04 	addi	sp,sp,-12
   92694:	dfc00215 	stw	ra,8(sp)
   92698:	df000115 	stw	fp,4(sp)
   9269c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   926a0:	008002f4 	movhi	r2,11
   926a4:	1089a204 	addi	r2,r2,9864
   926a8:	10800017 	ldw	r2,0(r2)
   926ac:	1005003a 	cmpeq	r2,r2,zero
   926b0:	1000061e 	bne	r2,zero,926cc <alt_get_errno+0x3c>
   926b4:	008002f4 	movhi	r2,11
   926b8:	1089a204 	addi	r2,r2,9864
   926bc:	10800017 	ldw	r2,0(r2)
   926c0:	103ee83a 	callr	r2
   926c4:	e0bfff15 	stw	r2,-4(fp)
   926c8:	00000306 	br	926d8 <alt_get_errno+0x48>
   926cc:	008002f4 	movhi	r2,11
   926d0:	1089bb04 	addi	r2,r2,9964
   926d4:	e0bfff15 	stw	r2,-4(fp)
   926d8:	e0bfff17 	ldw	r2,-4(fp)
}
   926dc:	e037883a 	mov	sp,fp
   926e0:	dfc00117 	ldw	ra,4(sp)
   926e4:	df000017 	ldw	fp,0(sp)
   926e8:	dec00204 	addi	sp,sp,8
   926ec:	f800283a 	ret

000926f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   926f0:	defffd04 	addi	sp,sp,-12
   926f4:	dfc00215 	stw	ra,8(sp)
   926f8:	df000115 	stw	fp,4(sp)
   926fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   92700:	00bfff04 	movi	r2,-4
   92704:	00c00274 	movhi	r3,9
   92708:	18cde004 	addi	r3,r3,14208
   9270c:	1885883a 	add	r2,r3,r2
   92710:	e0bfff15 	stw	r2,-4(fp)
   92714:	00000606 	br	92730 <_do_ctors+0x40>
        (*ctor) (); 
   92718:	e0bfff17 	ldw	r2,-4(fp)
   9271c:	10800017 	ldw	r2,0(r2)
   92720:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   92724:	e0bfff17 	ldw	r2,-4(fp)
   92728:	10bfff04 	addi	r2,r2,-4
   9272c:	e0bfff15 	stw	r2,-4(fp)
   92730:	e0ffff17 	ldw	r3,-4(fp)
   92734:	00800274 	movhi	r2,9
   92738:	108ddf04 	addi	r2,r2,14204
   9273c:	18bff62e 	bgeu	r3,r2,92718 <_do_ctors+0x28>
        (*ctor) (); 
}
   92740:	e037883a 	mov	sp,fp
   92744:	dfc00117 	ldw	ra,4(sp)
   92748:	df000017 	ldw	fp,0(sp)
   9274c:	dec00204 	addi	sp,sp,8
   92750:	f800283a 	ret

00092754 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   92754:	defffd04 	addi	sp,sp,-12
   92758:	dfc00215 	stw	ra,8(sp)
   9275c:	df000115 	stw	fp,4(sp)
   92760:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   92764:	00bfff04 	movi	r2,-4
   92768:	00c00274 	movhi	r3,9
   9276c:	18cde004 	addi	r3,r3,14208
   92770:	1885883a 	add	r2,r3,r2
   92774:	e0bfff15 	stw	r2,-4(fp)
   92778:	00000606 	br	92794 <_do_dtors+0x40>
        (*dtor) (); 
   9277c:	e0bfff17 	ldw	r2,-4(fp)
   92780:	10800017 	ldw	r2,0(r2)
   92784:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   92788:	e0bfff17 	ldw	r2,-4(fp)
   9278c:	10bfff04 	addi	r2,r2,-4
   92790:	e0bfff15 	stw	r2,-4(fp)
   92794:	e0ffff17 	ldw	r3,-4(fp)
   92798:	00800274 	movhi	r2,9
   9279c:	108de004 	addi	r2,r2,14208
   927a0:	18bff62e 	bgeu	r3,r2,9277c <_do_dtors+0x28>
        (*dtor) (); 
}
   927a4:	e037883a 	mov	sp,fp
   927a8:	dfc00117 	ldw	ra,4(sp)
   927ac:	df000017 	ldw	fp,0(sp)
   927b0:	dec00204 	addi	sp,sp,8
   927b4:	f800283a 	ret

000927b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   927b8:	defffe04 	addi	sp,sp,-8
   927bc:	dfc00115 	stw	ra,4(sp)
   927c0:	df000015 	stw	fp,0(sp)
   927c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   927c8:	0009883a 	mov	r4,zero
   927cc:	01440004 	movi	r5,4096
   927d0:	00932e40 	call	932e4 <alt_icache_flush>
#endif
}
   927d4:	e037883a 	mov	sp,fp
   927d8:	dfc00117 	ldw	ra,4(sp)
   927dc:	df000017 	ldw	fp,0(sp)
   927e0:	dec00204 	addi	sp,sp,8
   927e4:	f800283a 	ret

000927e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   927e8:	defff904 	addi	sp,sp,-28
   927ec:	dfc00615 	stw	ra,24(sp)
   927f0:	df000515 	stw	fp,20(sp)
   927f4:	df000504 	addi	fp,sp,20
   927f8:	e13ffc15 	stw	r4,-16(fp)
   927fc:	e17ffd15 	stw	r5,-12(fp)
   92800:	e1bffe15 	stw	r6,-8(fp)
   92804:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   92808:	e0800217 	ldw	r2,8(fp)
   9280c:	d8800015 	stw	r2,0(sp)
   92810:	e13ffc17 	ldw	r4,-16(fp)
   92814:	e17ffd17 	ldw	r5,-12(fp)
   92818:	e1bffe17 	ldw	r6,-8(fp)
   9281c:	e1ffff17 	ldw	r7,-4(fp)
   92820:	00929bc0 	call	929bc <alt_iic_isr_register>
}  
   92824:	e037883a 	mov	sp,fp
   92828:	dfc00117 	ldw	ra,4(sp)
   9282c:	df000017 	ldw	fp,0(sp)
   92830:	dec00204 	addi	sp,sp,8
   92834:	f800283a 	ret

00092838 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   92838:	defff904 	addi	sp,sp,-28
   9283c:	df000615 	stw	fp,24(sp)
   92840:	df000604 	addi	fp,sp,24
   92844:	e13ffe15 	stw	r4,-8(fp)
   92848:	e17fff15 	stw	r5,-4(fp)
   9284c:	e0bfff17 	ldw	r2,-4(fp)
   92850:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92854:	0005303a 	rdctl	r2,status
   92858:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9285c:	e0fffb17 	ldw	r3,-20(fp)
   92860:	00bfff84 	movi	r2,-2
   92864:	1884703a 	and	r2,r3,r2
   92868:	1001703a 	wrctl	status,r2
  
  return context;
   9286c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   92870:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   92874:	e0fffc17 	ldw	r3,-16(fp)
   92878:	00800044 	movi	r2,1
   9287c:	10c4983a 	sll	r2,r2,r3
   92880:	1007883a 	mov	r3,r2
   92884:	008002f4 	movhi	r2,11
   92888:	1089bc04 	addi	r2,r2,9968
   9288c:	10800017 	ldw	r2,0(r2)
   92890:	1886b03a 	or	r3,r3,r2
   92894:	008002f4 	movhi	r2,11
   92898:	1089bc04 	addi	r2,r2,9968
   9289c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   928a0:	008002f4 	movhi	r2,11
   928a4:	1089bc04 	addi	r2,r2,9968
   928a8:	10800017 	ldw	r2,0(r2)
   928ac:	100170fa 	wrctl	ienable,r2
   928b0:	e0bffd17 	ldw	r2,-12(fp)
   928b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   928b8:	e0bffa17 	ldw	r2,-24(fp)
   928bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   928c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   928c4:	e037883a 	mov	sp,fp
   928c8:	df000017 	ldw	fp,0(sp)
   928cc:	dec00104 	addi	sp,sp,4
   928d0:	f800283a 	ret

000928d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   928d4:	defff904 	addi	sp,sp,-28
   928d8:	df000615 	stw	fp,24(sp)
   928dc:	df000604 	addi	fp,sp,24
   928e0:	e13ffe15 	stw	r4,-8(fp)
   928e4:	e17fff15 	stw	r5,-4(fp)
   928e8:	e0bfff17 	ldw	r2,-4(fp)
   928ec:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   928f0:	0005303a 	rdctl	r2,status
   928f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   928f8:	e0fffb17 	ldw	r3,-20(fp)
   928fc:	00bfff84 	movi	r2,-2
   92900:	1884703a 	and	r2,r3,r2
   92904:	1001703a 	wrctl	status,r2
  
  return context;
   92908:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9290c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   92910:	e0fffc17 	ldw	r3,-16(fp)
   92914:	00800044 	movi	r2,1
   92918:	10c4983a 	sll	r2,r2,r3
   9291c:	0084303a 	nor	r2,zero,r2
   92920:	1007883a 	mov	r3,r2
   92924:	008002f4 	movhi	r2,11
   92928:	1089bc04 	addi	r2,r2,9968
   9292c:	10800017 	ldw	r2,0(r2)
   92930:	1886703a 	and	r3,r3,r2
   92934:	008002f4 	movhi	r2,11
   92938:	1089bc04 	addi	r2,r2,9968
   9293c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   92940:	008002f4 	movhi	r2,11
   92944:	1089bc04 	addi	r2,r2,9968
   92948:	10800017 	ldw	r2,0(r2)
   9294c:	100170fa 	wrctl	ienable,r2
   92950:	e0bffd17 	ldw	r2,-12(fp)
   92954:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92958:	e0bffa17 	ldw	r2,-24(fp)
   9295c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   92960:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   92964:	e037883a 	mov	sp,fp
   92968:	df000017 	ldw	fp,0(sp)
   9296c:	dec00104 	addi	sp,sp,4
   92970:	f800283a 	ret

00092974 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   92974:	defffc04 	addi	sp,sp,-16
   92978:	df000315 	stw	fp,12(sp)
   9297c:	df000304 	addi	fp,sp,12
   92980:	e13ffe15 	stw	r4,-8(fp)
   92984:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   92988:	000530fa 	rdctl	r2,ienable
   9298c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   92990:	e0ffff17 	ldw	r3,-4(fp)
   92994:	00800044 	movi	r2,1
   92998:	10c4983a 	sll	r2,r2,r3
   9299c:	1007883a 	mov	r3,r2
   929a0:	e0bffd17 	ldw	r2,-12(fp)
   929a4:	1884703a 	and	r2,r3,r2
   929a8:	1004c03a 	cmpne	r2,r2,zero
}
   929ac:	e037883a 	mov	sp,fp
   929b0:	df000017 	ldw	fp,0(sp)
   929b4:	dec00104 	addi	sp,sp,4
   929b8:	f800283a 	ret

000929bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   929bc:	defff404 	addi	sp,sp,-48
   929c0:	dfc00b15 	stw	ra,44(sp)
   929c4:	df000a15 	stw	fp,40(sp)
   929c8:	df000a04 	addi	fp,sp,40
   929cc:	e13ffb15 	stw	r4,-20(fp)
   929d0:	e17ffc15 	stw	r5,-16(fp)
   929d4:	e1bffd15 	stw	r6,-12(fp)
   929d8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   929dc:	00bffa84 	movi	r2,-22
   929e0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   929e4:	e0bffc17 	ldw	r2,-16(fp)
   929e8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   929ec:	e0bff917 	ldw	r2,-28(fp)
   929f0:	10800808 	cmpgei	r2,r2,32
   929f4:	1000291e 	bne	r2,zero,92a9c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   929f8:	0005303a 	rdctl	r2,status
   929fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92a00:	e0fff717 	ldw	r3,-36(fp)
   92a04:	00bfff84 	movi	r2,-2
   92a08:	1884703a 	and	r2,r3,r2
   92a0c:	1001703a 	wrctl	status,r2
  
  return context;
   92a10:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   92a14:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   92a18:	e0bff917 	ldw	r2,-28(fp)
   92a1c:	00c002f4 	movhi	r3,11
   92a20:	18ca4f04 	addi	r3,r3,10556
   92a24:	100490fa 	slli	r2,r2,3
   92a28:	10c7883a 	add	r3,r2,r3
   92a2c:	e0bffd17 	ldw	r2,-12(fp)
   92a30:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   92a34:	e0bff917 	ldw	r2,-28(fp)
   92a38:	00c002f4 	movhi	r3,11
   92a3c:	18ca4f04 	addi	r3,r3,10556
   92a40:	100490fa 	slli	r2,r2,3
   92a44:	10c5883a 	add	r2,r2,r3
   92a48:	10c00104 	addi	r3,r2,4
   92a4c:	e0bffe17 	ldw	r2,-8(fp)
   92a50:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   92a54:	e0bffd17 	ldw	r2,-12(fp)
   92a58:	1005003a 	cmpeq	r2,r2,zero
   92a5c:	1000051e 	bne	r2,zero,92a74 <alt_iic_isr_register+0xb8>
   92a60:	e17ff917 	ldw	r5,-28(fp)
   92a64:	e13ffb17 	ldw	r4,-20(fp)
   92a68:	00928380 	call	92838 <alt_ic_irq_enable>
   92a6c:	e0bfff15 	stw	r2,-4(fp)
   92a70:	00000406 	br	92a84 <alt_iic_isr_register+0xc8>
   92a74:	e17ff917 	ldw	r5,-28(fp)
   92a78:	e13ffb17 	ldw	r4,-20(fp)
   92a7c:	00928d40 	call	928d4 <alt_ic_irq_disable>
   92a80:	e0bfff15 	stw	r2,-4(fp)
   92a84:	e0bfff17 	ldw	r2,-4(fp)
   92a88:	e0bffa15 	stw	r2,-24(fp)
   92a8c:	e0bff817 	ldw	r2,-32(fp)
   92a90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92a94:	e0bff617 	ldw	r2,-40(fp)
   92a98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   92a9c:	e0bffa17 	ldw	r2,-24(fp)
}
   92aa0:	e037883a 	mov	sp,fp
   92aa4:	dfc00117 	ldw	ra,4(sp)
   92aa8:	df000017 	ldw	fp,0(sp)
   92aac:	dec00204 	addi	sp,sp,8
   92ab0:	f800283a 	ret

00092ab4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   92ab4:	defff904 	addi	sp,sp,-28
   92ab8:	dfc00615 	stw	ra,24(sp)
   92abc:	df000515 	stw	fp,20(sp)
   92ac0:	df000504 	addi	fp,sp,20
   92ac4:	e13ffc15 	stw	r4,-16(fp)
   92ac8:	e17ffd15 	stw	r5,-12(fp)
   92acc:	e1bffe15 	stw	r6,-8(fp)
   92ad0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   92ad4:	e13ffd17 	ldw	r4,-12(fp)
   92ad8:	e17ffe17 	ldw	r5,-8(fp)
   92adc:	e1bfff17 	ldw	r6,-4(fp)
   92ae0:	0092ccc0 	call	92ccc <open>
   92ae4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   92ae8:	e0bffb17 	ldw	r2,-20(fp)
   92aec:	1004803a 	cmplt	r2,r2,zero
   92af0:	10001c1e 	bne	r2,zero,92b64 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   92af4:	e0bffb17 	ldw	r2,-20(fp)
   92af8:	00c002f4 	movhi	r3,11
   92afc:	18c51d04 	addi	r3,r3,5236
   92b00:	10800324 	muli	r2,r2,12
   92b04:	10c5883a 	add	r2,r2,r3
   92b08:	10c00017 	ldw	r3,0(r2)
   92b0c:	e0bffc17 	ldw	r2,-16(fp)
   92b10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   92b14:	e0bffb17 	ldw	r2,-20(fp)
   92b18:	00c002f4 	movhi	r3,11
   92b1c:	18c51d04 	addi	r3,r3,5236
   92b20:	10800324 	muli	r2,r2,12
   92b24:	10c5883a 	add	r2,r2,r3
   92b28:	10800104 	addi	r2,r2,4
   92b2c:	10c00017 	ldw	r3,0(r2)
   92b30:	e0bffc17 	ldw	r2,-16(fp)
   92b34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   92b38:	e0bffb17 	ldw	r2,-20(fp)
   92b3c:	00c002f4 	movhi	r3,11
   92b40:	18c51d04 	addi	r3,r3,5236
   92b44:	10800324 	muli	r2,r2,12
   92b48:	10c5883a 	add	r2,r2,r3
   92b4c:	10800204 	addi	r2,r2,8
   92b50:	10c00017 	ldw	r3,0(r2)
   92b54:	e0bffc17 	ldw	r2,-16(fp)
   92b58:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   92b5c:	e13ffb17 	ldw	r4,-20(fp)
   92b60:	00915340 	call	91534 <alt_release_fd>
  }
} 
   92b64:	e037883a 	mov	sp,fp
   92b68:	dfc00117 	ldw	ra,4(sp)
   92b6c:	df000017 	ldw	fp,0(sp)
   92b70:	dec00204 	addi	sp,sp,8
   92b74:	f800283a 	ret

00092b78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   92b78:	defffb04 	addi	sp,sp,-20
   92b7c:	dfc00415 	stw	ra,16(sp)
   92b80:	df000315 	stw	fp,12(sp)
   92b84:	df000304 	addi	fp,sp,12
   92b88:	e13ffd15 	stw	r4,-12(fp)
   92b8c:	e17ffe15 	stw	r5,-8(fp)
   92b90:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   92b94:	010002f4 	movhi	r4,11
   92b98:	21052004 	addi	r4,r4,5248
   92b9c:	e17ffd17 	ldw	r5,-12(fp)
   92ba0:	01800044 	movi	r6,1
   92ba4:	01c07fc4 	movi	r7,511
   92ba8:	0092ab40 	call	92ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   92bac:	010002f4 	movhi	r4,11
   92bb0:	21051d04 	addi	r4,r4,5236
   92bb4:	e17ffe17 	ldw	r5,-8(fp)
   92bb8:	000d883a 	mov	r6,zero
   92bbc:	01c07fc4 	movi	r7,511
   92bc0:	0092ab40 	call	92ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   92bc4:	010002f4 	movhi	r4,11
   92bc8:	21052304 	addi	r4,r4,5260
   92bcc:	e17fff17 	ldw	r5,-4(fp)
   92bd0:	01800044 	movi	r6,1
   92bd4:	01c07fc4 	movi	r7,511
   92bd8:	0092ab40 	call	92ab4 <alt_open_fd>
}  
   92bdc:	e037883a 	mov	sp,fp
   92be0:	dfc00117 	ldw	ra,4(sp)
   92be4:	df000017 	ldw	fp,0(sp)
   92be8:	dec00204 	addi	sp,sp,8
   92bec:	f800283a 	ret

00092bf0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   92bf0:	defffc04 	addi	sp,sp,-16
   92bf4:	df000315 	stw	fp,12(sp)
   92bf8:	df000304 	addi	fp,sp,12
   92bfc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   92c00:	e0bffe17 	ldw	r2,-8(fp)
   92c04:	10800217 	ldw	r2,8(r2)
   92c08:	10d00034 	orhi	r3,r2,16384
   92c0c:	e0bffe17 	ldw	r2,-8(fp)
   92c10:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   92c14:	e03ffd15 	stw	zero,-12(fp)
   92c18:	00002006 	br	92c9c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   92c1c:	e0bffd17 	ldw	r2,-12(fp)
   92c20:	00c002f4 	movhi	r3,11
   92c24:	18c51d04 	addi	r3,r3,5236
   92c28:	10800324 	muli	r2,r2,12
   92c2c:	10c5883a 	add	r2,r2,r3
   92c30:	10c00017 	ldw	r3,0(r2)
   92c34:	e0bffe17 	ldw	r2,-8(fp)
   92c38:	10800017 	ldw	r2,0(r2)
   92c3c:	1880141e 	bne	r3,r2,92c90 <alt_file_locked+0xa0>
   92c40:	e0bffd17 	ldw	r2,-12(fp)
   92c44:	00c002f4 	movhi	r3,11
   92c48:	18c51d04 	addi	r3,r3,5236
   92c4c:	10800324 	muli	r2,r2,12
   92c50:	10c5883a 	add	r2,r2,r3
   92c54:	10800204 	addi	r2,r2,8
   92c58:	10800017 	ldw	r2,0(r2)
   92c5c:	1004403a 	cmpge	r2,r2,zero
   92c60:	10000b1e 	bne	r2,zero,92c90 <alt_file_locked+0xa0>
   92c64:	e0bffd17 	ldw	r2,-12(fp)
   92c68:	10800324 	muli	r2,r2,12
   92c6c:	1007883a 	mov	r3,r2
   92c70:	008002f4 	movhi	r2,11
   92c74:	10851d04 	addi	r2,r2,5236
   92c78:	1887883a 	add	r3,r3,r2
   92c7c:	e0bffe17 	ldw	r2,-8(fp)
   92c80:	18800326 	beq	r3,r2,92c90 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   92c84:	00bffcc4 	movi	r2,-13
   92c88:	e0bfff15 	stw	r2,-4(fp)
   92c8c:	00000a06 	br	92cb8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   92c90:	e0bffd17 	ldw	r2,-12(fp)
   92c94:	10800044 	addi	r2,r2,1
   92c98:	e0bffd15 	stw	r2,-12(fp)
   92c9c:	008002f4 	movhi	r2,11
   92ca0:	1089a104 	addi	r2,r2,9860
   92ca4:	10800017 	ldw	r2,0(r2)
   92ca8:	1007883a 	mov	r3,r2
   92cac:	e0bffd17 	ldw	r2,-12(fp)
   92cb0:	18bfda2e 	bgeu	r3,r2,92c1c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   92cb4:	e03fff15 	stw	zero,-4(fp)
   92cb8:	e0bfff17 	ldw	r2,-4(fp)
}
   92cbc:	e037883a 	mov	sp,fp
   92cc0:	df000017 	ldw	fp,0(sp)
   92cc4:	dec00104 	addi	sp,sp,4
   92cc8:	f800283a 	ret

00092ccc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   92ccc:	defff404 	addi	sp,sp,-48
   92cd0:	dfc00b15 	stw	ra,44(sp)
   92cd4:	df000a15 	stw	fp,40(sp)
   92cd8:	df000a04 	addi	fp,sp,40
   92cdc:	e13ffb15 	stw	r4,-20(fp)
   92ce0:	e17ffc15 	stw	r5,-16(fp)
   92ce4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   92ce8:	00bfffc4 	movi	r2,-1
   92cec:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   92cf0:	00bffb44 	movi	r2,-19
   92cf4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   92cf8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   92cfc:	e13ffb17 	ldw	r4,-20(fp)
   92d00:	014002f4 	movhi	r5,11
   92d04:	29499f04 	addi	r5,r5,9852
   92d08:	00930780 	call	93078 <alt_find_dev>
   92d0c:	e0bffa15 	stw	r2,-24(fp)
   92d10:	e0bffa17 	ldw	r2,-24(fp)
   92d14:	1004c03a 	cmpne	r2,r2,zero
   92d18:	1000051e 	bne	r2,zero,92d30 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   92d1c:	e13ffb17 	ldw	r4,-20(fp)
   92d20:	009310c0 	call	9310c <alt_find_file>
   92d24:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   92d28:	00800044 	movi	r2,1
   92d2c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   92d30:	e0bffa17 	ldw	r2,-24(fp)
   92d34:	1005003a 	cmpeq	r2,r2,zero
   92d38:	1000301e 	bne	r2,zero,92dfc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   92d3c:	e13ffa17 	ldw	r4,-24(fp)
   92d40:	009322c0 	call	9322c <alt_get_fd>
   92d44:	e0bff815 	stw	r2,-32(fp)
   92d48:	e0bff817 	ldw	r2,-32(fp)
   92d4c:	1004403a 	cmpge	r2,r2,zero
   92d50:	1000031e 	bne	r2,zero,92d60 <open+0x94>
    {
      status = index;
   92d54:	e0bff817 	ldw	r2,-32(fp)
   92d58:	e0bff715 	stw	r2,-36(fp)
   92d5c:	00002906 	br	92e04 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   92d60:	e0bff817 	ldw	r2,-32(fp)
   92d64:	10800324 	muli	r2,r2,12
   92d68:	1007883a 	mov	r3,r2
   92d6c:	008002f4 	movhi	r2,11
   92d70:	10851d04 	addi	r2,r2,5236
   92d74:	1885883a 	add	r2,r3,r2
   92d78:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   92d7c:	e0fffc17 	ldw	r3,-16(fp)
   92d80:	00900034 	movhi	r2,16384
   92d84:	10bfffc4 	addi	r2,r2,-1
   92d88:	1886703a 	and	r3,r3,r2
   92d8c:	e0bff917 	ldw	r2,-28(fp)
   92d90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   92d94:	e0bff617 	ldw	r2,-40(fp)
   92d98:	1004c03a 	cmpne	r2,r2,zero
   92d9c:	1000061e 	bne	r2,zero,92db8 <open+0xec>
   92da0:	e13ff917 	ldw	r4,-28(fp)
   92da4:	0092bf00 	call	92bf0 <alt_file_locked>
   92da8:	e0bff715 	stw	r2,-36(fp)
   92dac:	e0bff717 	ldw	r2,-36(fp)
   92db0:	1004803a 	cmplt	r2,r2,zero
   92db4:	1000131e 	bne	r2,zero,92e04 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   92db8:	e0bffa17 	ldw	r2,-24(fp)
   92dbc:	10800317 	ldw	r2,12(r2)
   92dc0:	1005003a 	cmpeq	r2,r2,zero
   92dc4:	1000091e 	bne	r2,zero,92dec <open+0x120>
   92dc8:	e0bffa17 	ldw	r2,-24(fp)
   92dcc:	10800317 	ldw	r2,12(r2)
   92dd0:	e13ff917 	ldw	r4,-28(fp)
   92dd4:	e17ffb17 	ldw	r5,-20(fp)
   92dd8:	e1bffc17 	ldw	r6,-16(fp)
   92ddc:	e1fffd17 	ldw	r7,-12(fp)
   92de0:	103ee83a 	callr	r2
   92de4:	e0bfff15 	stw	r2,-4(fp)
   92de8:	00000106 	br	92df0 <open+0x124>
   92dec:	e03fff15 	stw	zero,-4(fp)
   92df0:	e0bfff17 	ldw	r2,-4(fp)
   92df4:	e0bff715 	stw	r2,-36(fp)
   92df8:	00000206 	br	92e04 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   92dfc:	00bffb44 	movi	r2,-19
   92e00:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   92e04:	e0bff717 	ldw	r2,-36(fp)
   92e08:	1004403a 	cmpge	r2,r2,zero
   92e0c:	1000091e 	bne	r2,zero,92e34 <open+0x168>
  {
    alt_release_fd (index);  
   92e10:	e13ff817 	ldw	r4,-32(fp)
   92e14:	00915340 	call	91534 <alt_release_fd>
    ALT_ERRNO = -status;
   92e18:	0092e540 	call	92e54 <alt_get_errno>
   92e1c:	e0fff717 	ldw	r3,-36(fp)
   92e20:	00c7c83a 	sub	r3,zero,r3
   92e24:	10c00015 	stw	r3,0(r2)
    return -1;
   92e28:	00bfffc4 	movi	r2,-1
   92e2c:	e0bffe15 	stw	r2,-8(fp)
   92e30:	00000206 	br	92e3c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   92e34:	e0bff817 	ldw	r2,-32(fp)
   92e38:	e0bffe15 	stw	r2,-8(fp)
   92e3c:	e0bffe17 	ldw	r2,-8(fp)
}
   92e40:	e037883a 	mov	sp,fp
   92e44:	dfc00117 	ldw	ra,4(sp)
   92e48:	df000017 	ldw	fp,0(sp)
   92e4c:	dec00204 	addi	sp,sp,8
   92e50:	f800283a 	ret

00092e54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   92e54:	defffd04 	addi	sp,sp,-12
   92e58:	dfc00215 	stw	ra,8(sp)
   92e5c:	df000115 	stw	fp,4(sp)
   92e60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   92e64:	008002f4 	movhi	r2,11
   92e68:	1089a204 	addi	r2,r2,9864
   92e6c:	10800017 	ldw	r2,0(r2)
   92e70:	1005003a 	cmpeq	r2,r2,zero
   92e74:	1000061e 	bne	r2,zero,92e90 <alt_get_errno+0x3c>
   92e78:	008002f4 	movhi	r2,11
   92e7c:	1089a204 	addi	r2,r2,9864
   92e80:	10800017 	ldw	r2,0(r2)
   92e84:	103ee83a 	callr	r2
   92e88:	e0bfff15 	stw	r2,-4(fp)
   92e8c:	00000306 	br	92e9c <alt_get_errno+0x48>
   92e90:	008002f4 	movhi	r2,11
   92e94:	1089bb04 	addi	r2,r2,9964
   92e98:	e0bfff15 	stw	r2,-4(fp)
   92e9c:	e0bfff17 	ldw	r2,-4(fp)
}
   92ea0:	e037883a 	mov	sp,fp
   92ea4:	dfc00117 	ldw	ra,4(sp)
   92ea8:	df000017 	ldw	fp,0(sp)
   92eac:	dec00204 	addi	sp,sp,8
   92eb0:	f800283a 	ret

00092eb4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   92eb4:	defffa04 	addi	sp,sp,-24
   92eb8:	df000515 	stw	fp,20(sp)
   92ebc:	df000504 	addi	fp,sp,20
   92ec0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92ec4:	0005303a 	rdctl	r2,status
   92ec8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92ecc:	e0fffd17 	ldw	r3,-12(fp)
   92ed0:	00bfff84 	movi	r2,-2
   92ed4:	1884703a 	and	r2,r3,r2
   92ed8:	1001703a 	wrctl	status,r2
  
  return context;
   92edc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   92ee0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   92ee4:	e0bfff17 	ldw	r2,-4(fp)
   92ee8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   92eec:	e0bffc17 	ldw	r2,-16(fp)
   92ef0:	10c00017 	ldw	r3,0(r2)
   92ef4:	e0bffc17 	ldw	r2,-16(fp)
   92ef8:	10800117 	ldw	r2,4(r2)
   92efc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   92f00:	e0bffc17 	ldw	r2,-16(fp)
   92f04:	10c00117 	ldw	r3,4(r2)
   92f08:	e0bffc17 	ldw	r2,-16(fp)
   92f0c:	10800017 	ldw	r2,0(r2)
   92f10:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   92f14:	e0fffc17 	ldw	r3,-16(fp)
   92f18:	e0bffc17 	ldw	r2,-16(fp)
   92f1c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   92f20:	e0fffc17 	ldw	r3,-16(fp)
   92f24:	e0bffc17 	ldw	r2,-16(fp)
   92f28:	18800015 	stw	r2,0(r3)
   92f2c:	e0bffe17 	ldw	r2,-8(fp)
   92f30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92f34:	e0bffb17 	ldw	r2,-20(fp)
   92f38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   92f3c:	e037883a 	mov	sp,fp
   92f40:	df000017 	ldw	fp,0(sp)
   92f44:	dec00104 	addi	sp,sp,4
   92f48:	f800283a 	ret

00092f4c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   92f4c:	defffb04 	addi	sp,sp,-20
   92f50:	dfc00415 	stw	ra,16(sp)
   92f54:	df000315 	stw	fp,12(sp)
   92f58:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   92f5c:	d0a01017 	ldw	r2,-32704(gp)
   92f60:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   92f64:	d0a02c17 	ldw	r2,-32592(gp)
   92f68:	10800044 	addi	r2,r2,1
   92f6c:	d0a02c15 	stw	r2,-32592(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   92f70:	00003106 	br	93038 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   92f74:	e0bffe17 	ldw	r2,-8(fp)
   92f78:	10800017 	ldw	r2,0(r2)
   92f7c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   92f80:	e0bffe17 	ldw	r2,-8(fp)
   92f84:	10800403 	ldbu	r2,16(r2)
   92f88:	10803fcc 	andi	r2,r2,255
   92f8c:	1005003a 	cmpeq	r2,r2,zero
   92f90:	1000051e 	bne	r2,zero,92fa8 <alt_tick+0x5c>
   92f94:	d0a02c17 	ldw	r2,-32592(gp)
   92f98:	1004c03a 	cmpne	r2,r2,zero
   92f9c:	1000021e 	bne	r2,zero,92fa8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   92fa0:	e0bffe17 	ldw	r2,-8(fp)
   92fa4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   92fa8:	e0bffe17 	ldw	r2,-8(fp)
   92fac:	10c00217 	ldw	r3,8(r2)
   92fb0:	d0a02c17 	ldw	r2,-32592(gp)
   92fb4:	10c01e36 	bltu	r2,r3,93030 <alt_tick+0xe4>
   92fb8:	e0bffe17 	ldw	r2,-8(fp)
   92fbc:	10800403 	ldbu	r2,16(r2)
   92fc0:	10803fcc 	andi	r2,r2,255
   92fc4:	1004c03a 	cmpne	r2,r2,zero
   92fc8:	1000191e 	bne	r2,zero,93030 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   92fcc:	e0bffe17 	ldw	r2,-8(fp)
   92fd0:	10c00317 	ldw	r3,12(r2)
   92fd4:	e0bffe17 	ldw	r2,-8(fp)
   92fd8:	11000517 	ldw	r4,20(r2)
   92fdc:	183ee83a 	callr	r3
   92fe0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   92fe4:	e0bffd17 	ldw	r2,-12(fp)
   92fe8:	1004c03a 	cmpne	r2,r2,zero
   92fec:	1000031e 	bne	r2,zero,92ffc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   92ff0:	e13ffe17 	ldw	r4,-8(fp)
   92ff4:	0092eb40 	call	92eb4 <alt_alarm_stop>
   92ff8:	00000d06 	br	93030 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   92ffc:	e0bffe17 	ldw	r2,-8(fp)
   93000:	10c00217 	ldw	r3,8(r2)
   93004:	e0bffd17 	ldw	r2,-12(fp)
   93008:	1887883a 	add	r3,r3,r2
   9300c:	e0bffe17 	ldw	r2,-8(fp)
   93010:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   93014:	e0bffe17 	ldw	r2,-8(fp)
   93018:	10c00217 	ldw	r3,8(r2)
   9301c:	d0a02c17 	ldw	r2,-32592(gp)
   93020:	1880032e 	bgeu	r3,r2,93030 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   93024:	e0fffe17 	ldw	r3,-8(fp)
   93028:	00800044 	movi	r2,1
   9302c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   93030:	e0bfff17 	ldw	r2,-4(fp)
   93034:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   93038:	d0e01004 	addi	r3,gp,-32704
   9303c:	e0bffe17 	ldw	r2,-8(fp)
   93040:	10ffcc1e 	bne	r2,r3,92f74 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   93044:	e037883a 	mov	sp,fp
   93048:	dfc00117 	ldw	ra,4(sp)
   9304c:	df000017 	ldw	fp,0(sp)
   93050:	dec00204 	addi	sp,sp,8
   93054:	f800283a 	ret

00093058 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   93058:	deffff04 	addi	sp,sp,-4
   9305c:	df000015 	stw	fp,0(sp)
   93060:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   93064:	000170fa 	wrctl	ienable,zero
}
   93068:	e037883a 	mov	sp,fp
   9306c:	df000017 	ldw	fp,0(sp)
   93070:	dec00104 	addi	sp,sp,4
   93074:	f800283a 	ret

00093078 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   93078:	defff904 	addi	sp,sp,-28
   9307c:	dfc00615 	stw	ra,24(sp)
   93080:	df000515 	stw	fp,20(sp)
   93084:	df000504 	addi	fp,sp,20
   93088:	e13ffd15 	stw	r4,-12(fp)
   9308c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   93090:	e0bffe17 	ldw	r2,-8(fp)
   93094:	10800017 	ldw	r2,0(r2)
   93098:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   9309c:	e13ffd17 	ldw	r4,-12(fp)
   930a0:	00889680 	call	88968 <strlen>
   930a4:	10800044 	addi	r2,r2,1
   930a8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   930ac:	00000d06 	br	930e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   930b0:	e0bffc17 	ldw	r2,-16(fp)
   930b4:	11000217 	ldw	r4,8(r2)
   930b8:	e1bffb17 	ldw	r6,-20(fp)
   930bc:	e17ffd17 	ldw	r5,-12(fp)
   930c0:	00933c00 	call	933c0 <memcmp>
   930c4:	1004c03a 	cmpne	r2,r2,zero
   930c8:	1000031e 	bne	r2,zero,930d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   930cc:	e0bffc17 	ldw	r2,-16(fp)
   930d0:	e0bfff15 	stw	r2,-4(fp)
   930d4:	00000706 	br	930f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   930d8:	e0bffc17 	ldw	r2,-16(fp)
   930dc:	10800017 	ldw	r2,0(r2)
   930e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   930e4:	e0fffe17 	ldw	r3,-8(fp)
   930e8:	e0bffc17 	ldw	r2,-16(fp)
   930ec:	10fff01e 	bne	r2,r3,930b0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   930f0:	e03fff15 	stw	zero,-4(fp)
   930f4:	e0bfff17 	ldw	r2,-4(fp)
}
   930f8:	e037883a 	mov	sp,fp
   930fc:	dfc00117 	ldw	ra,4(sp)
   93100:	df000017 	ldw	fp,0(sp)
   93104:	dec00204 	addi	sp,sp,8
   93108:	f800283a 	ret

0009310c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   9310c:	defffa04 	addi	sp,sp,-24
   93110:	dfc00515 	stw	ra,20(sp)
   93114:	df000415 	stw	fp,16(sp)
   93118:	df000404 	addi	fp,sp,16
   9311c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   93120:	008002f4 	movhi	r2,11
   93124:	10899d04 	addi	r2,r2,9844
   93128:	10800017 	ldw	r2,0(r2)
   9312c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   93130:	00003306 	br	93200 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   93134:	e0bffd17 	ldw	r2,-12(fp)
   93138:	11000217 	ldw	r4,8(r2)
   9313c:	00889680 	call	88968 <strlen>
   93140:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   93144:	e0bffd17 	ldw	r2,-12(fp)
   93148:	10c00217 	ldw	r3,8(r2)
   9314c:	e0bffc17 	ldw	r2,-16(fp)
   93150:	1885883a 	add	r2,r3,r2
   93154:	10bfffc4 	addi	r2,r2,-1
   93158:	10800003 	ldbu	r2,0(r2)
   9315c:	10803fcc 	andi	r2,r2,255
   93160:	1080201c 	xori	r2,r2,128
   93164:	10bfe004 	addi	r2,r2,-128
   93168:	10800bd8 	cmpnei	r2,r2,47
   9316c:	1000031e 	bne	r2,zero,9317c <alt_find_file+0x70>
    {
      len -= 1;
   93170:	e0bffc17 	ldw	r2,-16(fp)
   93174:	10bfffc4 	addi	r2,r2,-1
   93178:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9317c:	e0bffc17 	ldw	r2,-16(fp)
   93180:	1007883a 	mov	r3,r2
   93184:	e0bffe17 	ldw	r2,-8(fp)
   93188:	1885883a 	add	r2,r3,r2
   9318c:	10800003 	ldbu	r2,0(r2)
   93190:	10803fcc 	andi	r2,r2,255
   93194:	1080201c 	xori	r2,r2,128
   93198:	10bfe004 	addi	r2,r2,-128
   9319c:	10800be0 	cmpeqi	r2,r2,47
   931a0:	10000a1e 	bne	r2,zero,931cc <alt_find_file+0xc0>
   931a4:	e0bffc17 	ldw	r2,-16(fp)
   931a8:	1007883a 	mov	r3,r2
   931ac:	e0bffe17 	ldw	r2,-8(fp)
   931b0:	1885883a 	add	r2,r3,r2
   931b4:	10800003 	ldbu	r2,0(r2)
   931b8:	10803fcc 	andi	r2,r2,255
   931bc:	1080201c 	xori	r2,r2,128
   931c0:	10bfe004 	addi	r2,r2,-128
   931c4:	1004c03a 	cmpne	r2,r2,zero
   931c8:	10000a1e 	bne	r2,zero,931f4 <alt_find_file+0xe8>
   931cc:	e0bffd17 	ldw	r2,-12(fp)
   931d0:	11000217 	ldw	r4,8(r2)
   931d4:	e1bffc17 	ldw	r6,-16(fp)
   931d8:	e17ffe17 	ldw	r5,-8(fp)
   931dc:	00933c00 	call	933c0 <memcmp>
   931e0:	1004c03a 	cmpne	r2,r2,zero
   931e4:	1000031e 	bne	r2,zero,931f4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   931e8:	e0bffd17 	ldw	r2,-12(fp)
   931ec:	e0bfff15 	stw	r2,-4(fp)
   931f0:	00000806 	br	93214 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   931f4:	e0bffd17 	ldw	r2,-12(fp)
   931f8:	10800017 	ldw	r2,0(r2)
   931fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   93200:	00c002f4 	movhi	r3,11
   93204:	18c99d04 	addi	r3,r3,9844
   93208:	e0bffd17 	ldw	r2,-12(fp)
   9320c:	10ffc91e 	bne	r2,r3,93134 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   93210:	e03fff15 	stw	zero,-4(fp)
   93214:	e0bfff17 	ldw	r2,-4(fp)
}
   93218:	e037883a 	mov	sp,fp
   9321c:	dfc00117 	ldw	ra,4(sp)
   93220:	df000017 	ldw	fp,0(sp)
   93224:	dec00204 	addi	sp,sp,8
   93228:	f800283a 	ret

0009322c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   9322c:	defffc04 	addi	sp,sp,-16
   93230:	df000315 	stw	fp,12(sp)
   93234:	df000304 	addi	fp,sp,12
   93238:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   9323c:	00bffa04 	movi	r2,-24
   93240:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   93244:	e03ffe15 	stw	zero,-8(fp)
   93248:	00001e06 	br	932c4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   9324c:	e0bffe17 	ldw	r2,-8(fp)
   93250:	00c002f4 	movhi	r3,11
   93254:	18c51d04 	addi	r3,r3,5236
   93258:	10800324 	muli	r2,r2,12
   9325c:	10c5883a 	add	r2,r2,r3
   93260:	10800017 	ldw	r2,0(r2)
   93264:	1004c03a 	cmpne	r2,r2,zero
   93268:	1000131e 	bne	r2,zero,932b8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   9326c:	e0bffe17 	ldw	r2,-8(fp)
   93270:	00c002f4 	movhi	r3,11
   93274:	18c51d04 	addi	r3,r3,5236
   93278:	10800324 	muli	r2,r2,12
   9327c:	10c7883a 	add	r3,r2,r3
   93280:	e0bfff17 	ldw	r2,-4(fp)
   93284:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   93288:	008002f4 	movhi	r2,11
   9328c:	1089a104 	addi	r2,r2,9860
   93290:	10c00017 	ldw	r3,0(r2)
   93294:	e0bffe17 	ldw	r2,-8(fp)
   93298:	1880040e 	bge	r3,r2,932ac <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   9329c:	00c002f4 	movhi	r3,11
   932a0:	18c9a104 	addi	r3,r3,9860
   932a4:	e0bffe17 	ldw	r2,-8(fp)
   932a8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   932ac:	e0bffe17 	ldw	r2,-8(fp)
   932b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   932b4:	00000606 	br	932d0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   932b8:	e0bffe17 	ldw	r2,-8(fp)
   932bc:	10800044 	addi	r2,r2,1
   932c0:	e0bffe15 	stw	r2,-8(fp)
   932c4:	e0bffe17 	ldw	r2,-8(fp)
   932c8:	10800810 	cmplti	r2,r2,32
   932cc:	103fdf1e 	bne	r2,zero,9324c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   932d0:	e0bffd17 	ldw	r2,-12(fp)
}
   932d4:	e037883a 	mov	sp,fp
   932d8:	df000017 	ldw	fp,0(sp)
   932dc:	dec00104 	addi	sp,sp,4
   932e0:	f800283a 	ret

000932e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   932e4:	defffb04 	addi	sp,sp,-20
   932e8:	df000415 	stw	fp,16(sp)
   932ec:	df000404 	addi	fp,sp,16
   932f0:	e13ffe15 	stw	r4,-8(fp)
   932f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   932f8:	e0bfff17 	ldw	r2,-4(fp)
   932fc:	10840070 	cmpltui	r2,r2,4097
   93300:	1000021e 	bne	r2,zero,9330c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   93304:	00840004 	movi	r2,4096
   93308:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   9330c:	e0fffe17 	ldw	r3,-8(fp)
   93310:	e0bfff17 	ldw	r2,-4(fp)
   93314:	1885883a 	add	r2,r3,r2
   93318:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   9331c:	e0bffe17 	ldw	r2,-8(fp)
   93320:	e0bffd15 	stw	r2,-12(fp)
   93324:	00000506 	br	9333c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   93328:	e0bffd17 	ldw	r2,-12(fp)
   9332c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   93330:	e0bffd17 	ldw	r2,-12(fp)
   93334:	10800804 	addi	r2,r2,32
   93338:	e0bffd15 	stw	r2,-12(fp)
   9333c:	e0fffd17 	ldw	r3,-12(fp)
   93340:	e0bffc17 	ldw	r2,-16(fp)
   93344:	18bff836 	bltu	r3,r2,93328 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   93348:	e0bffe17 	ldw	r2,-8(fp)
   9334c:	108007cc 	andi	r2,r2,31
   93350:	1005003a 	cmpeq	r2,r2,zero
   93354:	1000021e 	bne	r2,zero,93360 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   93358:	e0bffd17 	ldw	r2,-12(fp)
   9335c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   93360:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   93364:	e037883a 	mov	sp,fp
   93368:	df000017 	ldw	fp,0(sp)
   9336c:	dec00104 	addi	sp,sp,4
   93370:	f800283a 	ret

00093374 <atexit>:
   93374:	200b883a 	mov	r5,r4
   93378:	000d883a 	mov	r6,zero
   9337c:	0009883a 	mov	r4,zero
   93380:	000f883a 	mov	r7,zero
   93384:	00934341 	jmpi	93434 <__register_exitproc>

00093388 <exit>:
   93388:	defffe04 	addi	sp,sp,-8
   9338c:	000b883a 	mov	r5,zero
   93390:	dc000015 	stw	r16,0(sp)
   93394:	dfc00115 	stw	ra,4(sp)
   93398:	2021883a 	mov	r16,r4
   9339c:	009356c0 	call	9356c <__call_exitprocs>
   933a0:	008002f4 	movhi	r2,11
   933a4:	10899804 	addi	r2,r2,9824
   933a8:	11000017 	ldw	r4,0(r2)
   933ac:	20800f17 	ldw	r2,60(r4)
   933b0:	10000126 	beq	r2,zero,933b8 <exit+0x30>
   933b4:	103ee83a 	callr	r2
   933b8:	8009883a 	mov	r4,r16
   933bc:	009375c0 	call	9375c <_exit>

000933c0 <memcmp>:
   933c0:	00c000c4 	movi	r3,3
   933c4:	1980032e 	bgeu	r3,r6,933d4 <memcmp+0x14>
   933c8:	2144b03a 	or	r2,r4,r5
   933cc:	10c4703a 	and	r2,r2,r3
   933d0:	10000f26 	beq	r2,zero,93410 <memcmp+0x50>
   933d4:	31ffffc4 	addi	r7,r6,-1
   933d8:	3000061e 	bne	r6,zero,933f4 <memcmp+0x34>
   933dc:	00000a06 	br	93408 <memcmp+0x48>
   933e0:	39ffffc4 	addi	r7,r7,-1
   933e4:	00bfffc4 	movi	r2,-1
   933e8:	21000044 	addi	r4,r4,1
   933ec:	29400044 	addi	r5,r5,1
   933f0:	38800526 	beq	r7,r2,93408 <memcmp+0x48>
   933f4:	20c00003 	ldbu	r3,0(r4)
   933f8:	28800003 	ldbu	r2,0(r5)
   933fc:	18bff826 	beq	r3,r2,933e0 <memcmp+0x20>
   93400:	1885c83a 	sub	r2,r3,r2
   93404:	f800283a 	ret
   93408:	0005883a 	mov	r2,zero
   9340c:	f800283a 	ret
   93410:	180f883a 	mov	r7,r3
   93414:	20c00017 	ldw	r3,0(r4)
   93418:	28800017 	ldw	r2,0(r5)
   9341c:	18bfed1e 	bne	r3,r2,933d4 <memcmp+0x14>
   93420:	31bfff04 	addi	r6,r6,-4
   93424:	21000104 	addi	r4,r4,4
   93428:	29400104 	addi	r5,r5,4
   9342c:	39bff936 	bltu	r7,r6,93414 <memcmp+0x54>
   93430:	003fe806 	br	933d4 <memcmp+0x14>

00093434 <__register_exitproc>:
   93434:	defffa04 	addi	sp,sp,-24
   93438:	008002f4 	movhi	r2,11
   9343c:	10899804 	addi	r2,r2,9824
   93440:	dc000015 	stw	r16,0(sp)
   93444:	14000017 	ldw	r16,0(r2)
   93448:	dd000415 	stw	r20,16(sp)
   9344c:	2829883a 	mov	r20,r5
   93450:	81405217 	ldw	r5,328(r16)
   93454:	dcc00315 	stw	r19,12(sp)
   93458:	dc800215 	stw	r18,8(sp)
   9345c:	dc400115 	stw	r17,4(sp)
   93460:	dfc00515 	stw	ra,20(sp)
   93464:	2023883a 	mov	r17,r4
   93468:	3027883a 	mov	r19,r6
   9346c:	3825883a 	mov	r18,r7
   93470:	28002526 	beq	r5,zero,93508 <__register_exitproc+0xd4>
   93474:	29000117 	ldw	r4,4(r5)
   93478:	008007c4 	movi	r2,31
   9347c:	11002716 	blt	r2,r4,9351c <__register_exitproc+0xe8>
   93480:	8800101e 	bne	r17,zero,934c4 <__register_exitproc+0x90>
   93484:	2105883a 	add	r2,r4,r4
   93488:	1085883a 	add	r2,r2,r2
   9348c:	20c00044 	addi	r3,r4,1
   93490:	1145883a 	add	r2,r2,r5
   93494:	0009883a 	mov	r4,zero
   93498:	15000215 	stw	r20,8(r2)
   9349c:	28c00115 	stw	r3,4(r5)
   934a0:	2005883a 	mov	r2,r4
   934a4:	dfc00517 	ldw	ra,20(sp)
   934a8:	dd000417 	ldw	r20,16(sp)
   934ac:	dcc00317 	ldw	r19,12(sp)
   934b0:	dc800217 	ldw	r18,8(sp)
   934b4:	dc400117 	ldw	r17,4(sp)
   934b8:	dc000017 	ldw	r16,0(sp)
   934bc:	dec00604 	addi	sp,sp,24
   934c0:	f800283a 	ret
   934c4:	29802204 	addi	r6,r5,136
   934c8:	00800044 	movi	r2,1
   934cc:	110e983a 	sll	r7,r2,r4
   934d0:	30c04017 	ldw	r3,256(r6)
   934d4:	2105883a 	add	r2,r4,r4
   934d8:	1085883a 	add	r2,r2,r2
   934dc:	1185883a 	add	r2,r2,r6
   934e0:	19c6b03a 	or	r3,r3,r7
   934e4:	14802015 	stw	r18,128(r2)
   934e8:	14c00015 	stw	r19,0(r2)
   934ec:	00800084 	movi	r2,2
   934f0:	30c04015 	stw	r3,256(r6)
   934f4:	88bfe31e 	bne	r17,r2,93484 <__register_exitproc+0x50>
   934f8:	30804117 	ldw	r2,260(r6)
   934fc:	11c4b03a 	or	r2,r2,r7
   93500:	30804115 	stw	r2,260(r6)
   93504:	003fdf06 	br	93484 <__register_exitproc+0x50>
   93508:	008002f4 	movhi	r2,11
   9350c:	108a8f04 	addi	r2,r2,10812
   93510:	100b883a 	mov	r5,r2
   93514:	80805215 	stw	r2,328(r16)
   93518:	003fd606 	br	93474 <__register_exitproc+0x40>
   9351c:	00800034 	movhi	r2,0
   93520:	10800004 	addi	r2,r2,0
   93524:	1000021e 	bne	r2,zero,93530 <__register_exitproc+0xfc>
   93528:	013fffc4 	movi	r4,-1
   9352c:	003fdc06 	br	934a0 <__register_exitproc+0x6c>
   93530:	01006404 	movi	r4,400
   93534:	103ee83a 	callr	r2
   93538:	1007883a 	mov	r3,r2
   9353c:	103ffa26 	beq	r2,zero,93528 <__register_exitproc+0xf4>
   93540:	80805217 	ldw	r2,328(r16)
   93544:	180b883a 	mov	r5,r3
   93548:	18000115 	stw	zero,4(r3)
   9354c:	18800015 	stw	r2,0(r3)
   93550:	80c05215 	stw	r3,328(r16)
   93554:	18006215 	stw	zero,392(r3)
   93558:	18006315 	stw	zero,396(r3)
   9355c:	0009883a 	mov	r4,zero
   93560:	883fc826 	beq	r17,zero,93484 <__register_exitproc+0x50>
   93564:	003fd706 	br	934c4 <__register_exitproc+0x90>

00093568 <register_fini>:
   93568:	f800283a 	ret

0009356c <__call_exitprocs>:
   9356c:	008002f4 	movhi	r2,11
   93570:	10899804 	addi	r2,r2,9824
   93574:	10800017 	ldw	r2,0(r2)
   93578:	defff304 	addi	sp,sp,-52
   9357c:	df000b15 	stw	fp,44(sp)
   93580:	d8800115 	stw	r2,4(sp)
   93584:	00800034 	movhi	r2,0
   93588:	10800004 	addi	r2,r2,0
   9358c:	1005003a 	cmpeq	r2,r2,zero
   93590:	d8800215 	stw	r2,8(sp)
   93594:	d8800117 	ldw	r2,4(sp)
   93598:	dd400815 	stw	r21,32(sp)
   9359c:	dd000715 	stw	r20,28(sp)
   935a0:	10805204 	addi	r2,r2,328
   935a4:	dfc00c15 	stw	ra,48(sp)
   935a8:	ddc00a15 	stw	r23,40(sp)
   935ac:	dd800915 	stw	r22,36(sp)
   935b0:	dcc00615 	stw	r19,24(sp)
   935b4:	dc800515 	stw	r18,20(sp)
   935b8:	dc400415 	stw	r17,16(sp)
   935bc:	dc000315 	stw	r16,12(sp)
   935c0:	282b883a 	mov	r21,r5
   935c4:	2039883a 	mov	fp,r4
   935c8:	d8800015 	stw	r2,0(sp)
   935cc:	2829003a 	cmpeq	r20,r5,zero
   935d0:	d8800117 	ldw	r2,4(sp)
   935d4:	14405217 	ldw	r17,328(r2)
   935d8:	88001026 	beq	r17,zero,9361c <__call_exitprocs+0xb0>
   935dc:	ddc00017 	ldw	r23,0(sp)
   935e0:	88800117 	ldw	r2,4(r17)
   935e4:	8c802204 	addi	r18,r17,136
   935e8:	143fffc4 	addi	r16,r2,-1
   935ec:	80000916 	blt	r16,zero,93614 <__call_exitprocs+0xa8>
   935f0:	05bfffc4 	movi	r22,-1
   935f4:	a000151e 	bne	r20,zero,9364c <__call_exitprocs+0xe0>
   935f8:	8409883a 	add	r4,r16,r16
   935fc:	2105883a 	add	r2,r4,r4
   93600:	1485883a 	add	r2,r2,r18
   93604:	10c02017 	ldw	r3,128(r2)
   93608:	a8c01126 	beq	r21,r3,93650 <__call_exitprocs+0xe4>
   9360c:	843fffc4 	addi	r16,r16,-1
   93610:	85bff81e 	bne	r16,r22,935f4 <__call_exitprocs+0x88>
   93614:	d8800217 	ldw	r2,8(sp)
   93618:	10003126 	beq	r2,zero,936e0 <__call_exitprocs+0x174>
   9361c:	dfc00c17 	ldw	ra,48(sp)
   93620:	df000b17 	ldw	fp,44(sp)
   93624:	ddc00a17 	ldw	r23,40(sp)
   93628:	dd800917 	ldw	r22,36(sp)
   9362c:	dd400817 	ldw	r21,32(sp)
   93630:	dd000717 	ldw	r20,28(sp)
   93634:	dcc00617 	ldw	r19,24(sp)
   93638:	dc800517 	ldw	r18,20(sp)
   9363c:	dc400417 	ldw	r17,16(sp)
   93640:	dc000317 	ldw	r16,12(sp)
   93644:	dec00d04 	addi	sp,sp,52
   93648:	f800283a 	ret
   9364c:	8409883a 	add	r4,r16,r16
   93650:	88c00117 	ldw	r3,4(r17)
   93654:	2105883a 	add	r2,r4,r4
   93658:	1445883a 	add	r2,r2,r17
   9365c:	18ffffc4 	addi	r3,r3,-1
   93660:	11800217 	ldw	r6,8(r2)
   93664:	1c001526 	beq	r3,r16,936bc <__call_exitprocs+0x150>
   93668:	10000215 	stw	zero,8(r2)
   9366c:	303fe726 	beq	r6,zero,9360c <__call_exitprocs+0xa0>
   93670:	00c00044 	movi	r3,1
   93674:	1c06983a 	sll	r3,r3,r16
   93678:	90804017 	ldw	r2,256(r18)
   9367c:	8cc00117 	ldw	r19,4(r17)
   93680:	1884703a 	and	r2,r3,r2
   93684:	10001426 	beq	r2,zero,936d8 <__call_exitprocs+0x16c>
   93688:	90804117 	ldw	r2,260(r18)
   9368c:	1884703a 	and	r2,r3,r2
   93690:	10000c1e 	bne	r2,zero,936c4 <__call_exitprocs+0x158>
   93694:	2105883a 	add	r2,r4,r4
   93698:	1485883a 	add	r2,r2,r18
   9369c:	11400017 	ldw	r5,0(r2)
   936a0:	e009883a 	mov	r4,fp
   936a4:	303ee83a 	callr	r6
   936a8:	88800117 	ldw	r2,4(r17)
   936ac:	98bfc81e 	bne	r19,r2,935d0 <__call_exitprocs+0x64>
   936b0:	b8800017 	ldw	r2,0(r23)
   936b4:	147fd526 	beq	r2,r17,9360c <__call_exitprocs+0xa0>
   936b8:	003fc506 	br	935d0 <__call_exitprocs+0x64>
   936bc:	8c000115 	stw	r16,4(r17)
   936c0:	003fea06 	br	9366c <__call_exitprocs+0x100>
   936c4:	2105883a 	add	r2,r4,r4
   936c8:	1485883a 	add	r2,r2,r18
   936cc:	11000017 	ldw	r4,0(r2)
   936d0:	303ee83a 	callr	r6
   936d4:	003ff406 	br	936a8 <__call_exitprocs+0x13c>
   936d8:	303ee83a 	callr	r6
   936dc:	003ff206 	br	936a8 <__call_exitprocs+0x13c>
   936e0:	88800117 	ldw	r2,4(r17)
   936e4:	1000081e 	bne	r2,zero,93708 <__call_exitprocs+0x19c>
   936e8:	89000017 	ldw	r4,0(r17)
   936ec:	20000726 	beq	r4,zero,9370c <__call_exitprocs+0x1a0>
   936f0:	b9000015 	stw	r4,0(r23)
   936f4:	8809883a 	mov	r4,r17
   936f8:	00000000 	call	0 <__reset-0x80000>
   936fc:	bc400017 	ldw	r17,0(r23)
   93700:	883fb71e 	bne	r17,zero,935e0 <__call_exitprocs+0x74>
   93704:	003fc506 	br	9361c <__call_exitprocs+0xb0>
   93708:	89000017 	ldw	r4,0(r17)
   9370c:	882f883a 	mov	r23,r17
   93710:	2023883a 	mov	r17,r4
   93714:	883fb21e 	bne	r17,zero,935e0 <__call_exitprocs+0x74>
   93718:	003fc006 	br	9361c <__call_exitprocs+0xb0>

0009371c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   9371c:	defffd04 	addi	sp,sp,-12
   93720:	df000215 	stw	fp,8(sp)
   93724:	df000204 	addi	fp,sp,8
   93728:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   9372c:	e0bfff17 	ldw	r2,-4(fp)
   93730:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   93734:	e0bffe17 	ldw	r2,-8(fp)
   93738:	1005003a 	cmpeq	r2,r2,zero
   9373c:	1000021e 	bne	r2,zero,93748 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   93740:	002af070 	cmpltui	zero,zero,43969
   93744:	00000106 	br	9374c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   93748:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   9374c:	e037883a 	mov	sp,fp
   93750:	df000017 	ldw	fp,0(sp)
   93754:	dec00104 	addi	sp,sp,4
   93758:	f800283a 	ret

0009375c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   9375c:	defffd04 	addi	sp,sp,-12
   93760:	dfc00215 	stw	ra,8(sp)
   93764:	df000115 	stw	fp,4(sp)
   93768:	df000104 	addi	fp,sp,4
   9376c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   93770:	e13fff17 	ldw	r4,-4(fp)
   93774:	009371c0 	call	9371c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   93778:	003fff06 	br	93778 <_exit+0x1c>
   9377c:	00093568 	cmpgeui	zero,zero,9429
