#include <stdio.h>
#include "io.h"
#include "system.h"
#include "alt_types.h"
#include "sys/alt_irq.h"
#include "sys/alt_timestamp.h"
#include <math.h>
#include <stdbool.h>


//////////////////////////////////////////////////
//		GLOBAL VARS
//////////////////////////////////////////////////

#define WIDTH 320
#define HEIGHT 240
#define DEBUG 0
#define MIRE 1
int ledNumber;

//////////////////////////////////////////////////
//		Structs
//////////////////////////////////////////////////
struct Pixel{
	int x;
	int y;
	int value;
};

//////////////////////////////////////////////////
//		Functions
//////////////////////////////////////////////////

static void init();
static void enableWrite();
static void disableWrite();
static void write(unsigned long address, int colour);
static struct Pixel readInput();
static void handle_KEYBOARD_interrupt(void* context, alt_u32 id);
static unsigned long makeAddress(int x, int y);


static void cleanScreen();
static void drawHLine(int x, int y, int length, int colour);
static void drawVLine(int x, int y, int length, int colour);
static void drawEmptySquare(int x, int y, int length, int colour);
static void drawEmptySquareRow(int x, int y, int length, int spacing, int N, int colour);

int main()
{
  printf("Hello from Nios II!\n");

  init();
  cleanScreen(); // All values to zero

  if(MIRE)
  {
	  int i;
	  for(i=0;i<32;i++)
	  {
		  drawHLine(0,2*i,10*i,3);
	  }

	  for(i=0;i<24;i++)
	  {
		drawVLine(2*i,0,10*i,3);
	  }

	  drawHLine(0,0,10,1);
	  drawVLine(0,0,10,1);
	  drawHLine(0,64,320,1);
	  drawVLine(48,0,240,1);
	  drawEmptySquare(120, 120, 16,3);
  }

  drawHLine(170,110,1,3);
  drawHLine(170,220,1,3);

//  TODO : a supprimer, useless car RAM double port
//  while(1){
//  	  struct Pixel input = readInput();
//  	  if(input.y > 640){
//  		  // do stuff while noone's watching
//  	  }
//  	  if(input.x > 480){
//  		  // do a shedload of stuff while noone's watching
//  	  }
//  }
  return 0;
}


static void init(){
	//////////////////////////////////////////////////
	//		INTERRUPTIONS
	//////////////////////////////////////////////////

//	/* 1. Reset the edge capture register. */
//	IOWR(PS2_0_BASE,3,15);
//	/* 2. Setup handling*/
//	alt_irq_register(PS2_0_IRQ,NULL,handle_KEYBOARD_interrupt);
//	/* 3. Enable interrupt */
//	IOWR(PS2_0_BASE,2,15);
//
//	/* 1. Reset the edge capture register. */
//	IOWR(TIMER_0_BASE,3,15);
//	/* 2. Setup handling*/
//	alt_irq_register(TIMER_0_IRQ,NULL,handle_KEYBOARD_interrupt);
//	/* 3. Enable interrupt */
//	IOWR(TIMER_0_BASE,2,15);

}

static void enableWrite(){
	IOWR(WR_EN_BASE,0,1);
}
static void disableWrite(){
	IOWR(WR_EN_BASE,0,0);
}
static void write(int x,int y, int colour){
	disableWrite();
	IOWR(WR_ADDRESS_X_BASE,0,x);
	IOWR(WR_ADDRESS_Y_BASE,0,y);
	IOWR(COLOR_OUT_BASE,0,colour);
	enableWrite();
	disableWrite();
}
static struct Pixel readInput(){

	// Read the input address bus Adr_lig[9..0], Adr_col[9..0]
	// and write it in the x, and y variable of a pixel which is returned.

	unsigned long rawInput = IORD(IN_BUS_BASE, 0);

	unsigned long lowSelectionInt = 511; // 0000000000111111111;
	int addrLig = rawInput >> 10;
	int addrCol = rawInput & lowSelectionInt;

	struct Pixel pixel;
	pixel.x = addrCol;
	pixel.y = addrLig;

	return pixel;
}
//
//static unsigned long makeAddress(int x, int y){
//
//
//	if(x >= WIDTH || y >= HEIGHT)
//	{
//		printf("\t[ERROR] In MakeAddress X = %d, Y = %d\n",x, y);
//		x = WIDTH-1;
//		y = HEIGHT-1;
//	}
//
//	unsigned long address = (((unsigned long)y) << 9) + ((unsigned long)x);
//
//	if(DEBUG)
//	{
//		printf("[DEBUG] makeAdress(%d, %d) : %lu\n", x, y, address);
//	}
//
//	return address;
//}


static void handle_KEYBOARD_interrupt(void* context, alt_u32 id){

}

static void drawHLine(int x, int y, int length, int colour){
	int i=0;
	for (i=0; i<length; i++){
		write(x+i,y,colour);
	}
}
static void drawVLine(int x, int y, int length, int colour){
	int i=0;
	for (i=0;i<length;i++){
		write(x,y+i,colour);
	}
}

static void cleanScreen(){
	// TODO double for sur seulement les pixels utiles

	int i = 0;
	int j= 0;
	for(i=0; i<= WIDTH; i++){
		for(j=0; j<= HEIGHT; j++){
			write(i,j, 0);
		}
	}
}

static void drawEmptySquare(int x, int y, int length, int colour){
	drawHLine(x, 		y, 			length,		colour);
	drawHLine(x, 		y+length, 	length,		colour);
	drawVLine(x, 		y, 			length,		colour);
	drawVLine(x+length, y, 			length+1,	colour);
}

static void drawEmptySquareRow(int x, int y, int length, int spacing, int N, int colour){
	int currentX = x;

	int i=0;
	for(i=0; i<N; i++){
		drawEmptySquare(currentX, y, length, colour);
		currentX = currentX + length + spacing;
	}
}

