#include <stdio.h>
#include "io.h"
#include "system.h"
#include "alt_types.h"
#include "sys/alt_irq.h"
#include "sys/alt_timestamp.h"
#include <math.h>
#include <stdbool.h>
// #include "altera_up_avalon_ps2_keyboard.h"


//////////////////////////////////////////////////
//		GLOBAL VARS
//////////////////////////////////////////////////

#define WIDTH 320
#define HEIGHT 240
#define DEBUG 0
#define MIRE 0
#define L_SHEET 32
int ledNumber;
int sheet[4][32]={{0}};

//////////////////////////////////////////////////
//		Structs
//////////////////////////////////////////////////
struct Pixel{
	int x;
	int y;
	int value;
};

//////////////////////////////////////////////////
//		Functions
//////////////////////////////////////////////////

static void init();
static void enableWrite();
static void disableWrite();
static void write(unsigned long address, int colour);
static struct Pixel readInput();
static void handle_KEYBOARD_interrupt(void* context, alt_u32 id);
static unsigned long makeAddress(int x, int y);


static void cleanScreen();
static void drawHLine(int x, int y, int length, int colour);
static void drawVLine(int x, int y, int length, int colour);
static void drawEmptySquare(int x, int y, int length, int colour);
static void drawEmptySquareRow(int x, int y, int length, int spacing, int N, int colour);
static void drawOneSheet(int y);

int main()
{
  printf("[INFO] Nios II started successfully\n");
  init();
  printf("[INFO] Init. done\n");
  cleanScreen(); // All values to zero
  printf("[INFO] Screen cleared\n");

  if(MIRE)
  {
	  int i;
	  for(i=0;i<32;i++)
	  {
		  drawHLine(0,2*i,10*i,3);
	  }

	  for(i=0;i<24;i++)
	  {
		drawVLine(2*i,0,10*i,3);
	  }

	  drawHLine(0,0,10,1);
	  drawVLine(0,0,10,1);
	  drawHLine(0,64,320,1);
	  drawVLine(48,0,240,1);
	  drawEmptySquare(220, 180, 16,3);
  }

  drawOneSheet(5);
  drawOneSheet(55);
  drawOneSheet(105);
  //drawOneSheet(155);

//  TODO : a supprimer, useless car RAM double port
  while(1){
//  	  struct Pixel input = readInput();
//  	  if(input.y > 640){
//  		  // do stuff while noone's watching
//  	  }
//  	  if(input.x > 480){
//  		  // do a shedload of stuff while noone's watching
//  	  }

  }

  return 0;
}

static void drawOneSheet(int y)
{
	int i;

	drawEmptySquareRow(0,y,8,2,32,3); //32 empty white square
	for(i=0;i<8;i++)
	{
		drawVLine(i*4*10+4,y+10,5,3);
	}
}

static void init(){
	//////////////////////////////////////////////////
	//		INTERRUPTIONS
	//////////////////////////////////////////////////

	/* 1. Reset the edge capture register. */
	IOWR(KB_IRQ_BASE,3,15);
	/* 2. Setup handling*/
	alt_irq_register(KB_IRQ_IRQ,NULL,handle_KEYBOARD_interrupt);
//	/* 3. Enable interrupt */
	IOWR(KB_IRQ_BASE,2,15);


//	/* 1. Reset the edge capture register. */
//	IOWR(TIMER_0_BASE,3,15);
//	/* 2. Setup handling*/
//	alt_irq_register(TIMER_0_IRQ,NULL,handle_KEYBOARD_interrupt);
//	/* 3. Enable interrupt */
//	IOWR(TIMER_0_BASE,2,15);

}

static void handle_KEYBOARD_interrupt(void* context, alt_u32 id){
	int code = (int) IORD(KB_DATA_BASE,0);
	printf("code : %d", code);
	switch(code)
	{
		case 21:
			drawHLine(170,90,10,3);
			break;
		case 29:
			drawHLine(170,90,10,0);
			break;
		default:
			break;
	}

	IOWR(KB_IRQ_BASE,3,15);
}

static void drawEmptySquareRow(int x, int y, int length, int spacing, int N, int colour){

	int currentX = x;

	int i=0;
	for(i=0; i<N; i++){
		drawEmptySquare(currentX, y, length, colour);
		currentX = currentX + length + spacing;
	}
}

static void drawHLine(int x, int y, int length, int colour){
	int i=0;
	for (i=0; i<length; i++){
		write(makeAddress(x+i,y),colour);
	}
}


static void drawVLine(int x, int y, int length, int colour){
	int i=0;
	for (i=0;i<length;i++){
		write(makeAddress(x,y+i),colour);
	}
}

static void cleanScreen(){
	// TODO double for sur seulement les pixels utiles
	int allPixels = 131072;
	int a = 0;
	for(a=0; a<= allPixels; a++){
		write((unsigned long) a, 0);
	}
}

static void drawEmptySquare(int x, int y, int length, int colour){
	drawHLine(x, 		y, 			length,		colour);
	drawHLine(x, 		y+length, 	length,		colour);
	drawVLine(x, 		y, 			length,		colour);
	drawVLine(x+length, y, 			length+1,	colour);
}

static void enableWrite(){
	IOWR(WR_EN_BASE,0,1);
}

static void disableWrite(){
	IOWR(WR_EN_BASE,0,0);
}

static void write(unsigned long address, int colour){

	if(colour>3 || colour<0)
	{
		printf("\t[ERROR] In write : colour = %d, set to 3.\n",colour);
		colour = 3;
	}

	disableWrite();
	IOWR(WR_ADDRESS_BASE,0,address);
	IOWR(COLOR_OUT_BASE,0,colour);
	enableWrite();
	disableWrite();
}

static struct Pixel readInput(){
	// TODO : a supprimer, probablement useless
	// Read the input address bus Adr_lig[9..0], Adr_col[9..0]
	// and write it in the x, and y variable of a pixel which is returned.

	unsigned long rawInput = IORD(IN_BUS_BASE, 0);

	unsigned long lowSelectionInt = 511; // 0000000000111111111;
	int addrLig = rawInput >> 10;
	int addrCol = rawInput & lowSelectionInt;

	struct Pixel pixel;
	pixel.x = addrCol;
	pixel.y = addrLig;

	return pixel;
}

static unsigned long makeAddress(int x, int y){


	if(x >= WIDTH || y >= HEIGHT)
	{
		printf("\t[ERROR] In MakeAddress X = %d, Y = %d\n",x, y);
		x = WIDTH-1;
		y = HEIGHT-1;
	}

	unsigned long address = (((unsigned long)y) << 9) + ((unsigned long)x);

	if(DEBUG)
	{
		printf("[DEBUG] makeAdress(%d, %d) : %lu\n", x, y, address);
	}

	return address;
}
